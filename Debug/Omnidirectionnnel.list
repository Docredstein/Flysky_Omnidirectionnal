
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007a38  08007a38  00017a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df4  08007df4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dfc  08007dfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001dc  08007fe0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08007fe0  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbe7  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cb  00000000  00000000  0002ce36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000805  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027055  00000000  00000000  000302a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e0c0  00000000  00000000  000572fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9f19  00000000  00000000  000653ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039f8  00000000  00000000  0014f2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00152ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a20 	.word	0x08007a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007a20 	.word	0x08007a20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0ac      	sub	sp, #176	; 0xb0
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 ff9f 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f855 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f95b 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 f933 	bl	8001160 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f8d1 	bl	80010a0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000efe:	f000 f89f 	bl	8001040 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f02:	f000 f8fd 	bl	8001100 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 8000f06:	491e      	ldr	r1, [pc, #120]	; (8000f80 <main+0x9c>)
 8000f08:	481e      	ldr	r0, [pc, #120]	; (8000f84 <main+0xa0>)
 8000f0a:	f000 fc60 	bl	80017ce <IBUS_Init>
  Sabertooth_Init(&saber, &huart3, motor ,address);
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0xa4>)
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <main+0xa8>)
 8000f12:	491f      	ldr	r1, [pc, #124]	; (8000f90 <main+0xac>)
 8000f14:	481f      	ldr	r0, [pc, #124]	; (8000f94 <main+0xb0>)
 8000f16:	f000 fe1d 	bl	8001b54 <Sabertooth_Init>
  channel = IBUS_GetChannels(&Ibus);
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <main+0xa0>)
 8000f1c:	f000 fcf5 	bl	800190a <IBUS_GetChannels>
 8000f20:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

  char msg[150] = {0};
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	2292      	movs	r2, #146	; 0x92
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fd82 	bl	8005a3a <memset>
  IBUS_Update(&Ibus);
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <main+0xa0>)
 8000f38:	f000 fc6d 	bl	8001816 <IBUS_Update>


  /* USER CODE END 2 */
  float command[4]= {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Receiving
	  IBUS_Update(&Ibus);
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <main+0xa0>)
 8000f4a:	f000 fc64 	bl	8001816 <IBUS_Update>

	//Processing
	  Transform_Omni(channel, command);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000f56:	f000 fce5 	bl	8001924 <Transform_Omni>



	//Controlling
	  if (channel[8]<1500) {
 8000f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f5e:	3310      	adds	r3, #16
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d804      	bhi.n	8000f74 <main+0x90>
		  Sabertooth_Drive(&saber,Stop);
 8000f6a:	490b      	ldr	r1, [pc, #44]	; (8000f98 <main+0xb4>)
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <main+0xb0>)
 8000f6e:	f000 fed7 	bl	8001d20 <Sabertooth_Drive>
 8000f72:	e7e9      	b.n	8000f48 <main+0x64>
		  //HAL_UART_Transmit(&huart2, "-", 1, 5);
	  }
	  else {
		  Sabertooth_Drive(&saber,command);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <main+0xb0>)
 8000f7a:	f000 fed1 	bl	8001d20 <Sabertooth_Drive>
	  IBUS_Update(&Ibus);
 8000f7e:	e7e3      	b.n	8000f48 <main+0x64>
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	20000414 	.word	0x20000414
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000300 	.word	0x20000300
 8000f94:	200004ac 	.word	0x200004ac
 8000f98:	200004c4 	.word	0x200004c4

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	; 0x58
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2244      	movs	r2, #68	; 0x44
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fd45 	bl	8005a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc2:	f001 fc89 	bl	80028d8 <HAL_PWREx_ControlVoltageScaling>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fcc:	f000 f954 	bl	8001278 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fea:	230a      	movs	r3, #10
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fcc0 	bl	8002984 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800100a:	f000 f935 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2303      	movs	r3, #3
 8001014:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	2104      	movs	r1, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f002 f888 	bl	800313c <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001032:	f000 f921 	bl	8001278 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3758      	adds	r7, #88	; 0x58
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <MX_USART1_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_USART1_UART_Init+0x58>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_USART1_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001066:	2204      	movs	r2, #4
 8001068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART1_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART1_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART1_UART_Init+0x58>)
 8001084:	f002 ff3a 	bl	8003efc <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f8f3 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001f8 	.word	0x200001f8
 800109c:	40013800 	.word	0x40013800

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <MX_USART2_UART_Init+0x5c>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010e4:	f002 ff0a 	bl	8003efc <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ee:	f000 f8c3 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000027c 	.word	0x2000027c
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <MX_USART3_UART_Init+0x5c>)
 8001108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_USART3_UART_Init+0x58>)
 800110c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_USART3_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001126:	2208      	movs	r2, #8
 8001128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART3_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART3_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART3_UART_Init+0x58>)
 8001144:	f002 feda 	bl	8003efc <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800114e:	f000 f893 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000300 	.word	0x20000300
 800115c:	40004800 	.word	0x40004800

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_DMA_Init+0x48>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <MX_DMA_Init+0x48>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6493      	str	r3, [r2, #72]	; 0x48
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_DMA_Init+0x48>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200c      	movs	r0, #12
 8001184:	f000 ffa9 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001188:	200c      	movs	r0, #12
 800118a:	f000 ffc2 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	200f      	movs	r0, #15
 8001194:	f000 ffa1 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001198:	200f      	movs	r0, #15
 800119a:	f000 ffba 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_GPIO_Init+0xc4>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xc4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_GPIO_Init+0xc4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_GPIO_Init+0xc4>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_GPIO_Init+0xc4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 fb2f 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001234:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0xc8>)
 8001246:	f001 f977 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800124a:	2320      	movs	r3, #32
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f001 f968 	bl	8002538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	48000800 	.word	0x48000800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	; 0xc0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2288      	movs	r2, #136	; 0x88
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fba4 	bl	8005a3a <memset>
  if(huart->Instance==USART1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a8d      	ldr	r2, [pc, #564]	; (800152c <HAL_UART_MspInit+0x260>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d167      	bne.n	80013cc <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001300:	2300      	movs	r3, #0
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f93b 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff ffb0 	bl	8001278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	4b85      	ldr	r3, [pc, #532]	; (8001530 <HAL_UART_MspInit+0x264>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	4a84      	ldr	r2, [pc, #528]	; (8001530 <HAL_UART_MspInit+0x264>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6613      	str	r3, [r2, #96]	; 0x60
 8001324:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a7e      	ldr	r2, [pc, #504]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b7c      	ldr	r3, [pc, #496]	; (8001530 <HAL_UART_MspInit+0x264>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001348:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001362:	2307      	movs	r3, #7
 8001364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f001 f8e1 	bl	8002538 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001376:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <HAL_UART_MspInit+0x268>)
 8001378:	4a6f      	ldr	r2, [pc, #444]	; (8001538 <HAL_UART_MspInit+0x26c>)
 800137a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_UART_MspInit+0x268>)
 800137e:	2202      	movs	r2, #2
 8001380:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <HAL_UART_MspInit+0x268>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_UART_MspInit+0x268>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_UART_MspInit+0x268>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001394:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_UART_MspInit+0x268>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139a:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_UART_MspInit+0x268>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_UART_MspInit+0x268>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_UART_MspInit+0x268>)
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013ae:	4861      	ldr	r0, [pc, #388]	; (8001534 <HAL_UART_MspInit+0x268>)
 80013b0:	f000 feca 	bl	8002148 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80013ba:	f7ff ff5d 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a5c      	ldr	r2, [pc, #368]	; (8001534 <HAL_UART_MspInit+0x268>)
 80013c2:	671a      	str	r2, [r3, #112]	; 0x70
 80013c4:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <HAL_UART_MspInit+0x268>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ca:	e0aa      	b.n	8001522 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5a      	ldr	r2, [pc, #360]	; (800153c <HAL_UART_MspInit+0x270>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d13c      	bne.n	8001450 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013da:	2300      	movs	r3, #0
 80013dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f8ce 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x126>
      Error_Handler();
 80013ee:	f7ff ff43 	bl	8001278 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f2:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_UART_MspInit+0x264>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_UART_MspInit+0x264>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_UART_MspInit+0x264>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001422:	230c      	movs	r3, #12
 8001424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143a:	2307      	movs	r3, #7
 800143c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f001 f875 	bl	8002538 <HAL_GPIO_Init>
}
 800144e:	e068      	b.n	8001522 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <HAL_UART_MspInit+0x274>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d163      	bne.n	8001522 <HAL_UART_MspInit+0x256>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800145a:	2304      	movs	r3, #4
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800145e:	2300      	movs	r3, #0
 8001460:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4618      	mov	r0, r3
 8001468:	f002 f88c 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8001472:	f7ff ff01 	bl	8001278 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_UART_MspInit+0x264>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x264>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_UART_MspInit+0x264>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014a6:	2330      	movs	r3, #48	; 0x30
 80014a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014be:	2307      	movs	r3, #7
 80014c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014c8:	4619      	mov	r1, r3
 80014ca:	481e      	ldr	r0, [pc, #120]	; (8001544 <HAL_UART_MspInit+0x278>)
 80014cc:	f001 f834 	bl	8002538 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_UART_MspInit+0x280>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014d8:	2202      	movs	r2, #2
 80014da:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014de:	2210      	movs	r2, #16
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_UART_MspInit+0x27c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_UART_MspInit+0x27c>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001506:	4810      	ldr	r0, [pc, #64]	; (8001548 <HAL_UART_MspInit+0x27c>)
 8001508:	f000 fe1e 	bl	8002148 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001512:	f7ff feb1 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_UART_MspInit+0x27c>)
 800151a:	66da      	str	r2, [r3, #108]	; 0x6c
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_UART_MspInit+0x27c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001522:	bf00      	nop
 8001524:	37c0      	adds	r7, #192	; 0xc0
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013800 	.word	0x40013800
 8001530:	40021000 	.word	0x40021000
 8001534:	20000384 	.word	0x20000384
 8001538:	40020058 	.word	0x40020058
 800153c:	40004400 	.word	0x40004400
 8001540:	40004800 	.word	0x40004800
 8001544:	48000800 	.word	0x48000800
 8001548:	200003cc 	.word	0x200003cc
 800154c:	4002001c 	.word	0x4002001c

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 fca2 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA1_Channel2_IRQHandler+0x10>)
 80015aa:	f000 fee5 	bl	8002378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200003cc 	.word	0x200003cc

080015b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA1_Channel5_IRQHandler+0x10>)
 80015be:	f000 fedb 	bl	8002378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000384 	.word	0x20000384

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e6:	f004 fa7b 	bl	8005ae0 <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
  return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f004 f9e0 	bl	8005ae0 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20018000 	.word	0x20018000
 800174c:	00000400 	.word	0x00000400
 8001750:	200004d4 	.word	0x200004d4
 8001754:	20000638 	.word	0x20000638

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001780:	f7ff ffea 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001786:	490d      	ldr	r1, [pc, #52]	; (80017bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LoopForever+0xe>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800179c:	4c0a      	ldr	r4, [pc, #40]	; (80017c8 <LoopForever+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017aa:	f004 f99f 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ae:	f7ff fb99 	bl	8000ee4 <main>

080017b2 <LoopForever>:

LoopForever:
    b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017c0:	08007e04 	.word	0x08007e04
  ldr r2, =_sbss
 80017c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017c8:	20000638 	.word	0x20000638

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>

080017ce <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel, 1500, 6 * sizeof(uint16_t));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	220c      	movs	r2, #12
 80017de:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f929 	bl	8005a3a <memset>
	Ibus->handle = handle;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer, 0, 128);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3318      	adds	r3, #24
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f91f 	bl	8005a3a <memset>
	return HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3318      	adds	r3, #24
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	4619      	mov	r1, r3
 8001808:	f002 fc56 	bl	80040b8 <HAL_UART_Receive_DMA>
 800180c:	4603      	mov	r3, r0

}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b094      	sub	sp, #80	; 0x50
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 64);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3318      	adds	r3, #24
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	4619      	mov	r1, r3
 800182a:	f002 fc45 	bl	80040b8 <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = { 0 };
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	223c      	movs	r2, #60	; 0x3c
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f004 f8fd 	bl	8005a3a <memset>
	uint16_t packetStart = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800184c:	e018      	b.n	8001880 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i + 1] == 0x40) {
 800184e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	7e1b      	ldrb	r3, [r3, #24]
 8001858:	2b20      	cmp	r3, #32
 800185a:	d10c      	bne.n	8001876 <IBUS_Update+0x60>
 800185c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001860:	3301      	adds	r3, #1
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d104      	bne.n	8001876 <IBUS_Update+0x60>
			packetStart = i;
 800186c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			break;
 8001874:	e008      	b.n	8001888 <IBUS_Update+0x72>
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001876:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800187a:	3301      	adds	r3, #1
 800187c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001880:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001884:	2b3e      	cmp	r3, #62	; 0x3e
 8001886:	d9e2      	bls.n	800184e <IBUS_Update+0x38>
		}
	}
	if (packetStart >= 64) {
 8001888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800188c:	2b3f      	cmp	r3, #63	; 0x3f
 800188e:	d901      	bls.n	8001894 <IBUS_Update+0x7e>
		return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e036      	b.n	8001902 <IBUS_Update+0xec>
	}
	memcpy(Packet, Ibus->UARTBuffer + packetStart + 2, 32);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0218 	add.w	r2, r3, #24
 800189a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800189e:	3302      	adds	r3, #2
 80018a0:	18d1      	adds	r1, r2, r3
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2220      	movs	r2, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f945 	bl	8005b38 <memcpy>



	for (uint16_t i = 0; i < 10	; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80018b4:	e020      	b.n	80018f8 <IBUS_Update+0xe2>
		Ibus->channel[i] = (Packet[2 * i + 1] << 8) | Packet[2 * i];
 80018b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	3301      	adds	r3, #1
 80018be:	3350      	adds	r3, #80	; 0x50
 80018c0:	443b      	add	r3, r7
 80018c2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	3350      	adds	r3, #80	; 0x50
 80018d2:	443b      	add	r3, r7
 80018d4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018e2:	b291      	uxth	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	460a      	mov	r2, r1
 80018ec:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < 10	; i++) {
 80018ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f2:	3301      	adds	r3, #1
 80018f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80018f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	d9da      	bls.n	80018b6 <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3750      	adds	r7, #80	; 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <Transform_Omni>:
#include "Omnidirection.h"
HAL_StatusTypeDef Transform_Omni(uint8_t Channel[3], float output[4]) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	float input[3] = { 0 };
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
	uint8_t forward[4] = { 1, 1, -1, -1 };
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <Transform_Omni+0x1ac>)
 800193c:	613b      	str	r3, [r7, #16]
	uint8_t right[4] = { 1, -1, -1, 1 };
 800193e:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <Transform_Omni+0x1b0>)
 8001940:	60fb      	str	r3, [r7, #12]
	uint8_t rotate_c[4] = { -1, 1, -1, 1 };
 8001942:	f06f 23fe 	mvn.w	r3, #4261477888	; 0xfe00fe00
 8001946:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194c:	e019      	b.n	8001982 <Transform_Omni+0x5e>
		input[i] = ((float) Channel[i] - 1500) / 500;
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001ad8 <Transform_Omni+0x1b4>
 8001962:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001966:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001adc <Transform_Omni+0x1b8>
 800196a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	443b      	add	r3, r7
 8001976:	3b1c      	subs	r3, #28
 8001978:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	3301      	adds	r3, #1
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	2b02      	cmp	r3, #2
 8001986:	dde2      	ble.n	800194e <Transform_Omni+0x2a>

	}
	float norme = sqrtf(
			input[0] * input[0] + input[1] * input[1] + input[2] * input[2]);
 8001988:	ed97 7a05 	vldr	s14, [r7, #20]
 800198c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001994:	edd7 6a06 	vldr	s13, [r7, #24]
 8001998:	edd7 7a06 	vldr	s15, [r7, #24]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80019a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float norme = sqrtf(
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	f005 ff90 	bl	80078dc <sqrtf>
 80019bc:	ed87 0a08 	vstr	s0, [r7, #32]
	if (norme >= 1) {
 80019c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db3e      	blt.n	8001a50 <Transform_Omni+0x12c>
		for (int i = 0; i < 4; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d6:	e037      	b.n	8001a48 <Transform_Omni+0x124>
			output[i] = (input[0] * forward[i] + input[1] * right[i]
 80019d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019dc:	f107 0210 	add.w	r2, r7, #16
 80019e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ input[2] * rotate_c[i]) / norme;
 8001a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2a:	ee77 6a27 	vadd.f32	s13, s14, s15
			output[i] = (input[0] * forward[i] + input[1] * right[i]
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
					+ input[2] * rotate_c[i]) / norme;
 8001a36:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			output[i] = (input[0] * forward[i] + input[1] * right[i]
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 4; i++) {
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	3301      	adds	r3, #1
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	ddc4      	ble.n	80019d8 <Transform_Omni+0xb4>
 8001a4e:	e039      	b.n	8001ac4 <Transform_Omni+0x1a0>
		}
	} else {
		for (int i = 0; i < 4; i++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	e033      	b.n	8001abe <Transform_Omni+0x19a>
			output[i] = input[0] * forward[i] + input[1] * right[i]
 8001a56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a5a:	f107 0210 	add.w	r2, r7, #16
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a70:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ input[2] * rotate_c[i];
 8001a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a92:	f107 0208 	add.w	r2, r7, #8
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			output[i] = input[0] * forward[i] + input[1] * right[i]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
					+ input[2] * rotate_c[i];
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
			output[i] = input[0] * forward[i] + input[1] * right[i]
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 4; i++) {
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3301      	adds	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	ddc8      	ble.n	8001a56 <Transform_Omni+0x132>
		}
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3730      	adds	r7, #48	; 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	ffff0101 	.word	0xffff0101
 8001ad4:	01ffff01 	.word	0x01ffff01
 8001ad8:	44bb8000 	.word	0x44bb8000
 8001adc:	43fa0000 	.word	0x43fa0000

08001ae0 <HAL_UART_RxCpltCallback>:
 */

#include "Sabertooth.h"
static Sabertooth *sabertooth_ptr;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if (huart != sabertooth_ptr->handle) {
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d129      	bne.n	8001b48 <HAL_UART_RxCpltCallback+0x68>
		return;
	}
	if (sabertooth_ptr->Queue.NumberOfPacket <= 0) {
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	89db      	ldrh	r3, [r3, #14]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <HAL_UART_RxCpltCallback+0x28>
		sabertooth_ptr->Queue.CurrentlySending = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	731a      	strb	r2, [r3, #12]
 8001b06:	e020      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x6a>
	} else {
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	6819      	ldr	r1, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->length);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f002 fa3c 	bl	8003f98 <HAL_UART_Transmit_DMA>
		sabertooth_ptr->Queue.FirstPacket =
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
		sabertooth_ptr->Queue.FirstPacket =
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b28:	681b      	ldr	r3, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001b2a:	6892      	ldr	r2, [r2, #8]
		sabertooth_ptr->Queue.FirstPacket =
 8001b2c:	611a      	str	r2, [r3, #16]
		sabertooth_ptr->Queue.NumberOfPacket -= 1;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	89da      	ldrh	r2, [r3, #14]
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	81da      	strh	r2, [r3, #14]
		sabertooth_ptr->Queue.CurrentlySending = 1;
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_UART_RxCpltCallback+0x70>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2201      	movs	r2, #1
 8001b44:	731a      	strb	r2, [r3, #12]
 8001b46:	e000      	b.n	8001b4a <HAL_UART_RxCpltCallback+0x6a>
		return;
 8001b48:	bf00      	nop
	}
}
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200004d8 	.word	0x200004d8

08001b54 <Sabertooth_Init>:
HAL_StatusTypeDef Sabertooth_Init(Sabertooth *saber, UART_HandleTypeDef *handle,
		uint8_t motor[4], uint8_t adress[4]) {
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
	sabertooth_ptr = saber;
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <Sabertooth_Init+0x64>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e016      	b.n	8001b9c <Sabertooth_Init+0x48>
		saber->adress[i] = adress[i];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	7819      	ldrb	r1, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	460a      	mov	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
		saber->motor[i] = motor[i];
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	7819      	ldrb	r1, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4413      	add	r3, r2
 8001b90:	3308      	adds	r3, #8
 8001b92:	460a      	mov	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	dde5      	ble.n	8001b6e <Sabertooth_Init+0x1a>
	}
	saber->handle = handle;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	601a      	str	r2, [r3, #0]
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200004d8 	.word	0x200004d8

08001bbc <Sabertooth_Send>:
HAL_StatusTypeDef Sabertooth_Send(Sabertooth *saber, uint8_t address,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8001bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b08b      	sub	sp, #44	; 0x2c
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	72bb      	strb	r3, [r7, #10]
 8001bd0:	466b      	mov	r3, sp
 8001bd2:	461e      	mov	r6, r3
	uint8_t Packet[3 + data_length];
 8001bd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bd8:	1cd9      	adds	r1, r3, #3
 8001bda:	1e4b      	subs	r3, r1, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	460a      	mov	r2, r1
 8001be0:	2300      	movs	r3, #0
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	00eb      	lsls	r3, r5, #3
 8001c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c10:	00e2      	lsls	r2, r4, #3
 8001c12:	460b      	mov	r3, r1
 8001c14:	3307      	adds	r3, #7
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c1e:	466b      	mov	r3, sp
 8001c20:	3300      	adds	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
	Packet[0] = address;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	7afa      	ldrb	r2, [r7, #11]
 8001c28:	701a      	strb	r2, [r3, #0]
	Packet[1] = command;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	7aba      	ldrb	r2, [r7, #10]
 8001c2e:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e00a      	b.n	8001c4c <Sabertooth_Send+0x90>
		Packet[i + 2] = data[i];
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	441a      	add	r2, r3
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3302      	adds	r3, #2
 8001c40:	7811      	ldrb	r1, [r2, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < data_length; i++) {
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3301      	adds	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbef      	blt.n	8001c36 <Sabertooth_Send+0x7a>
	}
	uint8_t Checksum = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e00b      	b.n	8001c7a <Sabertooth_Send+0xbe>
		Checksum += Packet[i];
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c6e:	4413      	add	r3, r2
 8001c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c7e:	3301      	adds	r3, #1
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dded      	ble.n	8001c62 <Sabertooth_Send+0xa6>
	}
	Checksum = Checksum & 0x7F;
 8001c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Packet[2 + data_length] = Checksum;
 8001c92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c96:	3302      	adds	r3, #2
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001c9e:	54d1      	strb	r1, [r2, r3]
	//return HAL_UART_Transmit_DMA(saber->handle, Packet, 3 + data_length);
	//return HAL_UART_Transmit(saber->handle, Packet, 3+data_length,10);
	static Packet_el PacketToSend;
	PacketToSend.Next_Packet = 0;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <Sabertooth_Send+0x160>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
	PacketToSend.Packet = Packet;
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <Sabertooth_Send+0x160>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	6013      	str	r3, [r2, #0]
	PacketToSend.length = 3 + data_length;
 8001cac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <Sabertooth_Send+0x160>)
 8001cb6:	809a      	strh	r2, [r3, #4]
	if (!saber->Queue.CurrentlySending) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	7b1b      	ldrb	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <Sabertooth_Send+0x11c>
		HAL_UART_Transmit_DMA(saber->handle, Packet, PacketToSend.length);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <Sabertooth_Send+0x160>)
 8001cc6:	8892      	ldrh	r2, [r2, #4]
 8001cc8:	6979      	ldr	r1, [r7, #20]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 f964 	bl	8003f98 <HAL_UART_Transmit_DMA>
		saber->Queue.CurrentlySending = 1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	731a      	strb	r2, [r3, #12]
 8001cd6:	e01a      	b.n	8001d0e <Sabertooth_Send+0x152>
	} else if (saber->Queue.NumberOfPacket > 0) {
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	89db      	ldrh	r3, [r3, #14]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <Sabertooth_Send+0x140>

		saber->Queue.lastPacket->Next_Packet = &PacketToSend;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <Sabertooth_Send+0x160>)
 8001ce6:	609a      	str	r2, [r3, #8]
		saber->Queue.lastPacket = &PacketToSend;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <Sabertooth_Send+0x160>)
 8001cec:	615a      	str	r2, [r3, #20]
		saber->Queue.NumberOfPacket += 1;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	89db      	ldrh	r3, [r3, #14]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	81da      	strh	r2, [r3, #14]
 8001cfa:	e008      	b.n	8001d0e <Sabertooth_Send+0x152>
	} else {
		saber->Queue.FirstPacket = &PacketToSend;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <Sabertooth_Send+0x160>)
 8001d00:	611a      	str	r2, [r3, #16]
		saber->Queue.lastPacket = &PacketToSend;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <Sabertooth_Send+0x160>)
 8001d06:	615a      	str	r2, [r3, #20]
		saber->Queue.NumberOfPacket = 1;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	81da      	strh	r2, [r3, #14]
	}
	return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	46b5      	mov	sp, r6
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	372c      	adds	r7, #44	; 0x2c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d1c:	200004dc 	.word	0x200004dc

08001d20 <Sabertooth_Drive>:

HAL_StatusTypeDef Sabertooth_Drive(Sabertooth *saber, float command[4]) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e072      	b.n	8001e16 <Sabertooth_Drive+0xf6>
		if (command[i] >= 0) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	db30      	blt.n	8001da8 <Sabertooth_Drive+0x88>
			uint8_t data = floor(command[i] * 127);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001e28 <Sabertooth_Drive+0x108>
 8001d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5a:	ee17 0a90 	vmov	r0, s15
 8001d5e:	f7fe fbf3 	bl	8000548 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ec43 2b10 	vmov	d0, r2, r3
 8001d6a:	f005 fdd9 	bl	8007920 <floor>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe ff17 	bl	8000ba8 <__aeabi_d2uiz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	72fb      	strb	r3, [r7, #11]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i], &data,
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	7819      	ldrb	r1, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3308      	adds	r3, #8
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	f107 030b 	add.w	r3, r7, #11
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	9000      	str	r0, [sp, #0]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff0b 	bl	8001bbc <Sabertooth_Send>
 8001da6:	e033      	b.n	8001e10 <Sabertooth_Drive+0xf0>
					1);

		} else {
			uint8_t data = floor(-command[i] * 127);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eef1 7a67 	vneg.f32	s15, s15
 8001db8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e28 <Sabertooth_Drive+0x108>
 8001dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc0:	ee17 0a90 	vmov	r0, s15
 8001dc4:	f7fe fbc0 	bl	8000548 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	ec43 2b10 	vmov	d0, r2, r3
 8001dd0:	f005 fda6 	bl	8007920 <floor>
 8001dd4:	ec53 2b10 	vmov	r2, r3, d0
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fee4 	bl	8000ba8 <__aeabi_d2uiz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	72bb      	strb	r3, [r7, #10]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i] + 1,
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	7819      	ldrb	r1, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	3308      	adds	r3, #8
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	f107 030a 	add.w	r3, r7, #10
 8001e06:	2001      	movs	r0, #1
 8001e08:	9000      	str	r0, [sp, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fed6 	bl	8001bbc <Sabertooth_Send>
	for (int i = 0; i < 4; i++) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3301      	adds	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	dd89      	ble.n	8001d30 <Sabertooth_Drive+0x10>
					&data, 1);
		}
	}

	return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	42fe0000 	.word	0x42fe0000

08001e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_Init+0x3c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_Init+0x3c>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e42:	2003      	movs	r0, #3
 8001e44:	f000 f93e 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f80f 	bl	8001e6c <HAL_InitTick>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	e001      	b.n	8001e5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5a:	f7ff fa13 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_InitTick+0x6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_InitTick+0x70>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_InitTick+0x6c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f949 	bl	800212e <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d809      	bhi.n	8001ebc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f913 	bl	80020da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_InitTick+0x74>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e004      	b.n	8001ecc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e001      	b.n	8001ecc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000010 	.word	0x20000010
 8001f08:	200004e8 	.word	0x200004e8

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200004e8 	.word	0x200004e8

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e098      	b.n	800228c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_DMA_Init+0x150>)
 8002162:	429a      	cmp	r2, r3
 8002164:	d80f      	bhi.n	8002186 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_DMA_Init+0x154>)
 800216e:	4413      	add	r3, r2
 8002170:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <HAL_DMA_Init+0x158>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	009a      	lsls	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_DMA_Init+0x15c>)
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_DMA_Init+0x160>)
 800218e:	4413      	add	r3, r2
 8002190:	4a43      	ldr	r2, [pc, #268]	; (80022a0 <HAL_DMA_Init+0x158>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a42      	ldr	r2, [pc, #264]	; (80022ac <HAL_DMA_Init+0x164>)
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021fe:	d039      	beq.n	8002274 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_DMA_Init+0x15c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d11a      	bne.n	8002240 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_DMA_Init+0x168>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 031c 	and.w	r3, r3, #28
 8002216:	210f      	movs	r1, #15
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	4924      	ldr	r1, [pc, #144]	; (80022b0 <HAL_DMA_Init+0x168>)
 8002220:	4013      	ands	r3, r2
 8002222:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_DMA_Init+0x168>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f003 031c 	and.w	r3, r3, #28
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	491d      	ldr	r1, [pc, #116]	; (80022b0 <HAL_DMA_Init+0x168>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
 800223e:	e019      	b.n	8002274 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_DMA_Init+0x16c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f003 031c 	and.w	r3, r3, #28
 800224c:	210f      	movs	r1, #15
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	4917      	ldr	r1, [pc, #92]	; (80022b4 <HAL_DMA_Init+0x16c>)
 8002256:	4013      	ands	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_DMA_Init+0x16c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f003 031c 	and.w	r3, r3, #28
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4911      	ldr	r1, [pc, #68]	; (80022b4 <HAL_DMA_Init+0x16c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40020407 	.word	0x40020407
 800229c:	bffdfff8 	.word	0xbffdfff8
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	40020000 	.word	0x40020000
 80022a8:	bffdfbf8 	.word	0xbffdfbf8
 80022ac:	40020400 	.word	0x40020400
 80022b0:	400200a8 	.word	0x400200a8
 80022b4:	400204a8 	.word	0x400204a8

080022b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_DMA_Start_IT+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e04b      	b.n	8002370 <HAL_DMA_Start_IT+0xb8>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d13a      	bne.n	8002362 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f8e0 	bl	80024d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 020e 	orr.w	r2, r2, #14
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e00f      	b.n	8002350 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 020a 	orr.w	r2, r2, #10
 800234e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e005      	b.n	800236e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	f003 031c 	and.w	r3, r3, #28
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d026      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x7a>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d021      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f003 021c 	and.w	r2, r3, #28
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2104      	movs	r1, #4
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d071      	beq.n	80024cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	e06c      	b.n	80024cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f003 031c 	and.w	r3, r3, #28
 80023fa:	2202      	movs	r2, #2
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02e      	beq.n	8002464 <HAL_DMA_IRQHandler+0xec>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d029      	beq.n	8002464 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020a 	bic.w	r2, r2, #10
 800242c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f003 021c 	and.w	r2, r3, #28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2102      	movs	r1, #2
 8002444:	fa01 f202 	lsl.w	r2, r1, r2
 8002448:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d038      	beq.n	80024cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002462:	e033      	b.n	80024cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 031c 	and.w	r3, r3, #28
 800246c:	2208      	movs	r2, #8
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02a      	beq.n	80024ce <HAL_DMA_IRQHandler+0x156>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d025      	beq.n	80024ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 020e 	bic.w	r2, r2, #14
 8002490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 021c 	and.w	r2, r3, #28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
}
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f003 021c 	and.w	r2, r3, #28
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f202 	lsl.w	r2, r1, r2
 80024f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b10      	cmp	r3, #16
 8002506:	d108      	bne.n	800251a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002518:	e007      	b.n	800252a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	60da      	str	r2, [r3, #12]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e17f      	b.n	8002848 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8171 	beq.w	8002842 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d005      	beq.n	8002578 <HAL_GPIO_Init+0x40>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0201 	and.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d118      	bne.n	8002618 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ac 	beq.w	8002842 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_GPIO_Init+0x330>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_GPIO_Init+0x330>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6613      	str	r3, [r2, #96]	; 0x60
 80026f6:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_GPIO_Init+0x330>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002702:	4a5a      	ldr	r2, [pc, #360]	; (800286c <HAL_GPIO_Init+0x334>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x242>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <HAL_GPIO_Init+0x338>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x23e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_GPIO_Init+0x33c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x23a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4d      	ldr	r2, [pc, #308]	; (8002878 <HAL_GPIO_Init+0x340>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x236>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x344>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x232>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4b      	ldr	r2, [pc, #300]	; (8002880 <HAL_GPIO_Init+0x348>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <HAL_GPIO_Init+0x34c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x22a>
 800275e:	2306      	movs	r3, #6
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002762:	2307      	movs	r3, #7
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x244>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x244>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x244>
 800277a:	2300      	movs	r3, #0
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800278c:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_GPIO_Init+0x334>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x350>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x350>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x350>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x350>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x350>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	f47f ae78 	bne.w	8002548 <HAL_GPIO_Init+0x10>
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	40010000 	.word	0x40010000
 8002870:	48000400 	.word	0x48000400
 8002874:	48000800 	.word	0x48000800
 8002878:	48000c00 	.word	0x48000c00
 800287c:	48001000 	.word	0x48001000
 8002880:	48001400 	.word	0x48001400
 8002884:	48001800 	.word	0x48001800
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40007000 	.word	0x40007000

080028d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e6:	d130      	bne.n	800294a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f4:	d038      	beq.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002904:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2232      	movs	r2, #50	; 0x32
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	3301      	adds	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291c:	e002      	b.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b01      	subs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d102      	bne.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f2      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d110      	bne.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e00f      	b.n	800296a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d007      	beq.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002966:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40007000 	.word	0x40007000
 800297c:	20000008 	.word	0x20000008
 8002980:	431bde83 	.word	0x431bde83

08002984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3ca      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	4b97      	ldr	r3, [pc, #604]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a0:	4b94      	ldr	r3, [pc, #592]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80e4 	beq.w	8002b80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_RCC_OscConfig+0x4a>
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	f040 808b 	bne.w	8002adc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	f040 8087 	bne.w	8002adc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e3a2      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1a      	ldr	r2, [r3, #32]
 80029ea:	4b82      	ldr	r3, [pc, #520]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_RCC_OscConfig+0x7c>
 80029f6:	4b7f      	ldr	r3, [pc, #508]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_OscConfig+0x88>
 8002a00:	4b7c      	ldr	r3, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d223      	bcs.n	8002a58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fd55 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e383      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a24:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a72      	ldr	r2, [pc, #456]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	496d      	ldr	r1, [pc, #436]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	4968      	ldr	r1, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e025      	b.n	8002aa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4960      	ldr	r1, [pc, #384]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	495b      	ldr	r1, [pc, #364]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fd15 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e343      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa4:	f000 fc4a 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	4950      	ldr	r1, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_RCC_OscConfig+0x278>)
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f9cf 	bl	8001e6c <HAL_InitTick>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d052      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	e327      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d032      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af0:	f7ff fa0c 	bl	8001f0c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af8:	f7ff fa08 	bl	8001f0c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e310      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4931      	ldr	r1, [pc, #196]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	492c      	ldr	r1, [pc, #176]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e01a      	b.n	8002b80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b56:	f7ff f9d9 	bl	8001f0c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5e:	f7ff f9d5 	bl	8001f0c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e2dd      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x1da>
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d074      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x21a>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d10e      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d064      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d160      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e2ba      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x24a>
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e026      	b.n	8002c1c <HAL_RCC_OscConfig+0x298>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd6:	d115      	bne.n	8002c04 <HAL_RCC_OscConfig+0x280>
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a02      	ldr	r2, [pc, #8]	; (8002bf4 <HAL_RCC_OscConfig+0x270>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x298>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08007a38 	.word	0x08007a38
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	2000000c 	.word	0x2000000c
 8002c04:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a9f      	ldr	r2, [pc, #636]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b9d      	ldr	r3, [pc, #628]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a9c      	ldr	r2, [pc, #624]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7ff f972 	bl	8001f0c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7ff f96e 	bl	8001f0c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e276      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2a8>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f95e 	bl	8001f0c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff f95a 	bl	8001f0c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e262      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2d0>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d060      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_OscConfig+0x310>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d119      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d116      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_OscConfig+0x328>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e23f      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	4973      	ldr	r1, [pc, #460]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc0:	e040      	b.n	8002d44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d023      	beq.n	8002d12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cca:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7ff f919 	bl	8001f0c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7ff f915 	bl	8001f0c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e21d      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	495f      	ldr	r1, [pc, #380]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	e018      	b.n	8002d44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5c      	ldr	r2, [pc, #368]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f8f5 	bl	8001f0c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7ff f8f1 	bl	8001f0c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1f9      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03c      	beq.n	8002dca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7ff f8d0 	bl	8001f0c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7ff f8cc 	bl	8001f0c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1d4      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCC_OscConfig+0x3ec>
 8002d90:	e01b      	b.n	8002dca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d98:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7ff f8b3 	bl	8001f0c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002daa:	f7ff f8af 	bl	8001f0c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1b7      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ef      	bne.n	8002daa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80a6 	beq.w	8002f24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	; 0x58
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x508>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d118      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_OscConfig+0x508>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_RCC_OscConfig+0x508>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1c:	f7ff f876 	bl	8001f0c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7ff f872 	bl	8001f0c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e17a      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCC_OscConfig+0x508>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d108      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4d8>
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e5a:	e029      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d115      	bne.n	8002e90 <HAL_RCC_OscConfig+0x50c>
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_OscConfig+0x504>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e84:	e014      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	4b9c      	ldr	r3, [pc, #624]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a9b      	ldr	r2, [pc, #620]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea0:	4b98      	ldr	r3, [pc, #608]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a97      	ldr	r2, [pc, #604]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7ff f828 	bl	8001f0c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7ff f824 	bl	8001f0c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e12a      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ed      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x53c>
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7ff f811 	bl	8001f0c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f80d 	bl	8001f0c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e113      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f04:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ed      	bne.n	8002eee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	4a79      	ldr	r2, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80fe 	beq.w	800312a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 80d0 	bne.w	80030d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f38:	4b72      	ldr	r3, [pc, #456]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d130      	bne.n	8002fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	3b01      	subs	r3, #1
 8002f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d127      	bne.n	8002fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d11f      	bne.n	8002fae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f78:	2a07      	cmp	r2, #7
 8002f7a:	bf14      	ite	ne
 8002f7c:	2201      	movne	r2, #1
 8002f7e:	2200      	moveq	r2, #0
 8002f80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d113      	bne.n	8002fae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d06e      	beq.n	800308c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d069      	beq.n	8003088 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0ad      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fdc:	f7fe ff96 	bl	8001f0c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe ff92 	bl	8001f0c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e09a      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <HAL_RCC_OscConfig+0x784>)
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003012:	3a01      	subs	r2, #1
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800301c:	0212      	lsls	r2, r2, #8
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003024:	0852      	lsrs	r2, r2, #1
 8003026:	3a01      	subs	r2, #1
 8003028:	0552      	lsls	r2, r2, #21
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003030:	0852      	lsrs	r2, r2, #1
 8003032:	3a01      	subs	r2, #1
 8003034:	0652      	lsls	r2, r2, #25
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800303c:	0912      	lsrs	r2, r2, #4
 800303e:	0452      	lsls	r2, r2, #17
 8003040:	430a      	orrs	r2, r1
 8003042:	4930      	ldr	r1, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8003044:	4313      	orrs	r3, r2
 8003046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003060:	f7fe ff54 	bl	8001f0c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe ff50 	bl	8001f0c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e058      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003086:	e050      	b.n	800312a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e04f      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d148      	bne.n	800312a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b0:	f7fe ff2c 	bl	8001f0c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe ff28 	bl	8001f0c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e030      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x734>
 80030d6:	e028      	b.n	800312a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d023      	beq.n	8003126 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_RCC_OscConfig+0x780>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe ff0f 	bl	8001f0c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	e00c      	b.n	800310c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe ff0b 	bl	8001f0c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d905      	bls.n	800310c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e013      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
 8003104:	40021000 	.word	0x40021000
 8003108:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_OscConfig+0x7b0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ec      	bne.n	80030f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x7b0>)
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4905      	ldr	r1, [pc, #20]	; (8003134 <HAL_RCC_OscConfig+0x7b0>)
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x7b4>)
 8003120:	4013      	ands	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
 8003124:	e001      	b.n	800312a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	feeefffc 	.word	0xfeeefffc

0800313c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0e7      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b72      	ldr	r3, [pc, #456]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4970      	ldr	r1, [pc, #448]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b6e      	ldr	r3, [pc, #440]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0cf      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	429a      	cmp	r2, r3
 800319a:	d908      	bls.n	80031ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b63      	ldr	r3, [pc, #396]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4960      	ldr	r1, [pc, #384]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04c      	beq.n	8003254 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0a6      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d115      	bne.n	8003212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e09a      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e08e      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e086      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4943      	ldr	r1, [pc, #268]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003224:	f7fe fe72 	bl	8001f0c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe fe6e 	bl	8001f0c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e06e      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	429a      	cmp	r2, r3
 800326e:	d208      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	492b      	ldr	r1, [pc, #172]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d210      	bcs.n	80032b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0207 	bic.w	r2, r3, #7
 8003298:	4923      	ldr	r1, [pc, #140]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_ClockConfig+0x1ec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e036      	b.n	8003320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4918      	ldr	r1, [pc, #96]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4910      	ldr	r1, [pc, #64]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032f0:	f000 f824 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	490b      	ldr	r1, [pc, #44]	; (8003330 <HAL_RCC_ClockConfig+0x1f4>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1f8>)
 800330e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x1fc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fda9 	bl	8001e6c <HAL_InitTick>
 800331a:	4603      	mov	r3, r0
 800331c:	72fb      	strb	r3, [r7, #11]

  return status;
 800331e:	7afb      	ldrb	r3, [r7, #11]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
 8003330:	08007a38 	.word	0x08007a38
 8003334:	20000008 	.word	0x20000008
 8003338:	2000000c 	.word	0x2000000c

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d121      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d11e      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_GetSysClockFreq+0x110>)
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e004      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <HAL_RCC_GetSysClockFreq+0x114>)
 80033c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d134      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d003      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xac>
 80033e0:	e005      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_RCC_GetSysClockFreq+0x110>)
 80033e4:	617b      	str	r3, [r7, #20]
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ea:	617b      	str	r3, [r7, #20]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	617b      	str	r3, [r7, #20]
      break;
 80033f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	3301      	adds	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_GetSysClockFreq+0x108>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	0e5b      	lsrs	r3, r3, #25
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	3301      	adds	r3, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003434:	69bb      	ldr	r3, [r7, #24]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	08007a50 	.word	0x08007a50
 800344c:	00f42400 	.word	0x00f42400
 8003450:	007a1200 	.word	0x007a1200

08003454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000008 	.word	0x20000008

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003470:	f7ff fff0 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4904      	ldr	r1, [pc, #16]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	08007a48 	.word	0x08007a48

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800349c:	f7ff ffda 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08007a48 	.word	0x08007a48

080034c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034dc:	f7ff f9ee 	bl	80028bc <HAL_PWREx_GetVoltageRange>
 80034e0:	6178      	str	r0, [r7, #20]
 80034e2:	e014      	b.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b25      	ldr	r3, [pc, #148]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034fc:	f7ff f9de 	bl	80028bc <HAL_PWREx_GetVoltageRange>
 8003500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d10b      	bne.n	800352e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d919      	bls.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2ba0      	cmp	r3, #160	; 0xa0
 8003520:	d902      	bls.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003522:	2302      	movs	r3, #2
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e013      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003528:	2301      	movs	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	e010      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d902      	bls.n	800353a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003534:	2303      	movs	r3, #3
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e00a      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d102      	bne.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003540:	2302      	movs	r3, #2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	e004      	b.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b70      	cmp	r3, #112	; 0x70
 800354a:	d101      	bne.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800354c:	2301      	movs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0207 	bic.w	r2, r3, #7
 8003558:	4909      	ldr	r1, [pc, #36]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	40022000 	.word	0x40022000

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003590:	2300      	movs	r3, #0
 8003592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	2b00      	cmp	r3, #0
 800359e:	d041      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a8:	d02a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ae:	d824      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ba:	d81e      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d010      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035c6:	e018      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c8:	4b86      	ldr	r3, [pc, #536]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a85      	ldr	r2, [pc, #532]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d4:	e015      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fabb 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e6:	e00c      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3320      	adds	r3, #32
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fba6 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	74fb      	strb	r3, [r7, #19]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	4973      	ldr	r1, [pc, #460]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003634:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800363a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b62      	ldr	r3, [pc, #392]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a61      	ldr	r2, [pc, #388]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fa73 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fb5e 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a6:	494f      	ldr	r1, [pc, #316]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a0 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a40      	ldr	r2, [pc, #256]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3a      	ldr	r2, [pc, #232]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003704:	f7fe fc02 	bl	8001f0c <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800370a:	e009      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fe fbfe 	bl	8001f0c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	74fb      	strb	r3, [r7, #19]
        break;
 800371e:	e005      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d15c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003732:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d019      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fe fbbd 	bl	8001f0c <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003794:	e00b      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe fbb9 	bl	8001f0c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d902      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	74fb      	strb	r3, [r7, #19]
            break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ec      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	4904      	ldr	r1, [pc, #16]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037da:	e009      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f0:	7c7b      	ldrb	r3, [r7, #17]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b9e      	ldr	r3, [pc, #632]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a9d      	ldr	r2, [pc, #628]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380e:	4b98      	ldr	r3, [pc, #608]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4994      	ldr	r1, [pc, #592]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 020c 	bic.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	498c      	ldr	r1, [pc, #560]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003852:	4b87      	ldr	r3, [pc, #540]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4983      	ldr	r1, [pc, #524]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003874:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	497b      	ldr	r1, [pc, #492]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	4972      	ldr	r1, [pc, #456]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b8:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	496a      	ldr	r1, [pc, #424]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038da:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	4961      	ldr	r1, [pc, #388]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038fc:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	4959      	ldr	r1, [pc, #356]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391e:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	4950      	ldr	r1, [pc, #320]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	4948      	ldr	r1, [pc, #288]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	493f      	ldr	r1, [pc, #252]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d028      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003984:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003992:	4937      	ldr	r1, [pc, #220]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	e011      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8c8 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d028      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	491f      	ldr	r1, [pc, #124]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0c:	60d3      	str	r3, [r2, #12]
 8003a0e:	e011      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f899 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02b      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d109      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a02      	ldr	r2, [pc, #8]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e014      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f867 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	4928      	ldr	r1, [pc, #160]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f844 	bl	8003b58 <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
 8003ade:	e011      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3320      	adds	r3, #32
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 f925 	bl	8003d40 <RCCEx_PLLSAI2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1e:	490d      	ldr	r1, [pc, #52]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b42:	4904      	ldr	r1, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000

08003b58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b66:	4b75      	ldr	r3, [pc, #468]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b72:	4b72      	ldr	r3, [pc, #456]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0203 	and.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10d      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
       ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b8a:	4b6c      	ldr	r3, [pc, #432]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
       ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d047      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e044      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d018      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0x86>
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d825      	bhi.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x62>
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d009      	beq.n	8003bcc <RCCEx_PLLSAI1_Config+0x74>
 8003bb8:	e020      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bba:	4b60      	ldr	r3, [pc, #384]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11d      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bca:	e01a      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bcc:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bdc:	e013      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bea:	4b54      	ldr	r3, [pc, #336]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bfa:	e006      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e004      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	430b      	orrs	r3, r1
 8003c28:	4944      	ldr	r1, [pc, #272]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d17d      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c34:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fe f964 	bl	8001f0c <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c48:	f7fe f960 	bl	8001f0c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5a:	e005      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c5c:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ef      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d160      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68d2      	ldr	r2, [r2, #12]
 8003c8a:	0912      	lsrs	r2, r2, #4
 8003c8c:	0452      	lsls	r2, r2, #17
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	492a      	ldr	r1, [pc, #168]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]
 8003c96:	e027      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d112      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ca6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6892      	ldr	r2, [r2, #8]
 8003cae:	0211      	lsls	r1, r2, #8
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6912      	ldr	r2, [r2, #16]
 8003cb4:	0852      	lsrs	r2, r2, #1
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	0552      	lsls	r2, r2, #21
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	491f      	ldr	r1, [pc, #124]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]
 8003cc2:	e011      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	0211      	lsls	r1, r2, #8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6952      	ldr	r2, [r2, #20]
 8003cda:	0852      	lsrs	r2, r2, #1
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0652      	lsls	r2, r2, #25
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4916      	ldr	r1, [pc, #88]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe f90a 	bl	8001f0c <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfa:	e009      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfc:	f7fe f906 	bl	8001f0c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d0e:	e005      	b.n	8003d1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000

08003d40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d72:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
       ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d047      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d018      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0x86>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d825      	bhi.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x62>
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d009      	beq.n	8003db4 <RCCEx_PLLSAI2_Config+0x74>
 8003da0:	e020      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e01a      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e013      	b.n	8003dee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e004      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4939      	ldr	r1, [pc, #228]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d167      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fe f870 	bl	8001f0c <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e30:	f7fe f86c 	bl	8001f0c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
        break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ef      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d14a      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	0912      	lsrs	r2, r2, #4
 8003e74:	0452      	lsls	r2, r2, #17
 8003e76:	430a      	orrs	r2, r1
 8003e78:	491f      	ldr	r1, [pc, #124]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	614b      	str	r3, [r1, #20]
 8003e7e:	e011      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0652      	lsls	r2, r2, #25
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe f82c 	bl	8001f0c <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb8:	f7fe f828 	bl	8001f0c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ef      	beq.n	8003eb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f9d4 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f946 	bl	80041cc <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e022      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fbf2 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fc79 	bl	8004880 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d178      	bne.n	80040a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Transmit_DMA+0x22>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e071      	b.n	80040a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Transmit_DMA+0x34>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e06a      	b.n	80040a2 <HAL_UART_Transmit_DMA+0x10a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	; 0x21
 8003ff6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02b      	beq.n	8004058 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_UART_Transmit_DMA+0x114>)
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <HAL_UART_Transmit_DMA+0x118>)
 800400e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_UART_Transmit_DMA+0x11c>)
 8004016:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401c:	2200      	movs	r2, #0
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	4619      	mov	r1, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3328      	adds	r3, #40	; 0x28
 8004030:	461a      	mov	r2, r3
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f7fe f940 	bl	80022b8 <HAL_DMA_Start_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2210      	movs	r2, #16
 8004042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e024      	b.n	80040a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2240      	movs	r2, #64	; 0x40
 800405e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004088:	623a      	str	r2, [r7, #32]
 800408a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	61bb      	str	r3, [r7, #24]
   return(result);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	08004cfb 	.word	0x08004cfb
 80040b0:	08004d95 	.word	0x08004d95
 80040b4:	08004f0d 	.word	0x08004f0d

080040b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d142      	bne.n	8004154 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_Receive_DMA+0x22>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e03b      	b.n	8004156 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UART_Receive_DMA+0x34>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e034      	b.n	8004156 <HAL_UART_Receive_DMA+0x9e>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_UART_Receive_DMA+0xa8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01f      	beq.n	8004144 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	61bb      	str	r3, [r7, #24]
   return(result);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	461a      	mov	r2, r3
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fca6 	bl	8004a9c <UART_Start_Receive_DMA>
 8004150:	4603      	mov	r3, r0
 8004152:	e000      	b.n	8004156 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40008000 	.word	0x40008000

08004164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b08a      	sub	sp, #40	; 0x28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4ba4      	ldr	r3, [pc, #656]	; (800448c <UART_SetConfig+0x2c0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004204:	430b      	orrs	r3, r1
 8004206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a99      	ldr	r2, [pc, #612]	; (8004490 <UART_SetConfig+0x2c4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	4313      	orrs	r3, r2
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a90      	ldr	r2, [pc, #576]	; (8004494 <UART_SetConfig+0x2c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d126      	bne.n	80042a4 <UART_SetConfig+0xd8>
 8004256:	4b90      	ldr	r3, [pc, #576]	; (8004498 <UART_SetConfig+0x2cc>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0xd0>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0xa0>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428d 	.word	0x0800428d
 8004274:	08004285 	.word	0x08004285
 8004278:	08004295 	.word	0x08004295
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e116      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e112      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e10e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e10a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e106      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7c      	ldr	r2, [pc, #496]	; (800449c <UART_SetConfig+0x2d0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d138      	bne.n	8004320 <UART_SetConfig+0x154>
 80042ae:	4b7a      	ldr	r3, [pc, #488]	; (8004498 <UART_SetConfig+0x2cc>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d82d      	bhi.n	8004318 <UART_SetConfig+0x14c>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0xf8>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004309 	.word	0x08004309
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004301 	.word	0x08004301
 80042e8:	08004319 	.word	0x08004319
 80042ec:	08004319 	.word	0x08004319
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004311 	.word	0x08004311
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e0d8      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004300:	2302      	movs	r3, #2
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e0d4      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e0d0      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0cc      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e0c8      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a5e      	ldr	r2, [pc, #376]	; (80044a0 <UART_SetConfig+0x2d4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d125      	bne.n	8004376 <UART_SetConfig+0x1aa>
 800432a:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <UART_SetConfig+0x2cc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d016      	beq.n	8004366 <UART_SetConfig+0x19a>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d818      	bhi.n	800436e <UART_SetConfig+0x1a2>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d00a      	beq.n	8004356 <UART_SetConfig+0x18a>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d814      	bhi.n	800436e <UART_SetConfig+0x1a2>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <UART_SetConfig+0x182>
 8004348:	2b10      	cmp	r3, #16
 800434a:	d008      	beq.n	800435e <UART_SetConfig+0x192>
 800434c:	e00f      	b.n	800436e <UART_SetConfig+0x1a2>
 800434e:	2300      	movs	r3, #0
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004354:	e0ad      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004356:	2302      	movs	r3, #2
 8004358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435c:	e0a9      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800435e:	2304      	movs	r3, #4
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004364:	e0a5      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004366:	2308      	movs	r3, #8
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436c:	e0a1      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800436e:	2310      	movs	r3, #16
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004374:	e09d      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <UART_SetConfig+0x2d8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d125      	bne.n	80043cc <UART_SetConfig+0x200>
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <UART_SetConfig+0x2cc>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d016      	beq.n	80043bc <UART_SetConfig+0x1f0>
 800438e:	2bc0      	cmp	r3, #192	; 0xc0
 8004390:	d818      	bhi.n	80043c4 <UART_SetConfig+0x1f8>
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d00a      	beq.n	80043ac <UART_SetConfig+0x1e0>
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d814      	bhi.n	80043c4 <UART_SetConfig+0x1f8>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <UART_SetConfig+0x1d8>
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d008      	beq.n	80043b4 <UART_SetConfig+0x1e8>
 80043a2:	e00f      	b.n	80043c4 <UART_SetConfig+0x1f8>
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e082      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e07e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e07a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e076      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e072      	b.n	80044b2 <UART_SetConfig+0x2e6>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <UART_SetConfig+0x2dc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d12a      	bne.n	800442c <UART_SetConfig+0x260>
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d01a      	beq.n	800441c <UART_SetConfig+0x250>
 80043e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ea:	d81b      	bhi.n	8004424 <UART_SetConfig+0x258>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d00c      	beq.n	800440c <UART_SetConfig+0x240>
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f6:	d815      	bhi.n	8004424 <UART_SetConfig+0x258>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <UART_SetConfig+0x238>
 80043fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004400:	d008      	beq.n	8004414 <UART_SetConfig+0x248>
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x258>
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e052      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e04e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e04a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e046      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e042      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <UART_SetConfig+0x2c4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d13a      	bne.n	80044ac <UART_SetConfig+0x2e0>
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <UART_SetConfig+0x2cc>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004444:	d01a      	beq.n	800447c <UART_SetConfig+0x2b0>
 8004446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0x2b8>
 800444c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0x2a0>
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004456:	d815      	bhi.n	8004484 <UART_SetConfig+0x2b8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x298>
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d008      	beq.n	8004474 <UART_SetConfig+0x2a8>
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x2b8>
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e022      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e01e      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e01a      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e016      	b.n	80044b2 <UART_SetConfig+0x2e6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e012      	b.n	80044b2 <UART_SetConfig+0x2e6>
 800448c:	efff69f3 	.word	0xefff69f3
 8004490:	40008000 	.word	0x40008000
 8004494:	40013800 	.word	0x40013800
 8004498:	40021000 	.word	0x40021000
 800449c:	40004400 	.word	0x40004400
 80044a0:	40004800 	.word	0x40004800
 80044a4:	40004c00 	.word	0x40004c00
 80044a8:	40005000 	.word	0x40005000
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a9f      	ldr	r2, [pc, #636]	; (8004734 <UART_SetConfig+0x568>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d17a      	bne.n	80045b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d824      	bhi.n	800450e <UART_SetConfig+0x342>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x300>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800450f 	.word	0x0800450f
 80044ec:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe ffbc 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <UART_SetConfig+0x56c>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fe ff1d 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80fb 	beq.w	8004718 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	429a      	cmp	r2, r3
 8004530:	d305      	bcc.n	800453e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004544:	e0e8      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2200      	movs	r2, #0
 800454a:	461c      	mov	r4, r3
 800454c:	4615      	mov	r5, r2
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	022b      	lsls	r3, r5, #8
 8004558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800455c:	0222      	lsls	r2, r4, #8
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	6849      	ldr	r1, [r1, #4]
 8004562:	0849      	lsrs	r1, r1, #1
 8004564:	2000      	movs	r0, #0
 8004566:	4688      	mov	r8, r1
 8004568:	4681      	mov	r9, r0
 800456a:	eb12 0a08 	adds.w	sl, r2, r8
 800456e:	eb43 0b09 	adc.w	fp, r3, r9
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004580:	4650      	mov	r0, sl
 8004582:	4659      	mov	r1, fp
 8004584:	f7fc fb30 	bl	8000be8 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004596:	d308      	bcc.n	80045aa <UART_SetConfig+0x3de>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d204      	bcs.n	80045aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e0b6      	b.n	8004718 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045b0:	e0b2      	b.n	8004718 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d15e      	bne.n	800467a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d828      	bhi.n	8004616 <UART_SetConfig+0x44a>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x400>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004601 	.word	0x08004601
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004607 	.word	0x08004607
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004617 	.word	0x08004617
 80045e8:	08004617 	.word	0x08004617
 80045ec:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7fe ff3c 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e014      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fe ff4e 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 80045fc:	61f8      	str	r0, [r7, #28]
        break;
 80045fe:	e010      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <UART_SetConfig+0x56c>)
 8004602:	61fb      	str	r3, [r7, #28]
        break;
 8004604:	e00d      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe fe99 	bl	800333c <HAL_RCC_GetSysClockFreq>
 800460a:	61f8      	str	r0, [r7, #28]
        break;
 800460c:	e009      	b.n	8004622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	61fb      	str	r3, [r7, #28]
        break;
 8004614:	e005      	b.n	8004622 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d077      	beq.n	8004718 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005a      	lsls	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d916      	bls.n	8004672 <UART_SetConfig+0x4a6>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d212      	bcs.n	8004672 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f023 030f 	bic.w	r3, r3, #15
 8004654:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	b29a      	uxth	r2, r3
 8004662:	8afb      	ldrh	r3, [r7, #22]
 8004664:	4313      	orrs	r3, r2
 8004666:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	8afa      	ldrh	r2, [r7, #22]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e052      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004678:	e04e      	b.n	8004718 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800467a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467e:	2b08      	cmp	r3, #8
 8004680:	d827      	bhi.n	80046d2 <UART_SetConfig+0x506>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <UART_SetConfig+0x4bc>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046d3 	.word	0x080046d3
 8004698:	080046c3 	.word	0x080046c3
 800469c:	080046d3 	.word	0x080046d3
 80046a0:	080046d3 	.word	0x080046d3
 80046a4:	080046d3 	.word	0x080046d3
 80046a8:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7fe fede 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
        break;
 80046b2:	e014      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7fe fef0 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e010      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <UART_SetConfig+0x56c>)
 80046be:	61fb      	str	r3, [r7, #28]
        break;
 80046c0:	e00d      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fe3b 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80046c6:	61f8      	str	r0, [r7, #28]
        break;
 80046c8:	e009      	b.n	80046de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	61fb      	str	r3, [r7, #28]
        break;
 80046d0:	e005      	b.n	80046de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046dc:	bf00      	nop
    }

    if (pclk != 0U)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d019      	beq.n	8004718 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	085a      	lsrs	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	441a      	add	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d909      	bls.n	8004712 <UART_SetConfig+0x546>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004704:	d205      	bcs.n	8004712 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
 8004710:	e002      	b.n	8004718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004724:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004732:	bf00      	nop
 8004734:	40008000 	.word	0x40008000
 8004738:	00f42400 	.word	0x00f42400

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d10a      	bne.n	8004852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004890:	f7fd fb3c 	bl	8001f0c <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d10e      	bne.n	80048c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f82d 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e023      	b.n	800490a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d10e      	bne.n	80048ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f817 	bl	8004912 <UART_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e00d      	b.n	800490a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	e0a5      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	f000 80a1 	beq.w	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fd faed 	bl	8001f0c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
 800493e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13e      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004958:	667b      	str	r3, [r7, #100]	; 0x64
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004964:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	663b      	str	r3, [r7, #96]	; 0x60
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004996:	64ba      	str	r2, [r7, #72]	; 0x48
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e067      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d04f      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049de:	d147      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e6      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a3c:	623a      	str	r2, [r7, #32]
 8004a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e5      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e010      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f43f af4a 	beq.w	8004924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3770      	adds	r7, #112	; 0x70
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b096      	sub	sp, #88	; 0x58
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2222      	movs	r2, #34	; 0x22
 8004ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02b      	beq.n	8004b26 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a42      	ldr	r2, [pc, #264]	; (8004bdc <UART_Start_Receive_DMA+0x140>)
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a41      	ldr	r2, [pc, #260]	; (8004be0 <UART_Start_Receive_DMA+0x144>)
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <UART_Start_Receive_DMA+0x148>)
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	2200      	movs	r2, #0
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	4619      	mov	r1, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	461a      	mov	r2, r3
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	f7fd fbd9 	bl	80022b8 <HAL_DMA_Start_IT>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e055      	b.n	8004bd2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b56:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e6      	bne.n	8004b36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b88:	637a      	str	r2, [r7, #52]	; 0x34
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e5      	bne.n	8004b68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bbc:	623a      	str	r2, [r7, #32]
 8004bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	69f9      	ldr	r1, [r7, #28]
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3758      	adds	r7, #88	; 0x58
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	08004db1 	.word	0x08004db1
 8004be0:	08004ed5 	.word	0x08004ed5
 8004be4:	08004f0d 	.word	0x08004f0d

08004be8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b089      	sub	sp, #36	; 0x24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6979      	ldr	r1, [r7, #20]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e6      	bne.n	8004bf0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004c28:	bf00      	nop
 8004c2a:	3724      	adds	r7, #36	; 0x24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b095      	sub	sp, #84	; 0x54
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e6      	bne.n	8004c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d118      	bne.n	8004cdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004cee:	bf00      	nop
 8004cf0:	3754      	adds	r7, #84	; 0x54
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b090      	sub	sp, #64	; 0x40
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d137      	bne.n	8004d86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3308      	adds	r3, #8
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d84:	e002      	b.n	8004d8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d88:	f7ff f9ec 	bl	8004164 <HAL_UART_TxCpltCallback>
}
 8004d8c:	bf00      	nop
 8004d8e:	3740      	adds	r7, #64	; 0x40
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff f9e8 	bl	8004178 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b09c      	sub	sp, #112	; 0x70
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d170      	bne.n	8004eae <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e6      	bne.n	8004dd4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e26:	647a      	str	r2, [r7, #68]	; 0x44
 8004e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	2220      	movs	r2, #32
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d118      	bne.n	8004eae <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 0310 	bic.w	r3, r3, #16
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e6      	bne.n	8004e7c <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ec0:	f7ff f978 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ec4:	e002      	b.n	8004ecc <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004ec6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ec8:	f7fc fe0a 	bl	8001ae0 <HAL_UART_RxCpltCallback>
}
 8004ecc:	bf00      	nop
 8004ece:	3770      	adds	r7, #112	; 0x70
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d109      	bne.n	8004efe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff f95c 	bl	80041b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004efc:	e002      	b.n	8004f04 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff f944 	bl	800418c <HAL_UART_RxHalfCpltCallback>
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d109      	bne.n	8004f48 <UART_DMAError+0x3c>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b21      	cmp	r3, #33	; 0x21
 8004f38:	d106      	bne.n	8004f48 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7ff fe50 	bl	8004be8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d109      	bne.n	8004f6a <UART_DMAError+0x5e>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	d106      	bne.n	8004f6a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004f64:	6978      	ldr	r0, [r7, #20]
 8004f66:	f7ff fe65 	bl	8004c34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f70:	f043 0210 	orr.w	r2, r3, #16
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f7a:	6978      	ldr	r0, [r7, #20]
 8004f7c:	f7ff f910 	bl	80041a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f80:	bf00      	nop
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <__cvt>:
 8004f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	ec55 4b10 	vmov	r4, r5, d0
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	460e      	mov	r6, r1
 8004f94:	4619      	mov	r1, r3
 8004f96:	462b      	mov	r3, r5
 8004f98:	bfbb      	ittet	lt
 8004f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f9e:	461d      	movlt	r5, r3
 8004fa0:	2300      	movge	r3, #0
 8004fa2:	232d      	movlt	r3, #45	; 0x2d
 8004fa4:	700b      	strb	r3, [r1, #0]
 8004fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fac:	4691      	mov	r9, r2
 8004fae:	f023 0820 	bic.w	r8, r3, #32
 8004fb2:	bfbc      	itt	lt
 8004fb4:	4622      	movlt	r2, r4
 8004fb6:	4614      	movlt	r4, r2
 8004fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fbc:	d005      	beq.n	8004fca <__cvt+0x42>
 8004fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fc2:	d100      	bne.n	8004fc6 <__cvt+0x3e>
 8004fc4:	3601      	adds	r6, #1
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	e000      	b.n	8004fcc <__cvt+0x44>
 8004fca:	2103      	movs	r1, #3
 8004fcc:	ab03      	add	r3, sp, #12
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	ab02      	add	r3, sp, #8
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	ec45 4b10 	vmov	d0, r4, r5
 8004fd8:	4653      	mov	r3, sl
 8004fda:	4632      	mov	r2, r6
 8004fdc:	f000 fe44 	bl	8005c68 <_dtoa_r>
 8004fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	d102      	bne.n	8004fee <__cvt+0x66>
 8004fe8:	f019 0f01 	tst.w	r9, #1
 8004fec:	d022      	beq.n	8005034 <__cvt+0xac>
 8004fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ff2:	eb07 0906 	add.w	r9, r7, r6
 8004ff6:	d110      	bne.n	800501a <__cvt+0x92>
 8004ff8:	783b      	ldrb	r3, [r7, #0]
 8004ffa:	2b30      	cmp	r3, #48	; 0x30
 8004ffc:	d10a      	bne.n	8005014 <__cvt+0x8c>
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800500a:	b918      	cbnz	r0, 8005014 <__cvt+0x8c>
 800500c:	f1c6 0601 	rsb	r6, r6, #1
 8005010:	f8ca 6000 	str.w	r6, [sl]
 8005014:	f8da 3000 	ldr.w	r3, [sl]
 8005018:	4499      	add	r9, r3
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8005026:	b108      	cbz	r0, 800502c <__cvt+0xa4>
 8005028:	f8cd 900c 	str.w	r9, [sp, #12]
 800502c:	2230      	movs	r2, #48	; 0x30
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	454b      	cmp	r3, r9
 8005032:	d307      	bcc.n	8005044 <__cvt+0xbc>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005038:	1bdb      	subs	r3, r3, r7
 800503a:	4638      	mov	r0, r7
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	b004      	add	sp, #16
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	9103      	str	r1, [sp, #12]
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e7f0      	b.n	800502e <__cvt+0xa6>

0800504c <__exponent>:
 800504c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800504e:	4603      	mov	r3, r0
 8005050:	2900      	cmp	r1, #0
 8005052:	bfb8      	it	lt
 8005054:	4249      	neglt	r1, r1
 8005056:	f803 2b02 	strb.w	r2, [r3], #2
 800505a:	bfb4      	ite	lt
 800505c:	222d      	movlt	r2, #45	; 0x2d
 800505e:	222b      	movge	r2, #43	; 0x2b
 8005060:	2909      	cmp	r1, #9
 8005062:	7042      	strb	r2, [r0, #1]
 8005064:	dd2a      	ble.n	80050bc <__exponent+0x70>
 8005066:	f10d 0207 	add.w	r2, sp, #7
 800506a:	4617      	mov	r7, r2
 800506c:	260a      	movs	r6, #10
 800506e:	4694      	mov	ip, r2
 8005070:	fb91 f5f6 	sdiv	r5, r1, r6
 8005074:	fb06 1415 	mls	r4, r6, r5, r1
 8005078:	3430      	adds	r4, #48	; 0x30
 800507a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800507e:	460c      	mov	r4, r1
 8005080:	2c63      	cmp	r4, #99	; 0x63
 8005082:	f102 32ff 	add.w	r2, r2, #4294967295
 8005086:	4629      	mov	r1, r5
 8005088:	dcf1      	bgt.n	800506e <__exponent+0x22>
 800508a:	3130      	adds	r1, #48	; 0x30
 800508c:	f1ac 0402 	sub.w	r4, ip, #2
 8005090:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005094:	1c41      	adds	r1, r0, #1
 8005096:	4622      	mov	r2, r4
 8005098:	42ba      	cmp	r2, r7
 800509a:	d30a      	bcc.n	80050b2 <__exponent+0x66>
 800509c:	f10d 0209 	add.w	r2, sp, #9
 80050a0:	eba2 020c 	sub.w	r2, r2, ip
 80050a4:	42bc      	cmp	r4, r7
 80050a6:	bf88      	it	hi
 80050a8:	2200      	movhi	r2, #0
 80050aa:	4413      	add	r3, r2
 80050ac:	1a18      	subs	r0, r3, r0
 80050ae:	b003      	add	sp, #12
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050ba:	e7ed      	b.n	8005098 <__exponent+0x4c>
 80050bc:	2330      	movs	r3, #48	; 0x30
 80050be:	3130      	adds	r1, #48	; 0x30
 80050c0:	7083      	strb	r3, [r0, #2]
 80050c2:	70c1      	strb	r1, [r0, #3]
 80050c4:	1d03      	adds	r3, r0, #4
 80050c6:	e7f1      	b.n	80050ac <__exponent+0x60>

080050c8 <_printf_float>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	ed2d 8b02 	vpush	{d8}
 80050d0:	b08d      	sub	sp, #52	; 0x34
 80050d2:	460c      	mov	r4, r1
 80050d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050d8:	4616      	mov	r6, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	4605      	mov	r5, r0
 80050de:	f000 fcb5 	bl	8005a4c <_localeconv_r>
 80050e2:	f8d0 a000 	ldr.w	sl, [r0]
 80050e6:	4650      	mov	r0, sl
 80050e8:	f7fb f8c2 	bl	8000270 <strlen>
 80050ec:	2300      	movs	r3, #0
 80050ee:	930a      	str	r3, [sp, #40]	; 0x28
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	f8d8 3000 	ldr.w	r3, [r8]
 80050f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050fc:	3307      	adds	r3, #7
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	f103 0208 	add.w	r2, r3, #8
 8005106:	f8c8 2000 	str.w	r2, [r8]
 800510a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800510e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005112:	9307      	str	r3, [sp, #28]
 8005114:	f8cd 8018 	str.w	r8, [sp, #24]
 8005118:	ee08 0a10 	vmov	s16, r0
 800511c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005124:	4b9e      	ldr	r3, [pc, #632]	; (80053a0 <_printf_float+0x2d8>)
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	f7fb fcff 	bl	8000b2c <__aeabi_dcmpun>
 800512e:	bb88      	cbnz	r0, 8005194 <_printf_float+0xcc>
 8005130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005134:	4b9a      	ldr	r3, [pc, #616]	; (80053a0 <_printf_float+0x2d8>)
 8005136:	f04f 32ff 	mov.w	r2, #4294967295
 800513a:	f7fb fcd9 	bl	8000af0 <__aeabi_dcmple>
 800513e:	bb48      	cbnz	r0, 8005194 <_printf_float+0xcc>
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	4640      	mov	r0, r8
 8005146:	4649      	mov	r1, r9
 8005148:	f7fb fcc8 	bl	8000adc <__aeabi_dcmplt>
 800514c:	b110      	cbz	r0, 8005154 <_printf_float+0x8c>
 800514e:	232d      	movs	r3, #45	; 0x2d
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005154:	4a93      	ldr	r2, [pc, #588]	; (80053a4 <_printf_float+0x2dc>)
 8005156:	4b94      	ldr	r3, [pc, #592]	; (80053a8 <_printf_float+0x2e0>)
 8005158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800515c:	bf94      	ite	ls
 800515e:	4690      	movls	r8, r2
 8005160:	4698      	movhi	r8, r3
 8005162:	2303      	movs	r3, #3
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	9b05      	ldr	r3, [sp, #20]
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	f04f 0900 	mov.w	r9, #0
 8005172:	9700      	str	r7, [sp, #0]
 8005174:	4633      	mov	r3, r6
 8005176:	aa0b      	add	r2, sp, #44	; 0x2c
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f9da 	bl	8005534 <_printf_common>
 8005180:	3001      	adds	r0, #1
 8005182:	f040 8090 	bne.w	80052a6 <_printf_float+0x1de>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295
 800518a:	b00d      	add	sp, #52	; 0x34
 800518c:	ecbd 8b02 	vpop	{d8}
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb fcc6 	bl	8000b2c <__aeabi_dcmpun>
 80051a0:	b140      	cbz	r0, 80051b4 <_printf_float+0xec>
 80051a2:	464b      	mov	r3, r9
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfbc      	itt	lt
 80051a8:	232d      	movlt	r3, #45	; 0x2d
 80051aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ae:	4a7f      	ldr	r2, [pc, #508]	; (80053ac <_printf_float+0x2e4>)
 80051b0:	4b7f      	ldr	r3, [pc, #508]	; (80053b0 <_printf_float+0x2e8>)
 80051b2:	e7d1      	b.n	8005158 <_printf_float+0x90>
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051ba:	9206      	str	r2, [sp, #24]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	d13f      	bne.n	8005240 <_printf_float+0x178>
 80051c0:	2306      	movs	r3, #6
 80051c2:	6063      	str	r3, [r4, #4]
 80051c4:	9b05      	ldr	r3, [sp, #20]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051cc:	2300      	movs	r3, #0
 80051ce:	9303      	str	r3, [sp, #12]
 80051d0:	ab0a      	add	r3, sp, #40	; 0x28
 80051d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051d6:	ab09      	add	r3, sp, #36	; 0x24
 80051d8:	ec49 8b10 	vmov	d0, r8, r9
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051e4:	4628      	mov	r0, r5
 80051e6:	f7ff fecf 	bl	8004f88 <__cvt>
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051ee:	2b47      	cmp	r3, #71	; 0x47
 80051f0:	4680      	mov	r8, r0
 80051f2:	d108      	bne.n	8005206 <_printf_float+0x13e>
 80051f4:	1cc8      	adds	r0, r1, #3
 80051f6:	db02      	blt.n	80051fe <_printf_float+0x136>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	4299      	cmp	r1, r3
 80051fc:	dd41      	ble.n	8005282 <_printf_float+0x1ba>
 80051fe:	f1ab 0302 	sub.w	r3, fp, #2
 8005202:	fa5f fb83 	uxtb.w	fp, r3
 8005206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800520a:	d820      	bhi.n	800524e <_printf_float+0x186>
 800520c:	3901      	subs	r1, #1
 800520e:	465a      	mov	r2, fp
 8005210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005214:	9109      	str	r1, [sp, #36]	; 0x24
 8005216:	f7ff ff19 	bl	800504c <__exponent>
 800521a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521c:	1813      	adds	r3, r2, r0
 800521e:	2a01      	cmp	r2, #1
 8005220:	4681      	mov	r9, r0
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	dc02      	bgt.n	800522c <_printf_float+0x164>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	07d2      	lsls	r2, r2, #31
 800522a:	d501      	bpl.n	8005230 <_printf_float+0x168>
 800522c:	3301      	adds	r3, #1
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005234:	2b00      	cmp	r3, #0
 8005236:	d09c      	beq.n	8005172 <_printf_float+0xaa>
 8005238:	232d      	movs	r3, #45	; 0x2d
 800523a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523e:	e798      	b.n	8005172 <_printf_float+0xaa>
 8005240:	9a06      	ldr	r2, [sp, #24]
 8005242:	2a47      	cmp	r2, #71	; 0x47
 8005244:	d1be      	bne.n	80051c4 <_printf_float+0xfc>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1bc      	bne.n	80051c4 <_printf_float+0xfc>
 800524a:	2301      	movs	r3, #1
 800524c:	e7b9      	b.n	80051c2 <_printf_float+0xfa>
 800524e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005252:	d118      	bne.n	8005286 <_printf_float+0x1be>
 8005254:	2900      	cmp	r1, #0
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	dd0b      	ble.n	8005272 <_printf_float+0x1aa>
 800525a:	6121      	str	r1, [r4, #16]
 800525c:	b913      	cbnz	r3, 8005264 <_printf_float+0x19c>
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	07d0      	lsls	r0, r2, #31
 8005262:	d502      	bpl.n	800526a <_printf_float+0x1a2>
 8005264:	3301      	adds	r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	6123      	str	r3, [r4, #16]
 800526a:	65a1      	str	r1, [r4, #88]	; 0x58
 800526c:	f04f 0900 	mov.w	r9, #0
 8005270:	e7de      	b.n	8005230 <_printf_float+0x168>
 8005272:	b913      	cbnz	r3, 800527a <_printf_float+0x1b2>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	07d2      	lsls	r2, r2, #31
 8005278:	d501      	bpl.n	800527e <_printf_float+0x1b6>
 800527a:	3302      	adds	r3, #2
 800527c:	e7f4      	b.n	8005268 <_printf_float+0x1a0>
 800527e:	2301      	movs	r3, #1
 8005280:	e7f2      	b.n	8005268 <_printf_float+0x1a0>
 8005282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005288:	4299      	cmp	r1, r3
 800528a:	db05      	blt.n	8005298 <_printf_float+0x1d0>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	6121      	str	r1, [r4, #16]
 8005290:	07d8      	lsls	r0, r3, #31
 8005292:	d5ea      	bpl.n	800526a <_printf_float+0x1a2>
 8005294:	1c4b      	adds	r3, r1, #1
 8005296:	e7e7      	b.n	8005268 <_printf_float+0x1a0>
 8005298:	2900      	cmp	r1, #0
 800529a:	bfd4      	ite	le
 800529c:	f1c1 0202 	rsble	r2, r1, #2
 80052a0:	2201      	movgt	r2, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	e7e0      	b.n	8005268 <_printf_float+0x1a0>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	055a      	lsls	r2, r3, #21
 80052aa:	d407      	bmi.n	80052bc <_printf_float+0x1f4>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	4642      	mov	r2, r8
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	d12c      	bne.n	8005314 <_printf_float+0x24c>
 80052ba:	e764      	b.n	8005186 <_printf_float+0xbe>
 80052bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052c0:	f240 80e0 	bls.w	8005484 <_printf_float+0x3bc>
 80052c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052c8:	2200      	movs	r2, #0
 80052ca:	2300      	movs	r3, #0
 80052cc:	f7fb fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d034      	beq.n	800533e <_printf_float+0x276>
 80052d4:	4a37      	ldr	r2, [pc, #220]	; (80053b4 <_printf_float+0x2ec>)
 80052d6:	2301      	movs	r3, #1
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af51 	beq.w	8005186 <_printf_float+0xbe>
 80052e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e8:	429a      	cmp	r2, r3
 80052ea:	db02      	blt.n	80052f2 <_printf_float+0x22a>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	07d8      	lsls	r0, r3, #31
 80052f0:	d510      	bpl.n	8005314 <_printf_float+0x24c>
 80052f2:	ee18 3a10 	vmov	r3, s16
 80052f6:	4652      	mov	r2, sl
 80052f8:	4631      	mov	r1, r6
 80052fa:	4628      	mov	r0, r5
 80052fc:	47b8      	blx	r7
 80052fe:	3001      	adds	r0, #1
 8005300:	f43f af41 	beq.w	8005186 <_printf_float+0xbe>
 8005304:	f04f 0800 	mov.w	r8, #0
 8005308:	f104 091a 	add.w	r9, r4, #26
 800530c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	4543      	cmp	r3, r8
 8005312:	dc09      	bgt.n	8005328 <_printf_float+0x260>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	079b      	lsls	r3, r3, #30
 8005318:	f100 8107 	bmi.w	800552a <_printf_float+0x462>
 800531c:	68e0      	ldr	r0, [r4, #12]
 800531e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005320:	4298      	cmp	r0, r3
 8005322:	bfb8      	it	lt
 8005324:	4618      	movlt	r0, r3
 8005326:	e730      	b.n	800518a <_printf_float+0xc2>
 8005328:	2301      	movs	r3, #1
 800532a:	464a      	mov	r2, r9
 800532c:	4631      	mov	r1, r6
 800532e:	4628      	mov	r0, r5
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	f43f af27 	beq.w	8005186 <_printf_float+0xbe>
 8005338:	f108 0801 	add.w	r8, r8, #1
 800533c:	e7e6      	b.n	800530c <_printf_float+0x244>
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	dc39      	bgt.n	80053b8 <_printf_float+0x2f0>
 8005344:	4a1b      	ldr	r2, [pc, #108]	; (80053b4 <_printf_float+0x2ec>)
 8005346:	2301      	movs	r3, #1
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	f43f af19 	beq.w	8005186 <_printf_float+0xbe>
 8005354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005358:	4313      	orrs	r3, r2
 800535a:	d102      	bne.n	8005362 <_printf_float+0x29a>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	07d9      	lsls	r1, r3, #31
 8005360:	d5d8      	bpl.n	8005314 <_printf_float+0x24c>
 8005362:	ee18 3a10 	vmov	r3, s16
 8005366:	4652      	mov	r2, sl
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f af09 	beq.w	8005186 <_printf_float+0xbe>
 8005374:	f04f 0900 	mov.w	r9, #0
 8005378:	f104 0a1a 	add.w	sl, r4, #26
 800537c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537e:	425b      	negs	r3, r3
 8005380:	454b      	cmp	r3, r9
 8005382:	dc01      	bgt.n	8005388 <_printf_float+0x2c0>
 8005384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005386:	e792      	b.n	80052ae <_printf_float+0x1e6>
 8005388:	2301      	movs	r3, #1
 800538a:	4652      	mov	r2, sl
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	f43f aef7 	beq.w	8005186 <_printf_float+0xbe>
 8005398:	f109 0901 	add.w	r9, r9, #1
 800539c:	e7ee      	b.n	800537c <_printf_float+0x2b4>
 800539e:	bf00      	nop
 80053a0:	7fefffff 	.word	0x7fefffff
 80053a4:	08007a80 	.word	0x08007a80
 80053a8:	08007a84 	.word	0x08007a84
 80053ac:	08007a88 	.word	0x08007a88
 80053b0:	08007a8c 	.word	0x08007a8c
 80053b4:	08007a90 	.word	0x08007a90
 80053b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053bc:	429a      	cmp	r2, r3
 80053be:	bfa8      	it	ge
 80053c0:	461a      	movge	r2, r3
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	4691      	mov	r9, r2
 80053c6:	dc37      	bgt.n	8005438 <_printf_float+0x370>
 80053c8:	f04f 0b00 	mov.w	fp, #0
 80053cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053d0:	f104 021a 	add.w	r2, r4, #26
 80053d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053d6:	9305      	str	r3, [sp, #20]
 80053d8:	eba3 0309 	sub.w	r3, r3, r9
 80053dc:	455b      	cmp	r3, fp
 80053de:	dc33      	bgt.n	8005448 <_printf_float+0x380>
 80053e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e4:	429a      	cmp	r2, r3
 80053e6:	db3b      	blt.n	8005460 <_printf_float+0x398>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	07da      	lsls	r2, r3, #31
 80053ec:	d438      	bmi.n	8005460 <_printf_float+0x398>
 80053ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80053f2:	eba2 0903 	sub.w	r9, r2, r3
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	4591      	cmp	r9, r2
 80053fc:	bfa8      	it	ge
 80053fe:	4691      	movge	r9, r2
 8005400:	f1b9 0f00 	cmp.w	r9, #0
 8005404:	dc35      	bgt.n	8005472 <_printf_float+0x3aa>
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800540e:	f104 0a1a 	add.w	sl, r4, #26
 8005412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	eba3 0309 	sub.w	r3, r3, r9
 800541c:	4543      	cmp	r3, r8
 800541e:	f77f af79 	ble.w	8005314 <_printf_float+0x24c>
 8005422:	2301      	movs	r3, #1
 8005424:	4652      	mov	r2, sl
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f aeaa 	beq.w	8005186 <_printf_float+0xbe>
 8005432:	f108 0801 	add.w	r8, r8, #1
 8005436:	e7ec      	b.n	8005412 <_printf_float+0x34a>
 8005438:	4613      	mov	r3, r2
 800543a:	4631      	mov	r1, r6
 800543c:	4642      	mov	r2, r8
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	d1c0      	bne.n	80053c8 <_printf_float+0x300>
 8005446:	e69e      	b.n	8005186 <_printf_float+0xbe>
 8005448:	2301      	movs	r3, #1
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	9205      	str	r2, [sp, #20]
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	f43f ae97 	beq.w	8005186 <_printf_float+0xbe>
 8005458:	9a05      	ldr	r2, [sp, #20]
 800545a:	f10b 0b01 	add.w	fp, fp, #1
 800545e:	e7b9      	b.n	80053d4 <_printf_float+0x30c>
 8005460:	ee18 3a10 	vmov	r3, s16
 8005464:	4652      	mov	r2, sl
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	d1be      	bne.n	80053ee <_printf_float+0x326>
 8005470:	e689      	b.n	8005186 <_printf_float+0xbe>
 8005472:	9a05      	ldr	r2, [sp, #20]
 8005474:	464b      	mov	r3, r9
 8005476:	4442      	add	r2, r8
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	d1c1      	bne.n	8005406 <_printf_float+0x33e>
 8005482:	e680      	b.n	8005186 <_printf_float+0xbe>
 8005484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005486:	2a01      	cmp	r2, #1
 8005488:	dc01      	bgt.n	800548e <_printf_float+0x3c6>
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d53a      	bpl.n	8005504 <_printf_float+0x43c>
 800548e:	2301      	movs	r3, #1
 8005490:	4642      	mov	r2, r8
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae74 	beq.w	8005186 <_printf_float+0xbe>
 800549e:	ee18 3a10 	vmov	r3, s16
 80054a2:	4652      	mov	r2, sl
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f ae6b 	beq.w	8005186 <_printf_float+0xbe>
 80054b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80054bc:	f7fb fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c0:	b9d8      	cbnz	r0, 80054fa <_printf_float+0x432>
 80054c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054c6:	f108 0201 	add.w	r2, r8, #1
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	d10e      	bne.n	80054f2 <_printf_float+0x42a>
 80054d4:	e657      	b.n	8005186 <_printf_float+0xbe>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4652      	mov	r2, sl
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	f43f ae50 	beq.w	8005186 <_printf_float+0xbe>
 80054e6:	f108 0801 	add.w	r8, r8, #1
 80054ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ec:	3b01      	subs	r3, #1
 80054ee:	4543      	cmp	r3, r8
 80054f0:	dcf1      	bgt.n	80054d6 <_printf_float+0x40e>
 80054f2:	464b      	mov	r3, r9
 80054f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054f8:	e6da      	b.n	80052b0 <_printf_float+0x1e8>
 80054fa:	f04f 0800 	mov.w	r8, #0
 80054fe:	f104 0a1a 	add.w	sl, r4, #26
 8005502:	e7f2      	b.n	80054ea <_printf_float+0x422>
 8005504:	2301      	movs	r3, #1
 8005506:	4642      	mov	r2, r8
 8005508:	e7df      	b.n	80054ca <_printf_float+0x402>
 800550a:	2301      	movs	r3, #1
 800550c:	464a      	mov	r2, r9
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f ae36 	beq.w	8005186 <_printf_float+0xbe>
 800551a:	f108 0801 	add.w	r8, r8, #1
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005522:	1a5b      	subs	r3, r3, r1
 8005524:	4543      	cmp	r3, r8
 8005526:	dcf0      	bgt.n	800550a <_printf_float+0x442>
 8005528:	e6f8      	b.n	800531c <_printf_float+0x254>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	f104 0919 	add.w	r9, r4, #25
 8005532:	e7f4      	b.n	800551e <_printf_float+0x456>

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4699      	mov	r9, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005544:	4293      	cmp	r3, r2
 8005546:	bfb8      	it	lt
 8005548:	4613      	movlt	r3, r2
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005550:	4607      	mov	r7, r0
 8005552:	460c      	mov	r4, r1
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc26      	bgt.n	80055ca <_printf_common+0x96>
 800557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005580:	1e13      	subs	r3, r2, #0
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d42b      	bmi.n	80055e4 <_printf_common+0xb0>
 800558c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005590:	4649      	mov	r1, r9
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d01e      	beq.n	80055d8 <_printf_common+0xa4>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf02      	ittt	eq
 80055a6:	68e5      	ldreq	r5, [r4, #12]
 80055a8:	6833      	ldreq	r3, [r6, #0]
 80055aa:	1aed      	subeq	r5, r5, r3
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	bf0c      	ite	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	2500      	movne	r5, #0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfc4      	itt	gt
 80055ba:	1a9b      	subgt	r3, r3, r2
 80055bc:	18ed      	addgt	r5, r5, r3
 80055be:	2600      	movs	r6, #0
 80055c0:	341a      	adds	r4, #26
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	d11a      	bne.n	80055fc <_printf_common+0xc8>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e008      	b.n	80055dc <_printf_common+0xa8>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4652      	mov	r2, sl
 80055ce:	4649      	mov	r1, r9
 80055d0:	4638      	mov	r0, r7
 80055d2:	47c0      	blx	r8
 80055d4:	3001      	adds	r0, #1
 80055d6:	d103      	bne.n	80055e0 <_printf_common+0xac>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7c6      	b.n	8005572 <_printf_common+0x3e>
 80055e4:	18e1      	adds	r1, r4, r3
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	2030      	movs	r0, #48	; 0x30
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ee:	4422      	add	r2, r4
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f8:	3302      	adds	r3, #2
 80055fa:	e7c7      	b.n	800558c <_printf_common+0x58>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d0e6      	beq.n	80055d8 <_printf_common+0xa4>
 800560a:	3601      	adds	r6, #1
 800560c:	e7d9      	b.n	80055c2 <_printf_common+0x8e>
	...

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005618:	2f78      	cmp	r7, #120	; 0x78
 800561a:	4691      	mov	r9, r2
 800561c:	4680      	mov	r8, r0
 800561e:	460c      	mov	r4, r1
 8005620:	469a      	mov	sl, r3
 8005622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	; 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d4 	beq.w	80057da <_printf_i+0x1ca>
 8005632:	2f58      	cmp	r7, #88	; 0x58
 8005634:	f000 80c0 	beq.w	80057b8 <_printf_i+0x1a8>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	; (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057c1 	.word	0x080057c1
 8005680:	080056e9 	.word	0x080056e9
 8005684:	0800577b 	.word	0x0800577b
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057e3 	.word	0x080057e3
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e9 	.word	0x080056e9
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	08005783 	.word	0x08005783
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09f      	b.n	80057fc <_printf_i+0x1ec>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	0607      	lsls	r7, r0, #24
 80056c2:	f103 0104 	add.w	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	d501      	bpl.n	80056ce <_printf_i+0xbe>
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <_printf_i+0xc6>
 80056ce:	0646      	lsls	r6, r0, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0xba>
 80056d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	da03      	bge.n	80056e2 <_printf_i+0xd2>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	4276      	negs	r6, r6
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	485a      	ldr	r0, [pc, #360]	; (800584c <_printf_i+0x23c>)
 80056e4:	230a      	movs	r3, #10
 80056e6:	e012      	b.n	800570e <_printf_i+0xfe>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	6029      	str	r1, [r5, #0]
 80056f0:	0605      	lsls	r5, r0, #24
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0xe8>
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0xee>
 80056f8:	0641      	lsls	r1, r0, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0xe4>
 80056fc:	881e      	ldrh	r6, [r3, #0]
 80056fe:	4853      	ldr	r0, [pc, #332]	; (800584c <_printf_i+0x23c>)
 8005700:	2f6f      	cmp	r7, #111	; 0x6f
 8005702:	bf0c      	ite	eq
 8005704:	2308      	moveq	r3, #8
 8005706:	230a      	movne	r3, #10
 8005708:	2100      	movs	r1, #0
 800570a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800570e:	6865      	ldr	r5, [r4, #4]
 8005710:	60a5      	str	r5, [r4, #8]
 8005712:	2d00      	cmp	r5, #0
 8005714:	bfa2      	ittt	ge
 8005716:	6821      	ldrge	r1, [r4, #0]
 8005718:	f021 0104 	bicge.w	r1, r1, #4
 800571c:	6021      	strge	r1, [r4, #0]
 800571e:	b90e      	cbnz	r6, 8005724 <_printf_i+0x114>
 8005720:	2d00      	cmp	r5, #0
 8005722:	d04b      	beq.n	80057bc <_printf_i+0x1ac>
 8005724:	4615      	mov	r5, r2
 8005726:	fbb6 f1f3 	udiv	r1, r6, r3
 800572a:	fb03 6711 	mls	r7, r3, r1, r6
 800572e:	5dc7      	ldrb	r7, [r0, r7]
 8005730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005734:	4637      	mov	r7, r6
 8005736:	42bb      	cmp	r3, r7
 8005738:	460e      	mov	r6, r1
 800573a:	d9f4      	bls.n	8005726 <_printf_i+0x116>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d10b      	bne.n	8005758 <_printf_i+0x148>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07de      	lsls	r6, r3, #31
 8005744:	d508      	bpl.n	8005758 <_printf_i+0x148>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4299      	cmp	r1, r3
 800574c:	bfde      	ittt	le
 800574e:	2330      	movle	r3, #48	; 0x30
 8005750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005758:	1b52      	subs	r2, r2, r5
 800575a:	6122      	str	r2, [r4, #16]
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	464b      	mov	r3, r9
 8005762:	aa03      	add	r2, sp, #12
 8005764:	4621      	mov	r1, r4
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fee4 	bl	8005534 <_printf_common>
 800576c:	3001      	adds	r0, #1
 800576e:	d14a      	bne.n	8005806 <_printf_i+0x1f6>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	b004      	add	sp, #16
 8005776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	4833      	ldr	r0, [pc, #204]	; (8005850 <_printf_i+0x240>)
 8005784:	2778      	movs	r7, #120	; 0x78
 8005786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	6829      	ldr	r1, [r5, #0]
 800578e:	061f      	lsls	r7, r3, #24
 8005790:	f851 6b04 	ldr.w	r6, [r1], #4
 8005794:	d402      	bmi.n	800579c <_printf_i+0x18c>
 8005796:	065f      	lsls	r7, r3, #25
 8005798:	bf48      	it	mi
 800579a:	b2b6      	uxthmi	r6, r6
 800579c:	07df      	lsls	r7, r3, #31
 800579e:	bf48      	it	mi
 80057a0:	f043 0320 	orrmi.w	r3, r3, #32
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	bf48      	it	mi
 80057a8:	6023      	strmi	r3, [r4, #0]
 80057aa:	b91e      	cbnz	r6, 80057b4 <_printf_i+0x1a4>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f023 0320 	bic.w	r3, r3, #32
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	2310      	movs	r3, #16
 80057b6:	e7a7      	b.n	8005708 <_printf_i+0xf8>
 80057b8:	4824      	ldr	r0, [pc, #144]	; (800584c <_printf_i+0x23c>)
 80057ba:	e7e4      	b.n	8005786 <_printf_i+0x176>
 80057bc:	4615      	mov	r5, r2
 80057be:	e7bd      	b.n	800573c <_printf_i+0x12c>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	6826      	ldr	r6, [r4, #0]
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6028      	str	r0, [r5, #0]
 80057ca:	0635      	lsls	r5, r6, #24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0x1c4>
 80057d0:	6019      	str	r1, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0x1ca>
 80057d4:	0670      	lsls	r0, r6, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0x1c0>
 80057d8:	8019      	strh	r1, [r3, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	4615      	mov	r5, r2
 80057e0:	e7bc      	b.n	800575c <_printf_i+0x14c>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	602a      	str	r2, [r5, #0]
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	2100      	movs	r1, #0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7fa fcee 	bl	80001d0 <memchr>
 80057f4:	b108      	cbz	r0, 80057fa <_printf_i+0x1ea>
 80057f6:	1b40      	subs	r0, r0, r5
 80057f8:	6060      	str	r0, [r4, #4]
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	2300      	movs	r3, #0
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	e7aa      	b.n	800575c <_printf_i+0x14c>
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	462a      	mov	r2, r5
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	47d0      	blx	sl
 8005810:	3001      	adds	r0, #1
 8005812:	d0ad      	beq.n	8005770 <_printf_i+0x160>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	079b      	lsls	r3, r3, #30
 8005818:	d413      	bmi.n	8005842 <_printf_i+0x232>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	4298      	cmp	r0, r3
 8005820:	bfb8      	it	lt
 8005822:	4618      	movlt	r0, r3
 8005824:	e7a6      	b.n	8005774 <_printf_i+0x164>
 8005826:	2301      	movs	r3, #1
 8005828:	4632      	mov	r2, r6
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d09d      	beq.n	8005770 <_printf_i+0x160>
 8005834:	3501      	adds	r5, #1
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	9903      	ldr	r1, [sp, #12]
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	42ab      	cmp	r3, r5
 800583e:	dcf2      	bgt.n	8005826 <_printf_i+0x216>
 8005840:	e7eb      	b.n	800581a <_printf_i+0x20a>
 8005842:	2500      	movs	r5, #0
 8005844:	f104 0619 	add.w	r6, r4, #25
 8005848:	e7f5      	b.n	8005836 <_printf_i+0x226>
 800584a:	bf00      	nop
 800584c:	08007a92 	.word	0x08007a92
 8005850:	08007aa3 	.word	0x08007aa3

08005854 <std>:
 8005854:	2300      	movs	r3, #0
 8005856:	b510      	push	{r4, lr}
 8005858:	4604      	mov	r4, r0
 800585a:	e9c0 3300 	strd	r3, r3, [r0]
 800585e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005862:	6083      	str	r3, [r0, #8]
 8005864:	8181      	strh	r1, [r0, #12]
 8005866:	6643      	str	r3, [r0, #100]	; 0x64
 8005868:	81c2      	strh	r2, [r0, #14]
 800586a:	6183      	str	r3, [r0, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	2208      	movs	r2, #8
 8005870:	305c      	adds	r0, #92	; 0x5c
 8005872:	f000 f8e2 	bl	8005a3a <memset>
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <std+0x38>)
 8005878:	6263      	str	r3, [r4, #36]	; 0x24
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <std+0x3c>)
 800587c:	62a3      	str	r3, [r4, #40]	; 0x28
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x40>)
 8005880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x44>)
 8005884:	6224      	str	r4, [r4, #32]
 8005886:	6323      	str	r3, [r4, #48]	; 0x30
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	080059b5 	.word	0x080059b5
 8005890:	080059d7 	.word	0x080059d7
 8005894:	08005a0f 	.word	0x08005a0f
 8005898:	08005a33 	.word	0x08005a33

0800589c <stdio_exit_handler>:
 800589c:	4a02      	ldr	r2, [pc, #8]	; (80058a8 <stdio_exit_handler+0xc>)
 800589e:	4903      	ldr	r1, [pc, #12]	; (80058ac <stdio_exit_handler+0x10>)
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <stdio_exit_handler+0x14>)
 80058a2:	f000 b869 	b.w	8005978 <_fwalk_sglue>
 80058a6:	bf00      	nop
 80058a8:	20000014 	.word	0x20000014
 80058ac:	08007251 	.word	0x08007251
 80058b0:	20000020 	.word	0x20000020

080058b4 <cleanup_stdio>:
 80058b4:	6841      	ldr	r1, [r0, #4]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <cleanup_stdio+0x34>)
 80058b8:	4299      	cmp	r1, r3
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	d001      	beq.n	80058c4 <cleanup_stdio+0x10>
 80058c0:	f001 fcc6 	bl	8007250 <_fflush_r>
 80058c4:	68a1      	ldr	r1, [r4, #8]
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <cleanup_stdio+0x38>)
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <cleanup_stdio+0x1e>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f001 fcbf 	bl	8007250 <_fflush_r>
 80058d2:	68e1      	ldr	r1, [r4, #12]
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <cleanup_stdio+0x3c>)
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d004      	beq.n	80058e4 <cleanup_stdio+0x30>
 80058da:	4620      	mov	r0, r4
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f001 bcb6 	b.w	8007250 <_fflush_r>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	200004ec 	.word	0x200004ec
 80058ec:	20000554 	.word	0x20000554
 80058f0:	200005bc 	.word	0x200005bc

080058f4 <global_stdio_init.part.0>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <global_stdio_init.part.0+0x30>)
 80058f8:	4c0b      	ldr	r4, [pc, #44]	; (8005928 <global_stdio_init.part.0+0x34>)
 80058fa:	4a0c      	ldr	r2, [pc, #48]	; (800592c <global_stdio_init.part.0+0x38>)
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4620      	mov	r0, r4
 8005900:	2200      	movs	r2, #0
 8005902:	2104      	movs	r1, #4
 8005904:	f7ff ffa6 	bl	8005854 <std>
 8005908:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800590c:	2201      	movs	r2, #1
 800590e:	2109      	movs	r1, #9
 8005910:	f7ff ffa0 	bl	8005854 <std>
 8005914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005918:	2202      	movs	r2, #2
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591e:	2112      	movs	r1, #18
 8005920:	f7ff bf98 	b.w	8005854 <std>
 8005924:	20000624 	.word	0x20000624
 8005928:	200004ec 	.word	0x200004ec
 800592c:	0800589d 	.word	0x0800589d

08005930 <__sfp_lock_acquire>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__sfp_lock_acquire+0x8>)
 8005932:	f000 b8ff 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	2000062d 	.word	0x2000062d

0800593c <__sfp_lock_release>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__sfp_lock_release+0x8>)
 800593e:	f000 b8fa 	b.w	8005b36 <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	2000062d 	.word	0x2000062d

08005948 <__sinit>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	f7ff fff0 	bl	8005930 <__sfp_lock_acquire>
 8005950:	6a23      	ldr	r3, [r4, #32]
 8005952:	b11b      	cbz	r3, 800595c <__sinit+0x14>
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f7ff bff0 	b.w	800593c <__sfp_lock_release>
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <__sinit+0x28>)
 800595e:	6223      	str	r3, [r4, #32]
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <__sinit+0x2c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f5      	bne.n	8005954 <__sinit+0xc>
 8005968:	f7ff ffc4 	bl	80058f4 <global_stdio_init.part.0>
 800596c:	e7f2      	b.n	8005954 <__sinit+0xc>
 800596e:	bf00      	nop
 8005970:	080058b5 	.word	0x080058b5
 8005974:	20000624 	.word	0x20000624

08005978 <_fwalk_sglue>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4607      	mov	r7, r0
 800597e:	4688      	mov	r8, r1
 8005980:	4614      	mov	r4, r2
 8005982:	2600      	movs	r6, #0
 8005984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005988:	f1b9 0901 	subs.w	r9, r9, #1
 800598c:	d505      	bpl.n	800599a <_fwalk_sglue+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	2c00      	cmp	r4, #0
 8005992:	d1f7      	bne.n	8005984 <_fwalk_sglue+0xc>
 8005994:	4630      	mov	r0, r6
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_sglue+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_sglue+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	; 0x68
 80059b2:	e7e9      	b.n	8005988 <_fwalk_sglue+0x10>

080059b4 <__sread>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	460c      	mov	r4, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f86c 	bl	8005a98 <_read_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	bfab      	itete	ge
 80059c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c6:	89a3      	ldrhlt	r3, [r4, #12]
 80059c8:	181b      	addge	r3, r3, r0
 80059ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ce:	bfac      	ite	ge
 80059d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d2:	81a3      	strhlt	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__swrite>:
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	461f      	mov	r7, r3
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d505      	bpl.n	80059f4 <__swrite+0x1e>
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2302      	movs	r3, #2
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f840 	bl	8005a74 <_lseek_r>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f000 b857 	b.w	8005abc <_write_r>

08005a0e <__sseek>:
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	460c      	mov	r4, r1
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 f82d 	bl	8005a74 <_lseek_r>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	bf15      	itete	ne
 8005a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2a:	81a3      	strheq	r3, [r4, #12]
 8005a2c:	bf18      	it	ne
 8005a2e:	81a3      	strhne	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__sclose>:
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 b80d 	b.w	8005a54 <_close_r>

08005a3a <memset>:
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d100      	bne.n	8005a44 <memset+0xa>
 8005a42:	4770      	bx	lr
 8005a44:	f803 1b01 	strb.w	r1, [r3], #1
 8005a48:	e7f9      	b.n	8005a3e <memset+0x4>
	...

08005a4c <_localeconv_r>:
 8005a4c:	4800      	ldr	r0, [pc, #0]	; (8005a50 <_localeconv_r+0x4>)
 8005a4e:	4770      	bx	lr
 8005a50:	20000160 	.word	0x20000160

08005a54 <_close_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4d06      	ldr	r5, [pc, #24]	; (8005a70 <_close_r+0x1c>)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fb fe0f 	bl	8001682 <_close>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_close_r+0x1a>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_close_r+0x1a>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	20000628 	.word	0x20000628

08005a74 <_lseek_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_lseek_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fb fe24 	bl	80016d0 <_lseek>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_lseek_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_lseek_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	20000628 	.word	0x20000628

08005a98 <_read_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_read_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fb fdb2 	bl	8001610 <_read>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_read_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_read_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20000628 	.word	0x20000628

08005abc <_write_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	; (8005adc <_write_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb fdbd 	bl	800164a <_write>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_write_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_write_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	20000628 	.word	0x20000628

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	; (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000006c 	.word	0x2000006c

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f001 ff8e 	bl	8007a20 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08007dfc 	.word	0x08007dfc
 8005b28:	08007dfc 	.word	0x08007dfc
 8005b2c:	08007dfc 	.word	0x08007dfc
 8005b30:	08007e00 	.word	0x08007e00

08005b34 <__retarget_lock_acquire_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_release_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <memcpy>:
 8005b38:	440a      	add	r2, r1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b40:	d100      	bne.n	8005b44 <memcpy+0xc>
 8005b42:	4770      	bx	lr
 8005b44:	b510      	push	{r4, lr}
 8005b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4e:	4291      	cmp	r1, r2
 8005b50:	d1f9      	bne.n	8005b46 <memcpy+0xe>
 8005b52:	bd10      	pop	{r4, pc}

08005b54 <quorem>:
 8005b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	6903      	ldr	r3, [r0, #16]
 8005b5a:	690c      	ldr	r4, [r1, #16]
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	4607      	mov	r7, r0
 8005b60:	db7e      	blt.n	8005c60 <quorem+0x10c>
 8005b62:	3c01      	subs	r4, #1
 8005b64:	f101 0814 	add.w	r8, r1, #20
 8005b68:	f100 0514 	add.w	r5, r0, #20
 8005b6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b86:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b8a:	d331      	bcc.n	8005bf0 <quorem+0x9c>
 8005b8c:	f04f 0e00 	mov.w	lr, #0
 8005b90:	4640      	mov	r0, r8
 8005b92:	46ac      	mov	ip, r5
 8005b94:	46f2      	mov	sl, lr
 8005b96:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b9a:	b293      	uxth	r3, r2
 8005b9c:	fb06 e303 	mla	r3, r6, r3, lr
 8005ba0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ba4:	0c1a      	lsrs	r2, r3, #16
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bac:	f8dc a000 	ldr.w	sl, [ip]
 8005bb0:	fa13 f38a 	uxtah	r3, r3, sl
 8005bb4:	fb06 220e 	mla	r2, r6, lr, r2
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	9b00      	ldr	r3, [sp, #0]
 8005bbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bca:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bce:	4581      	cmp	r9, r0
 8005bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd4:	f84c 3b04 	str.w	r3, [ip], #4
 8005bd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bdc:	d2db      	bcs.n	8005b96 <quorem+0x42>
 8005bde:	f855 300b 	ldr.w	r3, [r5, fp]
 8005be2:	b92b      	cbnz	r3, 8005bf0 <quorem+0x9c>
 8005be4:	9b01      	ldr	r3, [sp, #4]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	429d      	cmp	r5, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	d32c      	bcc.n	8005c48 <quorem+0xf4>
 8005bee:	613c      	str	r4, [r7, #16]
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f001 f9a7 	bl	8006f44 <__mcmp>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	db22      	blt.n	8005c40 <quorem+0xec>
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c04:	f8d1 c000 	ldr.w	ip, [r1]
 8005c08:	b293      	uxth	r3, r2
 8005c0a:	1ac3      	subs	r3, r0, r3
 8005c0c:	0c12      	lsrs	r2, r2, #16
 8005c0e:	fa13 f38c 	uxtah	r3, r3, ip
 8005c12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c20:	45c1      	cmp	r9, r8
 8005c22:	f841 3b04 	str.w	r3, [r1], #4
 8005c26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c2a:	d2e9      	bcs.n	8005c00 <quorem+0xac>
 8005c2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c34:	b922      	cbnz	r2, 8005c40 <quorem+0xec>
 8005c36:	3b04      	subs	r3, #4
 8005c38:	429d      	cmp	r5, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	d30a      	bcc.n	8005c54 <quorem+0x100>
 8005c3e:	613c      	str	r4, [r7, #16]
 8005c40:	4630      	mov	r0, r6
 8005c42:	b003      	add	sp, #12
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d1ce      	bne.n	8005bee <quorem+0x9a>
 8005c50:	3c01      	subs	r4, #1
 8005c52:	e7c9      	b.n	8005be8 <quorem+0x94>
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	3b04      	subs	r3, #4
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d1f0      	bne.n	8005c3e <quorem+0xea>
 8005c5c:	3c01      	subs	r4, #1
 8005c5e:	e7eb      	b.n	8005c38 <quorem+0xe4>
 8005c60:	2000      	movs	r0, #0
 8005c62:	e7ee      	b.n	8005c42 <quorem+0xee>
 8005c64:	0000      	movs	r0, r0
	...

08005c68 <_dtoa_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	ed2d 8b04 	vpush	{d8-d9}
 8005c70:	69c5      	ldr	r5, [r0, #28]
 8005c72:	b093      	sub	sp, #76	; 0x4c
 8005c74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c78:	ec57 6b10 	vmov	r6, r7, d0
 8005c7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c80:	9107      	str	r1, [sp, #28]
 8005c82:	4604      	mov	r4, r0
 8005c84:	920a      	str	r2, [sp, #40]	; 0x28
 8005c86:	930d      	str	r3, [sp, #52]	; 0x34
 8005c88:	b975      	cbnz	r5, 8005ca8 <_dtoa_r+0x40>
 8005c8a:	2010      	movs	r0, #16
 8005c8c:	f000 fe2a 	bl	80068e4 <malloc>
 8005c90:	4602      	mov	r2, r0
 8005c92:	61e0      	str	r0, [r4, #28]
 8005c94:	b920      	cbnz	r0, 8005ca0 <_dtoa_r+0x38>
 8005c96:	4bae      	ldr	r3, [pc, #696]	; (8005f50 <_dtoa_r+0x2e8>)
 8005c98:	21ef      	movs	r1, #239	; 0xef
 8005c9a:	48ae      	ldr	r0, [pc, #696]	; (8005f54 <_dtoa_r+0x2ec>)
 8005c9c:	f001 fb10 	bl	80072c0 <__assert_func>
 8005ca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ca4:	6005      	str	r5, [r0, #0]
 8005ca6:	60c5      	str	r5, [r0, #12]
 8005ca8:	69e3      	ldr	r3, [r4, #28]
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	b151      	cbz	r1, 8005cc4 <_dtoa_r+0x5c>
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	604a      	str	r2, [r1, #4]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4093      	lsls	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 ff07 	bl	8006acc <_Bfree>
 8005cbe:	69e3      	ldr	r3, [r4, #28]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	1e3b      	subs	r3, r7, #0
 8005cc6:	bfbb      	ittet	lt
 8005cc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	9303      	strlt	r3, [sp, #12]
 8005cce:	2300      	movge	r3, #0
 8005cd0:	2201      	movlt	r2, #1
 8005cd2:	bfac      	ite	ge
 8005cd4:	f8c8 3000 	strge.w	r3, [r8]
 8005cd8:	f8c8 2000 	strlt.w	r2, [r8]
 8005cdc:	4b9e      	ldr	r3, [pc, #632]	; (8005f58 <_dtoa_r+0x2f0>)
 8005cde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ce2:	ea33 0308 	bics.w	r3, r3, r8
 8005ce6:	d11b      	bne.n	8005d20 <_dtoa_r+0xb8>
 8005ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cea:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cf4:	4333      	orrs	r3, r6
 8005cf6:	f000 8593 	beq.w	8006820 <_dtoa_r+0xbb8>
 8005cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cfc:	b963      	cbnz	r3, 8005d18 <_dtoa_r+0xb0>
 8005cfe:	4b97      	ldr	r3, [pc, #604]	; (8005f5c <_dtoa_r+0x2f4>)
 8005d00:	e027      	b.n	8005d52 <_dtoa_r+0xea>
 8005d02:	4b97      	ldr	r3, [pc, #604]	; (8005f60 <_dtoa_r+0x2f8>)
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	9800      	ldr	r0, [sp, #0]
 8005d0e:	b013      	add	sp, #76	; 0x4c
 8005d10:	ecbd 8b04 	vpop	{d8-d9}
 8005d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d18:	4b90      	ldr	r3, [pc, #576]	; (8005f5c <_dtoa_r+0x2f4>)
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	3303      	adds	r3, #3
 8005d1e:	e7f3      	b.n	8005d08 <_dtoa_r+0xa0>
 8005d20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d24:	2200      	movs	r2, #0
 8005d26:	ec51 0b17 	vmov	r0, r1, d7
 8005d2a:	eeb0 8a47 	vmov.f32	s16, s14
 8005d2e:	eef0 8a67 	vmov.f32	s17, s15
 8005d32:	2300      	movs	r3, #0
 8005d34:	f7fa fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d38:	4681      	mov	r9, r0
 8005d3a:	b160      	cbz	r0, 8005d56 <_dtoa_r+0xee>
 8005d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d3e:	2301      	movs	r3, #1
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8568 	beq.w	800681a <_dtoa_r+0xbb2>
 8005d4a:	4b86      	ldr	r3, [pc, #536]	; (8005f64 <_dtoa_r+0x2fc>)
 8005d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	e7da      	b.n	8005d0c <_dtoa_r+0xa4>
 8005d56:	aa10      	add	r2, sp, #64	; 0x40
 8005d58:	a911      	add	r1, sp, #68	; 0x44
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8005d60:	eef0 0a68 	vmov.f32	s1, s17
 8005d64:	f001 f994 	bl	8007090 <__d2b>
 8005d68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d07f      	beq.n	8005e72 <_dtoa_r+0x20a>
 8005d72:	ee18 3a90 	vmov	r3, s17
 8005d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005d7e:	ec51 0b18 	vmov	r0, r1, d8
 8005d82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005d8e:	4619      	mov	r1, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b75      	ldr	r3, [pc, #468]	; (8005f68 <_dtoa_r+0x300>)
 8005d94:	f7fa fa78 	bl	8000288 <__aeabi_dsub>
 8005d98:	a367      	add	r3, pc, #412	; (adr r3, 8005f38 <_dtoa_r+0x2d0>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fc2b 	bl	80005f8 <__aeabi_dmul>
 8005da2:	a367      	add	r3, pc, #412	; (adr r3, 8005f40 <_dtoa_r+0x2d8>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	f7fa fa70 	bl	800028c <__adddf3>
 8005dac:	4606      	mov	r6, r0
 8005dae:	4628      	mov	r0, r5
 8005db0:	460f      	mov	r7, r1
 8005db2:	f7fa fbb7 	bl	8000524 <__aeabi_i2d>
 8005db6:	a364      	add	r3, pc, #400	; (adr r3, 8005f48 <_dtoa_r+0x2e0>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fc1c 	bl	80005f8 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fa60 	bl	800028c <__adddf3>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	460f      	mov	r7, r1
 8005dd0:	f7fa fec2 	bl	8000b58 <__aeabi_d2iz>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4683      	mov	fp, r0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fe7d 	bl	8000adc <__aeabi_dcmplt>
 8005de2:	b148      	cbz	r0, 8005df8 <_dtoa_r+0x190>
 8005de4:	4658      	mov	r0, fp
 8005de6:	f7fa fb9d 	bl	8000524 <__aeabi_i2d>
 8005dea:	4632      	mov	r2, r6
 8005dec:	463b      	mov	r3, r7
 8005dee:	f7fa fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df2:	b908      	cbnz	r0, 8005df8 <_dtoa_r+0x190>
 8005df4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005df8:	f1bb 0f16 	cmp.w	fp, #22
 8005dfc:	d857      	bhi.n	8005eae <_dtoa_r+0x246>
 8005dfe:	4b5b      	ldr	r3, [pc, #364]	; (8005f6c <_dtoa_r+0x304>)
 8005e00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	ec51 0b18 	vmov	r0, r1, d8
 8005e0c:	f7fa fe66 	bl	8000adc <__aeabi_dcmplt>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d04e      	beq.n	8005eb2 <_dtoa_r+0x24a>
 8005e14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e18:	2300      	movs	r3, #0
 8005e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e1e:	1b5b      	subs	r3, r3, r5
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	bf45      	ittet	mi
 8005e24:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e28:	9305      	strmi	r3, [sp, #20]
 8005e2a:	2300      	movpl	r3, #0
 8005e2c:	2300      	movmi	r3, #0
 8005e2e:	9206      	str	r2, [sp, #24]
 8005e30:	bf54      	ite	pl
 8005e32:	9305      	strpl	r3, [sp, #20]
 8005e34:	9306      	strmi	r3, [sp, #24]
 8005e36:	f1bb 0f00 	cmp.w	fp, #0
 8005e3a:	db3c      	blt.n	8005eb6 <_dtoa_r+0x24e>
 8005e3c:	9b06      	ldr	r3, [sp, #24]
 8005e3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e42:	445b      	add	r3, fp
 8005e44:	9306      	str	r3, [sp, #24]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	9b07      	ldr	r3, [sp, #28]
 8005e4c:	2b09      	cmp	r3, #9
 8005e4e:	d868      	bhi.n	8005f22 <_dtoa_r+0x2ba>
 8005e50:	2b05      	cmp	r3, #5
 8005e52:	bfc4      	itt	gt
 8005e54:	3b04      	subgt	r3, #4
 8005e56:	9307      	strgt	r3, [sp, #28]
 8005e58:	9b07      	ldr	r3, [sp, #28]
 8005e5a:	f1a3 0302 	sub.w	r3, r3, #2
 8005e5e:	bfcc      	ite	gt
 8005e60:	2500      	movgt	r5, #0
 8005e62:	2501      	movle	r5, #1
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	f200 8085 	bhi.w	8005f74 <_dtoa_r+0x30c>
 8005e6a:	e8df f003 	tbb	[pc, r3]
 8005e6e:	3b2e      	.short	0x3b2e
 8005e70:	5839      	.short	0x5839
 8005e72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e76:	441d      	add	r5, r3
 8005e78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	bfc1      	itttt	gt
 8005e80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e84:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005e8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005e90:	bfd6      	itet	le
 8005e92:	f1c3 0320 	rsble	r3, r3, #32
 8005e96:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e9a:	fa06 f003 	lslle.w	r0, r6, r3
 8005e9e:	f7fa fb31 	bl	8000504 <__aeabi_ui2d>
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ea8:	3d01      	subs	r5, #1
 8005eaa:	920e      	str	r2, [sp, #56]	; 0x38
 8005eac:	e76f      	b.n	8005d8e <_dtoa_r+0x126>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e7b3      	b.n	8005e1a <_dtoa_r+0x1b2>
 8005eb2:	900c      	str	r0, [sp, #48]	; 0x30
 8005eb4:	e7b2      	b.n	8005e1c <_dtoa_r+0x1b4>
 8005eb6:	9b05      	ldr	r3, [sp, #20]
 8005eb8:	eba3 030b 	sub.w	r3, r3, fp
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	f1cb 0300 	rsb	r3, fp, #0
 8005ec2:	9308      	str	r3, [sp, #32]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec8:	e7bf      	b.n	8005e4a <_dtoa_r+0x1e2>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dc52      	bgt.n	8005f7a <_dtoa_r+0x312>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	461a      	mov	r2, r3
 8005edc:	920a      	str	r2, [sp, #40]	; 0x28
 8005ede:	e00b      	b.n	8005ef8 <_dtoa_r+0x290>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e7f3      	b.n	8005ecc <_dtoa_r+0x264>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eea:	445b      	add	r3, fp
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	bfb8      	it	lt
 8005ef6:	2301      	movlt	r3, #1
 8005ef8:	69e0      	ldr	r0, [r4, #28]
 8005efa:	2100      	movs	r1, #0
 8005efc:	2204      	movs	r2, #4
 8005efe:	f102 0614 	add.w	r6, r2, #20
 8005f02:	429e      	cmp	r6, r3
 8005f04:	d93d      	bls.n	8005f82 <_dtoa_r+0x31a>
 8005f06:	6041      	str	r1, [r0, #4]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fd9f 	bl	8006a4c <_Balloc>
 8005f0e:	9000      	str	r0, [sp, #0]
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d139      	bne.n	8005f88 <_dtoa_r+0x320>
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <_dtoa_r+0x308>)
 8005f16:	4602      	mov	r2, r0
 8005f18:	f240 11af 	movw	r1, #431	; 0x1af
 8005f1c:	e6bd      	b.n	8005c9a <_dtoa_r+0x32>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7e1      	b.n	8005ee6 <_dtoa_r+0x27e>
 8005f22:	2501      	movs	r5, #1
 8005f24:	2300      	movs	r3, #0
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	9509      	str	r5, [sp, #36]	; 0x24
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	2200      	movs	r2, #0
 8005f34:	2312      	movs	r3, #18
 8005f36:	e7d1      	b.n	8005edc <_dtoa_r+0x274>
 8005f38:	636f4361 	.word	0x636f4361
 8005f3c:	3fd287a7 	.word	0x3fd287a7
 8005f40:	8b60c8b3 	.word	0x8b60c8b3
 8005f44:	3fc68a28 	.word	0x3fc68a28
 8005f48:	509f79fb 	.word	0x509f79fb
 8005f4c:	3fd34413 	.word	0x3fd34413
 8005f50:	08007ac1 	.word	0x08007ac1
 8005f54:	08007ad8 	.word	0x08007ad8
 8005f58:	7ff00000 	.word	0x7ff00000
 8005f5c:	08007abd 	.word	0x08007abd
 8005f60:	08007ab4 	.word	0x08007ab4
 8005f64:	08007a91 	.word	0x08007a91
 8005f68:	3ff80000 	.word	0x3ff80000
 8005f6c:	08007bc8 	.word	0x08007bc8
 8005f70:	08007b30 	.word	0x08007b30
 8005f74:	2301      	movs	r3, #1
 8005f76:	9309      	str	r3, [sp, #36]	; 0x24
 8005f78:	e7d7      	b.n	8005f2a <_dtoa_r+0x2c2>
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	e7ba      	b.n	8005ef8 <_dtoa_r+0x290>
 8005f82:	3101      	adds	r1, #1
 8005f84:	0052      	lsls	r2, r2, #1
 8005f86:	e7ba      	b.n	8005efe <_dtoa_r+0x296>
 8005f88:	69e3      	ldr	r3, [r4, #28]
 8005f8a:	9a00      	ldr	r2, [sp, #0]
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	9b04      	ldr	r3, [sp, #16]
 8005f90:	2b0e      	cmp	r3, #14
 8005f92:	f200 80a8 	bhi.w	80060e6 <_dtoa_r+0x47e>
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	f000 80a5 	beq.w	80060e6 <_dtoa_r+0x47e>
 8005f9c:	f1bb 0f00 	cmp.w	fp, #0
 8005fa0:	dd38      	ble.n	8006014 <_dtoa_r+0x3ac>
 8005fa2:	4bc0      	ldr	r3, [pc, #768]	; (80062a4 <_dtoa_r+0x63c>)
 8005fa4:	f00b 020f 	and.w	r2, fp, #15
 8005fa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005fb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005fb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005fb8:	d019      	beq.n	8005fee <_dtoa_r+0x386>
 8005fba:	4bbb      	ldr	r3, [pc, #748]	; (80062a8 <_dtoa_r+0x640>)
 8005fbc:	ec51 0b18 	vmov	r0, r1, d8
 8005fc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fc4:	f7fa fc42 	bl	800084c <__aeabi_ddiv>
 8005fc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fcc:	f008 080f 	and.w	r8, r8, #15
 8005fd0:	2503      	movs	r5, #3
 8005fd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062a8 <_dtoa_r+0x640>
 8005fd6:	f1b8 0f00 	cmp.w	r8, #0
 8005fda:	d10a      	bne.n	8005ff2 <_dtoa_r+0x38a>
 8005fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	f7fa fc32 	bl	800084c <__aeabi_ddiv>
 8005fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fec:	e02b      	b.n	8006046 <_dtoa_r+0x3de>
 8005fee:	2502      	movs	r5, #2
 8005ff0:	e7ef      	b.n	8005fd2 <_dtoa_r+0x36a>
 8005ff2:	f018 0f01 	tst.w	r8, #1
 8005ff6:	d008      	beq.n	800600a <_dtoa_r+0x3a2>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	3501      	adds	r5, #1
 8006006:	4606      	mov	r6, r0
 8006008:	460f      	mov	r7, r1
 800600a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800600e:	f109 0908 	add.w	r9, r9, #8
 8006012:	e7e0      	b.n	8005fd6 <_dtoa_r+0x36e>
 8006014:	f000 809f 	beq.w	8006156 <_dtoa_r+0x4ee>
 8006018:	f1cb 0600 	rsb	r6, fp, #0
 800601c:	4ba1      	ldr	r3, [pc, #644]	; (80062a4 <_dtoa_r+0x63c>)
 800601e:	4fa2      	ldr	r7, [pc, #648]	; (80062a8 <_dtoa_r+0x640>)
 8006020:	f006 020f 	and.w	r2, r6, #15
 8006024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	ec51 0b18 	vmov	r0, r1, d8
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006038:	1136      	asrs	r6, r6, #4
 800603a:	2300      	movs	r3, #0
 800603c:	2502      	movs	r5, #2
 800603e:	2e00      	cmp	r6, #0
 8006040:	d17e      	bne.n	8006140 <_dtoa_r+0x4d8>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1d0      	bne.n	8005fe8 <_dtoa_r+0x380>
 8006046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006048:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8084 	beq.w	800615a <_dtoa_r+0x4f2>
 8006052:	4b96      	ldr	r3, [pc, #600]	; (80062ac <_dtoa_r+0x644>)
 8006054:	2200      	movs	r2, #0
 8006056:	4640      	mov	r0, r8
 8006058:	4649      	mov	r1, r9
 800605a:	f7fa fd3f 	bl	8000adc <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d07b      	beq.n	800615a <_dtoa_r+0x4f2>
 8006062:	9b04      	ldr	r3, [sp, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d078      	beq.n	800615a <_dtoa_r+0x4f2>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dd39      	ble.n	80060e2 <_dtoa_r+0x47a>
 800606e:	4b90      	ldr	r3, [pc, #576]	; (80062b0 <_dtoa_r+0x648>)
 8006070:	2200      	movs	r2, #0
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa fabf 	bl	80005f8 <__aeabi_dmul>
 800607a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607e:	9e01      	ldr	r6, [sp, #4]
 8006080:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006084:	3501      	adds	r5, #1
 8006086:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800608a:	4628      	mov	r0, r5
 800608c:	f7fa fa4a 	bl	8000524 <__aeabi_i2d>
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	4b86      	ldr	r3, [pc, #536]	; (80062b4 <_dtoa_r+0x64c>)
 800609a:	2200      	movs	r2, #0
 800609c:	f7fa f8f6 	bl	800028c <__adddf3>
 80060a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d158      	bne.n	8006160 <_dtoa_r+0x4f8>
 80060ae:	4b82      	ldr	r3, [pc, #520]	; (80062b8 <_dtoa_r+0x650>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa f8e7 	bl	8000288 <__aeabi_dsub>
 80060ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	f7fa fd29 	bl	8000b18 <__aeabi_dcmpgt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f040 8296 	bne.w	80065f8 <_dtoa_r+0x990>
 80060cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060d0:	4640      	mov	r0, r8
 80060d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060d6:	4649      	mov	r1, r9
 80060d8:	f7fa fd00 	bl	8000adc <__aeabi_dcmplt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	f040 8289 	bne.w	80065f4 <_dtoa_r+0x98c>
 80060e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80060e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f2c0 814e 	blt.w	800638a <_dtoa_r+0x722>
 80060ee:	f1bb 0f0e 	cmp.w	fp, #14
 80060f2:	f300 814a 	bgt.w	800638a <_dtoa_r+0x722>
 80060f6:	4b6b      	ldr	r3, [pc, #428]	; (80062a4 <_dtoa_r+0x63c>)
 80060f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	f280 80dc 	bge.w	80062c0 <_dtoa_r+0x658>
 8006108:	9b04      	ldr	r3, [sp, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f300 80d8 	bgt.w	80062c0 <_dtoa_r+0x658>
 8006110:	f040 826f 	bne.w	80065f2 <_dtoa_r+0x98a>
 8006114:	4b68      	ldr	r3, [pc, #416]	; (80062b8 <_dtoa_r+0x650>)
 8006116:	2200      	movs	r2, #0
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006124:	f7fa fcee 	bl	8000b04 <__aeabi_dcmpge>
 8006128:	9e04      	ldr	r6, [sp, #16]
 800612a:	4637      	mov	r7, r6
 800612c:	2800      	cmp	r0, #0
 800612e:	f040 8245 	bne.w	80065bc <_dtoa_r+0x954>
 8006132:	9d00      	ldr	r5, [sp, #0]
 8006134:	2331      	movs	r3, #49	; 0x31
 8006136:	f805 3b01 	strb.w	r3, [r5], #1
 800613a:	f10b 0b01 	add.w	fp, fp, #1
 800613e:	e241      	b.n	80065c4 <_dtoa_r+0x95c>
 8006140:	07f2      	lsls	r2, r6, #31
 8006142:	d505      	bpl.n	8006150 <_dtoa_r+0x4e8>
 8006144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006148:	f7fa fa56 	bl	80005f8 <__aeabi_dmul>
 800614c:	3501      	adds	r5, #1
 800614e:	2301      	movs	r3, #1
 8006150:	1076      	asrs	r6, r6, #1
 8006152:	3708      	adds	r7, #8
 8006154:	e773      	b.n	800603e <_dtoa_r+0x3d6>
 8006156:	2502      	movs	r5, #2
 8006158:	e775      	b.n	8006046 <_dtoa_r+0x3de>
 800615a:	9e04      	ldr	r6, [sp, #16]
 800615c:	465f      	mov	r7, fp
 800615e:	e792      	b.n	8006086 <_dtoa_r+0x41e>
 8006160:	9900      	ldr	r1, [sp, #0]
 8006162:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <_dtoa_r+0x63c>)
 8006164:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006168:	4431      	add	r1, r6
 800616a:	9102      	str	r1, [sp, #8]
 800616c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800616e:	eeb0 9a47 	vmov.f32	s18, s14
 8006172:	eef0 9a67 	vmov.f32	s19, s15
 8006176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800617a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800617e:	2900      	cmp	r1, #0
 8006180:	d044      	beq.n	800620c <_dtoa_r+0x5a4>
 8006182:	494e      	ldr	r1, [pc, #312]	; (80062bc <_dtoa_r+0x654>)
 8006184:	2000      	movs	r0, #0
 8006186:	f7fa fb61 	bl	800084c <__aeabi_ddiv>
 800618a:	ec53 2b19 	vmov	r2, r3, d9
 800618e:	f7fa f87b 	bl	8000288 <__aeabi_dsub>
 8006192:	9d00      	ldr	r5, [sp, #0]
 8006194:	ec41 0b19 	vmov	d9, r0, r1
 8006198:	4649      	mov	r1, r9
 800619a:	4640      	mov	r0, r8
 800619c:	f7fa fcdc 	bl	8000b58 <__aeabi_d2iz>
 80061a0:	4606      	mov	r6, r0
 80061a2:	f7fa f9bf 	bl	8000524 <__aeabi_i2d>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4640      	mov	r0, r8
 80061ac:	4649      	mov	r1, r9
 80061ae:	f7fa f86b 	bl	8000288 <__aeabi_dsub>
 80061b2:	3630      	adds	r6, #48	; 0x30
 80061b4:	f805 6b01 	strb.w	r6, [r5], #1
 80061b8:	ec53 2b19 	vmov	r2, r3, d9
 80061bc:	4680      	mov	r8, r0
 80061be:	4689      	mov	r9, r1
 80061c0:	f7fa fc8c 	bl	8000adc <__aeabi_dcmplt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d164      	bne.n	8006292 <_dtoa_r+0x62a>
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	4937      	ldr	r1, [pc, #220]	; (80062ac <_dtoa_r+0x644>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7fa f85a 	bl	8000288 <__aeabi_dsub>
 80061d4:	ec53 2b19 	vmov	r2, r3, d9
 80061d8:	f7fa fc80 	bl	8000adc <__aeabi_dcmplt>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f040 80b6 	bne.w	800634e <_dtoa_r+0x6e6>
 80061e2:	9b02      	ldr	r3, [sp, #8]
 80061e4:	429d      	cmp	r5, r3
 80061e6:	f43f af7c 	beq.w	80060e2 <_dtoa_r+0x47a>
 80061ea:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <_dtoa_r+0x648>)
 80061ec:	ec51 0b19 	vmov	r0, r1, d9
 80061f0:	2200      	movs	r2, #0
 80061f2:	f7fa fa01 	bl	80005f8 <__aeabi_dmul>
 80061f6:	4b2e      	ldr	r3, [pc, #184]	; (80062b0 <_dtoa_r+0x648>)
 80061f8:	ec41 0b19 	vmov	d9, r0, r1
 80061fc:	2200      	movs	r2, #0
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa f9f9 	bl	80005f8 <__aeabi_dmul>
 8006206:	4680      	mov	r8, r0
 8006208:	4689      	mov	r9, r1
 800620a:	e7c5      	b.n	8006198 <_dtoa_r+0x530>
 800620c:	ec51 0b17 	vmov	r0, r1, d7
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	9b02      	ldr	r3, [sp, #8]
 8006216:	9d00      	ldr	r5, [sp, #0]
 8006218:	930f      	str	r3, [sp, #60]	; 0x3c
 800621a:	ec41 0b19 	vmov	d9, r0, r1
 800621e:	4649      	mov	r1, r9
 8006220:	4640      	mov	r0, r8
 8006222:	f7fa fc99 	bl	8000b58 <__aeabi_d2iz>
 8006226:	4606      	mov	r6, r0
 8006228:	f7fa f97c 	bl	8000524 <__aeabi_i2d>
 800622c:	3630      	adds	r6, #48	; 0x30
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	f7fa f827 	bl	8000288 <__aeabi_dsub>
 800623a:	f805 6b01 	strb.w	r6, [r5], #1
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	429d      	cmp	r5, r3
 8006242:	4680      	mov	r8, r0
 8006244:	4689      	mov	r9, r1
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	d124      	bne.n	8006296 <_dtoa_r+0x62e>
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <_dtoa_r+0x654>)
 800624e:	ec51 0b19 	vmov	r0, r1, d9
 8006252:	f7fa f81b 	bl	800028c <__adddf3>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4640      	mov	r0, r8
 800625c:	4649      	mov	r1, r9
 800625e:	f7fa fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8006262:	2800      	cmp	r0, #0
 8006264:	d173      	bne.n	800634e <_dtoa_r+0x6e6>
 8006266:	ec53 2b19 	vmov	r2, r3, d9
 800626a:	4914      	ldr	r1, [pc, #80]	; (80062bc <_dtoa_r+0x654>)
 800626c:	2000      	movs	r0, #0
 800626e:	f7fa f80b 	bl	8000288 <__aeabi_dsub>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7fa fc2f 	bl	8000adc <__aeabi_dcmplt>
 800627e:	2800      	cmp	r0, #0
 8006280:	f43f af2f 	beq.w	80060e2 <_dtoa_r+0x47a>
 8006284:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006286:	1e6b      	subs	r3, r5, #1
 8006288:	930f      	str	r3, [sp, #60]	; 0x3c
 800628a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800628e:	2b30      	cmp	r3, #48	; 0x30
 8006290:	d0f8      	beq.n	8006284 <_dtoa_r+0x61c>
 8006292:	46bb      	mov	fp, r7
 8006294:	e04a      	b.n	800632c <_dtoa_r+0x6c4>
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <_dtoa_r+0x648>)
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	4680      	mov	r8, r0
 800629e:	4689      	mov	r9, r1
 80062a0:	e7bd      	b.n	800621e <_dtoa_r+0x5b6>
 80062a2:	bf00      	nop
 80062a4:	08007bc8 	.word	0x08007bc8
 80062a8:	08007ba0 	.word	0x08007ba0
 80062ac:	3ff00000 	.word	0x3ff00000
 80062b0:	40240000 	.word	0x40240000
 80062b4:	401c0000 	.word	0x401c0000
 80062b8:	40140000 	.word	0x40140000
 80062bc:	3fe00000 	.word	0x3fe00000
 80062c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062c4:	9d00      	ldr	r5, [sp, #0]
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	4630      	mov	r0, r6
 80062cc:	4639      	mov	r1, r7
 80062ce:	f7fa fabd 	bl	800084c <__aeabi_ddiv>
 80062d2:	f7fa fc41 	bl	8000b58 <__aeabi_d2iz>
 80062d6:	9001      	str	r0, [sp, #4]
 80062d8:	f7fa f924 	bl	8000524 <__aeabi_i2d>
 80062dc:	4642      	mov	r2, r8
 80062de:	464b      	mov	r3, r9
 80062e0:	f7fa f98a 	bl	80005f8 <__aeabi_dmul>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f7f9 ffcc 	bl	8000288 <__aeabi_dsub>
 80062f0:	9e01      	ldr	r6, [sp, #4]
 80062f2:	9f04      	ldr	r7, [sp, #16]
 80062f4:	3630      	adds	r6, #48	; 0x30
 80062f6:	f805 6b01 	strb.w	r6, [r5], #1
 80062fa:	9e00      	ldr	r6, [sp, #0]
 80062fc:	1bae      	subs	r6, r5, r6
 80062fe:	42b7      	cmp	r7, r6
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	d134      	bne.n	8006370 <_dtoa_r+0x708>
 8006306:	f7f9 ffc1 	bl	800028c <__adddf3>
 800630a:	4642      	mov	r2, r8
 800630c:	464b      	mov	r3, r9
 800630e:	4606      	mov	r6, r0
 8006310:	460f      	mov	r7, r1
 8006312:	f7fa fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8006316:	b9c8      	cbnz	r0, 800634c <_dtoa_r+0x6e4>
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	4630      	mov	r0, r6
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006324:	b110      	cbz	r0, 800632c <_dtoa_r+0x6c4>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	07db      	lsls	r3, r3, #31
 800632a:	d40f      	bmi.n	800634c <_dtoa_r+0x6e4>
 800632c:	4651      	mov	r1, sl
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fbcc 	bl	8006acc <_Bfree>
 8006334:	2300      	movs	r3, #0
 8006336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006338:	702b      	strb	r3, [r5, #0]
 800633a:	f10b 0301 	add.w	r3, fp, #1
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006342:	2b00      	cmp	r3, #0
 8006344:	f43f ace2 	beq.w	8005d0c <_dtoa_r+0xa4>
 8006348:	601d      	str	r5, [r3, #0]
 800634a:	e4df      	b.n	8005d0c <_dtoa_r+0xa4>
 800634c:	465f      	mov	r7, fp
 800634e:	462b      	mov	r3, r5
 8006350:	461d      	mov	r5, r3
 8006352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006356:	2a39      	cmp	r2, #57	; 0x39
 8006358:	d106      	bne.n	8006368 <_dtoa_r+0x700>
 800635a:	9a00      	ldr	r2, [sp, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d1f7      	bne.n	8006350 <_dtoa_r+0x6e8>
 8006360:	9900      	ldr	r1, [sp, #0]
 8006362:	2230      	movs	r2, #48	; 0x30
 8006364:	3701      	adds	r7, #1
 8006366:	700a      	strb	r2, [r1, #0]
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	3201      	adds	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e790      	b.n	8006292 <_dtoa_r+0x62a>
 8006370:	4ba3      	ldr	r3, [pc, #652]	; (8006600 <_dtoa_r+0x998>)
 8006372:	2200      	movs	r2, #0
 8006374:	f7fa f940 	bl	80005f8 <__aeabi_dmul>
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4606      	mov	r6, r0
 800637e:	460f      	mov	r7, r1
 8006380:	f7fa fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006384:	2800      	cmp	r0, #0
 8006386:	d09e      	beq.n	80062c6 <_dtoa_r+0x65e>
 8006388:	e7d0      	b.n	800632c <_dtoa_r+0x6c4>
 800638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638c:	2a00      	cmp	r2, #0
 800638e:	f000 80ca 	beq.w	8006526 <_dtoa_r+0x8be>
 8006392:	9a07      	ldr	r2, [sp, #28]
 8006394:	2a01      	cmp	r2, #1
 8006396:	f300 80ad 	bgt.w	80064f4 <_dtoa_r+0x88c>
 800639a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800639c:	2a00      	cmp	r2, #0
 800639e:	f000 80a5 	beq.w	80064ec <_dtoa_r+0x884>
 80063a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063a6:	9e08      	ldr	r6, [sp, #32]
 80063a8:	9d05      	ldr	r5, [sp, #20]
 80063aa:	9a05      	ldr	r2, [sp, #20]
 80063ac:	441a      	add	r2, r3
 80063ae:	9205      	str	r2, [sp, #20]
 80063b0:	9a06      	ldr	r2, [sp, #24]
 80063b2:	2101      	movs	r1, #1
 80063b4:	441a      	add	r2, r3
 80063b6:	4620      	mov	r0, r4
 80063b8:	9206      	str	r2, [sp, #24]
 80063ba:	f000 fc3d 	bl	8006c38 <__i2b>
 80063be:	4607      	mov	r7, r0
 80063c0:	b165      	cbz	r5, 80063dc <_dtoa_r+0x774>
 80063c2:	9b06      	ldr	r3, [sp, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dd09      	ble.n	80063dc <_dtoa_r+0x774>
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	9a05      	ldr	r2, [sp, #20]
 80063cc:	bfa8      	it	ge
 80063ce:	462b      	movge	r3, r5
 80063d0:	1ad2      	subs	r2, r2, r3
 80063d2:	9205      	str	r2, [sp, #20]
 80063d4:	9a06      	ldr	r2, [sp, #24]
 80063d6:	1aed      	subs	r5, r5, r3
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	b1f3      	cbz	r3, 800641e <_dtoa_r+0x7b6>
 80063e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a3 	beq.w	800652e <_dtoa_r+0x8c6>
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	dd10      	ble.n	800640e <_dtoa_r+0x7a6>
 80063ec:	4639      	mov	r1, r7
 80063ee:	4632      	mov	r2, r6
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fce1 	bl	8006db8 <__pow5mult>
 80063f6:	4652      	mov	r2, sl
 80063f8:	4601      	mov	r1, r0
 80063fa:	4607      	mov	r7, r0
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fc31 	bl	8006c64 <__multiply>
 8006402:	4651      	mov	r1, sl
 8006404:	4680      	mov	r8, r0
 8006406:	4620      	mov	r0, r4
 8006408:	f000 fb60 	bl	8006acc <_Bfree>
 800640c:	46c2      	mov	sl, r8
 800640e:	9b08      	ldr	r3, [sp, #32]
 8006410:	1b9a      	subs	r2, r3, r6
 8006412:	d004      	beq.n	800641e <_dtoa_r+0x7b6>
 8006414:	4651      	mov	r1, sl
 8006416:	4620      	mov	r0, r4
 8006418:	f000 fcce 	bl	8006db8 <__pow5mult>
 800641c:	4682      	mov	sl, r0
 800641e:	2101      	movs	r1, #1
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fc09 	bl	8006c38 <__i2b>
 8006426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	4606      	mov	r6, r0
 800642c:	f340 8081 	ble.w	8006532 <_dtoa_r+0x8ca>
 8006430:	461a      	mov	r2, r3
 8006432:	4601      	mov	r1, r0
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fcbf 	bl	8006db8 <__pow5mult>
 800643a:	9b07      	ldr	r3, [sp, #28]
 800643c:	2b01      	cmp	r3, #1
 800643e:	4606      	mov	r6, r0
 8006440:	dd7a      	ble.n	8006538 <_dtoa_r+0x8d0>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	6933      	ldr	r3, [r6, #16]
 8006448:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800644c:	6918      	ldr	r0, [r3, #16]
 800644e:	f000 fba5 	bl	8006b9c <__hi0bits>
 8006452:	f1c0 0020 	rsb	r0, r0, #32
 8006456:	9b06      	ldr	r3, [sp, #24]
 8006458:	4418      	add	r0, r3
 800645a:	f010 001f 	ands.w	r0, r0, #31
 800645e:	f000 8094 	beq.w	800658a <_dtoa_r+0x922>
 8006462:	f1c0 0320 	rsb	r3, r0, #32
 8006466:	2b04      	cmp	r3, #4
 8006468:	f340 8085 	ble.w	8006576 <_dtoa_r+0x90e>
 800646c:	9b05      	ldr	r3, [sp, #20]
 800646e:	f1c0 001c 	rsb	r0, r0, #28
 8006472:	4403      	add	r3, r0
 8006474:	9305      	str	r3, [sp, #20]
 8006476:	9b06      	ldr	r3, [sp, #24]
 8006478:	4403      	add	r3, r0
 800647a:	4405      	add	r5, r0
 800647c:	9306      	str	r3, [sp, #24]
 800647e:	9b05      	ldr	r3, [sp, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	dd05      	ble.n	8006490 <_dtoa_r+0x828>
 8006484:	4651      	mov	r1, sl
 8006486:	461a      	mov	r2, r3
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fcef 	bl	8006e6c <__lshift>
 800648e:	4682      	mov	sl, r0
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	dd05      	ble.n	80064a2 <_dtoa_r+0x83a>
 8006496:	4631      	mov	r1, r6
 8006498:	461a      	mov	r2, r3
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fce6 	bl	8006e6c <__lshift>
 80064a0:	4606      	mov	r6, r0
 80064a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d072      	beq.n	800658e <_dtoa_r+0x926>
 80064a8:	4631      	mov	r1, r6
 80064aa:	4650      	mov	r0, sl
 80064ac:	f000 fd4a 	bl	8006f44 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	da6c      	bge.n	800658e <_dtoa_r+0x926>
 80064b4:	2300      	movs	r3, #0
 80064b6:	4651      	mov	r1, sl
 80064b8:	220a      	movs	r2, #10
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 fb28 	bl	8006b10 <__multadd>
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064c6:	4682      	mov	sl, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 81b0 	beq.w	800682e <_dtoa_r+0xbc6>
 80064ce:	2300      	movs	r3, #0
 80064d0:	4639      	mov	r1, r7
 80064d2:	220a      	movs	r2, #10
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fb1b 	bl	8006b10 <__multadd>
 80064da:	9b01      	ldr	r3, [sp, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	4607      	mov	r7, r0
 80064e0:	f300 8096 	bgt.w	8006610 <_dtoa_r+0x9a8>
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	dc59      	bgt.n	800659e <_dtoa_r+0x936>
 80064ea:	e091      	b.n	8006610 <_dtoa_r+0x9a8>
 80064ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064f2:	e758      	b.n	80063a6 <_dtoa_r+0x73e>
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	1e5e      	subs	r6, r3, #1
 80064f8:	9b08      	ldr	r3, [sp, #32]
 80064fa:	42b3      	cmp	r3, r6
 80064fc:	bfbf      	itttt	lt
 80064fe:	9b08      	ldrlt	r3, [sp, #32]
 8006500:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006502:	9608      	strlt	r6, [sp, #32]
 8006504:	1af3      	sublt	r3, r6, r3
 8006506:	bfb4      	ite	lt
 8006508:	18d2      	addlt	r2, r2, r3
 800650a:	1b9e      	subge	r6, r3, r6
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	bfbc      	itt	lt
 8006510:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006512:	2600      	movlt	r6, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	bfb7      	itett	lt
 8006518:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800651c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006520:	1a9d      	sublt	r5, r3, r2
 8006522:	2300      	movlt	r3, #0
 8006524:	e741      	b.n	80063aa <_dtoa_r+0x742>
 8006526:	9e08      	ldr	r6, [sp, #32]
 8006528:	9d05      	ldr	r5, [sp, #20]
 800652a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800652c:	e748      	b.n	80063c0 <_dtoa_r+0x758>
 800652e:	9a08      	ldr	r2, [sp, #32]
 8006530:	e770      	b.n	8006414 <_dtoa_r+0x7ac>
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	2b01      	cmp	r3, #1
 8006536:	dc19      	bgt.n	800656c <_dtoa_r+0x904>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	b9bb      	cbnz	r3, 800656c <_dtoa_r+0x904>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006542:	b99b      	cbnz	r3, 800656c <_dtoa_r+0x904>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800654a:	0d1b      	lsrs	r3, r3, #20
 800654c:	051b      	lsls	r3, r3, #20
 800654e:	b183      	cbz	r3, 8006572 <_dtoa_r+0x90a>
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	3301      	adds	r3, #1
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	9b06      	ldr	r3, [sp, #24]
 8006558:	3301      	adds	r3, #1
 800655a:	9306      	str	r3, [sp, #24]
 800655c:	f04f 0801 	mov.w	r8, #1
 8006560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006562:	2b00      	cmp	r3, #0
 8006564:	f47f af6f 	bne.w	8006446 <_dtoa_r+0x7de>
 8006568:	2001      	movs	r0, #1
 800656a:	e774      	b.n	8006456 <_dtoa_r+0x7ee>
 800656c:	f04f 0800 	mov.w	r8, #0
 8006570:	e7f6      	b.n	8006560 <_dtoa_r+0x8f8>
 8006572:	4698      	mov	r8, r3
 8006574:	e7f4      	b.n	8006560 <_dtoa_r+0x8f8>
 8006576:	d082      	beq.n	800647e <_dtoa_r+0x816>
 8006578:	9a05      	ldr	r2, [sp, #20]
 800657a:	331c      	adds	r3, #28
 800657c:	441a      	add	r2, r3
 800657e:	9205      	str	r2, [sp, #20]
 8006580:	9a06      	ldr	r2, [sp, #24]
 8006582:	441a      	add	r2, r3
 8006584:	441d      	add	r5, r3
 8006586:	9206      	str	r2, [sp, #24]
 8006588:	e779      	b.n	800647e <_dtoa_r+0x816>
 800658a:	4603      	mov	r3, r0
 800658c:	e7f4      	b.n	8006578 <_dtoa_r+0x910>
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dc37      	bgt.n	8006604 <_dtoa_r+0x99c>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	2b02      	cmp	r3, #2
 8006598:	dd34      	ble.n	8006604 <_dtoa_r+0x99c>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	b963      	cbnz	r3, 80065bc <_dtoa_r+0x954>
 80065a2:	4631      	mov	r1, r6
 80065a4:	2205      	movs	r2, #5
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fab2 	bl	8006b10 <__multadd>
 80065ac:	4601      	mov	r1, r0
 80065ae:	4606      	mov	r6, r0
 80065b0:	4650      	mov	r0, sl
 80065b2:	f000 fcc7 	bl	8006f44 <__mcmp>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f73f adbb 	bgt.w	8006132 <_dtoa_r+0x4ca>
 80065bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065be:	9d00      	ldr	r5, [sp, #0]
 80065c0:	ea6f 0b03 	mvn.w	fp, r3
 80065c4:	f04f 0800 	mov.w	r8, #0
 80065c8:	4631      	mov	r1, r6
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fa7e 	bl	8006acc <_Bfree>
 80065d0:	2f00      	cmp	r7, #0
 80065d2:	f43f aeab 	beq.w	800632c <_dtoa_r+0x6c4>
 80065d6:	f1b8 0f00 	cmp.w	r8, #0
 80065da:	d005      	beq.n	80065e8 <_dtoa_r+0x980>
 80065dc:	45b8      	cmp	r8, r7
 80065de:	d003      	beq.n	80065e8 <_dtoa_r+0x980>
 80065e0:	4641      	mov	r1, r8
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fa72 	bl	8006acc <_Bfree>
 80065e8:	4639      	mov	r1, r7
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fa6e 	bl	8006acc <_Bfree>
 80065f0:	e69c      	b.n	800632c <_dtoa_r+0x6c4>
 80065f2:	2600      	movs	r6, #0
 80065f4:	4637      	mov	r7, r6
 80065f6:	e7e1      	b.n	80065bc <_dtoa_r+0x954>
 80065f8:	46bb      	mov	fp, r7
 80065fa:	4637      	mov	r7, r6
 80065fc:	e599      	b.n	8006132 <_dtoa_r+0x4ca>
 80065fe:	bf00      	nop
 8006600:	40240000 	.word	0x40240000
 8006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80c8 	beq.w	800679c <_dtoa_r+0xb34>
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	2d00      	cmp	r5, #0
 8006612:	dd05      	ble.n	8006620 <_dtoa_r+0x9b8>
 8006614:	4639      	mov	r1, r7
 8006616:	462a      	mov	r2, r5
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fc27 	bl	8006e6c <__lshift>
 800661e:	4607      	mov	r7, r0
 8006620:	f1b8 0f00 	cmp.w	r8, #0
 8006624:	d05b      	beq.n	80066de <_dtoa_r+0xa76>
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fa0f 	bl	8006a4c <_Balloc>
 800662e:	4605      	mov	r5, r0
 8006630:	b928      	cbnz	r0, 800663e <_dtoa_r+0x9d6>
 8006632:	4b83      	ldr	r3, [pc, #524]	; (8006840 <_dtoa_r+0xbd8>)
 8006634:	4602      	mov	r2, r0
 8006636:	f240 21ef 	movw	r1, #751	; 0x2ef
 800663a:	f7ff bb2e 	b.w	8005c9a <_dtoa_r+0x32>
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	3202      	adds	r2, #2
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	f107 010c 	add.w	r1, r7, #12
 8006648:	300c      	adds	r0, #12
 800664a:	f7ff fa75 	bl	8005b38 <memcpy>
 800664e:	2201      	movs	r2, #1
 8006650:	4629      	mov	r1, r5
 8006652:	4620      	mov	r0, r4
 8006654:	f000 fc0a 	bl	8006e6c <__lshift>
 8006658:	9b00      	ldr	r3, [sp, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006662:	4413      	add	r3, r2
 8006664:	9308      	str	r3, [sp, #32]
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	46b8      	mov	r8, r7
 800666e:	9306      	str	r3, [sp, #24]
 8006670:	4607      	mov	r7, r0
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	4631      	mov	r1, r6
 8006676:	3b01      	subs	r3, #1
 8006678:	4650      	mov	r0, sl
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	f7ff fa6a 	bl	8005b54 <quorem>
 8006680:	4641      	mov	r1, r8
 8006682:	9002      	str	r0, [sp, #8]
 8006684:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006688:	4650      	mov	r0, sl
 800668a:	f000 fc5b 	bl	8006f44 <__mcmp>
 800668e:	463a      	mov	r2, r7
 8006690:	9005      	str	r0, [sp, #20]
 8006692:	4631      	mov	r1, r6
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fc71 	bl	8006f7c <__mdiff>
 800669a:	68c2      	ldr	r2, [r0, #12]
 800669c:	4605      	mov	r5, r0
 800669e:	bb02      	cbnz	r2, 80066e2 <_dtoa_r+0xa7a>
 80066a0:	4601      	mov	r1, r0
 80066a2:	4650      	mov	r0, sl
 80066a4:	f000 fc4e 	bl	8006f44 <__mcmp>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4629      	mov	r1, r5
 80066ac:	4620      	mov	r0, r4
 80066ae:	9209      	str	r2, [sp, #36]	; 0x24
 80066b0:	f000 fa0c 	bl	8006acc <_Bfree>
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b8:	9d04      	ldr	r5, [sp, #16]
 80066ba:	ea43 0102 	orr.w	r1, r3, r2
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	4319      	orrs	r1, r3
 80066c2:	d110      	bne.n	80066e6 <_dtoa_r+0xa7e>
 80066c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066c8:	d029      	beq.n	800671e <_dtoa_r+0xab6>
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd02      	ble.n	80066d6 <_dtoa_r+0xa6e>
 80066d0:	9b02      	ldr	r3, [sp, #8]
 80066d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	f883 9000 	strb.w	r9, [r3]
 80066dc:	e774      	b.n	80065c8 <_dtoa_r+0x960>
 80066de:	4638      	mov	r0, r7
 80066e0:	e7ba      	b.n	8006658 <_dtoa_r+0x9f0>
 80066e2:	2201      	movs	r2, #1
 80066e4:	e7e1      	b.n	80066aa <_dtoa_r+0xa42>
 80066e6:	9b05      	ldr	r3, [sp, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	db04      	blt.n	80066f6 <_dtoa_r+0xa8e>
 80066ec:	9907      	ldr	r1, [sp, #28]
 80066ee:	430b      	orrs	r3, r1
 80066f0:	9906      	ldr	r1, [sp, #24]
 80066f2:	430b      	orrs	r3, r1
 80066f4:	d120      	bne.n	8006738 <_dtoa_r+0xad0>
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	dded      	ble.n	80066d6 <_dtoa_r+0xa6e>
 80066fa:	4651      	mov	r1, sl
 80066fc:	2201      	movs	r2, #1
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 fbb4 	bl	8006e6c <__lshift>
 8006704:	4631      	mov	r1, r6
 8006706:	4682      	mov	sl, r0
 8006708:	f000 fc1c 	bl	8006f44 <__mcmp>
 800670c:	2800      	cmp	r0, #0
 800670e:	dc03      	bgt.n	8006718 <_dtoa_r+0xab0>
 8006710:	d1e1      	bne.n	80066d6 <_dtoa_r+0xa6e>
 8006712:	f019 0f01 	tst.w	r9, #1
 8006716:	d0de      	beq.n	80066d6 <_dtoa_r+0xa6e>
 8006718:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800671c:	d1d8      	bne.n	80066d0 <_dtoa_r+0xa68>
 800671e:	9a01      	ldr	r2, [sp, #4]
 8006720:	2339      	movs	r3, #57	; 0x39
 8006722:	7013      	strb	r3, [r2, #0]
 8006724:	462b      	mov	r3, r5
 8006726:	461d      	mov	r5, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800672e:	2a39      	cmp	r2, #57	; 0x39
 8006730:	d06c      	beq.n	800680c <_dtoa_r+0xba4>
 8006732:	3201      	adds	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	e747      	b.n	80065c8 <_dtoa_r+0x960>
 8006738:	2a00      	cmp	r2, #0
 800673a:	dd07      	ble.n	800674c <_dtoa_r+0xae4>
 800673c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006740:	d0ed      	beq.n	800671e <_dtoa_r+0xab6>
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	f109 0301 	add.w	r3, r9, #1
 8006748:	7013      	strb	r3, [r2, #0]
 800674a:	e73d      	b.n	80065c8 <_dtoa_r+0x960>
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	9a08      	ldr	r2, [sp, #32]
 8006750:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006754:	4293      	cmp	r3, r2
 8006756:	d043      	beq.n	80067e0 <_dtoa_r+0xb78>
 8006758:	4651      	mov	r1, sl
 800675a:	2300      	movs	r3, #0
 800675c:	220a      	movs	r2, #10
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f9d6 	bl	8006b10 <__multadd>
 8006764:	45b8      	cmp	r8, r7
 8006766:	4682      	mov	sl, r0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	f04f 020a 	mov.w	r2, #10
 8006770:	4641      	mov	r1, r8
 8006772:	4620      	mov	r0, r4
 8006774:	d107      	bne.n	8006786 <_dtoa_r+0xb1e>
 8006776:	f000 f9cb 	bl	8006b10 <__multadd>
 800677a:	4680      	mov	r8, r0
 800677c:	4607      	mov	r7, r0
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	e775      	b.n	8006672 <_dtoa_r+0xa0a>
 8006786:	f000 f9c3 	bl	8006b10 <__multadd>
 800678a:	4639      	mov	r1, r7
 800678c:	4680      	mov	r8, r0
 800678e:	2300      	movs	r3, #0
 8006790:	220a      	movs	r2, #10
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f9bc 	bl	8006b10 <__multadd>
 8006798:	4607      	mov	r7, r0
 800679a:	e7f0      	b.n	800677e <_dtoa_r+0xb16>
 800679c:	9b04      	ldr	r3, [sp, #16]
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	9d00      	ldr	r5, [sp, #0]
 80067a2:	4631      	mov	r1, r6
 80067a4:	4650      	mov	r0, sl
 80067a6:	f7ff f9d5 	bl	8005b54 <quorem>
 80067aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067ae:	9b00      	ldr	r3, [sp, #0]
 80067b0:	f805 9b01 	strb.w	r9, [r5], #1
 80067b4:	1aea      	subs	r2, r5, r3
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	dd07      	ble.n	80067cc <_dtoa_r+0xb64>
 80067bc:	4651      	mov	r1, sl
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f9a4 	bl	8006b10 <__multadd>
 80067c8:	4682      	mov	sl, r0
 80067ca:	e7ea      	b.n	80067a2 <_dtoa_r+0xb3a>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfc8      	it	gt
 80067d2:	461d      	movgt	r5, r3
 80067d4:	9b00      	ldr	r3, [sp, #0]
 80067d6:	bfd8      	it	le
 80067d8:	2501      	movle	r5, #1
 80067da:	441d      	add	r5, r3
 80067dc:	f04f 0800 	mov.w	r8, #0
 80067e0:	4651      	mov	r1, sl
 80067e2:	2201      	movs	r2, #1
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fb41 	bl	8006e6c <__lshift>
 80067ea:	4631      	mov	r1, r6
 80067ec:	4682      	mov	sl, r0
 80067ee:	f000 fba9 	bl	8006f44 <__mcmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	dc96      	bgt.n	8006724 <_dtoa_r+0xabc>
 80067f6:	d102      	bne.n	80067fe <_dtoa_r+0xb96>
 80067f8:	f019 0f01 	tst.w	r9, #1
 80067fc:	d192      	bne.n	8006724 <_dtoa_r+0xabc>
 80067fe:	462b      	mov	r3, r5
 8006800:	461d      	mov	r5, r3
 8006802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006806:	2a30      	cmp	r2, #48	; 0x30
 8006808:	d0fa      	beq.n	8006800 <_dtoa_r+0xb98>
 800680a:	e6dd      	b.n	80065c8 <_dtoa_r+0x960>
 800680c:	9a00      	ldr	r2, [sp, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d189      	bne.n	8006726 <_dtoa_r+0xabe>
 8006812:	f10b 0b01 	add.w	fp, fp, #1
 8006816:	2331      	movs	r3, #49	; 0x31
 8006818:	e796      	b.n	8006748 <_dtoa_r+0xae0>
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <_dtoa_r+0xbdc>)
 800681c:	f7ff ba99 	b.w	8005d52 <_dtoa_r+0xea>
 8006820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006822:	2b00      	cmp	r3, #0
 8006824:	f47f aa6d 	bne.w	8005d02 <_dtoa_r+0x9a>
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <_dtoa_r+0xbe0>)
 800682a:	f7ff ba92 	b.w	8005d52 <_dtoa_r+0xea>
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dcb5      	bgt.n	80067a0 <_dtoa_r+0xb38>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b02      	cmp	r3, #2
 8006838:	f73f aeb1 	bgt.w	800659e <_dtoa_r+0x936>
 800683c:	e7b0      	b.n	80067a0 <_dtoa_r+0xb38>
 800683e:	bf00      	nop
 8006840:	08007b30 	.word	0x08007b30
 8006844:	08007a90 	.word	0x08007a90
 8006848:	08007ab4 	.word	0x08007ab4

0800684c <_free_r>:
 800684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800684e:	2900      	cmp	r1, #0
 8006850:	d044      	beq.n	80068dc <_free_r+0x90>
 8006852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006856:	9001      	str	r0, [sp, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f1a1 0404 	sub.w	r4, r1, #4
 800685e:	bfb8      	it	lt
 8006860:	18e4      	addlt	r4, r4, r3
 8006862:	f000 f8e7 	bl	8006a34 <__malloc_lock>
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <_free_r+0x94>)
 8006868:	9801      	ldr	r0, [sp, #4]
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x30>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	b003      	add	sp, #12
 8006874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006878:	f000 b8e2 	b.w	8006a40 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x46>
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	1961      	adds	r1, r4, r5
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1949      	addeq	r1, r1, r5
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x22>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x50>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x46>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1855      	adds	r5, r2, r1
 80068a0:	42a5      	cmp	r5, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x70>
 80068a4:	6824      	ldr	r4, [r4, #0]
 80068a6:	4421      	add	r1, r4
 80068a8:	1854      	adds	r4, r2, r1
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x26>
 80068b0:	681c      	ldr	r4, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	440c      	add	r4, r1
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x26>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x78>
 80068be:	230c      	movs	r3, #12
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x26>
 80068c4:	6825      	ldr	r5, [r4, #0]
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x26>
 80068dc:	b003      	add	sp, #12
 80068de:	bd30      	pop	{r4, r5, pc}
 80068e0:	20000630 	.word	0x20000630

080068e4 <malloc>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <malloc+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f000 b823 	b.w	8006934 <_malloc_r>
 80068ee:	bf00      	nop
 80068f0:	2000006c 	.word	0x2000006c

080068f4 <sbrk_aligned>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	4e0e      	ldr	r6, [pc, #56]	; (8006930 <sbrk_aligned+0x3c>)
 80068f8:	460c      	mov	r4, r1
 80068fa:	6831      	ldr	r1, [r6, #0]
 80068fc:	4605      	mov	r5, r0
 80068fe:	b911      	cbnz	r1, 8006906 <sbrk_aligned+0x12>
 8006900:	f000 fcce 	bl	80072a0 <_sbrk_r>
 8006904:	6030      	str	r0, [r6, #0]
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 fcc9 	bl	80072a0 <_sbrk_r>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d00a      	beq.n	8006928 <sbrk_aligned+0x34>
 8006912:	1cc4      	adds	r4, r0, #3
 8006914:	f024 0403 	bic.w	r4, r4, #3
 8006918:	42a0      	cmp	r0, r4
 800691a:	d007      	beq.n	800692c <sbrk_aligned+0x38>
 800691c:	1a21      	subs	r1, r4, r0
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fcbe 	bl	80072a0 <_sbrk_r>
 8006924:	3001      	adds	r0, #1
 8006926:	d101      	bne.n	800692c <sbrk_aligned+0x38>
 8006928:	f04f 34ff 	mov.w	r4, #4294967295
 800692c:	4620      	mov	r0, r4
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	20000634 	.word	0x20000634

08006934 <_malloc_r>:
 8006934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006938:	1ccd      	adds	r5, r1, #3
 800693a:	f025 0503 	bic.w	r5, r5, #3
 800693e:	3508      	adds	r5, #8
 8006940:	2d0c      	cmp	r5, #12
 8006942:	bf38      	it	cc
 8006944:	250c      	movcc	r5, #12
 8006946:	2d00      	cmp	r5, #0
 8006948:	4607      	mov	r7, r0
 800694a:	db01      	blt.n	8006950 <_malloc_r+0x1c>
 800694c:	42a9      	cmp	r1, r5
 800694e:	d905      	bls.n	800695c <_malloc_r+0x28>
 8006950:	230c      	movs	r3, #12
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	2600      	movs	r6, #0
 8006956:	4630      	mov	r0, r6
 8006958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800695c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a30 <_malloc_r+0xfc>
 8006960:	f000 f868 	bl	8006a34 <__malloc_lock>
 8006964:	f8d8 3000 	ldr.w	r3, [r8]
 8006968:	461c      	mov	r4, r3
 800696a:	bb5c      	cbnz	r4, 80069c4 <_malloc_r+0x90>
 800696c:	4629      	mov	r1, r5
 800696e:	4638      	mov	r0, r7
 8006970:	f7ff ffc0 	bl	80068f4 <sbrk_aligned>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	4604      	mov	r4, r0
 8006978:	d155      	bne.n	8006a26 <_malloc_r+0xf2>
 800697a:	f8d8 4000 	ldr.w	r4, [r8]
 800697e:	4626      	mov	r6, r4
 8006980:	2e00      	cmp	r6, #0
 8006982:	d145      	bne.n	8006a10 <_malloc_r+0xdc>
 8006984:	2c00      	cmp	r4, #0
 8006986:	d048      	beq.n	8006a1a <_malloc_r+0xe6>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	4631      	mov	r1, r6
 800698c:	4638      	mov	r0, r7
 800698e:	eb04 0903 	add.w	r9, r4, r3
 8006992:	f000 fc85 	bl	80072a0 <_sbrk_r>
 8006996:	4581      	cmp	r9, r0
 8006998:	d13f      	bne.n	8006a1a <_malloc_r+0xe6>
 800699a:	6821      	ldr	r1, [r4, #0]
 800699c:	1a6d      	subs	r5, r5, r1
 800699e:	4629      	mov	r1, r5
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ffa7 	bl	80068f4 <sbrk_aligned>
 80069a6:	3001      	adds	r0, #1
 80069a8:	d037      	beq.n	8006a1a <_malloc_r+0xe6>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	442b      	add	r3, r5
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	f8d8 3000 	ldr.w	r3, [r8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d038      	beq.n	8006a2a <_malloc_r+0xf6>
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	42a2      	cmp	r2, r4
 80069bc:	d12b      	bne.n	8006a16 <_malloc_r+0xe2>
 80069be:	2200      	movs	r2, #0
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	e00f      	b.n	80069e4 <_malloc_r+0xb0>
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	1b52      	subs	r2, r2, r5
 80069c8:	d41f      	bmi.n	8006a0a <_malloc_r+0xd6>
 80069ca:	2a0b      	cmp	r2, #11
 80069cc:	d917      	bls.n	80069fe <_malloc_r+0xca>
 80069ce:	1961      	adds	r1, r4, r5
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	6025      	str	r5, [r4, #0]
 80069d4:	bf18      	it	ne
 80069d6:	6059      	strne	r1, [r3, #4]
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	bf08      	it	eq
 80069dc:	f8c8 1000 	streq.w	r1, [r8]
 80069e0:	5162      	str	r2, [r4, r5]
 80069e2:	604b      	str	r3, [r1, #4]
 80069e4:	4638      	mov	r0, r7
 80069e6:	f104 060b 	add.w	r6, r4, #11
 80069ea:	f000 f829 	bl	8006a40 <__malloc_unlock>
 80069ee:	f026 0607 	bic.w	r6, r6, #7
 80069f2:	1d23      	adds	r3, r4, #4
 80069f4:	1af2      	subs	r2, r6, r3
 80069f6:	d0ae      	beq.n	8006956 <_malloc_r+0x22>
 80069f8:	1b9b      	subs	r3, r3, r6
 80069fa:	50a3      	str	r3, [r4, r2]
 80069fc:	e7ab      	b.n	8006956 <_malloc_r+0x22>
 80069fe:	42a3      	cmp	r3, r4
 8006a00:	6862      	ldr	r2, [r4, #4]
 8006a02:	d1dd      	bne.n	80069c0 <_malloc_r+0x8c>
 8006a04:	f8c8 2000 	str.w	r2, [r8]
 8006a08:	e7ec      	b.n	80069e4 <_malloc_r+0xb0>
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	6864      	ldr	r4, [r4, #4]
 8006a0e:	e7ac      	b.n	800696a <_malloc_r+0x36>
 8006a10:	4634      	mov	r4, r6
 8006a12:	6876      	ldr	r6, [r6, #4]
 8006a14:	e7b4      	b.n	8006980 <_malloc_r+0x4c>
 8006a16:	4613      	mov	r3, r2
 8006a18:	e7cc      	b.n	80069b4 <_malloc_r+0x80>
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f000 f80e 	bl	8006a40 <__malloc_unlock>
 8006a24:	e797      	b.n	8006956 <_malloc_r+0x22>
 8006a26:	6025      	str	r5, [r4, #0]
 8006a28:	e7dc      	b.n	80069e4 <_malloc_r+0xb0>
 8006a2a:	605b      	str	r3, [r3, #4]
 8006a2c:	deff      	udf	#255	; 0xff
 8006a2e:	bf00      	nop
 8006a30:	20000630 	.word	0x20000630

08006a34 <__malloc_lock>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__malloc_lock+0x8>)
 8006a36:	f7ff b87d 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	2000062c 	.word	0x2000062c

08006a40 <__malloc_unlock>:
 8006a40:	4801      	ldr	r0, [pc, #4]	; (8006a48 <__malloc_unlock+0x8>)
 8006a42:	f7ff b878 	b.w	8005b36 <__retarget_lock_release_recursive>
 8006a46:	bf00      	nop
 8006a48:	2000062c 	.word	0x2000062c

08006a4c <_Balloc>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	69c6      	ldr	r6, [r0, #28]
 8006a50:	4604      	mov	r4, r0
 8006a52:	460d      	mov	r5, r1
 8006a54:	b976      	cbnz	r6, 8006a74 <_Balloc+0x28>
 8006a56:	2010      	movs	r0, #16
 8006a58:	f7ff ff44 	bl	80068e4 <malloc>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	61e0      	str	r0, [r4, #28]
 8006a60:	b920      	cbnz	r0, 8006a6c <_Balloc+0x20>
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <_Balloc+0x78>)
 8006a64:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <_Balloc+0x7c>)
 8006a66:	216b      	movs	r1, #107	; 0x6b
 8006a68:	f000 fc2a 	bl	80072c0 <__assert_func>
 8006a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a70:	6006      	str	r6, [r0, #0]
 8006a72:	60c6      	str	r6, [r0, #12]
 8006a74:	69e6      	ldr	r6, [r4, #28]
 8006a76:	68f3      	ldr	r3, [r6, #12]
 8006a78:	b183      	cbz	r3, 8006a9c <_Balloc+0x50>
 8006a7a:	69e3      	ldr	r3, [r4, #28]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a82:	b9b8      	cbnz	r0, 8006ab4 <_Balloc+0x68>
 8006a84:	2101      	movs	r1, #1
 8006a86:	fa01 f605 	lsl.w	r6, r1, r5
 8006a8a:	1d72      	adds	r2, r6, #5
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 fc34 	bl	80072fc <_calloc_r>
 8006a94:	b160      	cbz	r0, 8006ab0 <_Balloc+0x64>
 8006a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a9a:	e00e      	b.n	8006aba <_Balloc+0x6e>
 8006a9c:	2221      	movs	r2, #33	; 0x21
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fc2b 	bl	80072fc <_calloc_r>
 8006aa6:	69e3      	ldr	r3, [r4, #28]
 8006aa8:	60f0      	str	r0, [r6, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e4      	bne.n	8006a7a <_Balloc+0x2e>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	6802      	ldr	r2, [r0, #0]
 8006ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006aba:	2300      	movs	r3, #0
 8006abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ac0:	e7f7      	b.n	8006ab2 <_Balloc+0x66>
 8006ac2:	bf00      	nop
 8006ac4:	08007ac1 	.word	0x08007ac1
 8006ac8:	08007b41 	.word	0x08007b41

08006acc <_Bfree>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	69c6      	ldr	r6, [r0, #28]
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b976      	cbnz	r6, 8006af4 <_Bfree+0x28>
 8006ad6:	2010      	movs	r0, #16
 8006ad8:	f7ff ff04 	bl	80068e4 <malloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	61e8      	str	r0, [r5, #28]
 8006ae0:	b920      	cbnz	r0, 8006aec <_Bfree+0x20>
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <_Bfree+0x3c>)
 8006ae4:	4809      	ldr	r0, [pc, #36]	; (8006b0c <_Bfree+0x40>)
 8006ae6:	218f      	movs	r1, #143	; 0x8f
 8006ae8:	f000 fbea 	bl	80072c0 <__assert_func>
 8006aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af0:	6006      	str	r6, [r0, #0]
 8006af2:	60c6      	str	r6, [r0, #12]
 8006af4:	b13c      	cbz	r4, 8006b06 <_Bfree+0x3a>
 8006af6:	69eb      	ldr	r3, [r5, #28]
 8006af8:	6862      	ldr	r2, [r4, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b00:	6021      	str	r1, [r4, #0]
 8006b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	08007ac1 	.word	0x08007ac1
 8006b0c:	08007b41 	.word	0x08007b41

08006b10 <__multadd>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	690d      	ldr	r5, [r1, #16]
 8006b16:	4607      	mov	r7, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	f101 0c14 	add.w	ip, r1, #20
 8006b20:	2000      	movs	r0, #0
 8006b22:	f8dc 3000 	ldr.w	r3, [ip]
 8006b26:	b299      	uxth	r1, r3
 8006b28:	fb02 6101 	mla	r1, r2, r1, r6
 8006b2c:	0c1e      	lsrs	r6, r3, #16
 8006b2e:	0c0b      	lsrs	r3, r1, #16
 8006b30:	fb02 3306 	mla	r3, r2, r6, r3
 8006b34:	b289      	uxth	r1, r1
 8006b36:	3001      	adds	r0, #1
 8006b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b3c:	4285      	cmp	r5, r0
 8006b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b46:	dcec      	bgt.n	8006b22 <__multadd+0x12>
 8006b48:	b30e      	cbz	r6, 8006b8e <__multadd+0x7e>
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dc19      	bgt.n	8006b84 <__multadd+0x74>
 8006b50:	6861      	ldr	r1, [r4, #4]
 8006b52:	4638      	mov	r0, r7
 8006b54:	3101      	adds	r1, #1
 8006b56:	f7ff ff79 	bl	8006a4c <_Balloc>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	b928      	cbnz	r0, 8006b6a <__multadd+0x5a>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <__multadd+0x84>)
 8006b62:	480d      	ldr	r0, [pc, #52]	; (8006b98 <__multadd+0x88>)
 8006b64:	21ba      	movs	r1, #186	; 0xba
 8006b66:	f000 fbab 	bl	80072c0 <__assert_func>
 8006b6a:	6922      	ldr	r2, [r4, #16]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	f104 010c 	add.w	r1, r4, #12
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	300c      	adds	r0, #12
 8006b76:	f7fe ffdf 	bl	8005b38 <memcpy>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff ffa5 	bl	8006acc <_Bfree>
 8006b82:	4644      	mov	r4, r8
 8006b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b88:	3501      	adds	r5, #1
 8006b8a:	615e      	str	r6, [r3, #20]
 8006b8c:	6125      	str	r5, [r4, #16]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	08007b30 	.word	0x08007b30
 8006b98:	08007b41 	.word	0x08007b41

08006b9c <__hi0bits>:
 8006b9c:	0c03      	lsrs	r3, r0, #16
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	b9d3      	cbnz	r3, 8006bd8 <__hi0bits+0x3c>
 8006ba2:	0400      	lsls	r0, r0, #16
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006baa:	bf04      	itt	eq
 8006bac:	0200      	lsleq	r0, r0, #8
 8006bae:	3308      	addeq	r3, #8
 8006bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bb4:	bf04      	itt	eq
 8006bb6:	0100      	lsleq	r0, r0, #4
 8006bb8:	3304      	addeq	r3, #4
 8006bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bbe:	bf04      	itt	eq
 8006bc0:	0080      	lsleq	r0, r0, #2
 8006bc2:	3302      	addeq	r3, #2
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	db05      	blt.n	8006bd4 <__hi0bits+0x38>
 8006bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bcc:	f103 0301 	add.w	r3, r3, #1
 8006bd0:	bf08      	it	eq
 8006bd2:	2320      	moveq	r3, #32
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4770      	bx	lr
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e7e4      	b.n	8006ba6 <__hi0bits+0xa>

08006bdc <__lo0bits>:
 8006bdc:	6803      	ldr	r3, [r0, #0]
 8006bde:	f013 0207 	ands.w	r2, r3, #7
 8006be2:	d00c      	beq.n	8006bfe <__lo0bits+0x22>
 8006be4:	07d9      	lsls	r1, r3, #31
 8006be6:	d422      	bmi.n	8006c2e <__lo0bits+0x52>
 8006be8:	079a      	lsls	r2, r3, #30
 8006bea:	bf49      	itett	mi
 8006bec:	085b      	lsrmi	r3, r3, #1
 8006bee:	089b      	lsrpl	r3, r3, #2
 8006bf0:	6003      	strmi	r3, [r0, #0]
 8006bf2:	2201      	movmi	r2, #1
 8006bf4:	bf5c      	itt	pl
 8006bf6:	6003      	strpl	r3, [r0, #0]
 8006bf8:	2202      	movpl	r2, #2
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4770      	bx	lr
 8006bfe:	b299      	uxth	r1, r3
 8006c00:	b909      	cbnz	r1, 8006c06 <__lo0bits+0x2a>
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	2210      	movs	r2, #16
 8006c06:	b2d9      	uxtb	r1, r3
 8006c08:	b909      	cbnz	r1, 8006c0e <__lo0bits+0x32>
 8006c0a:	3208      	adds	r2, #8
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	0719      	lsls	r1, r3, #28
 8006c10:	bf04      	itt	eq
 8006c12:	091b      	lsreq	r3, r3, #4
 8006c14:	3204      	addeq	r2, #4
 8006c16:	0799      	lsls	r1, r3, #30
 8006c18:	bf04      	itt	eq
 8006c1a:	089b      	lsreq	r3, r3, #2
 8006c1c:	3202      	addeq	r2, #2
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d403      	bmi.n	8006c2a <__lo0bits+0x4e>
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f102 0201 	add.w	r2, r2, #1
 8006c28:	d003      	beq.n	8006c32 <__lo0bits+0x56>
 8006c2a:	6003      	str	r3, [r0, #0]
 8006c2c:	e7e5      	b.n	8006bfa <__lo0bits+0x1e>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	e7e3      	b.n	8006bfa <__lo0bits+0x1e>
 8006c32:	2220      	movs	r2, #32
 8006c34:	e7e1      	b.n	8006bfa <__lo0bits+0x1e>
	...

08006c38 <__i2b>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	f7ff ff05 	bl	8006a4c <_Balloc>
 8006c42:	4602      	mov	r2, r0
 8006c44:	b928      	cbnz	r0, 8006c52 <__i2b+0x1a>
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <__i2b+0x24>)
 8006c48:	4805      	ldr	r0, [pc, #20]	; (8006c60 <__i2b+0x28>)
 8006c4a:	f240 1145 	movw	r1, #325	; 0x145
 8006c4e:	f000 fb37 	bl	80072c0 <__assert_func>
 8006c52:	2301      	movs	r3, #1
 8006c54:	6144      	str	r4, [r0, #20]
 8006c56:	6103      	str	r3, [r0, #16]
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08007b30 	.word	0x08007b30
 8006c60:	08007b41 	.word	0x08007b41

08006c64 <__multiply>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	4691      	mov	r9, r2
 8006c6a:	690a      	ldr	r2, [r1, #16]
 8006c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bfb8      	it	lt
 8006c74:	460b      	movlt	r3, r1
 8006c76:	460c      	mov	r4, r1
 8006c78:	bfbc      	itt	lt
 8006c7a:	464c      	movlt	r4, r9
 8006c7c:	4699      	movlt	r9, r3
 8006c7e:	6927      	ldr	r7, [r4, #16]
 8006c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	6861      	ldr	r1, [r4, #4]
 8006c88:	eb07 060a 	add.w	r6, r7, sl
 8006c8c:	42b3      	cmp	r3, r6
 8006c8e:	b085      	sub	sp, #20
 8006c90:	bfb8      	it	lt
 8006c92:	3101      	addlt	r1, #1
 8006c94:	f7ff feda 	bl	8006a4c <_Balloc>
 8006c98:	b930      	cbnz	r0, 8006ca8 <__multiply+0x44>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b44      	ldr	r3, [pc, #272]	; (8006db0 <__multiply+0x14c>)
 8006c9e:	4845      	ldr	r0, [pc, #276]	; (8006db4 <__multiply+0x150>)
 8006ca0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ca4:	f000 fb0c 	bl	80072c0 <__assert_func>
 8006ca8:	f100 0514 	add.w	r5, r0, #20
 8006cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cb0:	462b      	mov	r3, r5
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4543      	cmp	r3, r8
 8006cb6:	d321      	bcc.n	8006cfc <__multiply+0x98>
 8006cb8:	f104 0314 	add.w	r3, r4, #20
 8006cbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cc0:	f109 0314 	add.w	r3, r9, #20
 8006cc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cc8:	9202      	str	r2, [sp, #8]
 8006cca:	1b3a      	subs	r2, r7, r4
 8006ccc:	3a15      	subs	r2, #21
 8006cce:	f022 0203 	bic.w	r2, r2, #3
 8006cd2:	3204      	adds	r2, #4
 8006cd4:	f104 0115 	add.w	r1, r4, #21
 8006cd8:	428f      	cmp	r7, r1
 8006cda:	bf38      	it	cc
 8006cdc:	2204      	movcc	r2, #4
 8006cde:	9201      	str	r2, [sp, #4]
 8006ce0:	9a02      	ldr	r2, [sp, #8]
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d80c      	bhi.n	8006d02 <__multiply+0x9e>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	dd03      	ble.n	8006cf4 <__multiply+0x90>
 8006cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d05b      	beq.n	8006dac <__multiply+0x148>
 8006cf4:	6106      	str	r6, [r0, #16]
 8006cf6:	b005      	add	sp, #20
 8006cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfc:	f843 2b04 	str.w	r2, [r3], #4
 8006d00:	e7d8      	b.n	8006cb4 <__multiply+0x50>
 8006d02:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d06:	f1ba 0f00 	cmp.w	sl, #0
 8006d0a:	d024      	beq.n	8006d56 <__multiply+0xf2>
 8006d0c:	f104 0e14 	add.w	lr, r4, #20
 8006d10:	46a9      	mov	r9, r5
 8006d12:	f04f 0c00 	mov.w	ip, #0
 8006d16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8006d1e:	fa1f fb82 	uxth.w	fp, r2
 8006d22:	b289      	uxth	r1, r1
 8006d24:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d30:	4461      	add	r1, ip
 8006d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d36:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d3e:	b289      	uxth	r1, r1
 8006d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d44:	4577      	cmp	r7, lr
 8006d46:	f849 1b04 	str.w	r1, [r9], #4
 8006d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d4e:	d8e2      	bhi.n	8006d16 <__multiply+0xb2>
 8006d50:	9a01      	ldr	r2, [sp, #4]
 8006d52:	f845 c002 	str.w	ip, [r5, r2]
 8006d56:	9a03      	ldr	r2, [sp, #12]
 8006d58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	d021      	beq.n	8006da8 <__multiply+0x144>
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	f104 0c14 	add.w	ip, r4, #20
 8006d6a:	46ae      	mov	lr, r5
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	f8bc b000 	ldrh.w	fp, [ip]
 8006d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d78:	fb09 220b 	mla	r2, r9, fp, r2
 8006d7c:	4452      	add	r2, sl
 8006d7e:	b289      	uxth	r1, r1
 8006d80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d84:	f84e 1b04 	str.w	r1, [lr], #4
 8006d88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d90:	f8be 1000 	ldrh.w	r1, [lr]
 8006d94:	fb09 110a 	mla	r1, r9, sl, r1
 8006d98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d9c:	4567      	cmp	r7, ip
 8006d9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006da2:	d8e5      	bhi.n	8006d70 <__multiply+0x10c>
 8006da4:	9a01      	ldr	r2, [sp, #4]
 8006da6:	50a9      	str	r1, [r5, r2]
 8006da8:	3504      	adds	r5, #4
 8006daa:	e799      	b.n	8006ce0 <__multiply+0x7c>
 8006dac:	3e01      	subs	r6, #1
 8006dae:	e79b      	b.n	8006ce8 <__multiply+0x84>
 8006db0:	08007b30 	.word	0x08007b30
 8006db4:	08007b41 	.word	0x08007b41

08006db8 <__pow5mult>:
 8006db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	f012 0203 	ands.w	r2, r2, #3
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	d007      	beq.n	8006dd8 <__pow5mult+0x20>
 8006dc8:	4c25      	ldr	r4, [pc, #148]	; (8006e60 <__pow5mult+0xa8>)
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dd2:	f7ff fe9d 	bl	8006b10 <__multadd>
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	10ad      	asrs	r5, r5, #2
 8006dda:	d03d      	beq.n	8006e58 <__pow5mult+0xa0>
 8006ddc:	69f4      	ldr	r4, [r6, #28]
 8006dde:	b97c      	cbnz	r4, 8006e00 <__pow5mult+0x48>
 8006de0:	2010      	movs	r0, #16
 8006de2:	f7ff fd7f 	bl	80068e4 <malloc>
 8006de6:	4602      	mov	r2, r0
 8006de8:	61f0      	str	r0, [r6, #28]
 8006dea:	b928      	cbnz	r0, 8006df8 <__pow5mult+0x40>
 8006dec:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <__pow5mult+0xac>)
 8006dee:	481e      	ldr	r0, [pc, #120]	; (8006e68 <__pow5mult+0xb0>)
 8006df0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006df4:	f000 fa64 	bl	80072c0 <__assert_func>
 8006df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dfc:	6004      	str	r4, [r0, #0]
 8006dfe:	60c4      	str	r4, [r0, #12]
 8006e00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e08:	b94c      	cbnz	r4, 8006e1e <__pow5mult+0x66>
 8006e0a:	f240 2171 	movw	r1, #625	; 0x271
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7ff ff12 	bl	8006c38 <__i2b>
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	07eb      	lsls	r3, r5, #31
 8006e24:	d50a      	bpl.n	8006e3c <__pow5mult+0x84>
 8006e26:	4639      	mov	r1, r7
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff ff1a 	bl	8006c64 <__multiply>
 8006e30:	4639      	mov	r1, r7
 8006e32:	4680      	mov	r8, r0
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff fe49 	bl	8006acc <_Bfree>
 8006e3a:	4647      	mov	r7, r8
 8006e3c:	106d      	asrs	r5, r5, #1
 8006e3e:	d00b      	beq.n	8006e58 <__pow5mult+0xa0>
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	b938      	cbnz	r0, 8006e54 <__pow5mult+0x9c>
 8006e44:	4622      	mov	r2, r4
 8006e46:	4621      	mov	r1, r4
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff ff0b 	bl	8006c64 <__multiply>
 8006e4e:	6020      	str	r0, [r4, #0]
 8006e50:	f8c0 9000 	str.w	r9, [r0]
 8006e54:	4604      	mov	r4, r0
 8006e56:	e7e4      	b.n	8006e22 <__pow5mult+0x6a>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	bf00      	nop
 8006e60:	08007c90 	.word	0x08007c90
 8006e64:	08007ac1 	.word	0x08007ac1
 8006e68:	08007b41 	.word	0x08007b41

08006e6c <__lshift>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	460c      	mov	r4, r1
 8006e72:	6849      	ldr	r1, [r1, #4]
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	4691      	mov	r9, r2
 8006e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e84:	f108 0601 	add.w	r6, r8, #1
 8006e88:	42b3      	cmp	r3, r6
 8006e8a:	db0b      	blt.n	8006ea4 <__lshift+0x38>
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff fddd 	bl	8006a4c <_Balloc>
 8006e92:	4605      	mov	r5, r0
 8006e94:	b948      	cbnz	r0, 8006eaa <__lshift+0x3e>
 8006e96:	4602      	mov	r2, r0
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <__lshift+0xd0>)
 8006e9a:	4829      	ldr	r0, [pc, #164]	; (8006f40 <__lshift+0xd4>)
 8006e9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ea0:	f000 fa0e 	bl	80072c0 <__assert_func>
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	e7ee      	b.n	8006e88 <__lshift+0x1c>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f100 0114 	add.w	r1, r0, #20
 8006eb0:	f100 0210 	add.w	r2, r0, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	4553      	cmp	r3, sl
 8006eb8:	db33      	blt.n	8006f22 <__lshift+0xb6>
 8006eba:	6920      	ldr	r0, [r4, #16]
 8006ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ec0:	f104 0314 	add.w	r3, r4, #20
 8006ec4:	f019 091f 	ands.w	r9, r9, #31
 8006ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ed0:	d02b      	beq.n	8006f2a <__lshift+0xbe>
 8006ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ed6:	468a      	mov	sl, r1
 8006ed8:	2200      	movs	r2, #0
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	fa00 f009 	lsl.w	r0, r0, r9
 8006ee0:	4310      	orrs	r0, r2
 8006ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eea:	459c      	cmp	ip, r3
 8006eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ef0:	d8f3      	bhi.n	8006eda <__lshift+0x6e>
 8006ef2:	ebac 0304 	sub.w	r3, ip, r4
 8006ef6:	3b15      	subs	r3, #21
 8006ef8:	f023 0303 	bic.w	r3, r3, #3
 8006efc:	3304      	adds	r3, #4
 8006efe:	f104 0015 	add.w	r0, r4, #21
 8006f02:	4584      	cmp	ip, r0
 8006f04:	bf38      	it	cc
 8006f06:	2304      	movcc	r3, #4
 8006f08:	50ca      	str	r2, [r1, r3]
 8006f0a:	b10a      	cbz	r2, 8006f10 <__lshift+0xa4>
 8006f0c:	f108 0602 	add.w	r6, r8, #2
 8006f10:	3e01      	subs	r6, #1
 8006f12:	4638      	mov	r0, r7
 8006f14:	612e      	str	r6, [r5, #16]
 8006f16:	4621      	mov	r1, r4
 8006f18:	f7ff fdd8 	bl	8006acc <_Bfree>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f26:	3301      	adds	r3, #1
 8006f28:	e7c5      	b.n	8006eb6 <__lshift+0x4a>
 8006f2a:	3904      	subs	r1, #4
 8006f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f34:	459c      	cmp	ip, r3
 8006f36:	d8f9      	bhi.n	8006f2c <__lshift+0xc0>
 8006f38:	e7ea      	b.n	8006f10 <__lshift+0xa4>
 8006f3a:	bf00      	nop
 8006f3c:	08007b30 	.word	0x08007b30
 8006f40:	08007b41 	.word	0x08007b41

08006f44 <__mcmp>:
 8006f44:	b530      	push	{r4, r5, lr}
 8006f46:	6902      	ldr	r2, [r0, #16]
 8006f48:	690c      	ldr	r4, [r1, #16]
 8006f4a:	1b12      	subs	r2, r2, r4
 8006f4c:	d10e      	bne.n	8006f6c <__mcmp+0x28>
 8006f4e:	f100 0314 	add.w	r3, r0, #20
 8006f52:	3114      	adds	r1, #20
 8006f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f64:	42a5      	cmp	r5, r4
 8006f66:	d003      	beq.n	8006f70 <__mcmp+0x2c>
 8006f68:	d305      	bcc.n	8006f76 <__mcmp+0x32>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	bd30      	pop	{r4, r5, pc}
 8006f70:	4283      	cmp	r3, r0
 8006f72:	d3f3      	bcc.n	8006f5c <__mcmp+0x18>
 8006f74:	e7fa      	b.n	8006f6c <__mcmp+0x28>
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7a:	e7f7      	b.n	8006f6c <__mcmp+0x28>

08006f7c <__mdiff>:
 8006f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	4606      	mov	r6, r0
 8006f84:	4611      	mov	r1, r2
 8006f86:	4620      	mov	r0, r4
 8006f88:	4690      	mov	r8, r2
 8006f8a:	f7ff ffdb 	bl	8006f44 <__mcmp>
 8006f8e:	1e05      	subs	r5, r0, #0
 8006f90:	d110      	bne.n	8006fb4 <__mdiff+0x38>
 8006f92:	4629      	mov	r1, r5
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff fd59 	bl	8006a4c <_Balloc>
 8006f9a:	b930      	cbnz	r0, 8006faa <__mdiff+0x2e>
 8006f9c:	4b3a      	ldr	r3, [pc, #232]	; (8007088 <__mdiff+0x10c>)
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f240 2137 	movw	r1, #567	; 0x237
 8006fa4:	4839      	ldr	r0, [pc, #228]	; (800708c <__mdiff+0x110>)
 8006fa6:	f000 f98b 	bl	80072c0 <__assert_func>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	bfa4      	itt	ge
 8006fb6:	4643      	movge	r3, r8
 8006fb8:	46a0      	movge	r8, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fc0:	bfa6      	itte	ge
 8006fc2:	461c      	movge	r4, r3
 8006fc4:	2500      	movge	r5, #0
 8006fc6:	2501      	movlt	r5, #1
 8006fc8:	f7ff fd40 	bl	8006a4c <_Balloc>
 8006fcc:	b920      	cbnz	r0, 8006fd8 <__mdiff+0x5c>
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <__mdiff+0x10c>)
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f240 2145 	movw	r1, #581	; 0x245
 8006fd6:	e7e5      	b.n	8006fa4 <__mdiff+0x28>
 8006fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fdc:	6926      	ldr	r6, [r4, #16]
 8006fde:	60c5      	str	r5, [r0, #12]
 8006fe0:	f104 0914 	add.w	r9, r4, #20
 8006fe4:	f108 0514 	add.w	r5, r8, #20
 8006fe8:	f100 0e14 	add.w	lr, r0, #20
 8006fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ff4:	f108 0210 	add.w	r2, r8, #16
 8006ff8:	46f2      	mov	sl, lr
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007004:	fa11 f88b 	uxtah	r8, r1, fp
 8007008:	b299      	uxth	r1, r3
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	eba8 0801 	sub.w	r8, r8, r1
 8007010:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007014:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007018:	fa1f f888 	uxth.w	r8, r8
 800701c:	1419      	asrs	r1, r3, #16
 800701e:	454e      	cmp	r6, r9
 8007020:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007024:	f84a 3b04 	str.w	r3, [sl], #4
 8007028:	d8e8      	bhi.n	8006ffc <__mdiff+0x80>
 800702a:	1b33      	subs	r3, r6, r4
 800702c:	3b15      	subs	r3, #21
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	3304      	adds	r3, #4
 8007034:	3415      	adds	r4, #21
 8007036:	42a6      	cmp	r6, r4
 8007038:	bf38      	it	cc
 800703a:	2304      	movcc	r3, #4
 800703c:	441d      	add	r5, r3
 800703e:	4473      	add	r3, lr
 8007040:	469e      	mov	lr, r3
 8007042:	462e      	mov	r6, r5
 8007044:	4566      	cmp	r6, ip
 8007046:	d30e      	bcc.n	8007066 <__mdiff+0xea>
 8007048:	f10c 0203 	add.w	r2, ip, #3
 800704c:	1b52      	subs	r2, r2, r5
 800704e:	f022 0203 	bic.w	r2, r2, #3
 8007052:	3d03      	subs	r5, #3
 8007054:	45ac      	cmp	ip, r5
 8007056:	bf38      	it	cc
 8007058:	2200      	movcc	r2, #0
 800705a:	4413      	add	r3, r2
 800705c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007060:	b17a      	cbz	r2, 8007082 <__mdiff+0x106>
 8007062:	6107      	str	r7, [r0, #16]
 8007064:	e7a4      	b.n	8006fb0 <__mdiff+0x34>
 8007066:	f856 8b04 	ldr.w	r8, [r6], #4
 800706a:	fa11 f288 	uxtah	r2, r1, r8
 800706e:	1414      	asrs	r4, r2, #16
 8007070:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007074:	b292      	uxth	r2, r2
 8007076:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800707a:	f84e 2b04 	str.w	r2, [lr], #4
 800707e:	1421      	asrs	r1, r4, #16
 8007080:	e7e0      	b.n	8007044 <__mdiff+0xc8>
 8007082:	3f01      	subs	r7, #1
 8007084:	e7ea      	b.n	800705c <__mdiff+0xe0>
 8007086:	bf00      	nop
 8007088:	08007b30 	.word	0x08007b30
 800708c:	08007b41 	.word	0x08007b41

08007090 <__d2b>:
 8007090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007094:	460f      	mov	r7, r1
 8007096:	2101      	movs	r1, #1
 8007098:	ec59 8b10 	vmov	r8, r9, d0
 800709c:	4616      	mov	r6, r2
 800709e:	f7ff fcd5 	bl	8006a4c <_Balloc>
 80070a2:	4604      	mov	r4, r0
 80070a4:	b930      	cbnz	r0, 80070b4 <__d2b+0x24>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b24      	ldr	r3, [pc, #144]	; (800713c <__d2b+0xac>)
 80070aa:	4825      	ldr	r0, [pc, #148]	; (8007140 <__d2b+0xb0>)
 80070ac:	f240 310f 	movw	r1, #783	; 0x30f
 80070b0:	f000 f906 	bl	80072c0 <__assert_func>
 80070b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070bc:	bb2d      	cbnz	r5, 800710a <__d2b+0x7a>
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	f1b8 0300 	subs.w	r3, r8, #0
 80070c4:	d026      	beq.n	8007114 <__d2b+0x84>
 80070c6:	4668      	mov	r0, sp
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	f7ff fd87 	bl	8006bdc <__lo0bits>
 80070ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070d2:	b1e8      	cbz	r0, 8007110 <__d2b+0x80>
 80070d4:	f1c0 0320 	rsb	r3, r0, #32
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	430b      	orrs	r3, r1
 80070de:	40c2      	lsrs	r2, r0
 80070e0:	6163      	str	r3, [r4, #20]
 80070e2:	9201      	str	r2, [sp, #4]
 80070e4:	9b01      	ldr	r3, [sp, #4]
 80070e6:	61a3      	str	r3, [r4, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf14      	ite	ne
 80070ec:	2202      	movne	r2, #2
 80070ee:	2201      	moveq	r2, #1
 80070f0:	6122      	str	r2, [r4, #16]
 80070f2:	b1bd      	cbz	r5, 8007124 <__d2b+0x94>
 80070f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070f8:	4405      	add	r5, r0
 80070fa:	603d      	str	r5, [r7, #0]
 80070fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007100:	6030      	str	r0, [r6, #0]
 8007102:	4620      	mov	r0, r4
 8007104:	b003      	add	sp, #12
 8007106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800710a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800710e:	e7d6      	b.n	80070be <__d2b+0x2e>
 8007110:	6161      	str	r1, [r4, #20]
 8007112:	e7e7      	b.n	80070e4 <__d2b+0x54>
 8007114:	a801      	add	r0, sp, #4
 8007116:	f7ff fd61 	bl	8006bdc <__lo0bits>
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	6163      	str	r3, [r4, #20]
 800711e:	3020      	adds	r0, #32
 8007120:	2201      	movs	r2, #1
 8007122:	e7e5      	b.n	80070f0 <__d2b+0x60>
 8007124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800712c:	6038      	str	r0, [r7, #0]
 800712e:	6918      	ldr	r0, [r3, #16]
 8007130:	f7ff fd34 	bl	8006b9c <__hi0bits>
 8007134:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007138:	e7e2      	b.n	8007100 <__d2b+0x70>
 800713a:	bf00      	nop
 800713c:	08007b30 	.word	0x08007b30
 8007140:	08007b41 	.word	0x08007b41

08007144 <__sflush_r>:
 8007144:	898a      	ldrh	r2, [r1, #12]
 8007146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714a:	4605      	mov	r5, r0
 800714c:	0710      	lsls	r0, r2, #28
 800714e:	460c      	mov	r4, r1
 8007150:	d458      	bmi.n	8007204 <__sflush_r+0xc0>
 8007152:	684b      	ldr	r3, [r1, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	dc05      	bgt.n	8007164 <__sflush_r+0x20>
 8007158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	dc02      	bgt.n	8007164 <__sflush_r+0x20>
 800715e:	2000      	movs	r0, #0
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007166:	2e00      	cmp	r6, #0
 8007168:	d0f9      	beq.n	800715e <__sflush_r+0x1a>
 800716a:	2300      	movs	r3, #0
 800716c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007170:	682f      	ldr	r7, [r5, #0]
 8007172:	6a21      	ldr	r1, [r4, #32]
 8007174:	602b      	str	r3, [r5, #0]
 8007176:	d032      	beq.n	80071de <__sflush_r+0x9a>
 8007178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	075a      	lsls	r2, r3, #29
 800717e:	d505      	bpl.n	800718c <__sflush_r+0x48>
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	1ac0      	subs	r0, r0, r3
 8007184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007186:	b10b      	cbz	r3, 800718c <__sflush_r+0x48>
 8007188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800718a:	1ac0      	subs	r0, r0, r3
 800718c:	2300      	movs	r3, #0
 800718e:	4602      	mov	r2, r0
 8007190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007192:	6a21      	ldr	r1, [r4, #32]
 8007194:	4628      	mov	r0, r5
 8007196:	47b0      	blx	r6
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	d106      	bne.n	80071ac <__sflush_r+0x68>
 800719e:	6829      	ldr	r1, [r5, #0]
 80071a0:	291d      	cmp	r1, #29
 80071a2:	d82b      	bhi.n	80071fc <__sflush_r+0xb8>
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <__sflush_r+0x108>)
 80071a6:	410a      	asrs	r2, r1
 80071a8:	07d6      	lsls	r6, r2, #31
 80071aa:	d427      	bmi.n	80071fc <__sflush_r+0xb8>
 80071ac:	2200      	movs	r2, #0
 80071ae:	6062      	str	r2, [r4, #4]
 80071b0:	04d9      	lsls	r1, r3, #19
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	d504      	bpl.n	80071c2 <__sflush_r+0x7e>
 80071b8:	1c42      	adds	r2, r0, #1
 80071ba:	d101      	bne.n	80071c0 <__sflush_r+0x7c>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b903      	cbnz	r3, 80071c2 <__sflush_r+0x7e>
 80071c0:	6560      	str	r0, [r4, #84]	; 0x54
 80071c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c4:	602f      	str	r7, [r5, #0]
 80071c6:	2900      	cmp	r1, #0
 80071c8:	d0c9      	beq.n	800715e <__sflush_r+0x1a>
 80071ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ce:	4299      	cmp	r1, r3
 80071d0:	d002      	beq.n	80071d8 <__sflush_r+0x94>
 80071d2:	4628      	mov	r0, r5
 80071d4:	f7ff fb3a 	bl	800684c <_free_r>
 80071d8:	2000      	movs	r0, #0
 80071da:	6360      	str	r0, [r4, #52]	; 0x34
 80071dc:	e7c0      	b.n	8007160 <__sflush_r+0x1c>
 80071de:	2301      	movs	r3, #1
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b0      	blx	r6
 80071e4:	1c41      	adds	r1, r0, #1
 80071e6:	d1c8      	bne.n	800717a <__sflush_r+0x36>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0c5      	beq.n	800717a <__sflush_r+0x36>
 80071ee:	2b1d      	cmp	r3, #29
 80071f0:	d001      	beq.n	80071f6 <__sflush_r+0xb2>
 80071f2:	2b16      	cmp	r3, #22
 80071f4:	d101      	bne.n	80071fa <__sflush_r+0xb6>
 80071f6:	602f      	str	r7, [r5, #0]
 80071f8:	e7b1      	b.n	800715e <__sflush_r+0x1a>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	e7ad      	b.n	8007160 <__sflush_r+0x1c>
 8007204:	690f      	ldr	r7, [r1, #16]
 8007206:	2f00      	cmp	r7, #0
 8007208:	d0a9      	beq.n	800715e <__sflush_r+0x1a>
 800720a:	0793      	lsls	r3, r2, #30
 800720c:	680e      	ldr	r6, [r1, #0]
 800720e:	bf08      	it	eq
 8007210:	694b      	ldreq	r3, [r1, #20]
 8007212:	600f      	str	r7, [r1, #0]
 8007214:	bf18      	it	ne
 8007216:	2300      	movne	r3, #0
 8007218:	eba6 0807 	sub.w	r8, r6, r7
 800721c:	608b      	str	r3, [r1, #8]
 800721e:	f1b8 0f00 	cmp.w	r8, #0
 8007222:	dd9c      	ble.n	800715e <__sflush_r+0x1a>
 8007224:	6a21      	ldr	r1, [r4, #32]
 8007226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007228:	4643      	mov	r3, r8
 800722a:	463a      	mov	r2, r7
 800722c:	4628      	mov	r0, r5
 800722e:	47b0      	blx	r6
 8007230:	2800      	cmp	r0, #0
 8007232:	dc06      	bgt.n	8007242 <__sflush_r+0xfe>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	e78e      	b.n	8007160 <__sflush_r+0x1c>
 8007242:	4407      	add	r7, r0
 8007244:	eba8 0800 	sub.w	r8, r8, r0
 8007248:	e7e9      	b.n	800721e <__sflush_r+0xda>
 800724a:	bf00      	nop
 800724c:	dfbffffe 	.word	0xdfbffffe

08007250 <_fflush_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	690b      	ldr	r3, [r1, #16]
 8007254:	4605      	mov	r5, r0
 8007256:	460c      	mov	r4, r1
 8007258:	b913      	cbnz	r3, 8007260 <_fflush_r+0x10>
 800725a:	2500      	movs	r5, #0
 800725c:	4628      	mov	r0, r5
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	b118      	cbz	r0, 800726a <_fflush_r+0x1a>
 8007262:	6a03      	ldr	r3, [r0, #32]
 8007264:	b90b      	cbnz	r3, 800726a <_fflush_r+0x1a>
 8007266:	f7fe fb6f 	bl	8005948 <__sinit>
 800726a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f3      	beq.n	800725a <_fflush_r+0xa>
 8007272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007274:	07d0      	lsls	r0, r2, #31
 8007276:	d404      	bmi.n	8007282 <_fflush_r+0x32>
 8007278:	0599      	lsls	r1, r3, #22
 800727a:	d402      	bmi.n	8007282 <_fflush_r+0x32>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f7fe fc59 	bl	8005b34 <__retarget_lock_acquire_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	4621      	mov	r1, r4
 8007286:	f7ff ff5d 	bl	8007144 <__sflush_r>
 800728a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800728c:	07da      	lsls	r2, r3, #31
 800728e:	4605      	mov	r5, r0
 8007290:	d4e4      	bmi.n	800725c <_fflush_r+0xc>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	059b      	lsls	r3, r3, #22
 8007296:	d4e1      	bmi.n	800725c <_fflush_r+0xc>
 8007298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800729a:	f7fe fc4c 	bl	8005b36 <__retarget_lock_release_recursive>
 800729e:	e7dd      	b.n	800725c <_fflush_r+0xc>

080072a0 <_sbrk_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d06      	ldr	r5, [pc, #24]	; (80072bc <_sbrk_r+0x1c>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7fa fa1e 	bl	80016ec <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_sbrk_r+0x1a>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_sbrk_r+0x1a>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	20000628 	.word	0x20000628

080072c0 <__assert_func>:
 80072c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072c2:	4614      	mov	r4, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <__assert_func+0x2c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4605      	mov	r5, r0
 80072cc:	68d8      	ldr	r0, [r3, #12]
 80072ce:	b14c      	cbz	r4, 80072e4 <__assert_func+0x24>
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <__assert_func+0x30>)
 80072d2:	9100      	str	r1, [sp, #0]
 80072d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072d8:	4906      	ldr	r1, [pc, #24]	; (80072f4 <__assert_func+0x34>)
 80072da:	462b      	mov	r3, r5
 80072dc:	f000 f844 	bl	8007368 <fiprintf>
 80072e0:	f000 f854 	bl	800738c <abort>
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <__assert_func+0x38>)
 80072e6:	461c      	mov	r4, r3
 80072e8:	e7f3      	b.n	80072d2 <__assert_func+0x12>
 80072ea:	bf00      	nop
 80072ec:	2000006c 	.word	0x2000006c
 80072f0:	08007ca6 	.word	0x08007ca6
 80072f4:	08007cb3 	.word	0x08007cb3
 80072f8:	08007ce1 	.word	0x08007ce1

080072fc <_calloc_r>:
 80072fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072fe:	fba1 2402 	umull	r2, r4, r1, r2
 8007302:	b94c      	cbnz	r4, 8007318 <_calloc_r+0x1c>
 8007304:	4611      	mov	r1, r2
 8007306:	9201      	str	r2, [sp, #4]
 8007308:	f7ff fb14 	bl	8006934 <_malloc_r>
 800730c:	9a01      	ldr	r2, [sp, #4]
 800730e:	4605      	mov	r5, r0
 8007310:	b930      	cbnz	r0, 8007320 <_calloc_r+0x24>
 8007312:	4628      	mov	r0, r5
 8007314:	b003      	add	sp, #12
 8007316:	bd30      	pop	{r4, r5, pc}
 8007318:	220c      	movs	r2, #12
 800731a:	6002      	str	r2, [r0, #0]
 800731c:	2500      	movs	r5, #0
 800731e:	e7f8      	b.n	8007312 <_calloc_r+0x16>
 8007320:	4621      	mov	r1, r4
 8007322:	f7fe fb8a 	bl	8005a3a <memset>
 8007326:	e7f4      	b.n	8007312 <_calloc_r+0x16>

08007328 <__ascii_mbtowc>:
 8007328:	b082      	sub	sp, #8
 800732a:	b901      	cbnz	r1, 800732e <__ascii_mbtowc+0x6>
 800732c:	a901      	add	r1, sp, #4
 800732e:	b142      	cbz	r2, 8007342 <__ascii_mbtowc+0x1a>
 8007330:	b14b      	cbz	r3, 8007346 <__ascii_mbtowc+0x1e>
 8007332:	7813      	ldrb	r3, [r2, #0]
 8007334:	600b      	str	r3, [r1, #0]
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	1e10      	subs	r0, r2, #0
 800733a:	bf18      	it	ne
 800733c:	2001      	movne	r0, #1
 800733e:	b002      	add	sp, #8
 8007340:	4770      	bx	lr
 8007342:	4610      	mov	r0, r2
 8007344:	e7fb      	b.n	800733e <__ascii_mbtowc+0x16>
 8007346:	f06f 0001 	mvn.w	r0, #1
 800734a:	e7f8      	b.n	800733e <__ascii_mbtowc+0x16>

0800734c <__ascii_wctomb>:
 800734c:	b149      	cbz	r1, 8007362 <__ascii_wctomb+0x16>
 800734e:	2aff      	cmp	r2, #255	; 0xff
 8007350:	bf85      	ittet	hi
 8007352:	238a      	movhi	r3, #138	; 0x8a
 8007354:	6003      	strhi	r3, [r0, #0]
 8007356:	700a      	strbls	r2, [r1, #0]
 8007358:	f04f 30ff 	movhi.w	r0, #4294967295
 800735c:	bf98      	it	ls
 800735e:	2001      	movls	r0, #1
 8007360:	4770      	bx	lr
 8007362:	4608      	mov	r0, r1
 8007364:	4770      	bx	lr
	...

08007368 <fiprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b503      	push	{r0, r1, lr}
 800736c:	4601      	mov	r1, r0
 800736e:	ab03      	add	r3, sp, #12
 8007370:	4805      	ldr	r0, [pc, #20]	; (8007388 <fiprintf+0x20>)
 8007372:	f853 2b04 	ldr.w	r2, [r3], #4
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	f000 f837 	bl	80073ec <_vfiprintf_r>
 800737e:	b002      	add	sp, #8
 8007380:	f85d eb04 	ldr.w	lr, [sp], #4
 8007384:	b003      	add	sp, #12
 8007386:	4770      	bx	lr
 8007388:	2000006c 	.word	0x2000006c

0800738c <abort>:
 800738c:	b508      	push	{r3, lr}
 800738e:	2006      	movs	r0, #6
 8007390:	f000 fa04 	bl	800779c <raise>
 8007394:	2001      	movs	r0, #1
 8007396:	f7fa f931 	bl	80015fc <_exit>

0800739a <__sfputc_r>:
 800739a:	6893      	ldr	r3, [r2, #8]
 800739c:	3b01      	subs	r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	b410      	push	{r4}
 80073a2:	6093      	str	r3, [r2, #8]
 80073a4:	da08      	bge.n	80073b8 <__sfputc_r+0x1e>
 80073a6:	6994      	ldr	r4, [r2, #24]
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	db01      	blt.n	80073b0 <__sfputc_r+0x16>
 80073ac:	290a      	cmp	r1, #10
 80073ae:	d103      	bne.n	80073b8 <__sfputc_r+0x1e>
 80073b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b4:	f000 b934 	b.w	8007620 <__swbuf_r>
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	1c58      	adds	r0, r3, #1
 80073bc:	6010      	str	r0, [r2, #0]
 80073be:	7019      	strb	r1, [r3, #0]
 80073c0:	4608      	mov	r0, r1
 80073c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <__sfputs_r>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	4606      	mov	r6, r0
 80073cc:	460f      	mov	r7, r1
 80073ce:	4614      	mov	r4, r2
 80073d0:	18d5      	adds	r5, r2, r3
 80073d2:	42ac      	cmp	r4, r5
 80073d4:	d101      	bne.n	80073da <__sfputs_r+0x12>
 80073d6:	2000      	movs	r0, #0
 80073d8:	e007      	b.n	80073ea <__sfputs_r+0x22>
 80073da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073de:	463a      	mov	r2, r7
 80073e0:	4630      	mov	r0, r6
 80073e2:	f7ff ffda 	bl	800739a <__sfputc_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d1f3      	bne.n	80073d2 <__sfputs_r+0xa>
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073ec <_vfiprintf_r>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	460d      	mov	r5, r1
 80073f2:	b09d      	sub	sp, #116	; 0x74
 80073f4:	4614      	mov	r4, r2
 80073f6:	4698      	mov	r8, r3
 80073f8:	4606      	mov	r6, r0
 80073fa:	b118      	cbz	r0, 8007404 <_vfiprintf_r+0x18>
 80073fc:	6a03      	ldr	r3, [r0, #32]
 80073fe:	b90b      	cbnz	r3, 8007404 <_vfiprintf_r+0x18>
 8007400:	f7fe faa2 	bl	8005948 <__sinit>
 8007404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d405      	bmi.n	8007416 <_vfiprintf_r+0x2a>
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	059a      	lsls	r2, r3, #22
 800740e:	d402      	bmi.n	8007416 <_vfiprintf_r+0x2a>
 8007410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007412:	f7fe fb8f 	bl	8005b34 <__retarget_lock_acquire_recursive>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	071b      	lsls	r3, r3, #28
 800741a:	d501      	bpl.n	8007420 <_vfiprintf_r+0x34>
 800741c:	692b      	ldr	r3, [r5, #16]
 800741e:	b99b      	cbnz	r3, 8007448 <_vfiprintf_r+0x5c>
 8007420:	4629      	mov	r1, r5
 8007422:	4630      	mov	r0, r6
 8007424:	f000 f93a 	bl	800769c <__swsetup_r>
 8007428:	b170      	cbz	r0, 8007448 <_vfiprintf_r+0x5c>
 800742a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800742c:	07dc      	lsls	r4, r3, #31
 800742e:	d504      	bpl.n	800743a <_vfiprintf_r+0x4e>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	b01d      	add	sp, #116	; 0x74
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	0598      	lsls	r0, r3, #22
 800743e:	d4f7      	bmi.n	8007430 <_vfiprintf_r+0x44>
 8007440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007442:	f7fe fb78 	bl	8005b36 <__retarget_lock_release_recursive>
 8007446:	e7f3      	b.n	8007430 <_vfiprintf_r+0x44>
 8007448:	2300      	movs	r3, #0
 800744a:	9309      	str	r3, [sp, #36]	; 0x24
 800744c:	2320      	movs	r3, #32
 800744e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007452:	f8cd 800c 	str.w	r8, [sp, #12]
 8007456:	2330      	movs	r3, #48	; 0x30
 8007458:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800760c <_vfiprintf_r+0x220>
 800745c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007460:	f04f 0901 	mov.w	r9, #1
 8007464:	4623      	mov	r3, r4
 8007466:	469a      	mov	sl, r3
 8007468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800746c:	b10a      	cbz	r2, 8007472 <_vfiprintf_r+0x86>
 800746e:	2a25      	cmp	r2, #37	; 0x25
 8007470:	d1f9      	bne.n	8007466 <_vfiprintf_r+0x7a>
 8007472:	ebba 0b04 	subs.w	fp, sl, r4
 8007476:	d00b      	beq.n	8007490 <_vfiprintf_r+0xa4>
 8007478:	465b      	mov	r3, fp
 800747a:	4622      	mov	r2, r4
 800747c:	4629      	mov	r1, r5
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ffa2 	bl	80073c8 <__sfputs_r>
 8007484:	3001      	adds	r0, #1
 8007486:	f000 80a9 	beq.w	80075dc <_vfiprintf_r+0x1f0>
 800748a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800748c:	445a      	add	r2, fp
 800748e:	9209      	str	r2, [sp, #36]	; 0x24
 8007490:	f89a 3000 	ldrb.w	r3, [sl]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a1 	beq.w	80075dc <_vfiprintf_r+0x1f0>
 800749a:	2300      	movs	r3, #0
 800749c:	f04f 32ff 	mov.w	r2, #4294967295
 80074a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a4:	f10a 0a01 	add.w	sl, sl, #1
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	9307      	str	r3, [sp, #28]
 80074ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074b0:	931a      	str	r3, [sp, #104]	; 0x68
 80074b2:	4654      	mov	r4, sl
 80074b4:	2205      	movs	r2, #5
 80074b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ba:	4854      	ldr	r0, [pc, #336]	; (800760c <_vfiprintf_r+0x220>)
 80074bc:	f7f8 fe88 	bl	80001d0 <memchr>
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	b9d8      	cbnz	r0, 80074fc <_vfiprintf_r+0x110>
 80074c4:	06d1      	lsls	r1, r2, #27
 80074c6:	bf44      	itt	mi
 80074c8:	2320      	movmi	r3, #32
 80074ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ce:	0713      	lsls	r3, r2, #28
 80074d0:	bf44      	itt	mi
 80074d2:	232b      	movmi	r3, #43	; 0x2b
 80074d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d8:	f89a 3000 	ldrb.w	r3, [sl]
 80074dc:	2b2a      	cmp	r3, #42	; 0x2a
 80074de:	d015      	beq.n	800750c <_vfiprintf_r+0x120>
 80074e0:	9a07      	ldr	r2, [sp, #28]
 80074e2:	4654      	mov	r4, sl
 80074e4:	2000      	movs	r0, #0
 80074e6:	f04f 0c0a 	mov.w	ip, #10
 80074ea:	4621      	mov	r1, r4
 80074ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f0:	3b30      	subs	r3, #48	; 0x30
 80074f2:	2b09      	cmp	r3, #9
 80074f4:	d94d      	bls.n	8007592 <_vfiprintf_r+0x1a6>
 80074f6:	b1b0      	cbz	r0, 8007526 <_vfiprintf_r+0x13a>
 80074f8:	9207      	str	r2, [sp, #28]
 80074fa:	e014      	b.n	8007526 <_vfiprintf_r+0x13a>
 80074fc:	eba0 0308 	sub.w	r3, r0, r8
 8007500:	fa09 f303 	lsl.w	r3, r9, r3
 8007504:	4313      	orrs	r3, r2
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	46a2      	mov	sl, r4
 800750a:	e7d2      	b.n	80074b2 <_vfiprintf_r+0xc6>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	1d19      	adds	r1, r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	9103      	str	r1, [sp, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfbb      	ittet	lt
 8007518:	425b      	neglt	r3, r3
 800751a:	f042 0202 	orrlt.w	r2, r2, #2
 800751e:	9307      	strge	r3, [sp, #28]
 8007520:	9307      	strlt	r3, [sp, #28]
 8007522:	bfb8      	it	lt
 8007524:	9204      	strlt	r2, [sp, #16]
 8007526:	7823      	ldrb	r3, [r4, #0]
 8007528:	2b2e      	cmp	r3, #46	; 0x2e
 800752a:	d10c      	bne.n	8007546 <_vfiprintf_r+0x15a>
 800752c:	7863      	ldrb	r3, [r4, #1]
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d134      	bne.n	800759c <_vfiprintf_r+0x1b0>
 8007532:	9b03      	ldr	r3, [sp, #12]
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	9203      	str	r2, [sp, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfb8      	it	lt
 800753e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007542:	3402      	adds	r4, #2
 8007544:	9305      	str	r3, [sp, #20]
 8007546:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800761c <_vfiprintf_r+0x230>
 800754a:	7821      	ldrb	r1, [r4, #0]
 800754c:	2203      	movs	r2, #3
 800754e:	4650      	mov	r0, sl
 8007550:	f7f8 fe3e 	bl	80001d0 <memchr>
 8007554:	b138      	cbz	r0, 8007566 <_vfiprintf_r+0x17a>
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	eba0 000a 	sub.w	r0, r0, sl
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	4082      	lsls	r2, r0
 8007560:	4313      	orrs	r3, r2
 8007562:	3401      	adds	r4, #1
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4829      	ldr	r0, [pc, #164]	; (8007610 <_vfiprintf_r+0x224>)
 800756c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007570:	2206      	movs	r2, #6
 8007572:	f7f8 fe2d 	bl	80001d0 <memchr>
 8007576:	2800      	cmp	r0, #0
 8007578:	d03f      	beq.n	80075fa <_vfiprintf_r+0x20e>
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <_vfiprintf_r+0x228>)
 800757c:	bb1b      	cbnz	r3, 80075c6 <_vfiprintf_r+0x1da>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	3307      	adds	r3, #7
 8007582:	f023 0307 	bic.w	r3, r3, #7
 8007586:	3308      	adds	r3, #8
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	443b      	add	r3, r7
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	e768      	b.n	8007464 <_vfiprintf_r+0x78>
 8007592:	fb0c 3202 	mla	r2, ip, r2, r3
 8007596:	460c      	mov	r4, r1
 8007598:	2001      	movs	r0, #1
 800759a:	e7a6      	b.n	80074ea <_vfiprintf_r+0xfe>
 800759c:	2300      	movs	r3, #0
 800759e:	3401      	adds	r4, #1
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f04f 0c0a 	mov.w	ip, #10
 80075a8:	4620      	mov	r0, r4
 80075aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ae:	3a30      	subs	r2, #48	; 0x30
 80075b0:	2a09      	cmp	r2, #9
 80075b2:	d903      	bls.n	80075bc <_vfiprintf_r+0x1d0>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0c6      	beq.n	8007546 <_vfiprintf_r+0x15a>
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	e7c4      	b.n	8007546 <_vfiprintf_r+0x15a>
 80075bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c0:	4604      	mov	r4, r0
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7f0      	b.n	80075a8 <_vfiprintf_r+0x1bc>
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4b12      	ldr	r3, [pc, #72]	; (8007618 <_vfiprintf_r+0x22c>)
 80075ce:	a904      	add	r1, sp, #16
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7fd fd79 	bl	80050c8 <_printf_float>
 80075d6:	4607      	mov	r7, r0
 80075d8:	1c78      	adds	r0, r7, #1
 80075da:	d1d6      	bne.n	800758a <_vfiprintf_r+0x19e>
 80075dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075de:	07d9      	lsls	r1, r3, #31
 80075e0:	d405      	bmi.n	80075ee <_vfiprintf_r+0x202>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	059a      	lsls	r2, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_vfiprintf_r+0x202>
 80075e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ea:	f7fe faa4 	bl	8005b36 <__retarget_lock_release_recursive>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	065b      	lsls	r3, r3, #25
 80075f2:	f53f af1d 	bmi.w	8007430 <_vfiprintf_r+0x44>
 80075f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075f8:	e71c      	b.n	8007434 <_vfiprintf_r+0x48>
 80075fa:	ab03      	add	r3, sp, #12
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	462a      	mov	r2, r5
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <_vfiprintf_r+0x22c>)
 8007602:	a904      	add	r1, sp, #16
 8007604:	4630      	mov	r0, r6
 8007606:	f7fe f803 	bl	8005610 <_printf_i>
 800760a:	e7e4      	b.n	80075d6 <_vfiprintf_r+0x1ea>
 800760c:	08007de3 	.word	0x08007de3
 8007610:	08007ded 	.word	0x08007ded
 8007614:	080050c9 	.word	0x080050c9
 8007618:	080073c9 	.word	0x080073c9
 800761c:	08007de9 	.word	0x08007de9

08007620 <__swbuf_r>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	460e      	mov	r6, r1
 8007624:	4614      	mov	r4, r2
 8007626:	4605      	mov	r5, r0
 8007628:	b118      	cbz	r0, 8007632 <__swbuf_r+0x12>
 800762a:	6a03      	ldr	r3, [r0, #32]
 800762c:	b90b      	cbnz	r3, 8007632 <__swbuf_r+0x12>
 800762e:	f7fe f98b 	bl	8005948 <__sinit>
 8007632:	69a3      	ldr	r3, [r4, #24]
 8007634:	60a3      	str	r3, [r4, #8]
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	071a      	lsls	r2, r3, #28
 800763a:	d525      	bpl.n	8007688 <__swbuf_r+0x68>
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	b31b      	cbz	r3, 8007688 <__swbuf_r+0x68>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	6922      	ldr	r2, [r4, #16]
 8007644:	1a98      	subs	r0, r3, r2
 8007646:	6963      	ldr	r3, [r4, #20]
 8007648:	b2f6      	uxtb	r6, r6
 800764a:	4283      	cmp	r3, r0
 800764c:	4637      	mov	r7, r6
 800764e:	dc04      	bgt.n	800765a <__swbuf_r+0x3a>
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f7ff fdfc 	bl	8007250 <_fflush_r>
 8007658:	b9e0      	cbnz	r0, 8007694 <__swbuf_r+0x74>
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	3b01      	subs	r3, #1
 800765e:	60a3      	str	r3, [r4, #8]
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	701e      	strb	r6, [r3, #0]
 8007668:	6962      	ldr	r2, [r4, #20]
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	d004      	beq.n	800767a <__swbuf_r+0x5a>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	07db      	lsls	r3, r3, #31
 8007674:	d506      	bpl.n	8007684 <__swbuf_r+0x64>
 8007676:	2e0a      	cmp	r6, #10
 8007678:	d104      	bne.n	8007684 <__swbuf_r+0x64>
 800767a:	4621      	mov	r1, r4
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff fde7 	bl	8007250 <_fflush_r>
 8007682:	b938      	cbnz	r0, 8007694 <__swbuf_r+0x74>
 8007684:	4638      	mov	r0, r7
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	4621      	mov	r1, r4
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f806 	bl	800769c <__swsetup_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0d5      	beq.n	8007640 <__swbuf_r+0x20>
 8007694:	f04f 37ff 	mov.w	r7, #4294967295
 8007698:	e7f4      	b.n	8007684 <__swbuf_r+0x64>
	...

0800769c <__swsetup_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <__swsetup_r+0xac>)
 80076a0:	4605      	mov	r5, r0
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	460c      	mov	r4, r1
 80076a6:	b118      	cbz	r0, 80076b0 <__swsetup_r+0x14>
 80076a8:	6a03      	ldr	r3, [r0, #32]
 80076aa:	b90b      	cbnz	r3, 80076b0 <__swsetup_r+0x14>
 80076ac:	f7fe f94c 	bl	8005948 <__sinit>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b6:	0718      	lsls	r0, r3, #28
 80076b8:	d422      	bmi.n	8007700 <__swsetup_r+0x64>
 80076ba:	06d9      	lsls	r1, r3, #27
 80076bc:	d407      	bmi.n	80076ce <__swsetup_r+0x32>
 80076be:	2309      	movs	r3, #9
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e034      	b.n	8007738 <__swsetup_r+0x9c>
 80076ce:	0758      	lsls	r0, r3, #29
 80076d0:	d512      	bpl.n	80076f8 <__swsetup_r+0x5c>
 80076d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d4:	b141      	cbz	r1, 80076e8 <__swsetup_r+0x4c>
 80076d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076da:	4299      	cmp	r1, r3
 80076dc:	d002      	beq.n	80076e4 <__swsetup_r+0x48>
 80076de:	4628      	mov	r0, r5
 80076e0:	f7ff f8b4 	bl	800684c <_free_r>
 80076e4:	2300      	movs	r3, #0
 80076e6:	6363      	str	r3, [r4, #52]	; 0x34
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	2300      	movs	r3, #0
 80076f2:	6063      	str	r3, [r4, #4]
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	f043 0308 	orr.w	r3, r3, #8
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	b94b      	cbnz	r3, 8007718 <__swsetup_r+0x7c>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800770a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770e:	d003      	beq.n	8007718 <__swsetup_r+0x7c>
 8007710:	4621      	mov	r1, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f000 f884 	bl	8007820 <__smakebuf_r>
 8007718:	89a0      	ldrh	r0, [r4, #12]
 800771a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800771e:	f010 0301 	ands.w	r3, r0, #1
 8007722:	d00a      	beq.n	800773a <__swsetup_r+0x9e>
 8007724:	2300      	movs	r3, #0
 8007726:	60a3      	str	r3, [r4, #8]
 8007728:	6963      	ldr	r3, [r4, #20]
 800772a:	425b      	negs	r3, r3
 800772c:	61a3      	str	r3, [r4, #24]
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	b943      	cbnz	r3, 8007744 <__swsetup_r+0xa8>
 8007732:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007736:	d1c4      	bne.n	80076c2 <__swsetup_r+0x26>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	0781      	lsls	r1, r0, #30
 800773c:	bf58      	it	pl
 800773e:	6963      	ldrpl	r3, [r4, #20]
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	e7f4      	b.n	800772e <__swsetup_r+0x92>
 8007744:	2000      	movs	r0, #0
 8007746:	e7f7      	b.n	8007738 <__swsetup_r+0x9c>
 8007748:	2000006c 	.word	0x2000006c

0800774c <_raise_r>:
 800774c:	291f      	cmp	r1, #31
 800774e:	b538      	push	{r3, r4, r5, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	d904      	bls.n	8007760 <_raise_r+0x14>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007762:	b112      	cbz	r2, 800776a <_raise_r+0x1e>
 8007764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007768:	b94b      	cbnz	r3, 800777e <_raise_r+0x32>
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f830 	bl	80077d0 <_getpid_r>
 8007770:	462a      	mov	r2, r5
 8007772:	4601      	mov	r1, r0
 8007774:	4620      	mov	r0, r4
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b817 	b.w	80077ac <_kill_r>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d00a      	beq.n	8007798 <_raise_r+0x4c>
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	d103      	bne.n	800778e <_raise_r+0x42>
 8007786:	2316      	movs	r3, #22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	2001      	movs	r0, #1
 800778c:	e7e7      	b.n	800775e <_raise_r+0x12>
 800778e:	2400      	movs	r4, #0
 8007790:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007794:	4628      	mov	r0, r5
 8007796:	4798      	blx	r3
 8007798:	2000      	movs	r0, #0
 800779a:	e7e0      	b.n	800775e <_raise_r+0x12>

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd3 	b.w	800774c <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	2000006c 	.word	0x2000006c

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_kill_r+0x20>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 ff0f 	bl	80015dc <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	20000628 	.word	0x20000628

080077d0 <_getpid_r>:
 80077d0:	f7f9 befc 	b.w	80015cc <_getpid>

080077d4 <__swhatbuf_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	2900      	cmp	r1, #0
 80077de:	b096      	sub	sp, #88	; 0x58
 80077e0:	4615      	mov	r5, r2
 80077e2:	461e      	mov	r6, r3
 80077e4:	da0d      	bge.n	8007802 <__swhatbuf_r+0x2e>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	bf0c      	ite	eq
 80077f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80077f6:	2340      	movne	r3, #64	; 0x40
 80077f8:	2000      	movs	r0, #0
 80077fa:	6031      	str	r1, [r6, #0]
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	b016      	add	sp, #88	; 0x58
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	466a      	mov	r2, sp
 8007804:	f000 f848 	bl	8007898 <_fstat_r>
 8007808:	2800      	cmp	r0, #0
 800780a:	dbec      	blt.n	80077e6 <__swhatbuf_r+0x12>
 800780c:	9901      	ldr	r1, [sp, #4]
 800780e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007812:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007816:	4259      	negs	r1, r3
 8007818:	4159      	adcs	r1, r3
 800781a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781e:	e7eb      	b.n	80077f8 <__swhatbuf_r+0x24>

08007820 <__smakebuf_r>:
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007824:	079d      	lsls	r5, r3, #30
 8007826:	4606      	mov	r6, r0
 8007828:	460c      	mov	r4, r1
 800782a:	d507      	bpl.n	800783c <__smakebuf_r+0x1c>
 800782c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	2301      	movs	r3, #1
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	b002      	add	sp, #8
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	ab01      	add	r3, sp, #4
 800783e:	466a      	mov	r2, sp
 8007840:	f7ff ffc8 	bl	80077d4 <__swhatbuf_r>
 8007844:	9900      	ldr	r1, [sp, #0]
 8007846:	4605      	mov	r5, r0
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff f873 	bl	8006934 <_malloc_r>
 800784e:	b948      	cbnz	r0, 8007864 <__smakebuf_r+0x44>
 8007850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007854:	059a      	lsls	r2, r3, #22
 8007856:	d4ef      	bmi.n	8007838 <__smakebuf_r+0x18>
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	f043 0302 	orr.w	r3, r3, #2
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7e3      	b.n	800782c <__smakebuf_r+0xc>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	6020      	str	r0, [r4, #0]
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	9b00      	ldr	r3, [sp, #0]
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	6120      	str	r0, [r4, #16]
 8007876:	b15b      	cbz	r3, 8007890 <__smakebuf_r+0x70>
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f81d 	bl	80078bc <_isatty_r>
 8007882:	b128      	cbz	r0, 8007890 <__smakebuf_r+0x70>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	f043 0301 	orr.w	r3, r3, #1
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	431d      	orrs	r5, r3
 8007894:	81a5      	strh	r5, [r4, #12]
 8007896:	e7cf      	b.n	8007838 <__smakebuf_r+0x18>

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	; (80078b8 <_fstat_r+0x20>)
 800789c:	2300      	movs	r3, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 fef8 	bl	800169a <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000628 	.word	0x20000628

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	; (80078d8 <_isatty_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 fef7 	bl	80016ba <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20000628 	.word	0x20000628

080078dc <sqrtf>:
 80078dc:	b508      	push	{r3, lr}
 80078de:	ed2d 8b02 	vpush	{d8}
 80078e2:	eeb0 8a40 	vmov.f32	s16, s0
 80078e6:	f000 f817 	bl	8007918 <__ieee754_sqrtf>
 80078ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	d60c      	bvs.n	800790e <sqrtf+0x32>
 80078f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007914 <sqrtf+0x38>
 80078f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	d505      	bpl.n	800790e <sqrtf+0x32>
 8007902:	f7fe f8ed 	bl	8005ae0 <__errno>
 8007906:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800790a:	2321      	movs	r3, #33	; 0x21
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	ecbd 8b02 	vpop	{d8}
 8007912:	bd08      	pop	{r3, pc}
 8007914:	00000000 	.word	0x00000000

08007918 <__ieee754_sqrtf>:
 8007918:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800791c:	4770      	bx	lr
	...

08007920 <floor>:
 8007920:	ec51 0b10 	vmov	r0, r1, d0
 8007924:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007930:	2e13      	cmp	r6, #19
 8007932:	ee10 5a10 	vmov	r5, s0
 8007936:	ee10 8a10 	vmov	r8, s0
 800793a:	460c      	mov	r4, r1
 800793c:	dc31      	bgt.n	80079a2 <floor+0x82>
 800793e:	2e00      	cmp	r6, #0
 8007940:	da14      	bge.n	800796c <floor+0x4c>
 8007942:	a333      	add	r3, pc, #204	; (adr r3, 8007a10 <floor+0xf0>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	f7f9 f8e2 	bl	8000b18 <__aeabi_dcmpgt>
 8007954:	b138      	cbz	r0, 8007966 <floor+0x46>
 8007956:	2c00      	cmp	r4, #0
 8007958:	da53      	bge.n	8007a02 <floor+0xe2>
 800795a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800795e:	4325      	orrs	r5, r4
 8007960:	d052      	beq.n	8007a08 <floor+0xe8>
 8007962:	4c2d      	ldr	r4, [pc, #180]	; (8007a18 <floor+0xf8>)
 8007964:	2500      	movs	r5, #0
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	e024      	b.n	80079b6 <floor+0x96>
 800796c:	4f2b      	ldr	r7, [pc, #172]	; (8007a1c <floor+0xfc>)
 800796e:	4137      	asrs	r7, r6
 8007970:	ea01 0307 	and.w	r3, r1, r7
 8007974:	4303      	orrs	r3, r0
 8007976:	d01e      	beq.n	80079b6 <floor+0x96>
 8007978:	a325      	add	r3, pc, #148	; (adr r3, 8007a10 <floor+0xf0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fc85 	bl	800028c <__adddf3>
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	f7f9 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800798a:	2800      	cmp	r0, #0
 800798c:	d0eb      	beq.n	8007966 <floor+0x46>
 800798e:	2c00      	cmp	r4, #0
 8007990:	bfbe      	ittt	lt
 8007992:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007996:	4133      	asrlt	r3, r6
 8007998:	18e4      	addlt	r4, r4, r3
 800799a:	ea24 0407 	bic.w	r4, r4, r7
 800799e:	2500      	movs	r5, #0
 80079a0:	e7e1      	b.n	8007966 <floor+0x46>
 80079a2:	2e33      	cmp	r6, #51	; 0x33
 80079a4:	dd0b      	ble.n	80079be <floor+0x9e>
 80079a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80079aa:	d104      	bne.n	80079b6 <floor+0x96>
 80079ac:	ee10 2a10 	vmov	r2, s0
 80079b0:	460b      	mov	r3, r1
 80079b2:	f7f8 fc6b 	bl	800028c <__adddf3>
 80079b6:	ec41 0b10 	vmov	d0, r0, r1
 80079ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80079c2:	f04f 37ff 	mov.w	r7, #4294967295
 80079c6:	40df      	lsrs	r7, r3
 80079c8:	4238      	tst	r0, r7
 80079ca:	d0f4      	beq.n	80079b6 <floor+0x96>
 80079cc:	a310      	add	r3, pc, #64	; (adr r3, 8007a10 <floor+0xf0>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f7f8 fc5b 	bl	800028c <__adddf3>
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	f7f9 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0c1      	beq.n	8007966 <floor+0x46>
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	da0a      	bge.n	80079fc <floor+0xdc>
 80079e6:	2e14      	cmp	r6, #20
 80079e8:	d101      	bne.n	80079ee <floor+0xce>
 80079ea:	3401      	adds	r4, #1
 80079ec:	e006      	b.n	80079fc <floor+0xdc>
 80079ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80079f2:	2301      	movs	r3, #1
 80079f4:	40b3      	lsls	r3, r6
 80079f6:	441d      	add	r5, r3
 80079f8:	45a8      	cmp	r8, r5
 80079fa:	d8f6      	bhi.n	80079ea <floor+0xca>
 80079fc:	ea25 0507 	bic.w	r5, r5, r7
 8007a00:	e7b1      	b.n	8007966 <floor+0x46>
 8007a02:	2500      	movs	r5, #0
 8007a04:	462c      	mov	r4, r5
 8007a06:	e7ae      	b.n	8007966 <floor+0x46>
 8007a08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007a0c:	e7ab      	b.n	8007966 <floor+0x46>
 8007a0e:	bf00      	nop
 8007a10:	8800759c 	.word	0x8800759c
 8007a14:	7e37e43c 	.word	0x7e37e43c
 8007a18:	bff00000 	.word	0xbff00000
 8007a1c:	000fffff 	.word	0x000fffff

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr
