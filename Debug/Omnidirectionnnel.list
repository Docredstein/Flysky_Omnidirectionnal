
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800a470  0800a470  0000b470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b0  0800a8b0  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b0  0800a8b0  0000b8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b4  0800a8b4  0000b8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a8b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001e8  0800aaa0  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800aaa0  0000c7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139a0  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7c  00000000  00000000  0001fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00022938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00023ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bbd  00000000  00000000  00024852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164f0  00000000  00000000  0004d40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e1f  00000000  00000000  000638ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015971e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b88  00000000  00000000  00159764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0015f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a458 	.word	0x0800a458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a458 	.word	0x0800a458

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ee8:	d115      	bne.n	8000f16 <HAL_GPIO_EXTI_Callback+0x3e>
    {
  	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000eee:	f003 ff45 	bl	8004d7c <HAL_TIM_OC_Stop>
  	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ef6:	f003 ffd7 	bl	8004ea8 <HAL_TIM_OC_Stop_IT>

  	htim1.Instance->CNT = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
  	htim2.Instance->CNT = 0;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  	stepper.Pos = 0;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
  	stepper.moving = 0;
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	721a      	strb	r2, [r3, #8]
    }
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000228 	.word	0x20000228
 8000f24:	20000274 	.word	0x20000274
 8000f28:	200005ac 	.word	0x200005ac

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	b0b7      	sub	sp, #220	@ 0xdc
 8000f32:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 fcbc 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8fc 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fb80 	bl	8001640 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 fb58 	bl	80015f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 faf6 	bl	8001534 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f48:	f000 fac0 	bl	80014cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f4c:	f000 fb22 	bl	8001594 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f50:	f000 f97a 	bl	8001248 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f54:	f000 fa3c 	bl	80013d0 <MX_TIM2_Init>
  MX_CRC_Init();
 8000f58:	f000 f93e 	bl	80011d8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 8000f5c:	4966      	ldr	r1, [pc, #408]	@ (80010f8 <main+0x1cc>)
 8000f5e:	4867      	ldr	r0, [pc, #412]	@ (80010fc <main+0x1d0>)
 8000f60:	f000 ff65 	bl	8001e2e <IBUS_Init>
  Sabertooth_Init(&saber, &huart3, motor ,address,&hcrc);
 8000f64:	4b66      	ldr	r3, [pc, #408]	@ (8001100 <main+0x1d4>)
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4b66      	ldr	r3, [pc, #408]	@ (8001104 <main+0x1d8>)
 8000f6a:	4a67      	ldr	r2, [pc, #412]	@ (8001108 <main+0x1dc>)
 8000f6c:	4967      	ldr	r1, [pc, #412]	@ (800110c <main+0x1e0>)
 8000f6e:	4868      	ldr	r0, [pc, #416]	@ (8001110 <main+0x1e4>)
 8000f70:	f001 f950 	bl	8002214 <Sabertooth_Init>
  channel = IBUS_GetChannels(&Ibus);
 8000f74:	4861      	ldr	r0, [pc, #388]	@ (80010fc <main+0x1d0>)
 8000f76:	f000 fff8 	bl	8001f6a <IBUS_GetChannels>
 8000f7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

  char msg[150] = {0};
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2292      	movs	r2, #146	@ 0x92
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 ffe9 	bl	8007f62 <memset>
  IBUS_Update(&Ibus);
 8000f90:	485a      	ldr	r0, [pc, #360]	@ (80010fc <main+0x1d0>)
 8000f92:	f000 ff70 	bl	8001e76 <IBUS_Update>
  tm1637_init(&Display, CLK_GPIO_Port, CLK_Pin, DIO_GPIO_Port, DIO_Pin);
 8000f96:	2304      	movs	r3, #4
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001114 <main+0x1e8>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	495d      	ldr	r1, [pc, #372]	@ (8001114 <main+0x1e8>)
 8000fa0:	485d      	ldr	r0, [pc, #372]	@ (8001118 <main+0x1ec>)
 8000fa2:	f001 fb71 	bl	8002688 <tm1637_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Receiving
	  IBUS_Update(&Ibus);
 8000fa6:	4855      	ldr	r0, [pc, #340]	@ (80010fc <main+0x1d0>)
 8000fa8:	f000 ff65 	bl	8001e76 <IBUS_Update>

	//Processing
	  uint16_t swap = channel[0];
 8000fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	  channel[0] = channel[2];
 8000fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fba:	889a      	ldrh	r2, [r3, #4]
 8000fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc0:	801a      	strh	r2, [r3, #0]
	  channel[1] = swap;
 8000fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	@ 0xaa
 8000fcc:	801a      	strh	r2, [r3, #0]
	  channel[2] = channel[3];
 8000fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000fd8:	88d2      	ldrh	r2, [r2, #6]
 8000fda:	801a      	strh	r2, [r3, #0]

	  Transform_Omni(channel, command);
 8000fdc:	494f      	ldr	r1, [pc, #316]	@ (800111c <main+0x1f0>)
 8000fde:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000fe2:	f001 f819 	bl	8002018 <Transform_Omni>
	  int32_t Estimated_score = floor((channel[8]-1000)/50);
 8000fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fea:	3310      	adds	r3, #16
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8001120 <main+0x1f4>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1112      	asrs	r2, r2, #4
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fda4 	bl	8000b58 <__aeabi_d2iz>
 8001010:	4603      	mov	r3, r0
 8001012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	  tm1637_write_int(&Display, Estimated_score, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <main+0x1ec>)
 800101e:	f001 fbe5 	bl	80027ec <tm1637_write_int>


	//Controlling
	  if (channel[8]<1500) {
 8001022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001026:	3310      	adds	r3, #16
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800102e:	4293      	cmp	r3, r2
 8001030:	d810      	bhi.n	8001054 <main+0x128>
		  Sabertooth_Drive(&saber,Stop);
 8001032:	493c      	ldr	r1, [pc, #240]	@ (8001124 <main+0x1f8>)
 8001034:	4836      	ldr	r0, [pc, #216]	@ (8001110 <main+0x1e4>)
 8001036:	f001 f9a7 	bl	8002388 <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f002 fa93 	bl	800356c <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, "-", 1, 5);
 8001046:	2305      	movs	r3, #5
 8001048:	2201      	movs	r2, #1
 800104a:	4937      	ldr	r1, [pc, #220]	@ (8001128 <main+0x1fc>)
 800104c:	4837      	ldr	r0, [pc, #220]	@ (800112c <main+0x200>)
 800104e:	f005 f969 	bl	8006324 <HAL_UART_Transmit>
 8001052:	e009      	b.n	8001068 <main+0x13c>
	  }
	  else {
		  Sabertooth_Drive(&saber,command);
 8001054:	4931      	ldr	r1, [pc, #196]	@ (800111c <main+0x1f0>)
 8001056:	482e      	ldr	r0, [pc, #184]	@ (8001110 <main+0x1e4>)
 8001058:	f001 f996 	bl	8002388 <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	2120      	movs	r1, #32
 8001060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001064:	f002 fa82 	bl	800356c <HAL_GPIO_WritePin>
	  }
	  sprintf(msg,"%i;%i;%i; ==> %f;%f;%f;%f\r\n",channel[0],channel[1],channel[2],command[0],command[1],command[2],command[3]);
 8001068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001074:	3302      	adds	r3, #2
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800107e:	3304      	adds	r3, #4
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	461e      	mov	r6, r3
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <main+0x1f0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa5d 	bl	8000548 <__aeabi_f2d>
 800108e:	4604      	mov	r4, r0
 8001090:	460d      	mov	r5, r1
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <main+0x1f0>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	4680      	mov	r8, r0
 800109e:	4689      	mov	r9, r1
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <main+0x1f0>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa4f 	bl	8000548 <__aeabi_f2d>
 80010aa:	4682      	mov	sl, r0
 80010ac:	468b      	mov	fp, r1
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <main+0x1f0>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	f107 000c 	add.w	r0, r7, #12
 80010c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010c4:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80010c8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80010cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80010d0:	9600      	str	r6, [sp, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4916      	ldr	r1, [pc, #88]	@ (8001130 <main+0x204>)
 80010d8:	f006 fee0 	bl	8007e9c <siprintf>
	  //HAL_UART_Transmit(&huart2, "-", 1, 5);


	  //sprintf(msg,"%i,%f;\r\n",channel[0],command[0]);
	  //sprintf(msg,"%i;%i;%i;%i;%i;%i;%i;%i;%i;%i\r\n",channel[0],channel[1],channel[2],channel[3],channel[4],channel[5],channel[6],channel[7],channel[8],channel[9]);
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f8c5 	bl	8000270 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f107 010c 	add.w	r1, r7, #12
 80010ee:	2364      	movs	r3, #100	@ 0x64
 80010f0:	480e      	ldr	r0, [pc, #56]	@ (800112c <main+0x200>)
 80010f2:	f005 f917 	bl	8006324 <HAL_UART_Transmit>
  {
 80010f6:	e756      	b.n	8000fa6 <main+0x7a>
 80010f8:	200002c0 	.word	0x200002c0
 80010fc:	200004e8 	.word	0x200004e8
 8001100:	20000204 	.word	0x20000204
 8001104:	20000004 	.word	0x20000004
 8001108:	20000000 	.word	0x20000000
 800110c:	200003d0 	.word	0x200003d0
 8001110:	20000580 	.word	0x20000580
 8001114:	48000400 	.word	0x48000400
 8001118:	2000059c 	.word	0x2000059c
 800111c:	20000668 	.word	0x20000668
 8001120:	51eb851f 	.word	0x51eb851f
 8001124:	20000658 	.word	0x20000658
 8001128:	0800a470 	.word	0x0800a470
 800112c:	20000348 	.word	0x20000348
 8001130:	0800a474 	.word	0x0800a474

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	@ 0x58
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2244      	movs	r2, #68	@ 0x44
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 ff0d 	bl	8007f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001156:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800115a:	f002 fa45 	bl	80035e8 <HAL_PWREx_ControlVoltageScaling>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001164:	f000 fafe 	bl	8001764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001172:	2310      	movs	r3, #16
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117a:	2302      	movs	r3, #2
 800117c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001182:	230a      	movs	r3, #10
 8001184:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001186:	2307      	movs	r3, #7
 8001188:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fa7c 	bl	8003694 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011a2:	f000 fadf 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2104      	movs	r1, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fe44 	bl	8003e4c <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 facb 	bl	8001764 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3758      	adds	r7, #88	@ 0x58
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_CRC_Init+0x68>)
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <MX_CRC_Init+0x6c>)
 80011e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_CRC_Init+0x68>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_CRC_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 9169;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_CRC_Init+0x68>)
 80011f0:	f242 32d1 	movw	r2, #9169	@ 0x23d1
 80011f4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = 14;
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_CRC_Init+0x68>)
 80011f8:	220e      	movs	r2, #14
 80011fa:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_CRC_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_CRC_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_CRC_Init+0x68>)
 800120a:	2201      	movs	r2, #1
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800120e:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_CRC_Init+0x68>)
 8001210:	f001 fd00 	bl	8002c14 <HAL_CRC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CRC_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 faa3 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  	hcrc.Init.GeneratingPolynomial = 8680;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_CRC_Init+0x68>)
 8001220:	f242 12e8 	movw	r2, #8680	@ 0x21e8
 8001224:	609a      	str	r2, [r3, #8]
    hcrc.Init.CRCLength = 14;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_CRC_Init+0x68>)
 8001228:	220e      	movs	r2, #14
 800122a:	60da      	str	r2, [r3, #12]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_CRC_Init+0x68>)
 800122e:	f001 fcf1 	bl	8002c14 <HAL_CRC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_CRC_Init+0x64>
      {
        Error_Handler();
 8001238:	f000 fa94 	bl	8001764 <Error_Handler>
      }
  /* USER CODE END CRC_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000204 	.word	0x20000204
 8001244:	40023000 	.word	0x40023000

08001248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09e      	sub	sp, #120	@ 0x78
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800125c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	222c      	movs	r2, #44	@ 0x2c
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fe65 	bl	8007f62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001298:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <MX_TIM1_Init+0x180>)
 800129a:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <MX_TIM1_Init+0x184>)
 800129c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800129e:	4b4a      	ldr	r3, [pc, #296]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b48      	ldr	r3, [pc, #288]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 80012aa:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012ac:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80012b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b45      	ldr	r3, [pc, #276]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b8:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b42      	ldr	r3, [pc, #264]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c4:	4840      	ldr	r0, [pc, #256]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012c6:	f003 fca1 	bl	8004c0c <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 fa48 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80012de:	4619      	mov	r1, r3
 80012e0:	4839      	ldr	r0, [pc, #228]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012e2:	f004 f8a1 	bl	8005428 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012ec:	f000 fa3a 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80012f0:	4835      	ldr	r0, [pc, #212]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80012f2:	f003 fce2 	bl	8004cba <HAL_TIM_OC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80012fc:	f000 fa32 	bl	8001764 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001300:	2305      	movs	r3, #5
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001304:	2310      	movs	r3, #16
 8001306:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001308:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130c:	4619      	mov	r1, r3
 800130e:	482e      	ldr	r0, [pc, #184]	@ (80013c8 <MX_TIM1_Init+0x180>)
 8001310:	f004 f953 	bl	80055ba <HAL_TIM_SlaveConfigSynchro>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800131a:	f000 fa23 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800131e:	2330      	movs	r3, #48	@ 0x30
 8001320:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800132e:	4619      	mov	r1, r3
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <MX_TIM1_Init+0x180>)
 8001332:	f004 fe85 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800133c:	f000 fa12 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001340:	2310      	movs	r3, #16
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 12500;
 8001344:	f243 03d4 	movw	r3, #12500	@ 0x30d4
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <MX_TIM1_Init+0x180>)
 8001368:	f003 ffe4 	bl	8005334 <HAL_TIM_OC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001372:	f000 f9f7 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001398:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800139c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80013ac:	f004 fed0 	bl	8006150 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80013b6:	f000 f9d5 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ba:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM1_Init+0x180>)
 80013bc:	f000 fa5c 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80013c0:	bf00      	nop
 80013c2:	3778      	adds	r7, #120	@ 0x78
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000228 	.word	0x20000228
 80013cc:	40012c00 	.word	0x40012c00

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	@ 0x40
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 8001406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800140a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 8001414:	2210      	movs	r2, #16
 8001416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14*3200;
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800141a:	f44f 422f 	mov.w	r2, #44800	@ 0xaf00
 800141e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142c:	4826      	ldr	r0, [pc, #152]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800142e:	f003 fbed 	bl	8004c0c <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001438:	f000 f994 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800143e:	f003 fc3c 	bl	8004cba <HAL_TIM_OC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001448:	f000 f98c 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800144c:	2108      	movs	r1, #8
 800144e:	481e      	ldr	r0, [pc, #120]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 8001450:	f003 fe0e 	bl	8005070 <HAL_TIM_OnePulse_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800145a:	f000 f983 	bl	8001764 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800145e:	2307      	movs	r3, #7
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800146e:	f004 f8a4 	bl	80055ba <HAL_TIM_SlaveConfigSynchro>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001478:	f000 f974 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800147c:	2340      	movs	r3, #64	@ 0x40
 800147e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	4619      	mov	r1, r3
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 800148c:	f004 fdd8 	bl	8006040 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001496:	f000 f965 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800149a:	2310      	movs	r3, #16
 800149c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_TIM2_Init+0xf8>)
 80014b2:	f003 ff3f 	bl	8005334 <HAL_TIM_OC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80014bc:	f000 f952 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3740      	adds	r7, #64	@ 0x40
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000274 	.word	0x20000274

080014cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <MX_USART1_UART_Init+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_USART1_UART_Init+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <MX_USART1_UART_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MX_USART1_UART_Init+0x60>)
 800150a:	2208      	movs	r2, #8
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <MX_USART1_UART_Init+0x60>)
 8001510:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_USART1_UART_Init+0x60>)
 8001518:	f004 feb6 	bl	8006288 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001522:	f000 f91f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002c0 	.word	0x200002c0
 8001530:	40013800 	.word	0x40013800

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <MX_USART2_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USART2_UART_Init+0x58>)
 8001578:	f004 fe86 	bl	8006288 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f8ef 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000348 	.word	0x20000348
 8001590:	40004400 	.word	0x40004400

08001594 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <MX_USART3_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015ba:	2208      	movs	r2, #8
 80015bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART3_UART_Init+0x58>)
 80015d8:	f004 fe56 	bl	8006288 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f8bf 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200003d0 	.word	0x200003d0
 80015f0:	40004800 	.word	0x40004800

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <MX_DMA_Init+0x48>)
 80015fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fe:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <MX_DMA_Init+0x48>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6493      	str	r3, [r2, #72]	@ 0x48
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <MX_DMA_Init+0x48>)
 8001608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200c      	movs	r0, #12
 8001618:	f001 fac5 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800161c:	200c      	movs	r0, #12
 800161e:	f001 fade 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200f      	movs	r0, #15
 8001628:	f001 fabd 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800162c:	200f      	movs	r0, #15
 800162e:	f001 fad6 	bl	8002bde <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a3f      	ldr	r2, [pc, #252]	@ (8001758 <MX_GPIO_Init+0x118>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a39      	ldr	r2, [pc, #228]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <MX_GPIO_Init+0x118>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a33      	ldr	r2, [pc, #204]	@ (8001758 <MX_GPIO_Init+0x118>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <MX_GPIO_Init+0x118>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <MX_GPIO_Init+0x118>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2120      	movs	r1, #32
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016be:	f001 ff55 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIO_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2106      	movs	r1, #6
 80016c6:	4825      	ldr	r0, [pc, #148]	@ (800175c <MX_GPIO_Init+0x11c>)
 80016c8:	f001 ff50 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	481f      	ldr	r0, [pc, #124]	@ (8001760 <MX_GPIO_Init+0x120>)
 80016e4:	f001 fd80 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016e8:	2320      	movs	r3, #32
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001702:	f001 fd71 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DIO_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIO_Pin;
 8001706:	2306      	movs	r3, #6
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480f      	ldr	r0, [pc, #60]	@ (800175c <MX_GPIO_Init+0x11c>)
 800171e:	f001 fd63 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Endstop_Pin */
  GPIO_InitStruct.Pin = Endstop_Pin;
 8001722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172e:	2302      	movs	r3, #2
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Endstop_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4809      	ldr	r0, [pc, #36]	@ (8001760 <MX_GPIO_Init+0x120>)
 800173a:	f001 fd55 	bl	80031e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2017      	movs	r0, #23
 8001744:	f001 fa2f 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001748:	2017      	movs	r0, #23
 800174a:	f001 fa48 	bl	8002bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	@ 0x60
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_CRC_MspInit+0x38>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_CRC_MspInit+0x3c>)
 80017cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_CRC_MspInit+0x3c>)
 80017d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_CRC_MspInit+0x3c>)
 80017d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023000 	.word	0x40023000
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <HAL_TIM_Base_MspInit+0x78>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d114      	bne.n	8001834 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180e:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 8001810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001814:	6613      	str	r3, [r2, #96]	@ 0x60
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	201a      	movs	r0, #26
 8001828:	f001 f9bd 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800182c:	201a      	movs	r0, #26
 800182e:	f001 f9d6 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001832:	e018      	b.n	8001866 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800183c:	d113      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6593      	str	r3, [r2, #88]	@ 0x58
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_TIM_Base_MspInit+0x7c>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	201c      	movs	r0, #28
 800185c:	f001 f9a3 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001860:	201c      	movs	r0, #28
 8001862:	f001 f9bc 	bl	8002bde <HAL_NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40012c00 	.word	0x40012c00
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <HAL_TIM_MspPostInit+0x68>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11d      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_TIM_MspPostInit+0x6c>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_TIM_MspPostInit+0x6c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_TIM_MspPostInit+0x6c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d2:	f001 fc89 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0b0      	sub	sp, #192	@ 0xc0
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	2288      	movs	r2, #136	@ 0x88
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fb2a 	bl	8007f62 <memset>
  if(huart->Instance==USART1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8d      	ldr	r2, [pc, #564]	@ (8001b48 <HAL_UART_MspInit+0x260>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d167      	bne.n	80019e8 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800191c:	2300      	movs	r3, #0
 800191e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fcb5 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001930:	f7ff ff18 	bl	8001764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001934:	4b85      	ldr	r3, [pc, #532]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001938:	4a84      	ldr	r2, [pc, #528]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001940:	4b82      	ldr	r3, [pc, #520]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	4a7e      	ldr	r2, [pc, #504]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001958:	4b7c      	ldr	r3, [pc, #496]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001964:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197e:	2307      	movs	r3, #7
 8001980:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198e:	f001 fc2b 	bl	80031e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001992:	4b6f      	ldr	r3, [pc, #444]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 8001994:	4a6f      	ldr	r2, [pc, #444]	@ (8001b54 <HAL_UART_MspInit+0x26c>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001998:	4b6d      	ldr	r3, [pc, #436]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 800199a:	2202      	movs	r2, #2
 800199c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b69      	ldr	r3, [pc, #420]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b67      	ldr	r3, [pc, #412]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019bc:	4b64      	ldr	r3, [pc, #400]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019be:	2220      	movs	r2, #32
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019c2:	4b63      	ldr	r3, [pc, #396]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019ca:	4861      	ldr	r0, [pc, #388]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019cc:	f001 fa14 	bl	8002df8 <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80019d6:	f7ff fec5 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019de:	675a      	str	r2, [r3, #116]	@ 0x74
 80019e0:	4a5b      	ldr	r2, [pc, #364]	@ (8001b50 <HAL_UART_MspInit+0x268>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019e6:	e0aa      	b.n	8001b3e <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001b58 <HAL_UART_MspInit+0x270>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d13c      	bne.n	8001a6c <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fc48 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001a0a:	f7ff feab 	bl	8001764 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a4e      	ldr	r2, [pc, #312]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b49      	ldr	r3, [pc, #292]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a48      	ldr	r2, [pc, #288]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b46      	ldr	r3, [pc, #280]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a56:	2307      	movs	r3, #7
 8001a58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a66:	f001 fbbf 	bl	80031e8 <HAL_GPIO_Init>
}
 8001a6a:	e068      	b.n	8001b3e <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3a      	ldr	r2, [pc, #232]	@ (8001b5c <HAL_UART_MspInit+0x274>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d163      	bne.n	8001b3e <HAL_UART_MspInit+0x256>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a76:	2304      	movs	r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fc06 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8001a8e:	f7ff fe69 	bl	8001764 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_UART_MspInit+0x264>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ac2:	2330      	movs	r3, #48	@ 0x30
 8001ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ada:	2307      	movs	r3, #7
 8001adc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481e      	ldr	r0, [pc, #120]	@ (8001b60 <HAL_UART_MspInit+0x278>)
 8001ae8:	f001 fb7e 	bl	80031e8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001aee:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <HAL_UART_MspInit+0x280>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001af4:	2202      	movs	r2, #2
 8001af6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001afa:	2210      	movs	r2, #16
 8001afc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b22:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b24:	f001 f968 	bl	8002df8 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001b2e:	f7ff fe19 	bl	8001764 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b36:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_UART_MspInit+0x27c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001b3e:	bf00      	nop
 8001b40:	37c0      	adds	r7, #192	@ 0xc0
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	20000458 	.word	0x20000458
 8001b54:	40020058 	.word	0x40020058
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	48000800 	.word	0x48000800
 8001b64:	200004a0 	.word	0x200004a0
 8001b68:	4002001c 	.word	0x4002001c

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 fed1 	bl	8002968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Channel2_IRQHandler+0x10>)
 8001bd2:	f001 fa29 	bl	8003028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200004a0 	.word	0x200004a0

08001be0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <DMA1_Channel5_IRQHandler+0x10>)
 8001be6:	f001 fa1f 	bl	8003028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000458 	.word	0x20000458

08001bf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Endstop_Pin);
 8001bf8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bfc:	f001 fcce 	bl	800359c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c0a:	f003 fa8b 	bl	8005124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000228 	.word	0x20000228

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f003 fa81 	bl	8005124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000274 	.word	0x20000274

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f006 f9df 	bl	8008008 <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f006 f944 	bl	8008008 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20018000 	.word	0x20018000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000678 	.word	0x20000678
 8001db4:	200007d0 	.word	0x200007d0

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f006 f903 	bl	8008014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7ff f88d 	bl	8000f2c <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e20:	0800a8b8 	.word	0x0800a8b8
  ldr r2, =_sbss
 8001e24:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e28:	200007d0 	.word	0x200007d0

08001e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_2_IRQHandler>

08001e2e <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel, 1500, 6 * sizeof(uint16_t));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 f88d 	bl	8007f62 <memset>
	Ibus->handle = handle;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer, 0, 128);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3318      	adds	r3, #24
 8001e52:	2280      	movs	r2, #128	@ 0x80
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f006 f883 	bl	8007f62 <memset>
	return HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3318      	adds	r3, #24
 8001e64:	2280      	movs	r2, #128	@ 0x80
 8001e66:	4619      	mov	r1, r3
 8001e68:	f004 fb62 	bl	8006530 <HAL_UART_Receive_DMA>
 8001e6c:	4603      	mov	r3, r0

}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b094      	sub	sp, #80	@ 0x50
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 64);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3318      	adds	r3, #24
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f004 fb51 	bl	8006530 <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = { 0 };
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	223c      	movs	r2, #60	@ 0x3c
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 f861 	bl	8007f62 <memset>
	uint16_t packetStart = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001eac:	e018      	b.n	8001ee0 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i + 1] == 0x40) {
 8001eae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7e1b      	ldrb	r3, [r3, #24]
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d10c      	bne.n	8001ed6 <IBUS_Update+0x60>
 8001ebc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
 8001ec8:	2b40      	cmp	r3, #64	@ 0x40
 8001eca:	d104      	bne.n	8001ed6 <IBUS_Update+0x60>
			packetStart = i;
 8001ecc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ed0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			break;
 8001ed4:	e008      	b.n	8001ee8 <IBUS_Update+0x72>
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001eda:	3301      	adds	r3, #1
 8001edc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001ee0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ee6:	d9e2      	bls.n	8001eae <IBUS_Update+0x38>
		}
	}
	if (packetStart >= 64) {
 8001ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001eec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eee:	d901      	bls.n	8001ef4 <IBUS_Update+0x7e>
		return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e036      	b.n	8001f62 <IBUS_Update+0xec>
	}
	memcpy(Packet, Ibus->UARTBuffer + packetStart + 2, 32);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0218 	add.w	r2, r3, #24
 8001efa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001efe:	3302      	adds	r3, #2
 8001f00:	18d1      	adds	r1, r2, r3
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	2220      	movs	r2, #32
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f006 f8aa 	bl	8008062 <memcpy>



	for (uint16_t i = 0; i < 10	; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001f14:	e020      	b.n	8001f58 <IBUS_Update+0xe2>
		Ibus->channel[i] = (Packet[2 * i + 1] << 8) | Packet[2 * i];
 8001f16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	3350      	adds	r3, #80	@ 0x50
 8001f20:	443b      	add	r3, r7
 8001f22:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3350      	adds	r3, #80	@ 0x50
 8001f32:	443b      	add	r3, r7
 8001f34:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f42:	b291      	uxth	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < 10	; i++) {
 8001f4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f52:	3301      	adds	r3, #1
 8001f54:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001f58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d9da      	bls.n	8001f16 <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3750      	adds	r7, #80	@ 0x50
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <CurveInput>:
#include "Omnidirection.h"
float exponent[3] = {2,2,2};


void CurveInput(float input[3]) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	ed2d 8b02 	vpush	{d8}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	for (int i =0;i<3;i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e034      	b.n	8002000 <CurveInput+0x7c>
		input[i] =expf( fabsf(input[i]) * exponent[i] )*input[i]/expf(exponent[i]);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	eeb0 7ae7 	vabs.f32	s14, s15
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <CurveInput+0x90>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fba:	f008 f89b 	bl	800a0f4 <expf>
 8001fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001fd2:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <CurveInput+0x90>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	f008 f887 	bl	800a0f4 <expf>
 8001fe6:	eeb0 7a40 	vmov.f32	s14, s0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
	for (int i =0;i<3;i++) {
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b02      	cmp	r3, #2
 8002004:	ddc7      	ble.n	8001f96 <CurveInput+0x12>
	}
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	ecbd 8b02 	vpop	{d8}
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000000c 	.word	0x2000000c

08002018 <Transform_Omni>:
HAL_StatusTypeDef Transform_Omni(uint16_t Channel[3], float output[4]) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	float input[3] = { 0 };
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
	int8_t forward[4] = { 1, 1, 1, 1 };
 800202e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8002032:	613b      	str	r3, [r7, #16]
	int8_t right[4] = { 1, -1, -1, 1 };
 8002034:	4b55      	ldr	r3, [pc, #340]	@ (800218c <Transform_Omni+0x174>)
 8002036:	60fb      	str	r3, [r7, #12]
	int8_t rotate_c[4] = { 1, 1, -1, -1 };
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <Transform_Omni+0x178>)
 800203a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002040:	e032      	b.n	80020a8 <Transform_Omni+0x90>
		input[i] = ((float) Channel[i] - 1500) / 500;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002054:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002194 <Transform_Omni+0x17c>
 8002058:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800205c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8002198 <Transform_Omni+0x180>
 8002060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	3328      	adds	r3, #40	@ 0x28
 800206a:	443b      	add	r3, r7
 800206c:	3b14      	subs	r3, #20
 800206e:	edc3 7a00 	vstr	s15, [r3]
		if (Channel[i] <500 || Channel[i] >2000) {
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002080:	d307      	bcc.n	8002092 <Transform_Omni+0x7a>
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002090:	d907      	bls.n	80020a2 <Transform_Omni+0x8a>
			input[i]=0;
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3328      	adds	r3, #40	@ 0x28
 8002098:	443b      	add	r3, r7
 800209a:	3b14      	subs	r3, #20
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	ddc9      	ble.n	8002042 <Transform_Omni+0x2a>
		}

	}
	CurveInput(input);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff66 	bl	8001f84 <CurveInput>
	for (int i = 0; i < 4; i++) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	e05e      	b.n	800217c <Transform_Omni+0x164>
				output[i] = input[0] * forward[i] + input[1] * right[i]
 80020be:	ed97 7a05 	vldr	s14, [r7, #20]
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	4413      	add	r3, r2
 80020ca:	f993 3000 	ldrsb.w	r3, [r3]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	edd7 6a06 	vldr	s13, [r7, #24]
 80020de:	f107 020c 	add.w	r2, r7, #12
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	4413      	add	r3, r2
 80020e6:	f993 3000 	ldrsb.w	r3, [r3]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f6:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ input[2] * rotate_c[i];
 80020fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80020fe:	f107 0208 	add.w	r2, r7, #8
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	4413      	add	r3, r2
 8002106:	f993 3000 	ldrsb.w	r3, [r3]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
						+ input[2] * rotate_c[i];
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8002122:	edc3 7a00 	vstr	s15, [r3]
				if (output[i]>1) {
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	dd07      	ble.n	8002150 <Transform_Omni+0x138>
					output[i]=1;
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e012      	b.n	8002176 <Transform_Omni+0x15e>
				}
				else if (output[i]<-1) {
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d505      	bpl.n	8002176 <Transform_Omni+0x15e>
					output[i]=-1;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <Transform_Omni+0x184>)
 8002174:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	3301      	adds	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b03      	cmp	r3, #3
 8002180:	dd9d      	ble.n	80020be <Transform_Omni+0xa6>
			}
	/*float norme = sqrtf(
			output[0] * output[0] + output[1] * output[1] + output[2] * output[2]+output[3] * output[3]);*/


	return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	@ 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	01ffff01 	.word	0x01ffff01
 8002190:	ffff0101 	.word	0xffff0101
 8002194:	44bb8000 	.word	0x44bb8000
 8002198:	43fa0000 	.word	0x43fa0000
 800219c:	bf800000 	.word	0xbf800000

080021a0 <HAL_UART_RxCpltCallback>:
 */

#include "Sabertooth.h"
static Sabertooth *sabertooth_ptr;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	if (huart != sabertooth_ptr->handle) {
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d129      	bne.n	8002208 <HAL_UART_RxCpltCallback+0x68>
		return;
	}
	if (sabertooth_ptr->Queue.NumberOfPacket <= 0) {
 80021b4:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	89db      	ldrh	r3, [r3, #14]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d104      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x28>
		sabertooth_ptr->Queue.CurrentlySending = 0;
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	731a      	strb	r2, [r3, #12]
 80021c6:	e020      	b.n	800220a <HAL_UART_RxCpltCallback+0x6a>
	} else {
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	6819      	ldr	r1, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->length);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	461a      	mov	r2, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 f92c 	bl	8006438 <HAL_UART_Transmit_DMA>
		sabertooth_ptr->Queue.FirstPacket =
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
		sabertooth_ptr->Queue.FirstPacket =
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021e8:	681b      	ldr	r3, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 80021ea:	6892      	ldr	r2, [r2, #8]
		sabertooth_ptr->Queue.FirstPacket =
 80021ec:	611a      	str	r2, [r3, #16]
		sabertooth_ptr->Queue.NumberOfPacket -= 1;
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	89da      	ldrh	r2, [r3, #14]
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3a01      	subs	r2, #1
 80021fa:	b292      	uxth	r2, r2
 80021fc:	81da      	strh	r2, [r3, #14]
		sabertooth_ptr->Queue.CurrentlySending = 1;
 80021fe:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <HAL_UART_RxCpltCallback+0x70>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	731a      	strb	r2, [r3, #12]
 8002206:	e000      	b.n	800220a <HAL_UART_RxCpltCallback+0x6a>
		return;
 8002208:	bf00      	nop
	}
}
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000067c 	.word	0x2000067c

08002214 <Sabertooth_Init>:
HAL_StatusTypeDef Sabertooth_Init(Sabertooth *saber, UART_HandleTypeDef *handle,
		uint8_t motor[4], uint8_t adress[4], CRC_HandleTypeDef * crc) {
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
	sabertooth_ptr = saber;
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <Sabertooth_Init+0x68>)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e016      	b.n	800225c <Sabertooth_Init+0x48>
		saber->adress[i] = adress[i];
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	7819      	ldrb	r1, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
		saber->motor[i] = motor[i];
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	7819      	ldrb	r1, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	4413      	add	r3, r2
 8002250:	3308      	adds	r3, #8
 8002252:	460a      	mov	r2, r1
 8002254:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b03      	cmp	r3, #3
 8002260:	dde5      	ble.n	800222e <Sabertooth_Init+0x1a>
	}
	saber->handle = handle;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	601a      	str	r2, [r3, #0]
	saber->crc=crc;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a3a      	ldr	r2, [r7, #32]
 800226c:	619a      	str	r2, [r3, #24]
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	2000067c 	.word	0x2000067c

08002280 <Sabertooth_Send>:
HAL_StatusTypeDef Sabertooth_Send(Sabertooth *saber, uint8_t address,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8002280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002284:	b08b      	sub	sp, #44	@ 0x2c
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	72fb      	strb	r3, [r7, #11]
 8002290:	4613      	mov	r3, r2
 8002292:	72bb      	strb	r3, [r7, #10]
 8002294:	466b      	mov	r3, sp
 8002296:	461e      	mov	r6, r3
	uint8_t Packet[3 + data_length];
 8002298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800229c:	1cd9      	adds	r1, r3, #3
 800229e:	1e4b      	subs	r3, r1, #1
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	460a      	mov	r2, r1
 80022a4:	2300      	movs	r3, #0
 80022a6:	4690      	mov	r8, r2
 80022a8:	4699      	mov	r9, r3
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022be:	460a      	mov	r2, r1
 80022c0:	2300      	movs	r3, #0
 80022c2:	4614      	mov	r4, r2
 80022c4:	461d      	mov	r5, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	00eb      	lsls	r3, r5, #3
 80022d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d4:	00e2      	lsls	r2, r4, #3
 80022d6:	460b      	mov	r3, r1
 80022d8:	3307      	adds	r3, #7
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	ebad 0d03 	sub.w	sp, sp, r3
 80022e2:	466b      	mov	r3, sp
 80022e4:	3300      	adds	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
	Packet[0] = address;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	7afa      	ldrb	r2, [r7, #11]
 80022ec:	701a      	strb	r2, [r3, #0]
	Packet[1] = command;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	7aba      	ldrb	r2, [r7, #10]
 80022f2:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f8:	e00a      	b.n	8002310 <Sabertooth_Send+0x90>
		Packet[i + 2] = data[i];
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	441a      	add	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	3302      	adds	r3, #2
 8002304:	7811      	ldrb	r1, [r2, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < data_length; i++) {
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002316:	429a      	cmp	r2, r3
 8002318:	dbef      	blt.n	80022fa <Sabertooth_Send+0x7a>
	}
	uint8_t Checksum = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e00b      	b.n	800233e <Sabertooth_Send+0xbe>
		Checksum += Packet[i];
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002332:	4413      	add	r3, r2
 8002334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002342:	3301      	adds	r3, #1
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	429a      	cmp	r2, r3
 8002348:	dded      	ble.n	8002326 <Sabertooth_Send+0xa6>
	}
	Checksum = Checksum & 0x7F;
 800234a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800234e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	Packet[2 + data_length] = Checksum;
 8002356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800235a:	3302      	adds	r3, #2
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002362:	54d1      	strb	r1, [r2, r3]
	//return HAL_UART_Transmit_DMA(saber->handle, Packet, 3 + data_length);
	return HAL_UART_Transmit(saber->handle, Packet, 3+data_length,10);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800236c:	3303      	adds	r3, #3
 800236e:	b29a      	uxth	r2, r3
 8002370:	230a      	movs	r3, #10
 8002372:	6979      	ldr	r1, [r7, #20]
 8002374:	f003 ffd6 	bl	8006324 <HAL_UART_Transmit>
 8002378:	4603      	mov	r3, r0
 800237a:	46b5      	mov	sp, r6
		saber->Queue.FirstPacket = &PacketToSend;
		saber->Queue.lastPacket = &PacketToSend;
		saber->Queue.NumberOfPacket = 1;
	}*/
	return HAL_OK;
}
 800237c:	4618      	mov	r0, r3
 800237e:	372c      	adds	r7, #44	@ 0x2c
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002388 <Sabertooth_Drive>:

HAL_StatusTypeDef Sabertooth_Drive(Sabertooth *saber, float command[4]) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++) {
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e072      	b.n	800247e <Sabertooth_Drive+0xf6>
		if (command[i] >= 0) {
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	db30      	blt.n	8002410 <Sabertooth_Drive+0x88>
			uint8_t data = floor(command[i] * 127);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002490 <Sabertooth_Drive+0x108>
 80023be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c2:	ee17 0a90 	vmov	r0, s15
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	ec43 2b10 	vmov	d0, r2, r3
 80023d2:	f007 fed1 	bl	800a178 <floor>
 80023d6:	ec53 2b10 	vmov	r2, r3, d0
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fbe3 	bl	8000ba8 <__aeabi_d2uiz>
 80023e2:	4603      	mov	r3, r0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	72fb      	strb	r3, [r7, #11]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i], &data,
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	7819      	ldrb	r1, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	3308      	adds	r3, #8
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	f107 030b 	add.w	r3, r7, #11
 8002404:	2001      	movs	r0, #1
 8002406:	9000      	str	r0, [sp, #0]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff39 	bl	8002280 <Sabertooth_Send>
 800240e:	e033      	b.n	8002478 <Sabertooth_Drive+0xf0>
					1);

		} else {
			uint8_t data = floor(-command[i] * 127);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eef1 7a67 	vneg.f32	s15, s15
 8002420:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002490 <Sabertooth_Drive+0x108>
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	ee17 0a90 	vmov	r0, s15
 800242c:	f7fe f88c 	bl	8000548 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b10 	vmov	d0, r2, r3
 8002438:	f007 fe9e 	bl	800a178 <floor>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fbb0 	bl	8000ba8 <__aeabi_d2uiz>
 8002448:	4603      	mov	r3, r0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	72bb      	strb	r3, [r7, #10]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i] + 1,
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	7819      	ldrb	r1, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	3308      	adds	r3, #8
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	f107 030a 	add.w	r3, r7, #10
 800246e:	2001      	movs	r0, #1
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff04 	bl	8002280 <Sabertooth_Send>
	for (int i = 0; i < 4; i++) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3301      	adds	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b03      	cmp	r3, #3
 8002482:	dd89      	ble.n	8002398 <Sabertooth_Drive+0x10>
					&data, 1);
		}
	}

	return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	42fe0000 	.word	0x42fe0000

08002494 <tm1637_delay_us>:
const uint8_t fill_off[4] = {0x00, 0x00, 0x00, 0x00};
const uint8_t _tm1637_minus = 0x40;
const uint8_t _tm1637_dot = 0x80;  
//#######################################################################################################################
void tm1637_delay_us(uint8_t delay)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  while (delay > 0)
 800249e:	e006      	b.n	80024ae <tm1637_delay_us+0x1a>
  {
    delay--;
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	71fb      	strb	r3, [r7, #7]
    asm("NOP");asm("NOP");asm("NOP");asm("NOP");
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
  while (delay > 0)
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f5      	bne.n	80024a0 <tm1637_delay_us+0xc>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <tm1637_start>:
//#######################################################################################################################
void tm1637_start(tm1637_t *tm1637)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6898      	ldr	r0, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	89db      	ldrh	r3, [r3, #14]
 80024d2:	2200      	movs	r2, #0
 80024d4:	4619      	mov	r1, r3
 80024d6:	f001 f849 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80024da:	2014      	movs	r0, #20
 80024dc:	f7ff ffda 	bl	8002494 <tm1637_delay_us>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <tm1637_stop>:
//#######################################################################################################################
void tm1637_stop(tm1637_t *tm1637)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6898      	ldr	r0, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	89db      	ldrh	r3, [r3, #14]
 80024f8:	2200      	movs	r2, #0
 80024fa:	4619      	mov	r1, r3
 80024fc:	f001 f836 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002500:	2014      	movs	r0, #20
 8002502:	f7ff ffc7 	bl	8002494 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6858      	ldr	r0, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	899b      	ldrh	r3, [r3, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	4619      	mov	r1, r3
 8002512:	f001 f82b 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002516:	2014      	movs	r0, #20
 8002518:	f7ff ffbc 	bl	8002494 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	89db      	ldrh	r3, [r3, #14]
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	f001 f820 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800252c:	2014      	movs	r0, #20
 800252e:	f7ff ffb1 	bl	8002494 <tm1637_delay_us>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <tm1637_write_byte>:
//#######################################################################################################################
uint8_t tm1637_write_byte(tm1637_t *tm1637, uint8_t data)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	70fb      	strb	r3, [r7, #3]
  //  write 8 bit data
  for (uint8_t i = 0; i < 8; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e034      	b.n	80025b6 <tm1637_write_byte+0x7c>
  {
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6858      	ldr	r0, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	899b      	ldrh	r3, [r3, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	f001 f808 	bl	800356c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 800255c:	2014      	movs	r0, #20
 800255e:	f7ff ff99 	bl	8002494 <tm1637_delay_us>
    if (data & 0x01)
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <tm1637_write_byte+0x44>
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	89db      	ldrh	r3, [r3, #14]
 8002574:	2201      	movs	r2, #1
 8002576:	4619      	mov	r1, r3
 8002578:	f000 fff8 	bl	800356c <HAL_GPIO_WritePin>
 800257c:	e007      	b.n	800258e <tm1637_write_byte+0x54>
    else
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6898      	ldr	r0, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	89db      	ldrh	r3, [r3, #14]
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	f000 ffef 	bl	800356c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 800258e:	2014      	movs	r0, #20
 8002590:	f7ff ff80 	bl	8002494 <tm1637_delay_us>
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6858      	ldr	r0, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	899b      	ldrh	r3, [r3, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	f000 ffe4 	bl	800356c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 80025a4:	2014      	movs	r0, #20
 80025a6:	f7ff ff75 	bl	8002494 <tm1637_delay_us>
    data = data >> 1;
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < 8; i++)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	d9c7      	bls.n	800254c <tm1637_write_byte+0x12>
  }
  // wait for acknowledge
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6858      	ldr	r0, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	899b      	ldrh	r3, [r3, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f000 ffd0 	bl	800356c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6898      	ldr	r0, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	89db      	ldrh	r3, [r3, #14]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4619      	mov	r1, r3
 80025d8:	f000 ffc8 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80025dc:	2014      	movs	r0, #20
 80025de:	f7ff ff59 	bl	8002494 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6858      	ldr	r0, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	899b      	ldrh	r3, [r3, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4619      	mov	r1, r3
 80025ee:	f000 ffbd 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80025f2:	2014      	movs	r0, #20
 80025f4:	f7ff ff4e 	bl	8002494 <tm1637_delay_us>
  uint8_t ack = HAL_GPIO_ReadPin(tm1637->gpio_dat, tm1637->pin_dat);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	89db      	ldrh	r3, [r3, #14]
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 ff9a 	bl	800353c <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	73bb      	strb	r3, [r7, #14]
  if (ack == 0)
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <tm1637_write_byte+0xe8>
    HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6898      	ldr	r0, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	89db      	ldrh	r3, [r3, #14]
 800261a:	2200      	movs	r2, #0
 800261c:	4619      	mov	r1, r3
 800261e:	f000 ffa5 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002622:	2014      	movs	r0, #20
 8002624:	f7ff ff36 	bl	8002494 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6858      	ldr	r0, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	899b      	ldrh	r3, [r3, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	4619      	mov	r1, r3
 8002634:	f000 ff9a 	bl	800356c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002638:	2014      	movs	r0, #20
 800263a:	f7ff ff2b 	bl	8002494 <tm1637_delay_us>
  return ack;
 800263e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <tm1637_lock>:
//#######################################################################################################################
void tm1637_lock(tm1637_t *tm1637)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  while (tm1637->lock == 1)
 8002650:	e002      	b.n	8002658 <tm1637_lock+0x10>
    tm1637_delay_ms(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 f9a8 	bl	80029a8 <HAL_Delay>
  while (tm1637->lock == 1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d0f8      	beq.n	8002652 <tm1637_lock+0xa>
  tm1637->lock = 1;  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <tm1637_unlock>:
//#######################################################################################################################
void tm1637_unlock(tm1637_t *tm1637)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  tm1637->lock = 0;  
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <tm1637_init>:
//#######################################################################################################################
void tm1637_init(tm1637_t *tm1637, GPIO_TypeDef *gpio_clk, uint16_t pin_clk, GPIO_TypeDef *gpio_dat, uint16_t pin_dat)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
  memset(tm1637, 0, sizeof(tm1637_t)); 
 8002698:	2210      	movs	r2, #16
 800269a:	2100      	movs	r1, #0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f005 fc60 	bl	8007f62 <memset>
  //  set max brightess
  tm1637_brightness(tm1637, 7);  
 80026a2:	2107      	movs	r1, #7
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f834 	bl	8002712 <tm1637_brightness>
  tm1637_lock(tm1637);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff ffcc 	bl	8002648 <tm1637_lock>
  //  init gpio
  tm1637->gpio_clk = gpio_clk;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	605a      	str	r2, [r3, #4]
  tm1637->pin_clk = pin_clk;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	819a      	strh	r2, [r3, #12]
  tm1637->gpio_dat = gpio_dat;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]
  tm1637->pin_dat = pin_dat;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80026c6:	81da      	strh	r2, [r3, #14]
  GPIO_InitTypeDef g = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  g.Mode = GPIO_MODE_OUTPUT_OD;
 80026d8:	2311      	movs	r3, #17
 80026da:	61bb      	str	r3, [r7, #24]
  g.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  g.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e0:	2302      	movs	r3, #2
 80026e2:	623b      	str	r3, [r7, #32]
  g.Pin = pin_clk;
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_clk, &g);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	f000 fd7a 	bl	80031e8 <HAL_GPIO_Init>
  g.Pin = pin_dat;
 80026f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80026f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_dat, &g);    
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f000 fd72 	bl	80031e8 <HAL_GPIO_Init>
  tm1637_unlock(tm1637);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ffb2 	bl	800266e <tm1637_unlock>
}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <tm1637_brightness>:
//#######################################################################################################################
void tm1637_brightness(tm1637_t *tm1637, uint8_t brightness_0_to_7)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  tm1637_lock(tm1637);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff92 	bl	8002648 <tm1637_lock>
  tm1637->brightness = (brightness_0_to_7 & 0x7) | 0x08;
 8002724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	b25b      	sxtb	r3, r3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	705a      	strb	r2, [r3, #1]
  tm1637_unlock(tm1637);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff97 	bl	800266e <tm1637_unlock>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <tm1637_write_raw>:
//#######################################################################################################################
void tm1637_write_raw(tm1637_t *tm1637, const uint8_t *raw, uint8_t length, uint8_t pos)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	460b      	mov	r3, r1
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	4613      	mov	r3, r2
 800275c:	71bb      	strb	r3, [r7, #6]
  if (pos > 5)
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d83f      	bhi.n	80027e4 <tm1637_write_raw+0x9c>
    return;
  if (length > 6)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d901      	bls.n	800276e <tm1637_write_raw+0x26>
    length = 6;
 800276a:	2306      	movs	r3, #6
 800276c:	71fb      	strb	r3, [r7, #7]
  // write COMM1
  tm1637_start(tm1637);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fea7 	bl	80024c2 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM1);
 8002774:	2140      	movs	r1, #64	@ 0x40
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fedf 	bl	800253a <tm1637_write_byte>
  tm1637_stop(tm1637);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff feb3 	bl	80024e8 <tm1637_stop>
  // write COMM2 + first digit address
  tm1637_start(tm1637);
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff fe9d 	bl	80024c2 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM2 + (pos & 0x03));
 8002788:	79bb      	ldrb	r3, [r7, #6]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3b40      	subs	r3, #64	@ 0x40
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fecf 	bl	800253a <tm1637_write_byte>
  // write the data bytes
  for (uint8_t k=0; k < length; k++)
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
 80027a0:	e00a      	b.n	80027b8 <tm1637_write_raw+0x70>
    tm1637_write_byte(tm1637, raw[k]);
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fec4 	bl	800253a <tm1637_write_byte>
  for (uint8_t k=0; k < length; k++)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	3301      	adds	r3, #1
 80027b6:	75fb      	strb	r3, [r7, #23]
 80027b8:	7dfa      	ldrb	r2, [r7, #23]
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3f0      	bcc.n	80027a2 <tm1637_write_raw+0x5a>
  tm1637_stop(tm1637);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fe91 	bl	80024e8 <tm1637_stop>
  // write COMM3 + brightness
  tm1637_start(tm1637);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fe7b 	bl	80024c2 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM3 + tm1637->brightness);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	3b80      	subs	r3, #128	@ 0x80
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff feaf 	bl	800253a <tm1637_write_byte>
  tm1637_stop(tm1637);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fe83 	bl	80024e8 <tm1637_stop>
 80027e2:	e000      	b.n	80027e6 <tm1637_write_raw+0x9e>
    return;
 80027e4:	bf00      	nop
}
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <tm1637_write_int>:
  tm1637_write_raw(tm1637, segments, length, pos);
  tm1637_unlock(tm1637);  
}
//#######################################################################################################################
void tm1637_write_int(tm1637_t *tm1637, int32_t digit, uint8_t pos)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	71fb      	strb	r3, [r7, #7]
  tm1637_lock(tm1637);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff ff24 	bl	8002648 <tm1637_lock>
  char str[7];
  uint8_t buffer[6] = {0};
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	2300      	movs	r3, #0
 8002806:	82bb      	strh	r3, [r7, #20]
  snprintf(str, sizeof(str) , "%d", digit);
 8002808:	f107 0018 	add.w	r0, r7, #24
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a26      	ldr	r2, [pc, #152]	@ (80028a8 <tm1637_write_int+0xbc>)
 8002810:	2107      	movs	r1, #7
 8002812:	f005 fb0f 	bl	8007e34 <sniprintf>
  for (uint8_t i=0; i < 6; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e034      	b.n	8002886 <tm1637_write_int+0x9a>
  {
    if (str[i] == '-')
 800281c:	7ffb      	ldrb	r3, [r7, #31]
 800281e:	3320      	adds	r3, #32
 8002820:	443b      	add	r3, r7
 8002822:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002826:	2b2d      	cmp	r3, #45	@ 0x2d
 8002828:	d106      	bne.n	8002838 <tm1637_write_int+0x4c>
      buffer[i] = _tm1637_minus;
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	3320      	adds	r3, #32
 8002830:	443b      	add	r3, r7
 8002832:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002836:	e023      	b.n	8002880 <tm1637_write_int+0x94>
    else if((str[i] >= '0') && (str[i] <= '9'))
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	3320      	adds	r3, #32
 800283c:	443b      	add	r3, r7
 800283e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002842:	2b2f      	cmp	r3, #47	@ 0x2f
 8002844:	d915      	bls.n	8002872 <tm1637_write_int+0x86>
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	3320      	adds	r3, #32
 800284a:	443b      	add	r3, r7
 800284c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002850:	2b39      	cmp	r3, #57	@ 0x39
 8002852:	d80e      	bhi.n	8002872 <tm1637_write_int+0x86>
      buffer[i] = _tm1637_digit[str[i] - 48];
 8002854:	7ffb      	ldrb	r3, [r7, #31]
 8002856:	3320      	adds	r3, #32
 8002858:	443b      	add	r3, r7
 800285a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800285e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	4911      	ldr	r1, [pc, #68]	@ (80028ac <tm1637_write_int+0xc0>)
 8002866:	5c8a      	ldrb	r2, [r1, r2]
 8002868:	3320      	adds	r3, #32
 800286a:	443b      	add	r3, r7
 800286c:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002870:	e006      	b.n	8002880 <tm1637_write_int+0x94>
    else
    {
      buffer[i] = 0;
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	3320      	adds	r3, #32
 8002876:	443b      	add	r3, r7
 8002878:	2200      	movs	r2, #0
 800287a:	f803 2c10 	strb.w	r2, [r3, #-16]
      break;
 800287e:	e005      	b.n	800288c <tm1637_write_int+0xa0>
  for (uint8_t i=0; i < 6; i++)
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	3301      	adds	r3, #1
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	7ffb      	ldrb	r3, [r7, #31]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d9c7      	bls.n	800281c <tm1637_write_int+0x30>
    }
  }
  tm1637_write_raw(tm1637, buffer, 6, pos);              
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f107 0110 	add.w	r1, r7, #16
 8002892:	2206      	movs	r2, #6
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff ff57 	bl	8002748 <tm1637_write_raw>
  tm1637_unlock(tm1637);  
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff fee7 	bl	800266e <tm1637_unlock>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	0800a490 	.word	0x0800a490
 80028ac:	0800a514 	.word	0x0800a514

080028b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ba:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_Init+0x3c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_Init+0x3c>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c6:	2003      	movs	r0, #3
 80028c8:	f000 f962 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f80f 	bl	80028f0 <HAL_InitTick>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	e001      	b.n	80028e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028de:	f7fe ff47 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028e2:	79fb      	ldrb	r3, [r7, #7]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40022000 	.word	0x40022000

080028f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_InitTick+0x6c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002904:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <HAL_InitTick+0x70>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <HAL_InitTick+0x6c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f96d 	bl	8002bfa <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d809      	bhi.n	8002940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f937 	bl	8002ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_InitTick+0x74>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e007      	b.n	8002950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e004      	b.n	8002950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e001      	b.n	8002950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000001c 	.word	0x2000001c
 8002960:	20000008 	.word	0x20000008
 8002964:	20000018 	.word	0x20000018

08002968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_IncTick+0x20>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_IncTick+0x24>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <HAL_IncTick+0x24>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000001c 	.word	0x2000001c
 800298c:	20000680 	.word	0x20000680

08002990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return uwTick;
 8002994:	4b03      	ldr	r3, [pc, #12]	@ (80029a4 <HAL_GetTick+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000680 	.word	0x20000680

080029a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b0:	f7ff ffee 	bl	8002990 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d005      	beq.n	80029ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_Delay+0x44>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ce:	bf00      	nop
 80029d0:	f7ff ffde 	bl	8002990 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d8f7      	bhi.n	80029d0 <HAL_Delay+0x28>
  {
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000001c 	.word	0x2000001c

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	@ (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	@ (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	@ (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff3e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff8e 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5d 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff31 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e054      	b.n	8002cd0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7f5b      	ldrb	r3, [r3, #29]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fdbe 	bl	80017b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	791b      	ldrb	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a22      	ldr	r2, [pc, #136]	@ (8002cd8 <HAL_CRC_Init+0xc4>)
 8002c50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0218 	bic.w	r2, r2, #24
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	e00c      	b.n	8002c7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f834 	bl	8002cdc <HAL_CRCEx_Polynomial_Set>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e028      	b.n	8002cd0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	795b      	ldrb	r3, [r3, #5]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	e004      	b.n	8002c9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6912      	ldr	r2, [r2, #16]
 8002c9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	04c11db7 	.word	0x04c11db7

08002cdc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cec:	231f      	movs	r3, #31
 8002cee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
 8002cfe:	e063      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d00:	bf00      	nop
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	613a      	str	r2, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_CRCEx_Polynomial_Set+0x44>
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b18      	cmp	r3, #24
 8002d24:	d846      	bhi.n	8002db4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002d26:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002dbb 	.word	0x08002dbb
 8002d30:	08002db5 	.word	0x08002db5
 8002d34:	08002db5 	.word	0x08002db5
 8002d38:	08002db5 	.word	0x08002db5
 8002d3c:	08002db5 	.word	0x08002db5
 8002d40:	08002db5 	.word	0x08002db5
 8002d44:	08002db5 	.word	0x08002db5
 8002d48:	08002db5 	.word	0x08002db5
 8002d4c:	08002da9 	.word	0x08002da9
 8002d50:	08002db5 	.word	0x08002db5
 8002d54:	08002db5 	.word	0x08002db5
 8002d58:	08002db5 	.word	0x08002db5
 8002d5c:	08002db5 	.word	0x08002db5
 8002d60:	08002db5 	.word	0x08002db5
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002db5 	.word	0x08002db5
 8002d6c:	08002d9d 	.word	0x08002d9d
 8002d70:	08002db5 	.word	0x08002db5
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002db5 	.word	0x08002db5
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002db5 	.word	0x08002db5
 8002d8c:	08002d91 	.word	0x08002d91
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d913      	bls.n	8002dbe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d9a:	e010      	b.n	8002dbe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	d90f      	bls.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002da6:	e00c      	b.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d90b      	bls.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002db2:	e008      	b.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
        break;
 8002db8:	e006      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dc6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 0118 	bic.w	r1, r3, #24
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e098      	b.n	8002f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b4d      	ldr	r3, [pc, #308]	@ (8002f48 <HAL_DMA_Init+0x150>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d80f      	bhi.n	8002e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_DMA_Init+0x154>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a4b      	ldr	r2, [pc, #300]	@ (8002f50 <HAL_DMA_Init+0x158>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a48      	ldr	r2, [pc, #288]	@ (8002f54 <HAL_DMA_Init+0x15c>)
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e34:	e00e      	b.n	8002e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_DMA_Init+0x160>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a43      	ldr	r2, [pc, #268]	@ (8002f50 <HAL_DMA_Init+0x158>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a42      	ldr	r2, [pc, #264]	@ (8002f5c <HAL_DMA_Init+0x164>)
 8002e52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eae:	d039      	beq.n	8002f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <HAL_DMA_Init+0x15c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <HAL_DMA_Init+0x168>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f003 031c 	and.w	r3, r3, #28
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4924      	ldr	r1, [pc, #144]	@ (8002f60 <HAL_DMA_Init+0x168>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <HAL_DMA_Init+0x168>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f003 031c 	and.w	r3, r3, #28
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	491d      	ldr	r1, [pc, #116]	@ (8002f60 <HAL_DMA_Init+0x168>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
 8002eee:	e019      	b.n	8002f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f64 <HAL_DMA_Init+0x16c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f003 031c 	and.w	r3, r3, #28
 8002efc:	210f      	movs	r1, #15
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4917      	ldr	r1, [pc, #92]	@ (8002f64 <HAL_DMA_Init+0x16c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <HAL_DMA_Init+0x16c>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f003 031c 	and.w	r3, r3, #28
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <HAL_DMA_Init+0x16c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40020407 	.word	0x40020407
 8002f4c:	bffdfff8 	.word	0xbffdfff8
 8002f50:	cccccccd 	.word	0xcccccccd
 8002f54:	40020000 	.word	0x40020000
 8002f58:	bffdfbf8 	.word	0xbffdfbf8
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	400200a8 	.word	0x400200a8
 8002f64:	400204a8 	.word	0x400204a8

08002f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Start_IT+0x20>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e04b      	b.n	8003020 <HAL_DMA_Start_IT+0xb8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d13a      	bne.n	8003012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8e0 	bl	8003186 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 020e 	orr.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e00f      	b.n	8003000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 020a 	orr.w	r2, r2, #10
 8002ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e005      	b.n	800301e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003044:	f003 031c 	and.w	r3, r3, #28
 8003048:	2204      	movs	r2, #4
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d026      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x7a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d021      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	f003 021c 	and.w	r2, r3, #28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	2104      	movs	r1, #4
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d071      	beq.n	800317c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030a0:	e06c      	b.n	800317c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f003 031c 	and.w	r3, r3, #28
 80030aa:	2202      	movs	r2, #2
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02e      	beq.n	8003114 <HAL_DMA_IRQHandler+0xec>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d029      	beq.n	8003114 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020a 	bic.w	r2, r2, #10
 80030dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f003 021c 	and.w	r2, r3, #28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	2102      	movs	r1, #2
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d038      	beq.n	800317c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003112:	e033      	b.n	800317c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	f003 031c 	and.w	r3, r3, #28
 800311c:	2208      	movs	r2, #8
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02a      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d025      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020e 	bic.w	r2, r2, #14
 8003140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f003 021c 	and.w	r2, r3, #28
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800317c:	bf00      	nop
 800317e:	bf00      	nop
}
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	f003 021c 	and.w	r2, r3, #28
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d108      	bne.n	80031ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031c8:	e007      	b.n	80031da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	e17f      	b.n	80034f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8171 	beq.w	80034f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x40>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d118      	bne.n	80032c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800329c:	2201      	movs	r2, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	08db      	lsrs	r3, r3, #3
 80032b2:	f003 0201 	and.w	r2, r3, #1
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d017      	beq.n	8003304 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d123      	bne.n	8003358 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	08da      	lsrs	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3208      	adds	r2, #8
 8003318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	220f      	movs	r2, #15
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0203 	and.w	r2, r3, #3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80ac 	beq.w	80034f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	4b5f      	ldr	r3, [pc, #380]	@ (8003518 <HAL_GPIO_Init+0x330>)
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	4a5e      	ldr	r2, [pc, #376]	@ (8003518 <HAL_GPIO_Init+0x330>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003518 <HAL_GPIO_Init+0x330>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033b2:	4a5a      	ldr	r2, [pc, #360]	@ (800351c <HAL_GPIO_Init+0x334>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033dc:	d025      	beq.n	800342a <HAL_GPIO_Init+0x242>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003520 <HAL_GPIO_Init+0x338>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <HAL_GPIO_Init+0x23e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003524 <HAL_GPIO_Init+0x33c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x23a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003528 <HAL_GPIO_Init+0x340>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x236>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4c      	ldr	r2, [pc, #304]	@ (800352c <HAL_GPIO_Init+0x344>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x232>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4b      	ldr	r2, [pc, #300]	@ (8003530 <HAL_GPIO_Init+0x348>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x22e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4a      	ldr	r2, [pc, #296]	@ (8003534 <HAL_GPIO_Init+0x34c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x22a>
 800340e:	2306      	movs	r3, #6
 8003410:	e00c      	b.n	800342c <HAL_GPIO_Init+0x244>
 8003412:	2307      	movs	r3, #7
 8003414:	e00a      	b.n	800342c <HAL_GPIO_Init+0x244>
 8003416:	2305      	movs	r3, #5
 8003418:	e008      	b.n	800342c <HAL_GPIO_Init+0x244>
 800341a:	2304      	movs	r3, #4
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x244>
 800341e:	2303      	movs	r3, #3
 8003420:	e004      	b.n	800342c <HAL_GPIO_Init+0x244>
 8003422:	2302      	movs	r3, #2
 8003424:	e002      	b.n	800342c <HAL_GPIO_Init+0x244>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_GPIO_Init+0x244>
 800342a:	2300      	movs	r3, #0
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	f002 0203 	and.w	r2, r2, #3
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	4093      	lsls	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800343c:	4937      	ldr	r1, [pc, #220]	@ (800351c <HAL_GPIO_Init+0x334>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800344a:	4b3b      	ldr	r3, [pc, #236]	@ (8003538 <HAL_GPIO_Init+0x350>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800346e:	4a32      	ldr	r2, [pc, #200]	@ (8003538 <HAL_GPIO_Init+0x350>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003474:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_GPIO_Init+0x350>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003498:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <HAL_GPIO_Init+0x350>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800349e:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <HAL_GPIO_Init+0x350>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_GPIO_Init+0x350>)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_GPIO_Init+0x350>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ec:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <HAL_GPIO_Init+0x350>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	f47f ae78 	bne.w	80031f8 <HAL_GPIO_Init+0x10>
  }
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40010000 	.word	0x40010000
 8003520:	48000400 	.word	0x48000400
 8003524:	48000800 	.word	0x48000800
 8003528:	48000c00 	.word	0x48000c00
 800352c:	48001000 	.word	0x48001000
 8003530:	48001400 	.word	0x48001400
 8003534:	48001800 	.word	0x48001800
 8003538:	40010400 	.word	0x40010400

0800353c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e001      	b.n	800355e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003588:	e002      	b.n	8003590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b2:	4a05      	ldr	r2, [pc, #20]	@ (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fc8c 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035d0:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000

080035e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f6:	d130      	bne.n	800365a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f8:	4b23      	ldr	r3, [pc, #140]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003604:	d038      	beq.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003606:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800360e:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003610:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003616:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2232      	movs	r2, #50	@ 0x32
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0c9b      	lsrs	r3, r3, #18
 8003628:	3301      	adds	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800362c:	e002      	b.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3b01      	subs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003634:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	d102      	bne.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f2      	bne.n	800362e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003648:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003654:	d110      	bne.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003666:	d007      	beq.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003668:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003670:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003676:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40007000 	.word	0x40007000
 800368c:	20000008 	.word	0x20000008
 8003690:	431bde83 	.word	0x431bde83

08003694 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e3ca      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b97      	ldr	r3, [pc, #604]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	4b94      	ldr	r3, [pc, #592]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80e4 	beq.w	8003890 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_RCC_OscConfig+0x4a>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f040 808b 	bne.w	80037ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f040 8087 	bne.w	80037ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036de:	4b89      	ldr	r3, [pc, #548]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_OscConfig+0x62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e3a2      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	4b82      	ldr	r3, [pc, #520]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_RCC_OscConfig+0x7c>
 8003706:	4b7f      	ldr	r3, [pc, #508]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800370e:	e005      	b.n	800371c <HAL_RCC_OscConfig+0x88>
 8003710:	4b7c      	ldr	r3, [pc, #496]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800371c:	4293      	cmp	r3, r2
 800371e:	d223      	bcs.n	8003768 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fd55 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e383      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003734:	4b73      	ldr	r3, [pc, #460]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a72      	ldr	r2, [pc, #456]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800373a:	f043 0308 	orr.w	r3, r3, #8
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b70      	ldr	r3, [pc, #448]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	496d      	ldr	r1, [pc, #436]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003752:	4b6c      	ldr	r3, [pc, #432]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	4968      	ldr	r1, [pc, #416]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
 8003766:	e025      	b.n	80037b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003768:	4b66      	ldr	r3, [pc, #408]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b63      	ldr	r3, [pc, #396]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4960      	ldr	r1, [pc, #384]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003786:	4b5f      	ldr	r3, [pc, #380]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	495b      	ldr	r1, [pc, #364]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd15 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e343      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037b4:	f000 fc4a 	bl	800404c <HAL_RCC_GetSysClockFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b52      	ldr	r3, [pc, #328]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	4950      	ldr	r1, [pc, #320]	@ (8003908 <HAL_RCC_OscConfig+0x274>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
 80037d0:	4a4e      	ldr	r2, [pc, #312]	@ (800390c <HAL_RCC_OscConfig+0x278>)
 80037d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003910 <HAL_RCC_OscConfig+0x27c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f889 	bl	80028f0 <HAL_InitTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d052      	beq.n	800388e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	e327      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d032      	beq.n	800385a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037f4:	4b43      	ldr	r3, [pc, #268]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a42      	ldr	r2, [pc, #264]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003800:	f7ff f8c6 	bl	8002990 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003808:	f7ff f8c2 	bl	8002990 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e310      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800381a:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003826:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a36      	ldr	r2, [pc, #216]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4931      	ldr	r1, [pc, #196]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003844:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	492c      	ldr	r1, [pc, #176]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e01a      	b.n	8003890 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800385a:	4b2a      	ldr	r3, [pc, #168]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a29      	ldr	r2, [pc, #164]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003866:	f7ff f893 	bl	8002990 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386e:	f7ff f88f 	bl	8002990 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e2dd      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003880:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x1da>
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800388e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d074      	beq.n	8003986 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x21a>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d10e      	bne.n	80038c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d064      	beq.n	8003984 <HAL_RCC_OscConfig+0x2f0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d160      	bne.n	8003984 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e2ba      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x24a>
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e026      	b.n	800392c <HAL_RCC_OscConfig+0x298>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e6:	d115      	bne.n	8003914 <HAL_RCC_OscConfig+0x280>
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a05      	ldr	r2, [pc, #20]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a02      	ldr	r2, [pc, #8]	@ (8003904 <HAL_RCC_OscConfig+0x270>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x298>
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	0800a4cc 	.word	0x0800a4cc
 800390c:	20000008 	.word	0x20000008
 8003910:	20000018 	.word	0x20000018
 8003914:	4ba0      	ldr	r3, [pc, #640]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a9f      	ldr	r2, [pc, #636]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 800391a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b9d      	ldr	r3, [pc, #628]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a9c      	ldr	r2, [pc, #624]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7ff f82c 	bl	8002990 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7ff f828 	bl	8002990 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	@ 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e276      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394e:	4b92      	ldr	r3, [pc, #584]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x2a8>
 800395a:	e014      	b.n	8003986 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7ff f818 	bl	8002990 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7ff f814 	bl	8002990 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	@ 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e262      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003976:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x2d0>
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d060      	beq.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_OscConfig+0x310>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d116      	bne.n	80039d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_OscConfig+0x328>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e23f      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b76      	ldr	r3, [pc, #472]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	4973      	ldr	r1, [pc, #460]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d0:	e040      	b.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d023      	beq.n	8003a22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039da:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6e      	ldr	r2, [pc, #440]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe ffd3 	bl	8002990 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fe ffcf 	bl	8002990 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e21d      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a00:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4b62      	ldr	r3, [pc, #392]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	495f      	ldr	r1, [pc, #380]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
 8003a20:	e018      	b.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	4b5d      	ldr	r3, [pc, #372]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5c      	ldr	r2, [pc, #368]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe ffaf 	bl	8002990 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a36:	f7fe ffab 	bl	8002990 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1f9      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03c      	beq.n	8003ada <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a68:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fe ff8a 	bl	8002990 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fe ff86 	bl	8002990 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1d4      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ef      	beq.n	8003a80 <HAL_RCC_OscConfig+0x3ec>
 8003aa0:	e01b      	b.n	8003ada <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fe ff6d 	bl	8002990 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aba:	f7fe ff69 	bl	8002990 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1b7      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003acc:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ef      	bne.n	8003aba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80a6 	beq.w	8003c34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aec:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b27      	ldr	r3, [pc, #156]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4a26      	ldr	r2, [pc, #152]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b04:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <HAL_RCC_OscConfig+0x508>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d118      	bne.n	8003b52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b20:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <HAL_RCC_OscConfig+0x508>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <HAL_RCC_OscConfig+0x508>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2c:	f7fe ff30 	bl	8002990 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b34:	f7fe ff2c 	bl	8002990 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e17a      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b46:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <HAL_RCC_OscConfig+0x508>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4d8>
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b6a:	e029      	b.n	8003bc0 <HAL_RCC_OscConfig+0x52c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d115      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x50c>
 8003b74:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7a:	4a07      	ldr	r2, [pc, #28]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	4a03      	ldr	r2, [pc, #12]	@ (8003b98 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b94:	e014      	b.n	8003bc0 <HAL_RCC_OscConfig+0x52c>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba6:	4a9b      	ldr	r2, [pc, #620]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bb0:	4b98      	ldr	r3, [pc, #608]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a97      	ldr	r2, [pc, #604]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d016      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fe fee2 	bl	8002990 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fe fede 	bl	8002990 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e12a      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ed      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x53c>
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fecb 	bl	8002990 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe fec7 	bl	8002990 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e113      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	4b7f      	ldr	r3, [pc, #508]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ed      	bne.n	8003bfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b7a      	ldr	r3, [pc, #488]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2c:	4a79      	ldr	r2, [pc, #484]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80fe 	beq.w	8003e3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	f040 80d0 	bne.w	8003de8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c48:	4b72      	ldr	r3, [pc, #456]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d130      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	3b01      	subs	r3, #1
 8003c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d127      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d11f      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c88:	2a07      	cmp	r2, #7
 8003c8a:	bf14      	ite	ne
 8003c8c:	2201      	movne	r2, #1
 8003c8e:	2200      	moveq	r2, #0
 8003c90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d113      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d06e      	beq.n	8003d9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d069      	beq.n	8003d98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cd0:	4b50      	ldr	r3, [pc, #320]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0ad      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cec:	f7fe fe50 	bl	8002990 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fe fe4c 	bl	8002990 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e09a      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d06:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d12:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <HAL_RCC_OscConfig+0x784>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d22:	3a01      	subs	r2, #1
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d2c:	0212      	lsls	r2, r2, #8
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d34:	0852      	lsrs	r2, r2, #1
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0552      	lsls	r2, r2, #21
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	3a01      	subs	r2, #1
 8003d44:	0652      	lsls	r2, r2, #25
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d4c:	0912      	lsrs	r2, r2, #4
 8003d4e:	0452      	lsls	r2, r2, #17
 8003d50:	430a      	orrs	r2, r1
 8003d52:	4930      	ldr	r1, [pc, #192]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d58:	4b2e      	ldr	r3, [pc, #184]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d64:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d70:	f7fe fe0e 	bl	8002990 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fe0a 	bl	8002990 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e058      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	4b22      	ldr	r3, [pc, #136]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d96:	e050      	b.n	8003e3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e04f      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d148      	bne.n	8003e3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db4:	4b17      	ldr	r3, [pc, #92]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a16      	ldr	r2, [pc, #88]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dc0:	f7fe fde6 	bl	8002990 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fde2 	bl	8002990 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e030      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x734>
 8003de6:	e028      	b.n	8003e3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d023      	beq.n	8003e36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a08      	ldr	r2, [pc, #32]	@ (8003e14 <HAL_RCC_OscConfig+0x780>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fdc9 	bl	8002990 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e00c      	b.n	8003e1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe fdc5 	bl	8002990 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d905      	bls.n	8003e1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e013      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
 8003e14:	40021000 	.word	0x40021000
 8003e18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_OscConfig+0x7b0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ec      	bne.n	8003e02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCC_OscConfig+0x7b0>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4905      	ldr	r1, [pc, #20]	@ (8003e44 <HAL_RCC_OscConfig+0x7b0>)
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCC_OscConfig+0x7b4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
 8003e34:	e001      	b.n	8003e3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	feeefffc 	.word	0xfeeefffc

08003e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0e7      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b75      	ldr	r3, [pc, #468]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d910      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b72      	ldr	r3, [pc, #456]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	4970      	ldr	r1, [pc, #448]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0cf      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b66      	ldr	r3, [pc, #408]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d908      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b63      	ldr	r3, [pc, #396]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4960      	ldr	r1, [pc, #384]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04c      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d121      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0a6      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eea:	4b54      	ldr	r3, [pc, #336]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d115      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e09a      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f02:	4b4e      	ldr	r3, [pc, #312]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e08e      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b4a      	ldr	r3, [pc, #296]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e086      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b46      	ldr	r3, [pc, #280]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4943      	ldr	r1, [pc, #268]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f34:	f7fe fd2c 	bl	8002990 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fd28 	bl	8002990 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e06e      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b3a      	ldr	r3, [pc, #232]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d208      	bcs.n	8003f92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	492b      	ldr	r1, [pc, #172]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f92:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d210      	bcs.n	8003fc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	4923      	ldr	r1, [pc, #140]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e036      	b.n	8004030 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4918      	ldr	r1, [pc, #96]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4910      	ldr	r1, [pc, #64]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004000:	f000 f824 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	490b      	ldr	r1, [pc, #44]	@ (8004040 <HAL_RCC_ClockConfig+0x1f4>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
 800401c:	4a09      	ldr	r2, [pc, #36]	@ (8004044 <HAL_RCC_ClockConfig+0x1f8>)
 800401e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_RCC_ClockConfig+0x1fc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fc63 	bl	80028f0 <HAL_InitTick>
 800402a:	4603      	mov	r3, r0
 800402c:	72fb      	strb	r3, [r7, #11]

  return status;
 800402e:	7afb      	ldrb	r3, [r7, #11]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
 8004040:	0800a4cc 	.word	0x0800a4cc
 8004044:	20000008 	.word	0x20000008
 8004048:	20000018 	.word	0x20000018

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	@ 0x24
 8004050:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405a:	4b3e      	ldr	r3, [pc, #248]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004064:	4b3b      	ldr	r3, [pc, #236]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x34>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d121      	bne.n	80040be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d11e      	bne.n	80040be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004080:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800408c:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 800408e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	e005      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_GetSysClockFreq+0x110>)
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	e004      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040d0:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x114>)
 80040d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d134      	bne.n	8004144 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d003      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0xac>
 80040f0:	e005      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_RCC_GetSysClockFreq+0x110>)
 80040f4:	617b      	str	r3, [r7, #20]
      break;
 80040f6:	e005      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x114>)
 80040fa:	617b      	str	r3, [r7, #20]
      break;
 80040fc:	e002      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	617b      	str	r3, [r7, #20]
      break;
 8004102:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004104:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	3301      	adds	r3, #1
 8004110:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	fb03 f202 	mul.w	r2, r3, r2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x108>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	0e5b      	lsrs	r3, r3, #25
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	3301      	adds	r3, #1
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004144:	69bb      	ldr	r3, [r7, #24]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3724      	adds	r7, #36	@ 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	0800a4e4 	.word	0x0800a4e4
 800415c:	00f42400 	.word	0x00f42400
 8004160:	007a1200 	.word	0x007a1200

08004164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <HAL_RCC_GetHCLKFreq+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000008 	.word	0x20000008

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004180:	f7ff fff0 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4904      	ldr	r1, [pc, #16]	@ (80041a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	0800a4dc 	.word	0x0800a4dc

080041a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041ac:	f7ff ffda 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0adb      	lsrs	r3, r3, #11
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4904      	ldr	r1, [pc, #16]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	0800a4dc 	.word	0x0800a4dc

080041d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041ec:	f7ff f9ee 	bl	80035cc <HAL_PWREx_GetVoltageRange>
 80041f0:	6178      	str	r0, [r7, #20]
 80041f2:	e014      	b.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b25      	ldr	r3, [pc, #148]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	4a24      	ldr	r2, [pc, #144]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004200:	4b22      	ldr	r3, [pc, #136]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800420c:	f7ff f9de 	bl	80035cc <HAL_PWREx_GetVoltageRange>
 8004210:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004224:	d10b      	bne.n	800423e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b80      	cmp	r3, #128	@ 0x80
 800422a:	d919      	bls.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004230:	d902      	bls.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004232:	2302      	movs	r3, #2
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e013      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004238:	2301      	movs	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e010      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b80      	cmp	r3, #128	@ 0x80
 8004242:	d902      	bls.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004244:	2303      	movs	r3, #3
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e00a      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b80      	cmp	r3, #128	@ 0x80
 800424e:	d102      	bne.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004250:	2302      	movs	r3, #2
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e004      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b70      	cmp	r3, #112	@ 0x70
 800425a:	d101      	bne.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800425c:	2301      	movs	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 0207 	bic.w	r2, r3, #7
 8004268:	4909      	ldr	r1, [pc, #36]	@ (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	40022000 	.word	0x40022000

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800429c:	2300      	movs	r3, #0
 800429e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a0:	2300      	movs	r3, #0
 80042a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d041      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042b8:	d02a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042be:	d824      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ca:	d81e      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d4:	d010      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042d6:	e018      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042d8:	4b86      	ldr	r3, [pc, #536]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a85      	ldr	r2, [pc, #532]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e4:	e015      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fabb 	bl	8004868 <RCCEx_PLLSAI1_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f6:	e00c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3320      	adds	r3, #32
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fba6 	bl	8004a50 <RCCEx_PLLSAI2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	74fb      	strb	r3, [r7, #19]
      break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004318:	4b76      	ldr	r3, [pc, #472]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004326:	4973      	ldr	r1, [pc, #460]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d041      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004344:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004348:	d02a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800434a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800434e:	d824      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004350:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435a:	d81e      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004364:	d010      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004366:	e018      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004368:	4b62      	ldr	r3, [pc, #392]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a61      	ldr	r2, [pc, #388]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004372:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004374:	e015      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fa73 	bl	8004868 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004386:	e00c      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3320      	adds	r3, #32
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb5e 	bl	8004a50 <RCCEx_PLLSAI2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004398:	e003      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	74fb      	strb	r3, [r7, #19]
      break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043a8:	4b52      	ldr	r3, [pc, #328]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b6:	494f      	ldr	r1, [pc, #316]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a0 	beq.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043d6:	4b47      	ldr	r3, [pc, #284]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	4a40      	ldr	r2, [pc, #256]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f8:	4b3e      	ldr	r3, [pc, #248]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004404:	2301      	movs	r3, #1
 8004406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004408:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fe fabc 	bl	8002990 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fe fab8 	bl	8002990 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	74fb      	strb	r3, [r7, #19]
        break;
 800442e:	e005      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004430:	4b31      	ldr	r3, [pc, #196]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15c      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004442:	4b2c      	ldr	r3, [pc, #176]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d019      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004460:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800446c:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fa77 	bl	8002990 <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a4:	e00b      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fe fa73 	bl	8002990 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d902      	bls.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	74fb      	strb	r3, [r7, #19]
            break;
 80044bc:	e006      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ec      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d2:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e2:	4904      	ldr	r1, [pc, #16]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
 80044f0:	e006      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004500:	7c7b      	ldrb	r3, [r7, #17]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b9e      	ldr	r3, [pc, #632]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450a:	4a9d      	ldr	r2, [pc, #628]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451e:	4b98      	ldr	r3, [pc, #608]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f023 0203 	bic.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	4994      	ldr	r1, [pc, #592]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004540:	4b8f      	ldr	r3, [pc, #572]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f023 020c 	bic.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	498c      	ldr	r1, [pc, #560]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004562:	4b87      	ldr	r3, [pc, #540]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	4983      	ldr	r1, [pc, #524]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004584:	4b7e      	ldr	r3, [pc, #504]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004592:	497b      	ldr	r1, [pc, #492]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a6:	4b76      	ldr	r3, [pc, #472]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b4:	4972      	ldr	r1, [pc, #456]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	496a      	ldr	r1, [pc, #424]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ea:	4b65      	ldr	r3, [pc, #404]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f8:	4961      	ldr	r1, [pc, #388]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800460c:	4b5c      	ldr	r3, [pc, #368]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	4959      	ldr	r1, [pc, #356]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462e:	4b54      	ldr	r3, [pc, #336]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463c:	4950      	ldr	r1, [pc, #320]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004650:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	4948      	ldr	r1, [pc, #288]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004672:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	493f      	ldr	r1, [pc, #252]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d028      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004694:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a2:	4937      	ldr	r1, [pc, #220]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b2:	d106      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b4:	4b32      	ldr	r3, [pc, #200]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a31      	ldr	r2, [pc, #196]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	e011      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f8c8 	bl	8004868 <RCCEx_PLLSAI1_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d028      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046f2:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	491f      	ldr	r1, [pc, #124]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004710:	d106      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800471c:	60d3      	str	r3, [r2, #12]
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f899 	bl	8004868 <RCCEx_PLLSAI1_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475e:	4908      	ldr	r1, [pc, #32]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a02      	ldr	r2, [pc, #8]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
 800477c:	e014      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	2101      	movs	r1, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f867 	bl	8004868 <RCCEx_PLLSAI1_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02f      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c2:	4928      	ldr	r1, [pc, #160]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f844 	bl	8004868 <RCCEx_PLLSAI1_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d014      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	74bb      	strb	r3, [r7, #18]
 80047ee:	e011      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3320      	adds	r3, #32
 80047fe:	2102      	movs	r1, #2
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f925 	bl	8004a50 <RCCEx_PLLSAI2_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482e:	490d      	ldr	r1, [pc, #52]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004842:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004852:	4904      	ldr	r1, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800485a:	7cbb      	ldrb	r3, [r7, #18]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004876:	4b75      	ldr	r3, [pc, #468]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d018      	beq.n	80048b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004882:	4b72      	ldr	r3, [pc, #456]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d10d      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
       ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800489a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
       ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d047      	beq.n	800493e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e044      	b.n	800493e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d018      	beq.n	80048ee <RCCEx_PLLSAI1_Config+0x86>
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d825      	bhi.n	800490c <RCCEx_PLLSAI1_Config+0xa4>
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <RCCEx_PLLSAI1_Config+0x62>
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d009      	beq.n	80048dc <RCCEx_PLLSAI1_Config+0x74>
 80048c8:	e020      	b.n	800490c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048ca:	4b60      	ldr	r3, [pc, #384]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11d      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048da:	e01a      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048dc:	4b5b      	ldr	r3, [pc, #364]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d116      	bne.n	8004916 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ec:	e013      	b.n	8004916 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ee:	4b57      	ldr	r3, [pc, #348]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048fa:	4b54      	ldr	r3, [pc, #336]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800490a:	e006      	b.n	800491a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e004      	b.n	800491c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491a:	bf00      	nop
    }

    if(status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004922:	4b4a      	ldr	r3, [pc, #296]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	3b01      	subs	r3, #1
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	430b      	orrs	r3, r1
 8004938:	4944      	ldr	r1, [pc, #272]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d17d      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004944:	4b41      	ldr	r3, [pc, #260]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a40      	ldr	r2, [pc, #256]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800494e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004950:	f7fe f81e 	bl	8002990 <HAL_GetTick>
 8004954:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004956:	e009      	b.n	800496c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004958:	f7fe f81a 	bl	8002990 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d902      	bls.n	800496c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	73fb      	strb	r3, [r7, #15]
        break;
 800496a:	e005      	b.n	8004978 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800496c:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ef      	bne.n	8004958 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d160      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d111      	bne.n	80049a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800498c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6892      	ldr	r2, [r2, #8]
 8004994:	0211      	lsls	r1, r2, #8
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68d2      	ldr	r2, [r2, #12]
 800499a:	0912      	lsrs	r2, r2, #4
 800499c:	0452      	lsls	r2, r2, #17
 800499e:	430a      	orrs	r2, r1
 80049a0:	492a      	ldr	r1, [pc, #168]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	610b      	str	r3, [r1, #16]
 80049a6:	e027      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d112      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ae:	4b27      	ldr	r3, [pc, #156]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	0211      	lsls	r1, r2, #8
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6912      	ldr	r2, [r2, #16]
 80049c4:	0852      	lsrs	r2, r2, #1
 80049c6:	3a01      	subs	r2, #1
 80049c8:	0552      	lsls	r2, r2, #21
 80049ca:	430a      	orrs	r2, r1
 80049cc:	491f      	ldr	r1, [pc, #124]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	610b      	str	r3, [r1, #16]
 80049d2:	e011      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049d4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	0211      	lsls	r1, r2, #8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6952      	ldr	r2, [r2, #20]
 80049ea:	0852      	lsrs	r2, r2, #1
 80049ec:	3a01      	subs	r2, #1
 80049ee:	0652      	lsls	r2, r2, #25
 80049f0:	430a      	orrs	r2, r1
 80049f2:	4916      	ldr	r1, [pc, #88]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049f8:	4b14      	ldr	r3, [pc, #80]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd ffc4 	bl	8002990 <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a0c:	f7fd ffc0 	bl	8002990 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a20:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ef      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	4904      	ldr	r1, [pc, #16]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000

08004a50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a6a:	4b67      	ldr	r3, [pc, #412]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0203 	and.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d10d      	bne.n	8004a96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a82:	4b61      	ldr	r3, [pc, #388]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
       ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d047      	beq.n	8004b26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e044      	b.n	8004b26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d018      	beq.n	8004ad6 <RCCEx_PLLSAI2_Config+0x86>
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d825      	bhi.n	8004af4 <RCCEx_PLLSAI2_Config+0xa4>
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d002      	beq.n	8004ab2 <RCCEx_PLLSAI2_Config+0x62>
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d009      	beq.n	8004ac4 <RCCEx_PLLSAI2_Config+0x74>
 8004ab0:	e020      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ab2:	4b55      	ldr	r3, [pc, #340]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11d      	bne.n	8004afa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac2:	e01a      	b.n	8004afa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac4:	4b50      	ldr	r3, [pc, #320]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad4:	e013      	b.n	8004afe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ae2:	4b49      	ldr	r3, [pc, #292]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004af2:	e006      	b.n	8004b02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e004      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	4939      	ldr	r1, [pc, #228]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d167      	bne.n	8004bfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b2c:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a35      	ldr	r2, [pc, #212]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fd ff2a 	bl	8002990 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b3e:	e009      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b40:	f7fd ff26 	bl	8002990 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d902      	bls.n	8004b54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	73fb      	strb	r3, [r7, #15]
        break;
 8004b52:	e005      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b54:	4b2c      	ldr	r3, [pc, #176]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ef      	bne.n	8004b40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d14a      	bne.n	8004bfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b6c:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6892      	ldr	r2, [r2, #8]
 8004b7c:	0211      	lsls	r1, r2, #8
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	0912      	lsrs	r2, r2, #4
 8004b84:	0452      	lsls	r2, r2, #17
 8004b86:	430a      	orrs	r2, r1
 8004b88:	491f      	ldr	r1, [pc, #124]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	614b      	str	r3, [r1, #20]
 8004b8e:	e011      	b.n	8004bb4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	0211      	lsls	r1, r2, #8
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6912      	ldr	r2, [r2, #16]
 8004ba6:	0852      	lsrs	r2, r2, #1
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0652      	lsls	r2, r2, #25
 8004bac:	430a      	orrs	r2, r1
 8004bae:	4916      	ldr	r1, [pc, #88]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bb4:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a13      	ldr	r2, [pc, #76]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fd fee6 	bl	8002990 <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bc6:	e009      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bc8:	f7fd fee2 	bl	8002990 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d902      	bls.n	8004bdc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bda:	e005      	b.n	8004be8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ef      	beq.n	8004bc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bee:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4904      	ldr	r1, [pc, #16]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fde0 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fd2a 	bl	80056a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e049      	b.n	8004d60 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f841 	bl	8004d68 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fcd3 	bl	80056a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 f931 	bl	8005ff6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3e      	ldr	r2, [pc, #248]	@ (8004e94 <HAL_TIM_OC_Stop+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIM_OC_Stop+0x4a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3d      	ldr	r2, [pc, #244]	@ (8004e98 <HAL_TIM_OC_Stop+0x11c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIM_OC_Stop+0x4a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a3b      	ldr	r2, [pc, #236]	@ (8004e9c <HAL_TIM_OC_Stop+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIM_OC_Stop+0x4a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ea0 <HAL_TIM_OC_Stop+0x124>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIM_OC_Stop+0x4a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a38      	ldr	r2, [pc, #224]	@ (8004ea4 <HAL_TIM_OC_Stop+0x128>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_OC_Stop+0x4e>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_TIM_OC_Stop+0x50>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <HAL_TIM_OC_Stop+0x84>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a1a      	ldr	r2, [r3, #32]
 8004de6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_OC_Stop+0x84>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <HAL_TIM_OC_Stop+0xb4>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_OC_Stop+0xb4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <HAL_TIM_OC_Stop+0xc4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3e:	e023      	b.n	8004e88 <HAL_TIM_OC_Stop+0x10c>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d104      	bne.n	8004e50 <HAL_TIM_OC_Stop+0xd4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e4e:	e01b      	b.n	8004e88 <HAL_TIM_OC_Stop+0x10c>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d104      	bne.n	8004e60 <HAL_TIM_OC_Stop+0xe4>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e5e:	e013      	b.n	8004e88 <HAL_TIM_OC_Stop+0x10c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d104      	bne.n	8004e70 <HAL_TIM_OC_Stop+0xf4>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e6e:	e00b      	b.n	8004e88 <HAL_TIM_OC_Stop+0x10c>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d104      	bne.n	8004e80 <HAL_TIM_OC_Stop+0x104>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e7e:	e003      	b.n	8004e88 <HAL_TIM_OC_Stop+0x10c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d841      	bhi.n	8004f40 <HAL_TIM_OC_Stop_IT+0x98>
 8004ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f41 	.word	0x08004f41
 8004ecc:	08004f41 	.word	0x08004f41
 8004ed0:	08004f41 	.word	0x08004f41
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f41 	.word	0x08004f41
 8004edc:	08004f41 	.word	0x08004f41
 8004ee0:	08004f41 	.word	0x08004f41
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f41 	.word	0x08004f41
 8004eec:	08004f41 	.word	0x08004f41
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08004f2f 	.word	0x08004f2f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0202 	bic.w	r2, r2, #2
 8004f06:	60da      	str	r2, [r3, #12]
      break;
 8004f08:	e01d      	b.n	8004f46 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0204 	bic.w	r2, r2, #4
 8004f18:	60da      	str	r2, [r3, #12]
      break;
 8004f1a:	e014      	b.n	8004f46 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0208 	bic.w	r2, r2, #8
 8004f2a:	60da      	str	r2, [r3, #12]
      break;
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0210 	bic.w	r2, r2, #16
 8004f3c:	60da      	str	r2, [r3, #12]
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      break;
 8004f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f040 8081 	bne.w	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f84d 	bl	8005ff6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3e      	ldr	r2, [pc, #248]	@ (800505c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_TIM_OC_Stop_IT+0xe6>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005060 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_OC_Stop_IT+0xe6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_OC_Stop_IT+0xe6>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005068 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_OC_Stop_IT+0xe6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a38      	ldr	r2, [pc, #224]	@ (800506c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_OC_Stop_IT+0xea>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_OC_Stop_IT+0xec>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_TIM_OC_Stop_IT+0x120>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <HAL_TIM_OC_Stop_IT+0x120>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_TIM_OC_Stop_IT+0x150>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_OC_Stop_IT+0x150>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_TIM_OC_Stop_IT+0x160>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005006:	e023      	b.n	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d104      	bne.n	8005018 <HAL_TIM_OC_Stop_IT+0x170>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005016:	e01b      	b.n	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d104      	bne.n	8005028 <HAL_TIM_OC_Stop_IT+0x180>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005026:	e013      	b.n	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d104      	bne.n	8005038 <HAL_TIM_OC_Stop_IT+0x190>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005036:	e00b      	b.n	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b10      	cmp	r3, #16
 800503c:	d104      	bne.n	8005048 <HAL_TIM_OC_Stop_IT+0x1a0>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005046:	e003      	b.n	8005050 <HAL_TIM_OC_Stop_IT+0x1a8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40013400 	.word	0x40013400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e041      	b.n	8005108 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f839 	bl	8005110 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 faf7 	bl	80056a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0208 	bic.w	r2, r2, #8
 80050c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d020      	beq.n	8005188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0202 	mvn.w	r2, #2
 8005158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa79 	bl	8005666 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa6b 	bl	8005652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fa7c 	bl	800567a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d020      	beq.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0204 	mvn.w	r2, #4
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa53 	bl	8005666 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fa45 	bl	8005652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa56 	bl	800567a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d020      	beq.n	8005220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01b      	beq.n	8005220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0208 	mvn.w	r2, #8
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa2d 	bl	8005666 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa1f 	bl	8005652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa30 	bl	800567a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	d020      	beq.n	800526c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01b      	beq.n	800526c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0210 	mvn.w	r2, #16
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2208      	movs	r2, #8
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa07 	bl	8005666 <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9f9 	bl	8005652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa0a 	bl	800567a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0201 	mvn.w	r2, #1
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9d7 	bl	800563e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 ffd1 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00c      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 ffc9 	bl	8006274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f9c4 	bl	800568e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f06f 0220 	mvn.w	r2, #32
 8005322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 ff91 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_TIM_OC_ConfigChannel+0x1e>
 800534e:	2302      	movs	r3, #2
 8005350:	e066      	b.n	8005420 <HAL_TIM_OC_ConfigChannel+0xec>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b14      	cmp	r3, #20
 800535e:	d857      	bhi.n	8005410 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	080053bd 	.word	0x080053bd
 800536c:	08005411 	.word	0x08005411
 8005370:	08005411 	.word	0x08005411
 8005374:	08005411 	.word	0x08005411
 8005378:	080053cb 	.word	0x080053cb
 800537c:	08005411 	.word	0x08005411
 8005380:	08005411 	.word	0x08005411
 8005384:	08005411 	.word	0x08005411
 8005388:	080053d9 	.word	0x080053d9
 800538c:	08005411 	.word	0x08005411
 8005390:	08005411 	.word	0x08005411
 8005394:	08005411 	.word	0x08005411
 8005398:	080053e7 	.word	0x080053e7
 800539c:	08005411 	.word	0x08005411
 80053a0:	08005411 	.word	0x08005411
 80053a4:	08005411 	.word	0x08005411
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	08005411 	.word	0x08005411
 80053b0:	08005411 	.word	0x08005411
 80053b4:	08005411 	.word	0x08005411
 80053b8:	08005403 	.word	0x08005403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fa14 	bl	80057f0 <TIM_OC1_SetConfig>
      break;
 80053c8:	e025      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fa9d 	bl	8005910 <TIM_OC2_SetConfig>
      break;
 80053d6:	e01e      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fb20 	bl	8005a24 <TIM_OC3_SetConfig>
      break;
 80053e4:	e017      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fba1 	bl	8005b34 <TIM_OC4_SetConfig>
      break;
 80053f2:	e010      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc04 	bl	8005c08 <TIM_OC5_SetConfig>
      break;
 8005400:	e009      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fc61 	bl	8005cd0 <TIM_OC6_SetConfig>
      break;
 800540e:	e002      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b6      	b.n	80055b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800546e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005480:	d03e      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0xd8>
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005486:	f200 8087 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x170>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548e:	f000 8086 	beq.w	800559e <HAL_TIM_ConfigClockSource+0x176>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005496:	d87f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 8005498:	2b70      	cmp	r3, #112	@ 0x70
 800549a:	d01a      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0xaa>
 800549c:	2b70      	cmp	r3, #112	@ 0x70
 800549e:	d87b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054a0:	2b60      	cmp	r3, #96	@ 0x60
 80054a2:	d050      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x11e>
 80054a4:	2b60      	cmp	r3, #96	@ 0x60
 80054a6:	d877      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054a8:	2b50      	cmp	r3, #80	@ 0x50
 80054aa:	d03c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xfe>
 80054ac:	2b50      	cmp	r3, #80	@ 0x50
 80054ae:	d873      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d058      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0x13e>
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d86f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054b8:	2b30      	cmp	r3, #48	@ 0x30
 80054ba:	d064      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054bc:	2b30      	cmp	r3, #48	@ 0x30
 80054be:	d86b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d060      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d867      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05c      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d05a      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054d0:	e062      	b.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054e2:	f000 fd68 	bl	8005fb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	609a      	str	r2, [r3, #8]
      break;
 80054fe:	e04f      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005510:	f000 fd51 	bl	8005fb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005522:	609a      	str	r2, [r3, #8]
      break;
 8005524:	e03c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	461a      	mov	r2, r3
 8005534:	f000 fcc5 	bl	8005ec2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2150      	movs	r1, #80	@ 0x50
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fd1e 	bl	8005f80 <TIM_ITRx_SetConfig>
      break;
 8005544:	e02c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	461a      	mov	r2, r3
 8005554:	f000 fce4 	bl	8005f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2160      	movs	r1, #96	@ 0x60
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fd0e 	bl	8005f80 <TIM_ITRx_SetConfig>
      break;
 8005564:	e01c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fca5 	bl	8005ec2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2140      	movs	r1, #64	@ 0x40
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fcfe 	bl	8005f80 <TIM_ITRx_SetConfig>
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 fcf5 	bl	8005f80 <TIM_ITRx_SetConfig>
      break;
 8005596:	e003      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800559e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e031      	b.n	8005636 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fbd9 	bl	8005d9c <TIM_SlaveTimer_SetConfig>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e018      	b.n	8005636 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005612:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005622:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a46      	ldr	r2, [pc, #280]	@ (80057d0 <TIM_Base_SetConfig+0x12c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c2:	d00f      	beq.n	80056e4 <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a43      	ldr	r2, [pc, #268]	@ (80057d4 <TIM_Base_SetConfig+0x130>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00b      	beq.n	80056e4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a42      	ldr	r2, [pc, #264]	@ (80057d8 <TIM_Base_SetConfig+0x134>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d007      	beq.n	80056e4 <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a41      	ldr	r2, [pc, #260]	@ (80057dc <TIM_Base_SetConfig+0x138>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a40      	ldr	r2, [pc, #256]	@ (80057e0 <TIM_Base_SetConfig+0x13c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d108      	bne.n	80056f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a35      	ldr	r2, [pc, #212]	@ (80057d0 <TIM_Base_SetConfig+0x12c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01f      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005704:	d01b      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a32      	ldr	r2, [pc, #200]	@ (80057d4 <TIM_Base_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d017      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <TIM_Base_SetConfig+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a30      	ldr	r2, [pc, #192]	@ (80057dc <TIM_Base_SetConfig+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2f      	ldr	r2, [pc, #188]	@ (80057e0 <TIM_Base_SetConfig+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2e      	ldr	r2, [pc, #184]	@ (80057e4 <TIM_Base_SetConfig+0x140>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2d      	ldr	r2, [pc, #180]	@ (80057e8 <TIM_Base_SetConfig+0x144>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2c      	ldr	r2, [pc, #176]	@ (80057ec <TIM_Base_SetConfig+0x148>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_Base_SetConfig+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <TIM_Base_SetConfig+0x13c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0xf8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <TIM_Base_SetConfig+0x140>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0xf8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <TIM_Base_SetConfig+0x144>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0xf8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <TIM_Base_SetConfig+0x148>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d103      	bne.n	80057a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]
  }
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800

080057f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f023 0201 	bic.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 0302 	bic.w	r3, r3, #2
 800583c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <TIM_OC1_SetConfig+0x10c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00f      	beq.n	8005870 <TIM_OC1_SetConfig+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a2b      	ldr	r2, [pc, #172]	@ (8005900 <TIM_OC1_SetConfig+0x110>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_OC1_SetConfig+0x80>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2a      	ldr	r2, [pc, #168]	@ (8005904 <TIM_OC1_SetConfig+0x114>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_OC1_SetConfig+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <TIM_OC1_SetConfig+0x118>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC1_SetConfig+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a28      	ldr	r2, [pc, #160]	@ (800590c <TIM_OC1_SetConfig+0x11c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10c      	bne.n	800588a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0308 	bic.w	r3, r3, #8
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 0304 	bic.w	r3, r3, #4
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1b      	ldr	r2, [pc, #108]	@ (80058fc <TIM_OC1_SetConfig+0x10c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_OC1_SetConfig+0xc2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <TIM_OC1_SetConfig+0x110>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_OC1_SetConfig+0xc2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <TIM_OC1_SetConfig+0x114>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_OC1_SetConfig+0xc2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_OC1_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC1_SetConfig+0xc2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a17      	ldr	r2, [pc, #92]	@ (800590c <TIM_OC1_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d111      	bne.n	80058d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40013400 	.word	0x40013400
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800

08005910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f023 0210 	bic.w	r2, r3, #16
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a28      	ldr	r2, [pc, #160]	@ (8005a10 <TIM_OC2_SetConfig+0x100>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC2_SetConfig+0x6c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <TIM_OC2_SetConfig+0x104>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10d      	bne.n	8005998 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a10 <TIM_OC2_SetConfig+0x100>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_OC2_SetConfig+0xb0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a14 <TIM_OC2_SetConfig+0x104>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_OC2_SetConfig+0xb0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <TIM_OC2_SetConfig+0x108>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC2_SetConfig+0xb0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a1c <TIM_OC2_SetConfig+0x10c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC2_SetConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a19      	ldr	r2, [pc, #100]	@ (8005a20 <TIM_OC2_SetConfig+0x110>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d113      	bne.n	80059e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800

08005a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <TIM_OC3_SetConfig+0xfc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC3_SetConfig+0x6a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <TIM_OC3_SetConfig+0x100>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10d      	bne.n	8005aaa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <TIM_OC3_SetConfig+0xfc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_OC3_SetConfig+0xae>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <TIM_OC3_SetConfig+0x100>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC3_SetConfig+0xae>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b28 <TIM_OC3_SetConfig+0x104>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC3_SetConfig+0xae>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	@ (8005b2c <TIM_OC3_SetConfig+0x108>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0xae>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <TIM_OC3_SetConfig+0x10c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	031b      	lsls	r3, r3, #12
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <TIM_OC4_SetConfig+0xc0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x84>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <TIM_OC4_SetConfig+0xc4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x84>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	@ (8005bfc <TIM_OC4_SetConfig+0xc8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x84>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <TIM_OC4_SetConfig+0xcc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC4_SetConfig+0x84>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <TIM_OC4_SetConfig+0xd0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d109      	bne.n	8005bcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <TIM_OC5_SetConfig+0xb4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_OC5_SetConfig+0x7a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a16      	ldr	r2, [pc, #88]	@ (8005cc0 <TIM_OC5_SetConfig+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_OC5_SetConfig+0x7a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a15      	ldr	r2, [pc, #84]	@ (8005cc4 <TIM_OC5_SetConfig+0xbc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_OC5_SetConfig+0x7a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a14      	ldr	r2, [pc, #80]	@ (8005cc8 <TIM_OC5_SetConfig+0xc0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC5_SetConfig+0x7a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <TIM_OC5_SetConfig+0xc4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d109      	bne.n	8005c96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a18      	ldr	r2, [pc, #96]	@ (8005d88 <TIM_OC6_SetConfig+0xb8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_OC6_SetConfig+0x7c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	@ (8005d8c <TIM_OC6_SetConfig+0xbc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <TIM_OC6_SetConfig+0x7c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <TIM_OC6_SetConfig+0xc0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_OC6_SetConfig+0x7c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	@ (8005d94 <TIM_OC6_SetConfig+0xc4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC6_SetConfig+0x7c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a14      	ldr	r2, [pc, #80]	@ (8005d98 <TIM_OC6_SetConfig+0xc8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b70      	cmp	r3, #112	@ 0x70
 8005de8:	d01a      	beq.n	8005e20 <TIM_SlaveTimer_SetConfig+0x84>
 8005dea:	2b70      	cmp	r3, #112	@ 0x70
 8005dec:	d860      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005dee:	2b60      	cmp	r3, #96	@ 0x60
 8005df0:	d054      	beq.n	8005e9c <TIM_SlaveTimer_SetConfig+0x100>
 8005df2:	2b60      	cmp	r3, #96	@ 0x60
 8005df4:	d85c      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005df6:	2b50      	cmp	r3, #80	@ 0x50
 8005df8:	d046      	beq.n	8005e88 <TIM_SlaveTimer_SetConfig+0xec>
 8005dfa:	2b50      	cmp	r3, #80	@ 0x50
 8005dfc:	d858      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005dfe:	2b40      	cmp	r3, #64	@ 0x40
 8005e00:	d019      	beq.n	8005e36 <TIM_SlaveTimer_SetConfig+0x9a>
 8005e02:	2b40      	cmp	r3, #64	@ 0x40
 8005e04:	d854      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e06:	2b30      	cmp	r3, #48	@ 0x30
 8005e08:	d055      	beq.n	8005eb6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e0a:	2b30      	cmp	r3, #48	@ 0x30
 8005e0c:	d850      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d051      	beq.n	8005eb6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d84c      	bhi.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d04d      	beq.n	8005eb6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d04b      	beq.n	8005eb6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e1e:	e047      	b.n	8005eb0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	f000 f8c1 	bl	8005fb6 <TIM_ETR_SetConfig>
      break;
 8005e34:	e040      	b.n	8005eb8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d101      	bne.n	8005e42 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e03b      	b.n	8005eba <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e68:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	621a      	str	r2, [r3, #32]
      break;
 8005e86:	e017      	b.n	8005eb8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e94:	461a      	mov	r2, r3
 8005e96:	f000 f814 	bl	8005ec2 <TIM_TI1_ConfigInputStage>
      break;
 8005e9a:	e00d      	b.n	8005eb8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f000 f839 	bl	8005f20 <TIM_TI2_ConfigInputStage>
      break;
 8005eae:	e003      	b.n	8005eb8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb4:	e000      	b.n	8005eb8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005eb6:	bf00      	nop
  }

  return status;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f023 0201 	bic.w	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 030a 	bic.w	r3, r3, #10
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0210 	bic.w	r2, r3, #16
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	031b      	lsls	r3, r3, #12
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f043 0307 	orr.w	r3, r3, #7
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	609a      	str	r2, [r3, #8]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	021a      	lsls	r2, r3, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	609a      	str	r2, [r3, #8]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2201      	movs	r2, #1
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	43db      	mvns	r3, r3
 8006018:	401a      	ands	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	431a      	orrs	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e068      	b.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2e      	ldr	r2, [pc, #184]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2d      	ldr	r2, [pc, #180]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01d      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ca:	d018      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a13      	ldr	r2, [pc, #76]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a14      	ldr	r2, [pc, #80]	@ (800614c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d10c      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4313      	orrs	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40013400 	.word	0x40013400
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40014000 	.word	0x40014000

08006150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006168:	2302      	movs	r3, #2
 800616a:	e065      	b.n	8006238 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a16      	ldr	r2, [pc, #88]	@ (8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a14      	ldr	r2, [pc, #80]	@ (8006248 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d115      	bne.n	8006226 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	051b      	lsls	r3, r3, #20
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40013400 	.word	0x40013400

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e040      	b.n	800631c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fb1c 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	@ 0x24
 80062b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc66 	bl	8006ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f9ab 	bl	8006630 <UART_SetConfig>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e01b      	b.n	800631c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fce5 	bl	8006ce4 <UART_CheckIdleState>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006338:	2b20      	cmp	r3, #32
 800633a:	d177      	bne.n	800642c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Transmit+0x24>
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e070      	b.n	800642e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2221      	movs	r2, #33	@ 0x21
 8006358:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800635a:	f7fc fb19 	bl	8002990 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006378:	d108      	bne.n	800638c <HAL_UART_Transmit+0x68>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e003      	b.n	8006394 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006394:	e02f      	b.n	80063f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2180      	movs	r1, #128	@ 0x80
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fd47 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e03b      	b.n	800642e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c8:	b292      	uxth	r2, r2
 80063ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	3302      	adds	r3, #2
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e007      	b.n	80063e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1c9      	bne.n	8006396 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2140      	movs	r1, #64	@ 0x40
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fd11 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e005      	b.n	800642e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	@ 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644a:	2b20      	cmp	r3, #32
 800644c:	d165      	bne.n	800651a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_UART_Transmit_DMA+0x22>
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e05e      	b.n	800651c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2221      	movs	r2, #33	@ 0x21
 8006480:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	2b00      	cmp	r3, #0
 8006488:	d027      	beq.n	80064da <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648e:	4a25      	ldr	r2, [pc, #148]	@ (8006524 <HAL_UART_Transmit_DMA+0xec>)
 8006490:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006496:	4a24      	ldr	r2, [pc, #144]	@ (8006528 <HAL_UART_Transmit_DMA+0xf0>)
 8006498:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649e:	4a23      	ldr	r2, [pc, #140]	@ (800652c <HAL_UART_Transmit_DMA+0xf4>)
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a6:	2200      	movs	r2, #0
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b2:	4619      	mov	r1, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3328      	adds	r3, #40	@ 0x28
 80064ba:	461a      	mov	r2, r3
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	f7fc fd53 	bl	8002f68 <HAL_DMA_Start_IT>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2210      	movs	r2, #16
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e020      	b.n	800651c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2240      	movs	r2, #64	@ 0x40
 80064e0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006502:	623a      	str	r2, [r7, #32]
 8006504:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e000      	b.n	800651c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800651a:	2302      	movs	r3, #2
  }
}
 800651c:	4618      	mov	r0, r3
 800651e:	3728      	adds	r7, #40	@ 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	08007165 	.word	0x08007165
 8006528:	080071ff 	.word	0x080071ff
 800652c:	08007385 	.word	0x08007385

08006530 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	@ 0x28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006544:	2b20      	cmp	r3, #32
 8006546:	d137      	bne.n	80065b8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Receive_DMA+0x24>
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e030      	b.n	80065ba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <HAL_UART_Receive_DMA+0x94>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d01f      	beq.n	80065a8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d018      	beq.n	80065a8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	613b      	str	r3, [r7, #16]
   return(result);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	461a      	mov	r2, r3
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fcae 	bl	8006f10 <UART_Start_Receive_DMA>
 80065b4:	4603      	mov	r3, r0
 80065b6:	e000      	b.n	80065ba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3728      	adds	r7, #40	@ 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40008000 	.word	0x40008000

080065c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b08a      	sub	sp, #40	@ 0x28
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4ba4      	ldr	r3, [pc, #656]	@ (80068f0 <UART_SetConfig+0x2c0>)
 8006660:	4013      	ands	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006668:	430b      	orrs	r3, r1
 800666a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a99      	ldr	r2, [pc, #612]	@ (80068f4 <UART_SetConfig+0x2c4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006698:	4313      	orrs	r3, r2
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a90      	ldr	r2, [pc, #576]	@ (80068f8 <UART_SetConfig+0x2c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d126      	bne.n	8006708 <UART_SetConfig+0xd8>
 80066ba:	4b90      	ldr	r3, [pc, #576]	@ (80068fc <UART_SetConfig+0x2cc>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d81b      	bhi.n	8006700 <UART_SetConfig+0xd0>
 80066c8:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0xa0>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e6:	e116      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e112      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f6:	e10e      	b.n	8006916 <UART_SetConfig+0x2e6>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e10a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e106      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a7c      	ldr	r2, [pc, #496]	@ (8006900 <UART_SetConfig+0x2d0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d138      	bne.n	8006784 <UART_SetConfig+0x154>
 8006712:	4b7a      	ldr	r3, [pc, #488]	@ (80068fc <UART_SetConfig+0x2cc>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d82d      	bhi.n	800677c <UART_SetConfig+0x14c>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0xf8>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006765 	.word	0x08006765
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800677d 	.word	0x0800677d
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006775 	.word	0x08006775
 800675c:	2300      	movs	r3, #0
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e0d8      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e0d4      	b.n	8006916 <UART_SetConfig+0x2e6>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677a:	e0cc      	b.n	8006916 <UART_SetConfig+0x2e6>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006782:	e0c8      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5e      	ldr	r2, [pc, #376]	@ (8006904 <UART_SetConfig+0x2d4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d125      	bne.n	80067da <UART_SetConfig+0x1aa>
 800678e:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <UART_SetConfig+0x2cc>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006798:	2b30      	cmp	r3, #48	@ 0x30
 800679a:	d016      	beq.n	80067ca <UART_SetConfig+0x19a>
 800679c:	2b30      	cmp	r3, #48	@ 0x30
 800679e:	d818      	bhi.n	80067d2 <UART_SetConfig+0x1a2>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d00a      	beq.n	80067ba <UART_SetConfig+0x18a>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d814      	bhi.n	80067d2 <UART_SetConfig+0x1a2>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x182>
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d008      	beq.n	80067c2 <UART_SetConfig+0x192>
 80067b0:	e00f      	b.n	80067d2 <UART_SetConfig+0x1a2>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067b8:	e0ad      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c0:	e0a9      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067c2:	2304      	movs	r3, #4
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c8:	e0a5      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067ca:	2308      	movs	r3, #8
 80067cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d0:	e0a1      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067d2:	2310      	movs	r3, #16
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d8:	e09d      	b.n	8006916 <UART_SetConfig+0x2e6>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4a      	ldr	r2, [pc, #296]	@ (8006908 <UART_SetConfig+0x2d8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x200>
 80067e4:	4b45      	ldr	r3, [pc, #276]	@ (80068fc <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f0:	d016      	beq.n	8006820 <UART_SetConfig+0x1f0>
 80067f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f4:	d818      	bhi.n	8006828 <UART_SetConfig+0x1f8>
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d00a      	beq.n	8006810 <UART_SetConfig+0x1e0>
 80067fa:	2b80      	cmp	r3, #128	@ 0x80
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x1f8>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <UART_SetConfig+0x1d8>
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d008      	beq.n	8006818 <UART_SetConfig+0x1e8>
 8006806:	e00f      	b.n	8006828 <UART_SetConfig+0x1f8>
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680e:	e082      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006816:	e07e      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681e:	e07a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006826:	e076      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682e:	e072      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a35      	ldr	r2, [pc, #212]	@ (800690c <UART_SetConfig+0x2dc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d12a      	bne.n	8006890 <UART_SetConfig+0x260>
 800683a:	4b30      	ldr	r3, [pc, #192]	@ (80068fc <UART_SetConfig+0x2cc>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006848:	d01a      	beq.n	8006880 <UART_SetConfig+0x250>
 800684a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684e:	d81b      	bhi.n	8006888 <UART_SetConfig+0x258>
 8006850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006854:	d00c      	beq.n	8006870 <UART_SetConfig+0x240>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685a:	d815      	bhi.n	8006888 <UART_SetConfig+0x258>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x238>
 8006860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006864:	d008      	beq.n	8006878 <UART_SetConfig+0x248>
 8006866:	e00f      	b.n	8006888 <UART_SetConfig+0x258>
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686e:	e052      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006870:	2302      	movs	r3, #2
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006876:	e04e      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687e:	e04a      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006886:	e046      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688e:	e042      	b.n	8006916 <UART_SetConfig+0x2e6>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <UART_SetConfig+0x2c4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d13a      	bne.n	8006910 <UART_SetConfig+0x2e0>
 800689a:	4b18      	ldr	r3, [pc, #96]	@ (80068fc <UART_SetConfig+0x2cc>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a8:	d01a      	beq.n	80068e0 <UART_SetConfig+0x2b0>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ae:	d81b      	bhi.n	80068e8 <UART_SetConfig+0x2b8>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d00c      	beq.n	80068d0 <UART_SetConfig+0x2a0>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ba:	d815      	bhi.n	80068e8 <UART_SetConfig+0x2b8>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x298>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d008      	beq.n	80068d8 <UART_SetConfig+0x2a8>
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x2b8>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d6:	e01e      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068de:	e01a      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e6:	e016      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ee:	e012      	b.n	8006916 <UART_SetConfig+0x2e6>
 80068f0:	efff69f3 	.word	0xefff69f3
 80068f4:	40008000 	.word	0x40008000
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40021000 	.word	0x40021000
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a9f      	ldr	r2, [pc, #636]	@ (8006b98 <UART_SetConfig+0x568>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d17a      	bne.n	8006a16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006920:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006924:	2b08      	cmp	r3, #8
 8006926:	d824      	bhi.n	8006972 <UART_SetConfig+0x342>
 8006928:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x300>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006955 	.word	0x08006955
 8006934:	08006973 	.word	0x08006973
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006973 	.word	0x08006973
 8006940:	08006963 	.word	0x08006963
 8006944:	08006973 	.word	0x08006973
 8006948:	08006973 	.word	0x08006973
 800694c:	08006973 	.word	0x08006973
 8006950:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd fc12 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8006958:	61f8      	str	r0, [r7, #28]
        break;
 800695a:	e010      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b8f      	ldr	r3, [pc, #572]	@ (8006b9c <UART_SetConfig+0x56c>)
 800695e:	61fb      	str	r3, [r7, #28]
        break;
 8006960:	e00d      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fd fb73 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006966:	61f8      	str	r0, [r7, #28]
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696e:	61fb      	str	r3, [r7, #28]
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800697c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80fb 	beq.w	8006b7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	4413      	add	r3, r2
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d305      	bcc.n	80069a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d903      	bls.n	80069aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069a8:	e0e8      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2200      	movs	r2, #0
 80069ae:	461c      	mov	r4, r3
 80069b0:	4615      	mov	r5, r2
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	022b      	lsls	r3, r5, #8
 80069bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069c0:	0222      	lsls	r2, r4, #8
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	6849      	ldr	r1, [r1, #4]
 80069c6:	0849      	lsrs	r1, r1, #1
 80069c8:	2000      	movs	r0, #0
 80069ca:	4688      	mov	r8, r1
 80069cc:	4681      	mov	r9, r0
 80069ce:	eb12 0a08 	adds.w	sl, r2, r8
 80069d2:	eb43 0b09 	adc.w	fp, r3, r9
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e4:	4650      	mov	r0, sl
 80069e6:	4659      	mov	r1, fp
 80069e8:	f7fa f8fe 	bl	8000be8 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4613      	mov	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069fa:	d308      	bcc.n	8006a0e <UART_SetConfig+0x3de>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a02:	d204      	bcs.n	8006a0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	60da      	str	r2, [r3, #12]
 8006a0c:	e0b6      	b.n	8006b7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a14:	e0b2      	b.n	8006b7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1e:	d15e      	bne.n	8006ade <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d828      	bhi.n	8006a7a <UART_SetConfig+0x44a>
 8006a28:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x400>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fd fb92 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
        break;
 8006a5a:	e014      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fd fba4 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
        break;
 8006a62:	e010      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b4d      	ldr	r3, [pc, #308]	@ (8006b9c <UART_SetConfig+0x56c>)
 8006a66:	61fb      	str	r3, [r7, #28]
        break;
 8006a68:	e00d      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fd faef 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006a6e:	61f8      	str	r0, [r7, #28]
        break;
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a76:	61fb      	str	r3, [r7, #28]
        break;
 8006a78:	e005      	b.n	8006a86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d077      	beq.n	8006b7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005a      	lsls	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	441a      	add	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b0f      	cmp	r3, #15
 8006aa6:	d916      	bls.n	8006ad6 <UART_SetConfig+0x4a6>
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aae:	d212      	bcs.n	8006ad6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f023 030f 	bic.w	r3, r3, #15
 8006ab8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	8afb      	ldrh	r3, [r7, #22]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	8afa      	ldrh	r2, [r7, #22]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e052      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006adc:	e04e      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ade:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d827      	bhi.n	8006b36 <UART_SetConfig+0x506>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x4bc>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd fb34 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8006b14:	61f8      	str	r0, [r7, #28]
        break;
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fd fb46 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	61f8      	str	r0, [r7, #28]
        break;
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b1e      	ldr	r3, [pc, #120]	@ (8006b9c <UART_SetConfig+0x56c>)
 8006b22:	61fb      	str	r3, [r7, #28]
        break;
 8006b24:	e00d      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fd fa91 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006b2a:	61f8      	str	r0, [r7, #28]
        break;
 8006b2c:	e009      	b.n	8006b42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b32:	61fb      	str	r3, [r7, #28]
        break;
 8006b34:	e005      	b.n	8006b42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b40:	bf00      	nop
    }

    if (pclk != 0U)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d019      	beq.n	8006b7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	085a      	lsrs	r2, r3, #1
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d909      	bls.n	8006b76 <UART_SetConfig+0x546>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b68:	d205      	bcs.n	8006b76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60da      	str	r2, [r3, #12]
 8006b74:	e002      	b.n	8006b7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3728      	adds	r7, #40	@ 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b96:	bf00      	nop
 8006b98:	40008000 	.word	0x40008000
 8006b9c:	00f42400 	.word	0x00f42400

08006ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9e:	d10a      	bne.n	8006cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b098      	sub	sp, #96	@ 0x60
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf4:	f7fb fe4c 	bl	8002990 <HAL_GetTick>
 8006cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d12e      	bne.n	8006d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f88c 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d021      	beq.n	8006d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e062      	b.n	8006e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d149      	bne.n	8006e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f856 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03c      	beq.n	8006e08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de0:	61fa      	str	r2, [r7, #28]
 8006de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	617b      	str	r3, [r7, #20]
   return(result);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e011      	b.n	8006e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3758      	adds	r7, #88	@ 0x58
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	e04f      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d04b      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4e:	f7fb fd9f 	bl	8002990 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e04e      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d037      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b80      	cmp	r3, #128	@ 0x80
 8006e7a:	d034      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d031      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d110      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2208      	movs	r2, #8
 8006e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f8ff 	bl	800709c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e029      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ec0:	d111      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f8e5 	bl	800709c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00f      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d0a0      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b096      	sub	sp, #88	@ 0x58
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	88fa      	ldrh	r2, [r7, #6]
 8006f28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2222      	movs	r2, #34	@ 0x22
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d028      	beq.n	8006f96 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f48:	4a3e      	ldr	r2, [pc, #248]	@ (8007044 <UART_Start_Receive_DMA+0x134>)
 8006f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	4a3d      	ldr	r2, [pc, #244]	@ (8007048 <UART_Start_Receive_DMA+0x138>)
 8006f52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f58:	4a3c      	ldr	r2, [pc, #240]	@ (800704c <UART_Start_Receive_DMA+0x13c>)
 8006f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f60:	2200      	movs	r2, #0
 8006f62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3324      	adds	r3, #36	@ 0x24
 8006f6e:	4619      	mov	r1, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	461a      	mov	r2, r3
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	f7fb fff6 	bl	8002f68 <HAL_DMA_Start_IT>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2210      	movs	r2, #16
 8006f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e051      	b.n	800703a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d018      	beq.n	8006fd0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ff0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e5      	bne.n	8006fd0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	613b      	str	r3, [r7, #16]
   return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007024:	623a      	str	r2, [r7, #32]
 8007026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	69f9      	ldr	r1, [r7, #28]
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	61bb      	str	r3, [r7, #24]
   return(result);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3758      	adds	r7, #88	@ 0x58
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	0800721b 	.word	0x0800721b
 8007048:	08007347 	.word	0x08007347
 800704c:	08007385 	.word	0x08007385

08007050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007050:	b480      	push	{r7}
 8007052:	b089      	sub	sp, #36	@ 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	60bb      	str	r3, [r7, #8]
   return(result);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	613b      	str	r3, [r7, #16]
   return(result);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e6      	bne.n	8007058 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007090:	bf00      	nop
 8007092:	3724      	adds	r7, #36	@ 0x24
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b095      	sub	sp, #84	@ 0x54
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80070c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e6      	bne.n	80070a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3308      	adds	r3, #8
 80070f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e5      	bne.n	80070d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800710e:	2b01      	cmp	r3, #1
 8007110:	d118      	bne.n	8007144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	647b      	str	r3, [r7, #68]	@ 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	613b      	str	r3, [r7, #16]
   return(result);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e6      	bne.n	8007112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007158:	bf00      	nop
 800715a:	3754      	adds	r7, #84	@ 0x54
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b090      	sub	sp, #64	@ 0x40
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d137      	bne.n	80071f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3308      	adds	r3, #8
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	623b      	str	r3, [r7, #32]
   return(result);
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80071aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e5      	bne.n	8007188 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	69b9      	ldr	r1, [r7, #24]
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	617b      	str	r3, [r7, #20]
   return(result);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e6      	bne.n	80071bc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071ee:	e002      	b.n	80071f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071f2:	f7ff f9e9 	bl	80065c8 <HAL_UART_TxCpltCallback>
}
 80071f6:	bf00      	nop
 80071f8:	3740      	adds	r7, #64	@ 0x40
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff f9e5 	bl	80065dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b09c      	sub	sp, #112	@ 0x70
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d171      	bne.n	800731a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007238:	2200      	movs	r2, #0
 800723a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800724c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800724e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800725c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800725e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800726a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	667b      	str	r3, [r7, #100]	@ 0x64
 8007288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007290:	647a      	str	r2, [r7, #68]	@ 0x44
 8007292:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800729e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e5      	bne.n	8007270 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	623b      	str	r3, [r7, #32]
   return(result);
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80072bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80072c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e5      	bne.n	80072a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d118      	bne.n	800731a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f023 0310 	bic.w	r3, r3, #16
 80072fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	69b9      	ldr	r1, [r7, #24]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	617b      	str	r3, [r7, #20]
   return(result);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800731a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800731c:	2200      	movs	r2, #0
 800731e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007324:	2b01      	cmp	r3, #1
 8007326:	d107      	bne.n	8007338 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800732e:	4619      	mov	r1, r3
 8007330:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007332:	f7ff f971 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007336:	e002      	b.n	800733e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800733a:	f7fa ff31 	bl	80021a0 <HAL_UART_RxCpltCallback>
}
 800733e:	bf00      	nop
 8007340:	3770      	adds	r7, #112	@ 0x70
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735e:	2b01      	cmp	r3, #1
 8007360:	d109      	bne.n	8007376 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff f952 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007374:	e002      	b.n	800737c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff f93a 	bl	80065f0 <HAL_UART_RxHalfCpltCallback>
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007390:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007396:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073aa:	2b80      	cmp	r3, #128	@ 0x80
 80073ac:	d109      	bne.n	80073c2 <UART_DMAError+0x3e>
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b21      	cmp	r3, #33	@ 0x21
 80073b2:	d106      	bne.n	80073c2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80073bc:	6978      	ldr	r0, [r7, #20]
 80073be:	f7ff fe47 	bl	8007050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d109      	bne.n	80073e4 <UART_DMAError+0x60>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b22      	cmp	r3, #34	@ 0x22
 80073d4:	d106      	bne.n	80073e4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80073de:	6978      	ldr	r0, [r7, #20]
 80073e0:	f7ff fe5c 	bl	800709c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ea:	f043 0210 	orr.w	r2, r3, #16
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f4:	6978      	ldr	r0, [r7, #20]
 80073f6:	f7ff f905 	bl	8006604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <__cvt>:
 8007402:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007406:	ec57 6b10 	vmov	r6, r7, d0
 800740a:	2f00      	cmp	r7, #0
 800740c:	460c      	mov	r4, r1
 800740e:	4619      	mov	r1, r3
 8007410:	463b      	mov	r3, r7
 8007412:	bfbb      	ittet	lt
 8007414:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007418:	461f      	movlt	r7, r3
 800741a:	2300      	movge	r3, #0
 800741c:	232d      	movlt	r3, #45	@ 0x2d
 800741e:	700b      	strb	r3, [r1, #0]
 8007420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007422:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007426:	4691      	mov	r9, r2
 8007428:	f023 0820 	bic.w	r8, r3, #32
 800742c:	bfbc      	itt	lt
 800742e:	4632      	movlt	r2, r6
 8007430:	4616      	movlt	r6, r2
 8007432:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007436:	d005      	beq.n	8007444 <__cvt+0x42>
 8007438:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800743c:	d100      	bne.n	8007440 <__cvt+0x3e>
 800743e:	3401      	adds	r4, #1
 8007440:	2102      	movs	r1, #2
 8007442:	e000      	b.n	8007446 <__cvt+0x44>
 8007444:	2103      	movs	r1, #3
 8007446:	ab03      	add	r3, sp, #12
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	ab02      	add	r3, sp, #8
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	ec47 6b10 	vmov	d0, r6, r7
 8007452:	4653      	mov	r3, sl
 8007454:	4622      	mov	r2, r4
 8007456:	f000 fe9b 	bl	8008190 <_dtoa_r>
 800745a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800745e:	4605      	mov	r5, r0
 8007460:	d119      	bne.n	8007496 <__cvt+0x94>
 8007462:	f019 0f01 	tst.w	r9, #1
 8007466:	d00e      	beq.n	8007486 <__cvt+0x84>
 8007468:	eb00 0904 	add.w	r9, r0, r4
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007478:	b108      	cbz	r0, 800747e <__cvt+0x7c>
 800747a:	f8cd 900c 	str.w	r9, [sp, #12]
 800747e:	2230      	movs	r2, #48	@ 0x30
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	454b      	cmp	r3, r9
 8007484:	d31e      	bcc.n	80074c4 <__cvt+0xc2>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800748a:	1b5b      	subs	r3, r3, r5
 800748c:	4628      	mov	r0, r5
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	b004      	add	sp, #16
 8007492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007496:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800749a:	eb00 0904 	add.w	r9, r0, r4
 800749e:	d1e5      	bne.n	800746c <__cvt+0x6a>
 80074a0:	7803      	ldrb	r3, [r0, #0]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d10a      	bne.n	80074bc <__cvt+0xba>
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
 80074ae:	f7f9 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b2:	b918      	cbnz	r0, 80074bc <__cvt+0xba>
 80074b4:	f1c4 0401 	rsb	r4, r4, #1
 80074b8:	f8ca 4000 	str.w	r4, [sl]
 80074bc:	f8da 3000 	ldr.w	r3, [sl]
 80074c0:	4499      	add	r9, r3
 80074c2:	e7d3      	b.n	800746c <__cvt+0x6a>
 80074c4:	1c59      	adds	r1, r3, #1
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e7d9      	b.n	8007480 <__cvt+0x7e>

080074cc <__exponent>:
 80074cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ce:	2900      	cmp	r1, #0
 80074d0:	bfba      	itte	lt
 80074d2:	4249      	neglt	r1, r1
 80074d4:	232d      	movlt	r3, #45	@ 0x2d
 80074d6:	232b      	movge	r3, #43	@ 0x2b
 80074d8:	2909      	cmp	r1, #9
 80074da:	7002      	strb	r2, [r0, #0]
 80074dc:	7043      	strb	r3, [r0, #1]
 80074de:	dd29      	ble.n	8007534 <__exponent+0x68>
 80074e0:	f10d 0307 	add.w	r3, sp, #7
 80074e4:	461d      	mov	r5, r3
 80074e6:	270a      	movs	r7, #10
 80074e8:	461a      	mov	r2, r3
 80074ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80074ee:	fb07 1416 	mls	r4, r7, r6, r1
 80074f2:	3430      	adds	r4, #48	@ 0x30
 80074f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074f8:	460c      	mov	r4, r1
 80074fa:	2c63      	cmp	r4, #99	@ 0x63
 80074fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8007500:	4631      	mov	r1, r6
 8007502:	dcf1      	bgt.n	80074e8 <__exponent+0x1c>
 8007504:	3130      	adds	r1, #48	@ 0x30
 8007506:	1e94      	subs	r4, r2, #2
 8007508:	f803 1c01 	strb.w	r1, [r3, #-1]
 800750c:	1c41      	adds	r1, r0, #1
 800750e:	4623      	mov	r3, r4
 8007510:	42ab      	cmp	r3, r5
 8007512:	d30a      	bcc.n	800752a <__exponent+0x5e>
 8007514:	f10d 0309 	add.w	r3, sp, #9
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	42ac      	cmp	r4, r5
 800751c:	bf88      	it	hi
 800751e:	2300      	movhi	r3, #0
 8007520:	3302      	adds	r3, #2
 8007522:	4403      	add	r3, r0
 8007524:	1a18      	subs	r0, r3, r0
 8007526:	b003      	add	sp, #12
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800752e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007532:	e7ed      	b.n	8007510 <__exponent+0x44>
 8007534:	2330      	movs	r3, #48	@ 0x30
 8007536:	3130      	adds	r1, #48	@ 0x30
 8007538:	7083      	strb	r3, [r0, #2]
 800753a:	70c1      	strb	r1, [r0, #3]
 800753c:	1d03      	adds	r3, r0, #4
 800753e:	e7f1      	b.n	8007524 <__exponent+0x58>

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b08d      	sub	sp, #52	@ 0x34
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800754c:	4616      	mov	r6, r2
 800754e:	461f      	mov	r7, r3
 8007550:	4605      	mov	r5, r0
 8007552:	f000 fd0f 	bl	8007f74 <_localeconv_r>
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	4618      	mov	r0, r3
 800755c:	f7f8 fe88 	bl	8000270 <strlen>
 8007560:	2300      	movs	r3, #0
 8007562:	930a      	str	r3, [sp, #40]	@ 0x28
 8007564:	f8d8 3000 	ldr.w	r3, [r8]
 8007568:	9005      	str	r0, [sp, #20]
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007578:	f8d4 b000 	ldr.w	fp, [r4]
 800757c:	f8c8 2000 	str.w	r2, [r8]
 8007580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	f8cd 8018 	str.w	r8, [sp, #24]
 800758e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007596:	4b9c      	ldr	r3, [pc, #624]	@ (8007808 <_printf_float+0x2c8>)
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	f7f9 fac6 	bl	8000b2c <__aeabi_dcmpun>
 80075a0:	bb70      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a6:	4b98      	ldr	r3, [pc, #608]	@ (8007808 <_printf_float+0x2c8>)
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ac:	f7f9 faa0 	bl	8000af0 <__aeabi_dcmple>
 80075b0:	bb30      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f9 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80075be:	b110      	cbz	r0, 80075c6 <_printf_float+0x86>
 80075c0:	232d      	movs	r3, #45	@ 0x2d
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c6:	4a91      	ldr	r2, [pc, #580]	@ (800780c <_printf_float+0x2cc>)
 80075c8:	4b91      	ldr	r3, [pc, #580]	@ (8007810 <_printf_float+0x2d0>)
 80075ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075ce:	bf94      	ite	ls
 80075d0:	4690      	movls	r8, r2
 80075d2:	4698      	movhi	r8, r3
 80075d4:	2303      	movs	r3, #3
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	f02b 0304 	bic.w	r3, fp, #4
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	9700      	str	r7, [sp, #0]
 80075e4:	4633      	mov	r3, r6
 80075e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f9d2 	bl	8007994 <_printf_common>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f040 808d 	bne.w	8007710 <_printf_float+0x1d0>
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	b00d      	add	sp, #52	@ 0x34
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	f7f9 fa90 	bl	8000b2c <__aeabi_dcmpun>
 800760c:	b140      	cbz	r0, 8007620 <_printf_float+0xe0>
 800760e:	464b      	mov	r3, r9
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfbc      	itt	lt
 8007614:	232d      	movlt	r3, #45	@ 0x2d
 8007616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800761a:	4a7e      	ldr	r2, [pc, #504]	@ (8007814 <_printf_float+0x2d4>)
 800761c:	4b7e      	ldr	r3, [pc, #504]	@ (8007818 <_printf_float+0x2d8>)
 800761e:	e7d4      	b.n	80075ca <_printf_float+0x8a>
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007626:	9206      	str	r2, [sp, #24]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	d13b      	bne.n	80076a4 <_printf_float+0x164>
 800762c:	2306      	movs	r3, #6
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007634:	2300      	movs	r3, #0
 8007636:	6022      	str	r2, [r4, #0]
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	ab0a      	add	r3, sp, #40	@ 0x28
 800763c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007640:	ab09      	add	r3, sp, #36	@ 0x24
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	ec49 8b10 	vmov	d0, r8, r9
 800764a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff fed7 	bl	8007402 <__cvt>
 8007654:	9b06      	ldr	r3, [sp, #24]
 8007656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007658:	2b47      	cmp	r3, #71	@ 0x47
 800765a:	4680      	mov	r8, r0
 800765c:	d129      	bne.n	80076b2 <_printf_float+0x172>
 800765e:	1cc8      	adds	r0, r1, #3
 8007660:	db02      	blt.n	8007668 <_printf_float+0x128>
 8007662:	6863      	ldr	r3, [r4, #4]
 8007664:	4299      	cmp	r1, r3
 8007666:	dd41      	ble.n	80076ec <_printf_float+0x1ac>
 8007668:	f1aa 0a02 	sub.w	sl, sl, #2
 800766c:	fa5f fa8a 	uxtb.w	sl, sl
 8007670:	3901      	subs	r1, #1
 8007672:	4652      	mov	r2, sl
 8007674:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007678:	9109      	str	r1, [sp, #36]	@ 0x24
 800767a:	f7ff ff27 	bl	80074cc <__exponent>
 800767e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007680:	1813      	adds	r3, r2, r0
 8007682:	2a01      	cmp	r2, #1
 8007684:	4681      	mov	r9, r0
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	dc02      	bgt.n	8007690 <_printf_float+0x150>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	07d2      	lsls	r2, r2, #31
 800768e:	d501      	bpl.n	8007694 <_printf_float+0x154>
 8007690:	3301      	adds	r3, #1
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0a2      	beq.n	80075e2 <_printf_float+0xa2>
 800769c:	232d      	movs	r3, #45	@ 0x2d
 800769e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a2:	e79e      	b.n	80075e2 <_printf_float+0xa2>
 80076a4:	9a06      	ldr	r2, [sp, #24]
 80076a6:	2a47      	cmp	r2, #71	@ 0x47
 80076a8:	d1c2      	bne.n	8007630 <_printf_float+0xf0>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1c0      	bne.n	8007630 <_printf_float+0xf0>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7bd      	b.n	800762e <_printf_float+0xee>
 80076b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076b6:	d9db      	bls.n	8007670 <_printf_float+0x130>
 80076b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076bc:	d118      	bne.n	80076f0 <_printf_float+0x1b0>
 80076be:	2900      	cmp	r1, #0
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	dd0b      	ble.n	80076dc <_printf_float+0x19c>
 80076c4:	6121      	str	r1, [r4, #16]
 80076c6:	b913      	cbnz	r3, 80076ce <_printf_float+0x18e>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	07d0      	lsls	r0, r2, #31
 80076cc:	d502      	bpl.n	80076d4 <_printf_float+0x194>
 80076ce:	3301      	adds	r3, #1
 80076d0:	440b      	add	r3, r1
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	e7db      	b.n	8007694 <_printf_float+0x154>
 80076dc:	b913      	cbnz	r3, 80076e4 <_printf_float+0x1a4>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	07d2      	lsls	r2, r2, #31
 80076e2:	d501      	bpl.n	80076e8 <_printf_float+0x1a8>
 80076e4:	3302      	adds	r3, #2
 80076e6:	e7f4      	b.n	80076d2 <_printf_float+0x192>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e7f2      	b.n	80076d2 <_printf_float+0x192>
 80076ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f2:	4299      	cmp	r1, r3
 80076f4:	db05      	blt.n	8007702 <_printf_float+0x1c2>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	6121      	str	r1, [r4, #16]
 80076fa:	07d8      	lsls	r0, r3, #31
 80076fc:	d5ea      	bpl.n	80076d4 <_printf_float+0x194>
 80076fe:	1c4b      	adds	r3, r1, #1
 8007700:	e7e7      	b.n	80076d2 <_printf_float+0x192>
 8007702:	2900      	cmp	r1, #0
 8007704:	bfd4      	ite	le
 8007706:	f1c1 0202 	rsble	r2, r1, #2
 800770a:	2201      	movgt	r2, #1
 800770c:	4413      	add	r3, r2
 800770e:	e7e0      	b.n	80076d2 <_printf_float+0x192>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	055a      	lsls	r2, r3, #21
 8007714:	d407      	bmi.n	8007726 <_printf_float+0x1e6>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	4642      	mov	r2, r8
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	d12b      	bne.n	800777c <_printf_float+0x23c>
 8007724:	e767      	b.n	80075f6 <_printf_float+0xb6>
 8007726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800772a:	f240 80dd 	bls.w	80078e8 <_printf_float+0x3a8>
 800772e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007732:	2200      	movs	r2, #0
 8007734:	2300      	movs	r3, #0
 8007736:	f7f9 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800773a:	2800      	cmp	r0, #0
 800773c:	d033      	beq.n	80077a6 <_printf_float+0x266>
 800773e:	4a37      	ldr	r2, [pc, #220]	@ (800781c <_printf_float+0x2dc>)
 8007740:	2301      	movs	r3, #1
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f af54 	beq.w	80075f6 <_printf_float+0xb6>
 800774e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007752:	4543      	cmp	r3, r8
 8007754:	db02      	blt.n	800775c <_printf_float+0x21c>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	07d8      	lsls	r0, r3, #31
 800775a:	d50f      	bpl.n	800777c <_printf_float+0x23c>
 800775c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f af45 	beq.w	80075f6 <_printf_float+0xb6>
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	f108 38ff 	add.w	r8, r8, #4294967295
 8007774:	f104 0a1a 	add.w	sl, r4, #26
 8007778:	45c8      	cmp	r8, r9
 800777a:	dc09      	bgt.n	8007790 <_printf_float+0x250>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	079b      	lsls	r3, r3, #30
 8007780:	f100 8103 	bmi.w	800798a <_printf_float+0x44a>
 8007784:	68e0      	ldr	r0, [r4, #12]
 8007786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007788:	4298      	cmp	r0, r3
 800778a:	bfb8      	it	lt
 800778c:	4618      	movlt	r0, r3
 800778e:	e734      	b.n	80075fa <_printf_float+0xba>
 8007790:	2301      	movs	r3, #1
 8007792:	4652      	mov	r2, sl
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af2b 	beq.w	80075f6 <_printf_float+0xb6>
 80077a0:	f109 0901 	add.w	r9, r9, #1
 80077a4:	e7e8      	b.n	8007778 <_printf_float+0x238>
 80077a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dc39      	bgt.n	8007820 <_printf_float+0x2e0>
 80077ac:	4a1b      	ldr	r2, [pc, #108]	@ (800781c <_printf_float+0x2dc>)
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af1d 	beq.w	80075f6 <_printf_float+0xb6>
 80077bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077c0:	ea59 0303 	orrs.w	r3, r9, r3
 80077c4:	d102      	bne.n	80077cc <_printf_float+0x28c>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	07d9      	lsls	r1, r3, #31
 80077ca:	d5d7      	bpl.n	800777c <_printf_float+0x23c>
 80077cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af0d 	beq.w	80075f6 <_printf_float+0xb6>
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	f104 0b1a 	add.w	fp, r4, #26
 80077e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e6:	425b      	negs	r3, r3
 80077e8:	4553      	cmp	r3, sl
 80077ea:	dc01      	bgt.n	80077f0 <_printf_float+0x2b0>
 80077ec:	464b      	mov	r3, r9
 80077ee:	e793      	b.n	8007718 <_printf_float+0x1d8>
 80077f0:	2301      	movs	r3, #1
 80077f2:	465a      	mov	r2, fp
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f aefb 	beq.w	80075f6 <_printf_float+0xb6>
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	e7ee      	b.n	80077e4 <_printf_float+0x2a4>
 8007806:	bf00      	nop
 8007808:	7fefffff 	.word	0x7fefffff
 800780c:	0800a51e 	.word	0x0800a51e
 8007810:	0800a522 	.word	0x0800a522
 8007814:	0800a526 	.word	0x0800a526
 8007818:	0800a52a 	.word	0x0800a52a
 800781c:	0800a52e 	.word	0x0800a52e
 8007820:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007822:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007826:	4553      	cmp	r3, sl
 8007828:	bfa8      	it	ge
 800782a:	4653      	movge	r3, sl
 800782c:	2b00      	cmp	r3, #0
 800782e:	4699      	mov	r9, r3
 8007830:	dc36      	bgt.n	80078a0 <_printf_float+0x360>
 8007832:	f04f 0b00 	mov.w	fp, #0
 8007836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783a:	f104 021a 	add.w	r2, r4, #26
 800783e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007840:	9306      	str	r3, [sp, #24]
 8007842:	eba3 0309 	sub.w	r3, r3, r9
 8007846:	455b      	cmp	r3, fp
 8007848:	dc31      	bgt.n	80078ae <_printf_float+0x36e>
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	459a      	cmp	sl, r3
 800784e:	dc3a      	bgt.n	80078c6 <_printf_float+0x386>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07da      	lsls	r2, r3, #31
 8007854:	d437      	bmi.n	80078c6 <_printf_float+0x386>
 8007856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007858:	ebaa 0903 	sub.w	r9, sl, r3
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	ebaa 0303 	sub.w	r3, sl, r3
 8007862:	4599      	cmp	r9, r3
 8007864:	bfa8      	it	ge
 8007866:	4699      	movge	r9, r3
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	dc33      	bgt.n	80078d6 <_printf_float+0x396>
 800786e:	f04f 0800 	mov.w	r8, #0
 8007872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007876:	f104 0b1a 	add.w	fp, r4, #26
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	ebaa 0303 	sub.w	r3, sl, r3
 8007880:	eba3 0309 	sub.w	r3, r3, r9
 8007884:	4543      	cmp	r3, r8
 8007886:	f77f af79 	ble.w	800777c <_printf_float+0x23c>
 800788a:	2301      	movs	r3, #1
 800788c:	465a      	mov	r2, fp
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f aeae 	beq.w	80075f6 <_printf_float+0xb6>
 800789a:	f108 0801 	add.w	r8, r8, #1
 800789e:	e7ec      	b.n	800787a <_printf_float+0x33a>
 80078a0:	4642      	mov	r2, r8
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	d1c2      	bne.n	8007832 <_printf_float+0x2f2>
 80078ac:	e6a3      	b.n	80075f6 <_printf_float+0xb6>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	9206      	str	r2, [sp, #24]
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae9c 	beq.w	80075f6 <_printf_float+0xb6>
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	f10b 0b01 	add.w	fp, fp, #1
 80078c4:	e7bb      	b.n	800783e <_printf_float+0x2fe>
 80078c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	d1c0      	bne.n	8007856 <_printf_float+0x316>
 80078d4:	e68f      	b.n	80075f6 <_printf_float+0xb6>
 80078d6:	9a06      	ldr	r2, [sp, #24]
 80078d8:	464b      	mov	r3, r9
 80078da:	4442      	add	r2, r8
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d1c3      	bne.n	800786e <_printf_float+0x32e>
 80078e6:	e686      	b.n	80075f6 <_printf_float+0xb6>
 80078e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078ec:	f1ba 0f01 	cmp.w	sl, #1
 80078f0:	dc01      	bgt.n	80078f6 <_printf_float+0x3b6>
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d536      	bpl.n	8007964 <_printf_float+0x424>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4642      	mov	r2, r8
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	f43f ae78 	beq.w	80075f6 <_printf_float+0xb6>
 8007906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f ae70 	beq.w	80075f6 <_printf_float+0xb6>
 8007916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007922:	f7f9 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007926:	b9c0      	cbnz	r0, 800795a <_printf_float+0x41a>
 8007928:	4653      	mov	r3, sl
 800792a:	f108 0201 	add.w	r2, r8, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d10c      	bne.n	8007952 <_printf_float+0x412>
 8007938:	e65d      	b.n	80075f6 <_printf_float+0xb6>
 800793a:	2301      	movs	r3, #1
 800793c:	465a      	mov	r2, fp
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae56 	beq.w	80075f6 <_printf_float+0xb6>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	45d0      	cmp	r8, sl
 8007950:	dbf3      	blt.n	800793a <_printf_float+0x3fa>
 8007952:	464b      	mov	r3, r9
 8007954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007958:	e6df      	b.n	800771a <_printf_float+0x1da>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	f104 0b1a 	add.w	fp, r4, #26
 8007962:	e7f4      	b.n	800794e <_printf_float+0x40e>
 8007964:	2301      	movs	r3, #1
 8007966:	4642      	mov	r2, r8
 8007968:	e7e1      	b.n	800792e <_printf_float+0x3ee>
 800796a:	2301      	movs	r3, #1
 800796c:	464a      	mov	r2, r9
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae3e 	beq.w	80075f6 <_printf_float+0xb6>
 800797a:	f108 0801 	add.w	r8, r8, #1
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	4543      	cmp	r3, r8
 8007986:	dcf0      	bgt.n	800796a <_printf_float+0x42a>
 8007988:	e6fc      	b.n	8007784 <_printf_float+0x244>
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	f104 0919 	add.w	r9, r4, #25
 8007992:	e7f4      	b.n	800797e <_printf_float+0x43e>

08007994 <_printf_common>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	4616      	mov	r6, r2
 800799a:	4698      	mov	r8, r3
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	690b      	ldr	r3, [r1, #16]
 80079a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfb8      	it	lt
 80079a8:	4613      	movlt	r3, r2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079b0:	4607      	mov	r7, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b10a      	cbz	r2, 80079ba <_printf_common+0x26>
 80079b6:	3301      	adds	r3, #1
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0699      	lsls	r1, r3, #26
 80079be:	bf42      	ittt	mi
 80079c0:	6833      	ldrmi	r3, [r6, #0]
 80079c2:	3302      	addmi	r3, #2
 80079c4:	6033      	strmi	r3, [r6, #0]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d106      	bne.n	80079dc <_printf_common+0x48>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	6832      	ldr	r2, [r6, #0]
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc26      	bgt.n	8007a2a <_printf_common+0x96>
 80079dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	3b00      	subs	r3, #0
 80079e4:	bf18      	it	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	0692      	lsls	r2, r2, #26
 80079ea:	d42b      	bmi.n	8007a44 <_printf_common+0xb0>
 80079ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079f0:	4641      	mov	r1, r8
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c8      	blx	r9
 80079f6:	3001      	adds	r0, #1
 80079f8:	d01e      	beq.n	8007a38 <_printf_common+0xa4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	6922      	ldr	r2, [r4, #16]
 80079fe:	f003 0306 	and.w	r3, r3, #6
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	bf02      	ittt	eq
 8007a06:	68e5      	ldreq	r5, [r4, #12]
 8007a08:	6833      	ldreq	r3, [r6, #0]
 8007a0a:	1aed      	subeq	r5, r5, r3
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a14:	2500      	movne	r5, #0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfc4      	itt	gt
 8007a1a:	1a9b      	subgt	r3, r3, r2
 8007a1c:	18ed      	addgt	r5, r5, r3
 8007a1e:	2600      	movs	r6, #0
 8007a20:	341a      	adds	r4, #26
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d11a      	bne.n	8007a5c <_printf_common+0xc8>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e008      	b.n	8007a3c <_printf_common+0xa8>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4641      	mov	r1, r8
 8007a30:	4638      	mov	r0, r7
 8007a32:	47c8      	blx	r9
 8007a34:	3001      	adds	r0, #1
 8007a36:	d103      	bne.n	8007a40 <_printf_common+0xac>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	e7c6      	b.n	80079d2 <_printf_common+0x3e>
 8007a44:	18e1      	adds	r1, r4, r3
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	2030      	movs	r0, #48	@ 0x30
 8007a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a4e:	4422      	add	r2, r4
 8007a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7c7      	b.n	80079ec <_printf_common+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4641      	mov	r1, r8
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c8      	blx	r9
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0e6      	beq.n	8007a38 <_printf_common+0xa4>
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7d9      	b.n	8007a22 <_printf_common+0x8e>
	...

08007a70 <_printf_i>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	7e0f      	ldrb	r7, [r1, #24]
 8007a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a78:	2f78      	cmp	r7, #120	@ 0x78
 8007a7a:	4691      	mov	r9, r2
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	469a      	mov	sl, r3
 8007a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a86:	d807      	bhi.n	8007a98 <_printf_i+0x28>
 8007a88:	2f62      	cmp	r7, #98	@ 0x62
 8007a8a:	d80a      	bhi.n	8007aa2 <_printf_i+0x32>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	f000 80d2 	beq.w	8007c36 <_printf_i+0x1c6>
 8007a92:	2f58      	cmp	r7, #88	@ 0x58
 8007a94:	f000 80b9 	beq.w	8007c0a <_printf_i+0x19a>
 8007a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007aa0:	e03a      	b.n	8007b18 <_printf_i+0xa8>
 8007aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aa6:	2b15      	cmp	r3, #21
 8007aa8:	d8f6      	bhi.n	8007a98 <_printf_i+0x28>
 8007aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8007ab0 <_printf_i+0x40>)
 8007aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007a99 	.word	0x08007a99
 8007abc:	08007a99 	.word	0x08007a99
 8007ac0:	08007a99 	.word	0x08007a99
 8007ac4:	08007a99 	.word	0x08007a99
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007a99 	.word	0x08007a99
 8007ad0:	08007a99 	.word	0x08007a99
 8007ad4:	08007a99 	.word	0x08007a99
 8007ad8:	08007a99 	.word	0x08007a99
 8007adc:	08007c1d 	.word	0x08007c1d
 8007ae0:	08007b47 	.word	0x08007b47
 8007ae4:	08007bd7 	.word	0x08007bd7
 8007ae8:	08007a99 	.word	0x08007a99
 8007aec:	08007a99 	.word	0x08007a99
 8007af0:	08007c3f 	.word	0x08007c3f
 8007af4:	08007a99 	.word	0x08007a99
 8007af8:	08007b47 	.word	0x08007b47
 8007afc:	08007a99 	.word	0x08007a99
 8007b00:	08007a99 	.word	0x08007a99
 8007b04:	08007bdf 	.word	0x08007bdf
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6032      	str	r2, [r6, #0]
 8007b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e09d      	b.n	8007c58 <_printf_i+0x1e8>
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	6820      	ldr	r0, [r4, #0]
 8007b20:	1d19      	adds	r1, r3, #4
 8007b22:	6031      	str	r1, [r6, #0]
 8007b24:	0606      	lsls	r6, r0, #24
 8007b26:	d501      	bpl.n	8007b2c <_printf_i+0xbc>
 8007b28:	681d      	ldr	r5, [r3, #0]
 8007b2a:	e003      	b.n	8007b34 <_printf_i+0xc4>
 8007b2c:	0645      	lsls	r5, r0, #25
 8007b2e:	d5fb      	bpl.n	8007b28 <_printf_i+0xb8>
 8007b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	da03      	bge.n	8007b40 <_printf_i+0xd0>
 8007b38:	232d      	movs	r3, #45	@ 0x2d
 8007b3a:	426d      	negs	r5, r5
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b40:	4859      	ldr	r0, [pc, #356]	@ (8007ca8 <_printf_i+0x238>)
 8007b42:	230a      	movs	r3, #10
 8007b44:	e011      	b.n	8007b6a <_printf_i+0xfa>
 8007b46:	6821      	ldr	r1, [r4, #0]
 8007b48:	6833      	ldr	r3, [r6, #0]
 8007b4a:	0608      	lsls	r0, r1, #24
 8007b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b50:	d402      	bmi.n	8007b58 <_printf_i+0xe8>
 8007b52:	0649      	lsls	r1, r1, #25
 8007b54:	bf48      	it	mi
 8007b56:	b2ad      	uxthmi	r5, r5
 8007b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b5a:	4853      	ldr	r0, [pc, #332]	@ (8007ca8 <_printf_i+0x238>)
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	bf14      	ite	ne
 8007b60:	230a      	movne	r3, #10
 8007b62:	2308      	moveq	r3, #8
 8007b64:	2100      	movs	r1, #0
 8007b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b6a:	6866      	ldr	r6, [r4, #4]
 8007b6c:	60a6      	str	r6, [r4, #8]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	bfa2      	ittt	ge
 8007b72:	6821      	ldrge	r1, [r4, #0]
 8007b74:	f021 0104 	bicge.w	r1, r1, #4
 8007b78:	6021      	strge	r1, [r4, #0]
 8007b7a:	b90d      	cbnz	r5, 8007b80 <_printf_i+0x110>
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	d04b      	beq.n	8007c18 <_printf_i+0x1a8>
 8007b80:	4616      	mov	r6, r2
 8007b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b86:	fb03 5711 	mls	r7, r3, r1, r5
 8007b8a:	5dc7      	ldrb	r7, [r0, r7]
 8007b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b90:	462f      	mov	r7, r5
 8007b92:	42bb      	cmp	r3, r7
 8007b94:	460d      	mov	r5, r1
 8007b96:	d9f4      	bls.n	8007b82 <_printf_i+0x112>
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d10b      	bne.n	8007bb4 <_printf_i+0x144>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	07df      	lsls	r7, r3, #31
 8007ba0:	d508      	bpl.n	8007bb4 <_printf_i+0x144>
 8007ba2:	6923      	ldr	r3, [r4, #16]
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	bfde      	ittt	le
 8007baa:	2330      	movle	r3, #48	@ 0x30
 8007bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bb4:	1b92      	subs	r2, r2, r6
 8007bb6:	6122      	str	r2, [r4, #16]
 8007bb8:	f8cd a000 	str.w	sl, [sp]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	aa03      	add	r2, sp, #12
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f7ff fee6 	bl	8007994 <_printf_common>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d14a      	bne.n	8007c62 <_printf_i+0x1f2>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	b004      	add	sp, #16
 8007bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	f043 0320 	orr.w	r3, r3, #32
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	4833      	ldr	r0, [pc, #204]	@ (8007cac <_printf_i+0x23c>)
 8007be0:	2778      	movs	r7, #120	@ 0x78
 8007be2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	6831      	ldr	r1, [r6, #0]
 8007bea:	061f      	lsls	r7, r3, #24
 8007bec:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bf0:	d402      	bmi.n	8007bf8 <_printf_i+0x188>
 8007bf2:	065f      	lsls	r7, r3, #25
 8007bf4:	bf48      	it	mi
 8007bf6:	b2ad      	uxthmi	r5, r5
 8007bf8:	6031      	str	r1, [r6, #0]
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	bf44      	itt	mi
 8007bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8007c02:	6023      	strmi	r3, [r4, #0]
 8007c04:	b11d      	cbz	r5, 8007c0e <_printf_i+0x19e>
 8007c06:	2310      	movs	r3, #16
 8007c08:	e7ac      	b.n	8007b64 <_printf_i+0xf4>
 8007c0a:	4827      	ldr	r0, [pc, #156]	@ (8007ca8 <_printf_i+0x238>)
 8007c0c:	e7e9      	b.n	8007be2 <_printf_i+0x172>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f023 0320 	bic.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	e7f6      	b.n	8007c06 <_printf_i+0x196>
 8007c18:	4616      	mov	r6, r2
 8007c1a:	e7bd      	b.n	8007b98 <_printf_i+0x128>
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	6825      	ldr	r5, [r4, #0]
 8007c20:	6961      	ldr	r1, [r4, #20]
 8007c22:	1d18      	adds	r0, r3, #4
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	062e      	lsls	r6, r5, #24
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	d501      	bpl.n	8007c30 <_printf_i+0x1c0>
 8007c2c:	6019      	str	r1, [r3, #0]
 8007c2e:	e002      	b.n	8007c36 <_printf_i+0x1c6>
 8007c30:	0668      	lsls	r0, r5, #25
 8007c32:	d5fb      	bpl.n	8007c2c <_printf_i+0x1bc>
 8007c34:	8019      	strh	r1, [r3, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	e7bc      	b.n	8007bb8 <_printf_i+0x148>
 8007c3e:	6833      	ldr	r3, [r6, #0]
 8007c40:	1d1a      	adds	r2, r3, #4
 8007c42:	6032      	str	r2, [r6, #0]
 8007c44:	681e      	ldr	r6, [r3, #0]
 8007c46:	6862      	ldr	r2, [r4, #4]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 fac0 	bl	80001d0 <memchr>
 8007c50:	b108      	cbz	r0, 8007c56 <_printf_i+0x1e6>
 8007c52:	1b80      	subs	r0, r0, r6
 8007c54:	6060      	str	r0, [r4, #4]
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c60:	e7aa      	b.n	8007bb8 <_printf_i+0x148>
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d0ad      	beq.n	8007bcc <_printf_i+0x15c>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	079b      	lsls	r3, r3, #30
 8007c74:	d413      	bmi.n	8007c9e <_printf_i+0x22e>
 8007c76:	68e0      	ldr	r0, [r4, #12]
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	bfb8      	it	lt
 8007c7e:	4618      	movlt	r0, r3
 8007c80:	e7a6      	b.n	8007bd0 <_printf_i+0x160>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4632      	mov	r2, r6
 8007c86:	4649      	mov	r1, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	47d0      	blx	sl
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d09d      	beq.n	8007bcc <_printf_i+0x15c>
 8007c90:	3501      	adds	r5, #1
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	9903      	ldr	r1, [sp, #12]
 8007c96:	1a5b      	subs	r3, r3, r1
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dcf2      	bgt.n	8007c82 <_printf_i+0x212>
 8007c9c:	e7eb      	b.n	8007c76 <_printf_i+0x206>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	f104 0619 	add.w	r6, r4, #25
 8007ca4:	e7f5      	b.n	8007c92 <_printf_i+0x222>
 8007ca6:	bf00      	nop
 8007ca8:	0800a530 	.word	0x0800a530
 8007cac:	0800a541 	.word	0x0800a541

08007cb0 <std>:
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cbe:	6083      	str	r3, [r0, #8]
 8007cc0:	8181      	strh	r1, [r0, #12]
 8007cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cc4:	81c2      	strh	r2, [r0, #14]
 8007cc6:	6183      	str	r3, [r0, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	2208      	movs	r2, #8
 8007ccc:	305c      	adds	r0, #92	@ 0x5c
 8007cce:	f000 f948 	bl	8007f62 <memset>
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <std+0x58>)
 8007cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d0c <std+0x5c>)
 8007cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x60>)
 8007cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <std+0x64>)
 8007ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <std+0x68>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d006      	beq.n	8007cf8 <std+0x48>
 8007cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cee:	4294      	cmp	r4, r2
 8007cf0:	d002      	beq.n	8007cf8 <std+0x48>
 8007cf2:	33d0      	adds	r3, #208	@ 0xd0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d105      	bne.n	8007d04 <std+0x54>
 8007cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f000 b9ac 	b.w	800805c <__retarget_lock_init_recursive>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08007edd 	.word	0x08007edd
 8007d0c:	08007eff 	.word	0x08007eff
 8007d10:	08007f37 	.word	0x08007f37
 8007d14:	08007f5b 	.word	0x08007f5b
 8007d18:	20000684 	.word	0x20000684

08007d1c <stdio_exit_handler>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	@ (8007d28 <stdio_exit_handler+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <stdio_exit_handler+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	@ (8007d30 <stdio_exit_handler+0x14>)
 8007d22:	f000 b869 	b.w	8007df8 <_fwalk_sglue>
 8007d26:	bf00      	nop
 8007d28:	20000020 	.word	0x20000020
 8007d2c:	080099d5 	.word	0x080099d5
 8007d30:	20000030 	.word	0x20000030

08007d34 <cleanup_stdio>:
 8007d34:	6841      	ldr	r1, [r0, #4]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <cleanup_stdio+0x34>)
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d001      	beq.n	8007d44 <cleanup_stdio+0x10>
 8007d40:	f001 fe48 	bl	80099d4 <_fflush_r>
 8007d44:	68a1      	ldr	r1, [r4, #8]
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <cleanup_stdio+0x38>)
 8007d48:	4299      	cmp	r1, r3
 8007d4a:	d002      	beq.n	8007d52 <cleanup_stdio+0x1e>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f001 fe41 	bl	80099d4 <_fflush_r>
 8007d52:	68e1      	ldr	r1, [r4, #12]
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <cleanup_stdio+0x3c>)
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d004      	beq.n	8007d64 <cleanup_stdio+0x30>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f001 be38 	b.w	80099d4 <_fflush_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	20000684 	.word	0x20000684
 8007d6c:	200006ec 	.word	0x200006ec
 8007d70:	20000754 	.word	0x20000754

08007d74 <global_stdio_init.part.0>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <global_stdio_init.part.0+0x30>)
 8007d78:	4c0b      	ldr	r4, [pc, #44]	@ (8007da8 <global_stdio_init.part.0+0x34>)
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dac <global_stdio_init.part.0+0x38>)
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	2200      	movs	r2, #0
 8007d82:	2104      	movs	r1, #4
 8007d84:	f7ff ff94 	bl	8007cb0 <std>
 8007d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2109      	movs	r1, #9
 8007d90:	f7ff ff8e 	bl	8007cb0 <std>
 8007d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9e:	2112      	movs	r1, #18
 8007da0:	f7ff bf86 	b.w	8007cb0 <std>
 8007da4:	200007bc 	.word	0x200007bc
 8007da8:	20000684 	.word	0x20000684
 8007dac:	08007d1d 	.word	0x08007d1d

08007db0 <__sfp_lock_acquire>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__sfp_lock_acquire+0x8>)
 8007db2:	f000 b954 	b.w	800805e <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	200007c5 	.word	0x200007c5

08007dbc <__sfp_lock_release>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__sfp_lock_release+0x8>)
 8007dbe:	f000 b94f 	b.w	8008060 <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	200007c5 	.word	0x200007c5

08007dc8 <__sinit>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f7ff fff0 	bl	8007db0 <__sfp_lock_acquire>
 8007dd0:	6a23      	ldr	r3, [r4, #32]
 8007dd2:	b11b      	cbz	r3, 8007ddc <__sinit+0x14>
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd8:	f7ff bff0 	b.w	8007dbc <__sfp_lock_release>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__sinit+0x28>)
 8007dde:	6223      	str	r3, [r4, #32]
 8007de0:	4b04      	ldr	r3, [pc, #16]	@ (8007df4 <__sinit+0x2c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f5      	bne.n	8007dd4 <__sinit+0xc>
 8007de8:	f7ff ffc4 	bl	8007d74 <global_stdio_init.part.0>
 8007dec:	e7f2      	b.n	8007dd4 <__sinit+0xc>
 8007dee:	bf00      	nop
 8007df0:	08007d35 	.word	0x08007d35
 8007df4:	200007bc 	.word	0x200007bc

08007df8 <_fwalk_sglue>:
 8007df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	2600      	movs	r6, #0
 8007e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e08:	f1b9 0901 	subs.w	r9, r9, #1
 8007e0c:	d505      	bpl.n	8007e1a <_fwalk_sglue+0x22>
 8007e0e:	6824      	ldr	r4, [r4, #0]
 8007e10:	2c00      	cmp	r4, #0
 8007e12:	d1f7      	bne.n	8007e04 <_fwalk_sglue+0xc>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d907      	bls.n	8007e30 <_fwalk_sglue+0x38>
 8007e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	d003      	beq.n	8007e30 <_fwalk_sglue+0x38>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	4306      	orrs	r6, r0
 8007e30:	3568      	adds	r5, #104	@ 0x68
 8007e32:	e7e9      	b.n	8007e08 <_fwalk_sglue+0x10>

08007e34 <sniprintf>:
 8007e34:	b40c      	push	{r2, r3}
 8007e36:	b530      	push	{r4, r5, lr}
 8007e38:	4b17      	ldr	r3, [pc, #92]	@ (8007e98 <sniprintf+0x64>)
 8007e3a:	1e0c      	subs	r4, r1, #0
 8007e3c:	681d      	ldr	r5, [r3, #0]
 8007e3e:	b09d      	sub	sp, #116	@ 0x74
 8007e40:	da08      	bge.n	8007e54 <sniprintf+0x20>
 8007e42:	238b      	movs	r3, #139	@ 0x8b
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	b01d      	add	sp, #116	@ 0x74
 8007e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e50:	b002      	add	sp, #8
 8007e52:	4770      	bx	lr
 8007e54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e5c:	bf14      	ite	ne
 8007e5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e62:	4623      	moveq	r3, r4
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	9307      	str	r3, [sp, #28]
 8007e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e6c:	9002      	str	r0, [sp, #8]
 8007e6e:	9006      	str	r0, [sp, #24]
 8007e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e76:	ab21      	add	r3, sp, #132	@ 0x84
 8007e78:	a902      	add	r1, sp, #8
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	f001 fc29 	bl	80096d4 <_svfiprintf_r>
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	bfbc      	itt	lt
 8007e86:	238b      	movlt	r3, #139	@ 0x8b
 8007e88:	602b      	strlt	r3, [r5, #0]
 8007e8a:	2c00      	cmp	r4, #0
 8007e8c:	d0dd      	beq.n	8007e4a <sniprintf+0x16>
 8007e8e:	9b02      	ldr	r3, [sp, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	e7d9      	b.n	8007e4a <sniprintf+0x16>
 8007e96:	bf00      	nop
 8007e98:	2000002c 	.word	0x2000002c

08007e9c <siprintf>:
 8007e9c:	b40e      	push	{r1, r2, r3}
 8007e9e:	b500      	push	{lr}
 8007ea0:	b09c      	sub	sp, #112	@ 0x70
 8007ea2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ea4:	9002      	str	r0, [sp, #8]
 8007ea6:	9006      	str	r0, [sp, #24]
 8007ea8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007eac:	4809      	ldr	r0, [pc, #36]	@ (8007ed4 <siprintf+0x38>)
 8007eae:	9107      	str	r1, [sp, #28]
 8007eb0:	9104      	str	r1, [sp, #16]
 8007eb2:	4909      	ldr	r1, [pc, #36]	@ (8007ed8 <siprintf+0x3c>)
 8007eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb8:	9105      	str	r1, [sp, #20]
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	a902      	add	r1, sp, #8
 8007ec0:	f001 fc08 	bl	80096d4 <_svfiprintf_r>
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	b01c      	add	sp, #112	@ 0x70
 8007ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed0:	b003      	add	sp, #12
 8007ed2:	4770      	bx	lr
 8007ed4:	2000002c 	.word	0x2000002c
 8007ed8:	ffff0208 	.word	0xffff0208

08007edc <__sread>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	f000 f86c 	bl	8007fc0 <_read_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	bfab      	itete	ge
 8007eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef0:	181b      	addge	r3, r3, r0
 8007ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ef6:	bfac      	ite	ge
 8007ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007efa:	81a3      	strhlt	r3, [r4, #12]
 8007efc:	bd10      	pop	{r4, pc}

08007efe <__swrite>:
 8007efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	461f      	mov	r7, r3
 8007f04:	898b      	ldrh	r3, [r1, #12]
 8007f06:	05db      	lsls	r3, r3, #23
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	d505      	bpl.n	8007f1c <__swrite+0x1e>
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	2302      	movs	r3, #2
 8007f16:	2200      	movs	r2, #0
 8007f18:	f000 f840 	bl	8007f9c <_lseek_r>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	4632      	mov	r2, r6
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	f000 b857 	b.w	8007fe4 <_write_r>

08007f36 <__sseek>:
 8007f36:	b510      	push	{r4, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3e:	f000 f82d 	bl	8007f9c <_lseek_r>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	bf15      	itete	ne
 8007f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f52:	81a3      	strheq	r3, [r4, #12]
 8007f54:	bf18      	it	ne
 8007f56:	81a3      	strhne	r3, [r4, #12]
 8007f58:	bd10      	pop	{r4, pc}

08007f5a <__sclose>:
 8007f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5e:	f000 b80d 	b.w	8007f7c <_close_r>

08007f62 <memset>:
 8007f62:	4402      	add	r2, r0
 8007f64:	4603      	mov	r3, r0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d100      	bne.n	8007f6c <memset+0xa>
 8007f6a:	4770      	bx	lr
 8007f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f70:	e7f9      	b.n	8007f66 <memset+0x4>
	...

08007f74 <_localeconv_r>:
 8007f74:	4800      	ldr	r0, [pc, #0]	@ (8007f78 <_localeconv_r+0x4>)
 8007f76:	4770      	bx	lr
 8007f78:	2000016c 	.word	0x2000016c

08007f7c <_close_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	@ (8007f98 <_close_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 feac 	bl	8001ce4 <_close>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_close_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_close_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	200007c0 	.word	0x200007c0

08007f9c <_lseek_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	@ (8007fbc <_lseek_r+0x20>)
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7f9 fec1 	bl	8001d32 <_lseek>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_lseek_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_lseek_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	200007c0 	.word	0x200007c0

08007fc0 <_read_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	@ (8007fe0 <_read_r+0x20>)
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7f9 fe4f 	bl	8001c72 <_read>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_read_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_read_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	200007c0 	.word	0x200007c0

08007fe4 <_write_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d07      	ldr	r5, [pc, #28]	@ (8008004 <_write_r+0x20>)
 8007fe8:	4604      	mov	r4, r0
 8007fea:	4608      	mov	r0, r1
 8007fec:	4611      	mov	r1, r2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	602a      	str	r2, [r5, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f7f9 fe5a 	bl	8001cac <_write>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_write_r+0x1e>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_write_r+0x1e>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	200007c0 	.word	0x200007c0

08008008 <__errno>:
 8008008:	4b01      	ldr	r3, [pc, #4]	@ (8008010 <__errno+0x8>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	2000002c 	.word	0x2000002c

08008014 <__libc_init_array>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	4d0d      	ldr	r5, [pc, #52]	@ (800804c <__libc_init_array+0x38>)
 8008018:	4c0d      	ldr	r4, [pc, #52]	@ (8008050 <__libc_init_array+0x3c>)
 800801a:	1b64      	subs	r4, r4, r5
 800801c:	10a4      	asrs	r4, r4, #2
 800801e:	2600      	movs	r6, #0
 8008020:	42a6      	cmp	r6, r4
 8008022:	d109      	bne.n	8008038 <__libc_init_array+0x24>
 8008024:	4d0b      	ldr	r5, [pc, #44]	@ (8008054 <__libc_init_array+0x40>)
 8008026:	4c0c      	ldr	r4, [pc, #48]	@ (8008058 <__libc_init_array+0x44>)
 8008028:	f002 fa16 	bl	800a458 <_init>
 800802c:	1b64      	subs	r4, r4, r5
 800802e:	10a4      	asrs	r4, r4, #2
 8008030:	2600      	movs	r6, #0
 8008032:	42a6      	cmp	r6, r4
 8008034:	d105      	bne.n	8008042 <__libc_init_array+0x2e>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	f855 3b04 	ldr.w	r3, [r5], #4
 800803c:	4798      	blx	r3
 800803e:	3601      	adds	r6, #1
 8008040:	e7ee      	b.n	8008020 <__libc_init_array+0xc>
 8008042:	f855 3b04 	ldr.w	r3, [r5], #4
 8008046:	4798      	blx	r3
 8008048:	3601      	adds	r6, #1
 800804a:	e7f2      	b.n	8008032 <__libc_init_array+0x1e>
 800804c:	0800a8b0 	.word	0x0800a8b0
 8008050:	0800a8b0 	.word	0x0800a8b0
 8008054:	0800a8b0 	.word	0x0800a8b0
 8008058:	0800a8b4 	.word	0x0800a8b4

0800805c <__retarget_lock_init_recursive>:
 800805c:	4770      	bx	lr

0800805e <__retarget_lock_acquire_recursive>:
 800805e:	4770      	bx	lr

08008060 <__retarget_lock_release_recursive>:
 8008060:	4770      	bx	lr

08008062 <memcpy>:
 8008062:	440a      	add	r2, r1
 8008064:	4291      	cmp	r1, r2
 8008066:	f100 33ff 	add.w	r3, r0, #4294967295
 800806a:	d100      	bne.n	800806e <memcpy+0xc>
 800806c:	4770      	bx	lr
 800806e:	b510      	push	{r4, lr}
 8008070:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008074:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008078:	4291      	cmp	r1, r2
 800807a:	d1f9      	bne.n	8008070 <memcpy+0xe>
 800807c:	bd10      	pop	{r4, pc}

0800807e <quorem>:
 800807e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008082:	6903      	ldr	r3, [r0, #16]
 8008084:	690c      	ldr	r4, [r1, #16]
 8008086:	42a3      	cmp	r3, r4
 8008088:	4607      	mov	r7, r0
 800808a:	db7e      	blt.n	800818a <quorem+0x10c>
 800808c:	3c01      	subs	r4, #1
 800808e:	f101 0814 	add.w	r8, r1, #20
 8008092:	00a3      	lsls	r3, r4, #2
 8008094:	f100 0514 	add.w	r5, r0, #20
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a8:	3301      	adds	r3, #1
 80080aa:	429a      	cmp	r2, r3
 80080ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80080b4:	d32e      	bcc.n	8008114 <quorem+0x96>
 80080b6:	f04f 0a00 	mov.w	sl, #0
 80080ba:	46c4      	mov	ip, r8
 80080bc:	46ae      	mov	lr, r5
 80080be:	46d3      	mov	fp, sl
 80080c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080c4:	b298      	uxth	r0, r3
 80080c6:	fb06 a000 	mla	r0, r6, r0, sl
 80080ca:	0c02      	lsrs	r2, r0, #16
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	fb06 2303 	mla	r3, r6, r3, r2
 80080d2:	f8de 2000 	ldr.w	r2, [lr]
 80080d6:	b280      	uxth	r0, r0
 80080d8:	b292      	uxth	r2, r2
 80080da:	1a12      	subs	r2, r2, r0
 80080dc:	445a      	add	r2, fp
 80080de:	f8de 0000 	ldr.w	r0, [lr]
 80080e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080f0:	b292      	uxth	r2, r2
 80080f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080f6:	45e1      	cmp	r9, ip
 80080f8:	f84e 2b04 	str.w	r2, [lr], #4
 80080fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008100:	d2de      	bcs.n	80080c0 <quorem+0x42>
 8008102:	9b00      	ldr	r3, [sp, #0]
 8008104:	58eb      	ldr	r3, [r5, r3]
 8008106:	b92b      	cbnz	r3, 8008114 <quorem+0x96>
 8008108:	9b01      	ldr	r3, [sp, #4]
 800810a:	3b04      	subs	r3, #4
 800810c:	429d      	cmp	r5, r3
 800810e:	461a      	mov	r2, r3
 8008110:	d32f      	bcc.n	8008172 <quorem+0xf4>
 8008112:	613c      	str	r4, [r7, #16]
 8008114:	4638      	mov	r0, r7
 8008116:	f001 f979 	bl	800940c <__mcmp>
 800811a:	2800      	cmp	r0, #0
 800811c:	db25      	blt.n	800816a <quorem+0xec>
 800811e:	4629      	mov	r1, r5
 8008120:	2000      	movs	r0, #0
 8008122:	f858 2b04 	ldr.w	r2, [r8], #4
 8008126:	f8d1 c000 	ldr.w	ip, [r1]
 800812a:	fa1f fe82 	uxth.w	lr, r2
 800812e:	fa1f f38c 	uxth.w	r3, ip
 8008132:	eba3 030e 	sub.w	r3, r3, lr
 8008136:	4403      	add	r3, r0
 8008138:	0c12      	lsrs	r2, r2, #16
 800813a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800813e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008148:	45c1      	cmp	r9, r8
 800814a:	f841 3b04 	str.w	r3, [r1], #4
 800814e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008152:	d2e6      	bcs.n	8008122 <quorem+0xa4>
 8008154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815c:	b922      	cbnz	r2, 8008168 <quorem+0xea>
 800815e:	3b04      	subs	r3, #4
 8008160:	429d      	cmp	r5, r3
 8008162:	461a      	mov	r2, r3
 8008164:	d30b      	bcc.n	800817e <quorem+0x100>
 8008166:	613c      	str	r4, [r7, #16]
 8008168:	3601      	adds	r6, #1
 800816a:	4630      	mov	r0, r6
 800816c:	b003      	add	sp, #12
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	6812      	ldr	r2, [r2, #0]
 8008174:	3b04      	subs	r3, #4
 8008176:	2a00      	cmp	r2, #0
 8008178:	d1cb      	bne.n	8008112 <quorem+0x94>
 800817a:	3c01      	subs	r4, #1
 800817c:	e7c6      	b.n	800810c <quorem+0x8e>
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	3b04      	subs	r3, #4
 8008182:	2a00      	cmp	r2, #0
 8008184:	d1ef      	bne.n	8008166 <quorem+0xe8>
 8008186:	3c01      	subs	r4, #1
 8008188:	e7ea      	b.n	8008160 <quorem+0xe2>
 800818a:	2000      	movs	r0, #0
 800818c:	e7ee      	b.n	800816c <quorem+0xee>
	...

08008190 <_dtoa_r>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	69c7      	ldr	r7, [r0, #28]
 8008196:	b099      	sub	sp, #100	@ 0x64
 8008198:	ed8d 0b02 	vstr	d0, [sp, #8]
 800819c:	ec55 4b10 	vmov	r4, r5, d0
 80081a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80081a4:	4683      	mov	fp, r0
 80081a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80081a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081aa:	b97f      	cbnz	r7, 80081cc <_dtoa_r+0x3c>
 80081ac:	2010      	movs	r0, #16
 80081ae:	f000 fdfd 	bl	8008dac <malloc>
 80081b2:	4602      	mov	r2, r0
 80081b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80081b8:	b920      	cbnz	r0, 80081c4 <_dtoa_r+0x34>
 80081ba:	4ba7      	ldr	r3, [pc, #668]	@ (8008458 <_dtoa_r+0x2c8>)
 80081bc:	21ef      	movs	r1, #239	@ 0xef
 80081be:	48a7      	ldr	r0, [pc, #668]	@ (800845c <_dtoa_r+0x2cc>)
 80081c0:	f001 fc5a 	bl	8009a78 <__assert_func>
 80081c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081c8:	6007      	str	r7, [r0, #0]
 80081ca:	60c7      	str	r7, [r0, #12]
 80081cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	b159      	cbz	r1, 80081ec <_dtoa_r+0x5c>
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	604a      	str	r2, [r1, #4]
 80081d8:	2301      	movs	r3, #1
 80081da:	4093      	lsls	r3, r2
 80081dc:	608b      	str	r3, [r1, #8]
 80081de:	4658      	mov	r0, fp
 80081e0:	f000 feda 	bl	8008f98 <_Bfree>
 80081e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	1e2b      	subs	r3, r5, #0
 80081ee:	bfb9      	ittee	lt
 80081f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081f4:	9303      	strlt	r3, [sp, #12]
 80081f6:	2300      	movge	r3, #0
 80081f8:	6033      	strge	r3, [r6, #0]
 80081fa:	9f03      	ldr	r7, [sp, #12]
 80081fc:	4b98      	ldr	r3, [pc, #608]	@ (8008460 <_dtoa_r+0x2d0>)
 80081fe:	bfbc      	itt	lt
 8008200:	2201      	movlt	r2, #1
 8008202:	6032      	strlt	r2, [r6, #0]
 8008204:	43bb      	bics	r3, r7
 8008206:	d112      	bne.n	800822e <_dtoa_r+0x9e>
 8008208:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800820a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008214:	4323      	orrs	r3, r4
 8008216:	f000 854d 	beq.w	8008cb4 <_dtoa_r+0xb24>
 800821a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800821c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008474 <_dtoa_r+0x2e4>
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 854f 	beq.w	8008cc4 <_dtoa_r+0xb34>
 8008226:	f10a 0303 	add.w	r3, sl, #3
 800822a:	f000 bd49 	b.w	8008cc0 <_dtoa_r+0xb30>
 800822e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	ec51 0b17 	vmov	r0, r1, d7
 8008238:	2300      	movs	r3, #0
 800823a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800823e:	f7f8 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008242:	4680      	mov	r8, r0
 8008244:	b158      	cbz	r0, 800825e <_dtoa_r+0xce>
 8008246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008248:	2301      	movs	r3, #1
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800824e:	b113      	cbz	r3, 8008256 <_dtoa_r+0xc6>
 8008250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008252:	4b84      	ldr	r3, [pc, #528]	@ (8008464 <_dtoa_r+0x2d4>)
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008478 <_dtoa_r+0x2e8>
 800825a:	f000 bd33 	b.w	8008cc4 <_dtoa_r+0xb34>
 800825e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008262:	aa16      	add	r2, sp, #88	@ 0x58
 8008264:	a917      	add	r1, sp, #92	@ 0x5c
 8008266:	4658      	mov	r0, fp
 8008268:	f001 f980 	bl	800956c <__d2b>
 800826c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008270:	4681      	mov	r9, r0
 8008272:	2e00      	cmp	r6, #0
 8008274:	d077      	beq.n	8008366 <_dtoa_r+0x1d6>
 8008276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008278:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800827c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800828c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008290:	4619      	mov	r1, r3
 8008292:	2200      	movs	r2, #0
 8008294:	4b74      	ldr	r3, [pc, #464]	@ (8008468 <_dtoa_r+0x2d8>)
 8008296:	f7f7 fff7 	bl	8000288 <__aeabi_dsub>
 800829a:	a369      	add	r3, pc, #420	@ (adr r3, 8008440 <_dtoa_r+0x2b0>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	a368      	add	r3, pc, #416	@ (adr r3, 8008448 <_dtoa_r+0x2b8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f7 ffef 	bl	800028c <__adddf3>
 80082ae:	4604      	mov	r4, r0
 80082b0:	4630      	mov	r0, r6
 80082b2:	460d      	mov	r5, r1
 80082b4:	f7f8 f936 	bl	8000524 <__aeabi_i2d>
 80082b8:	a365      	add	r3, pc, #404	@ (adr r3, 8008450 <_dtoa_r+0x2c0>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f7 ffdf 	bl	800028c <__adddf3>
 80082ce:	4604      	mov	r4, r0
 80082d0:	460d      	mov	r5, r1
 80082d2:	f7f8 fc41 	bl	8000b58 <__aeabi_d2iz>
 80082d6:	2200      	movs	r2, #0
 80082d8:	4607      	mov	r7, r0
 80082da:	2300      	movs	r3, #0
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f8 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80082e4:	b140      	cbz	r0, 80082f8 <_dtoa_r+0x168>
 80082e6:	4638      	mov	r0, r7
 80082e8:	f7f8 f91c 	bl	8000524 <__aeabi_i2d>
 80082ec:	4622      	mov	r2, r4
 80082ee:	462b      	mov	r3, r5
 80082f0:	f7f8 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f4:	b900      	cbnz	r0, 80082f8 <_dtoa_r+0x168>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	2f16      	cmp	r7, #22
 80082fa:	d851      	bhi.n	80083a0 <_dtoa_r+0x210>
 80082fc:	4b5b      	ldr	r3, [pc, #364]	@ (800846c <_dtoa_r+0x2dc>)
 80082fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800830a:	f7f8 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800830e:	2800      	cmp	r0, #0
 8008310:	d048      	beq.n	80083a4 <_dtoa_r+0x214>
 8008312:	3f01      	subs	r7, #1
 8008314:	2300      	movs	r3, #0
 8008316:	9312      	str	r3, [sp, #72]	@ 0x48
 8008318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800831a:	1b9b      	subs	r3, r3, r6
 800831c:	1e5a      	subs	r2, r3, #1
 800831e:	bf44      	itt	mi
 8008320:	f1c3 0801 	rsbmi	r8, r3, #1
 8008324:	2300      	movmi	r3, #0
 8008326:	9208      	str	r2, [sp, #32]
 8008328:	bf54      	ite	pl
 800832a:	f04f 0800 	movpl.w	r8, #0
 800832e:	9308      	strmi	r3, [sp, #32]
 8008330:	2f00      	cmp	r7, #0
 8008332:	db39      	blt.n	80083a8 <_dtoa_r+0x218>
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008338:	443b      	add	r3, r7
 800833a:	9308      	str	r3, [sp, #32]
 800833c:	2300      	movs	r3, #0
 800833e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008342:	2b09      	cmp	r3, #9
 8008344:	d864      	bhi.n	8008410 <_dtoa_r+0x280>
 8008346:	2b05      	cmp	r3, #5
 8008348:	bfc4      	itt	gt
 800834a:	3b04      	subgt	r3, #4
 800834c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	f1a3 0302 	sub.w	r3, r3, #2
 8008354:	bfcc      	ite	gt
 8008356:	2400      	movgt	r4, #0
 8008358:	2401      	movle	r4, #1
 800835a:	2b03      	cmp	r3, #3
 800835c:	d863      	bhi.n	8008426 <_dtoa_r+0x296>
 800835e:	e8df f003 	tbb	[pc, r3]
 8008362:	372a      	.short	0x372a
 8008364:	5535      	.short	0x5535
 8008366:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800836a:	441e      	add	r6, r3
 800836c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008370:	2b20      	cmp	r3, #32
 8008372:	bfc1      	itttt	gt
 8008374:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008378:	409f      	lslgt	r7, r3
 800837a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800837e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008382:	bfd6      	itet	le
 8008384:	f1c3 0320 	rsble	r3, r3, #32
 8008388:	ea47 0003 	orrgt.w	r0, r7, r3
 800838c:	fa04 f003 	lslle.w	r0, r4, r3
 8008390:	f7f8 f8b8 	bl	8000504 <__aeabi_ui2d>
 8008394:	2201      	movs	r2, #1
 8008396:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800839a:	3e01      	subs	r6, #1
 800839c:	9214      	str	r2, [sp, #80]	@ 0x50
 800839e:	e777      	b.n	8008290 <_dtoa_r+0x100>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e7b8      	b.n	8008316 <_dtoa_r+0x186>
 80083a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80083a6:	e7b7      	b.n	8008318 <_dtoa_r+0x188>
 80083a8:	427b      	negs	r3, r7
 80083aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ac:	2300      	movs	r3, #0
 80083ae:	eba8 0807 	sub.w	r8, r8, r7
 80083b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083b4:	e7c4      	b.n	8008340 <_dtoa_r+0x1b0>
 80083b6:	2300      	movs	r3, #0
 80083b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dc35      	bgt.n	800842c <_dtoa_r+0x29c>
 80083c0:	2301      	movs	r3, #1
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	9307      	str	r3, [sp, #28]
 80083c6:	461a      	mov	r2, r3
 80083c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80083ca:	e00b      	b.n	80083e4 <_dtoa_r+0x254>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e7f3      	b.n	80083b8 <_dtoa_r+0x228>
 80083d0:	2300      	movs	r3, #0
 80083d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d6:	18fb      	adds	r3, r7, r3
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	3301      	adds	r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	bfb8      	it	lt
 80083e2:	2301      	movlt	r3, #1
 80083e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083e8:	2100      	movs	r1, #0
 80083ea:	2204      	movs	r2, #4
 80083ec:	f102 0514 	add.w	r5, r2, #20
 80083f0:	429d      	cmp	r5, r3
 80083f2:	d91f      	bls.n	8008434 <_dtoa_r+0x2a4>
 80083f4:	6041      	str	r1, [r0, #4]
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 fd8e 	bl	8008f18 <_Balloc>
 80083fc:	4682      	mov	sl, r0
 80083fe:	2800      	cmp	r0, #0
 8008400:	d13c      	bne.n	800847c <_dtoa_r+0x2ec>
 8008402:	4b1b      	ldr	r3, [pc, #108]	@ (8008470 <_dtoa_r+0x2e0>)
 8008404:	4602      	mov	r2, r0
 8008406:	f240 11af 	movw	r1, #431	@ 0x1af
 800840a:	e6d8      	b.n	80081be <_dtoa_r+0x2e>
 800840c:	2301      	movs	r3, #1
 800840e:	e7e0      	b.n	80083d2 <_dtoa_r+0x242>
 8008410:	2401      	movs	r4, #1
 8008412:	2300      	movs	r3, #0
 8008414:	9309      	str	r3, [sp, #36]	@ 0x24
 8008416:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	2200      	movs	r2, #0
 8008422:	2312      	movs	r3, #18
 8008424:	e7d0      	b.n	80083c8 <_dtoa_r+0x238>
 8008426:	2301      	movs	r3, #1
 8008428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842a:	e7f5      	b.n	8008418 <_dtoa_r+0x288>
 800842c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	9307      	str	r3, [sp, #28]
 8008432:	e7d7      	b.n	80083e4 <_dtoa_r+0x254>
 8008434:	3101      	adds	r1, #1
 8008436:	0052      	lsls	r2, r2, #1
 8008438:	e7d8      	b.n	80083ec <_dtoa_r+0x25c>
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w
 8008440:	636f4361 	.word	0x636f4361
 8008444:	3fd287a7 	.word	0x3fd287a7
 8008448:	8b60c8b3 	.word	0x8b60c8b3
 800844c:	3fc68a28 	.word	0x3fc68a28
 8008450:	509f79fb 	.word	0x509f79fb
 8008454:	3fd34413 	.word	0x3fd34413
 8008458:	0800a55f 	.word	0x0800a55f
 800845c:	0800a576 	.word	0x0800a576
 8008460:	7ff00000 	.word	0x7ff00000
 8008464:	0800a52f 	.word	0x0800a52f
 8008468:	3ff80000 	.word	0x3ff80000
 800846c:	0800a670 	.word	0x0800a670
 8008470:	0800a5ce 	.word	0x0800a5ce
 8008474:	0800a55b 	.word	0x0800a55b
 8008478:	0800a52e 	.word	0x0800a52e
 800847c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008480:	6018      	str	r0, [r3, #0]
 8008482:	9b07      	ldr	r3, [sp, #28]
 8008484:	2b0e      	cmp	r3, #14
 8008486:	f200 80a4 	bhi.w	80085d2 <_dtoa_r+0x442>
 800848a:	2c00      	cmp	r4, #0
 800848c:	f000 80a1 	beq.w	80085d2 <_dtoa_r+0x442>
 8008490:	2f00      	cmp	r7, #0
 8008492:	dd33      	ble.n	80084fc <_dtoa_r+0x36c>
 8008494:	4bad      	ldr	r3, [pc, #692]	@ (800874c <_dtoa_r+0x5bc>)
 8008496:	f007 020f 	and.w	r2, r7, #15
 800849a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800849e:	ed93 7b00 	vldr	d7, [r3]
 80084a2:	05f8      	lsls	r0, r7, #23
 80084a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084ac:	d516      	bpl.n	80084dc <_dtoa_r+0x34c>
 80084ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008750 <_dtoa_r+0x5c0>)
 80084b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084b8:	f7f8 f9c8 	bl	800084c <__aeabi_ddiv>
 80084bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c0:	f004 040f 	and.w	r4, r4, #15
 80084c4:	2603      	movs	r6, #3
 80084c6:	4da2      	ldr	r5, [pc, #648]	@ (8008750 <_dtoa_r+0x5c0>)
 80084c8:	b954      	cbnz	r4, 80084e0 <_dtoa_r+0x350>
 80084ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d2:	f7f8 f9bb 	bl	800084c <__aeabi_ddiv>
 80084d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084da:	e028      	b.n	800852e <_dtoa_r+0x39e>
 80084dc:	2602      	movs	r6, #2
 80084de:	e7f2      	b.n	80084c6 <_dtoa_r+0x336>
 80084e0:	07e1      	lsls	r1, r4, #31
 80084e2:	d508      	bpl.n	80084f6 <_dtoa_r+0x366>
 80084e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f4:	3601      	adds	r6, #1
 80084f6:	1064      	asrs	r4, r4, #1
 80084f8:	3508      	adds	r5, #8
 80084fa:	e7e5      	b.n	80084c8 <_dtoa_r+0x338>
 80084fc:	f000 80d2 	beq.w	80086a4 <_dtoa_r+0x514>
 8008500:	427c      	negs	r4, r7
 8008502:	4b92      	ldr	r3, [pc, #584]	@ (800874c <_dtoa_r+0x5bc>)
 8008504:	4d92      	ldr	r5, [pc, #584]	@ (8008750 <_dtoa_r+0x5c0>)
 8008506:	f004 020f 	and.w	r2, r4, #15
 800850a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008516:	f7f8 f86f 	bl	80005f8 <__aeabi_dmul>
 800851a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800851e:	1124      	asrs	r4, r4, #4
 8008520:	2300      	movs	r3, #0
 8008522:	2602      	movs	r6, #2
 8008524:	2c00      	cmp	r4, #0
 8008526:	f040 80b2 	bne.w	800868e <_dtoa_r+0x4fe>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1d3      	bne.n	80084d6 <_dtoa_r+0x346>
 800852e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008530:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80b7 	beq.w	80086a8 <_dtoa_r+0x518>
 800853a:	4b86      	ldr	r3, [pc, #536]	@ (8008754 <_dtoa_r+0x5c4>)
 800853c:	2200      	movs	r2, #0
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f8 facb 	bl	8000adc <__aeabi_dcmplt>
 8008546:	2800      	cmp	r0, #0
 8008548:	f000 80ae 	beq.w	80086a8 <_dtoa_r+0x518>
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80aa 	beq.w	80086a8 <_dtoa_r+0x518>
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd37      	ble.n	80085ca <_dtoa_r+0x43a>
 800855a:	1e7b      	subs	r3, r7, #1
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	4620      	mov	r0, r4
 8008560:	4b7d      	ldr	r3, [pc, #500]	@ (8008758 <_dtoa_r+0x5c8>)
 8008562:	2200      	movs	r2, #0
 8008564:	4629      	mov	r1, r5
 8008566:	f7f8 f847 	bl	80005f8 <__aeabi_dmul>
 800856a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856e:	9c00      	ldr	r4, [sp, #0]
 8008570:	3601      	adds	r6, #1
 8008572:	4630      	mov	r0, r6
 8008574:	f7f7 ffd6 	bl	8000524 <__aeabi_i2d>
 8008578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800857c:	f7f8 f83c 	bl	80005f8 <__aeabi_dmul>
 8008580:	4b76      	ldr	r3, [pc, #472]	@ (800875c <_dtoa_r+0x5cc>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f7 fe82 	bl	800028c <__adddf3>
 8008588:	4605      	mov	r5, r0
 800858a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800858e:	2c00      	cmp	r4, #0
 8008590:	f040 808d 	bne.w	80086ae <_dtoa_r+0x51e>
 8008594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008598:	4b71      	ldr	r3, [pc, #452]	@ (8008760 <_dtoa_r+0x5d0>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 fe74 	bl	8000288 <__aeabi_dsub>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085a8:	462a      	mov	r2, r5
 80085aa:	4633      	mov	r3, r6
 80085ac:	f7f8 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f040 828b 	bne.w	8008acc <_dtoa_r+0x93c>
 80085b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ba:	462a      	mov	r2, r5
 80085bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085c0:	f7f8 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	f040 8128 	bne.w	800881a <_dtoa_r+0x68a>
 80085ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80085d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f2c0 815a 	blt.w	800888e <_dtoa_r+0x6fe>
 80085da:	2f0e      	cmp	r7, #14
 80085dc:	f300 8157 	bgt.w	800888e <_dtoa_r+0x6fe>
 80085e0:	4b5a      	ldr	r3, [pc, #360]	@ (800874c <_dtoa_r+0x5bc>)
 80085e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085e6:	ed93 7b00 	vldr	d7, [r3]
 80085ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	ed8d 7b00 	vstr	d7, [sp]
 80085f2:	da03      	bge.n	80085fc <_dtoa_r+0x46c>
 80085f4:	9b07      	ldr	r3, [sp, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f340 8101 	ble.w	80087fe <_dtoa_r+0x66e>
 80085fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008600:	4656      	mov	r6, sl
 8008602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f8 f91f 	bl	800084c <__aeabi_ddiv>
 800860e:	f7f8 faa3 	bl	8000b58 <__aeabi_d2iz>
 8008612:	4680      	mov	r8, r0
 8008614:	f7f7 ff86 	bl	8000524 <__aeabi_i2d>
 8008618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861c:	f7f7 ffec 	bl	80005f8 <__aeabi_dmul>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800862c:	f7f7 fe2c 	bl	8000288 <__aeabi_dsub>
 8008630:	f806 4b01 	strb.w	r4, [r6], #1
 8008634:	9d07      	ldr	r5, [sp, #28]
 8008636:	eba6 040a 	sub.w	r4, r6, sl
 800863a:	42a5      	cmp	r5, r4
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	f040 8117 	bne.w	8008872 <_dtoa_r+0x6e2>
 8008644:	f7f7 fe22 	bl	800028c <__adddf3>
 8008648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800864c:	4604      	mov	r4, r0
 800864e:	460d      	mov	r5, r1
 8008650:	f7f8 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f040 80f9 	bne.w	800884c <_dtoa_r+0x6bc>
 800865a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f8 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008666:	b118      	cbz	r0, 8008670 <_dtoa_r+0x4e0>
 8008668:	f018 0f01 	tst.w	r8, #1
 800866c:	f040 80ee 	bne.w	800884c <_dtoa_r+0x6bc>
 8008670:	4649      	mov	r1, r9
 8008672:	4658      	mov	r0, fp
 8008674:	f000 fc90 	bl	8008f98 <_Bfree>
 8008678:	2300      	movs	r3, #0
 800867a:	7033      	strb	r3, [r6, #0]
 800867c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800867e:	3701      	adds	r7, #1
 8008680:	601f      	str	r7, [r3, #0]
 8008682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 831d 	beq.w	8008cc4 <_dtoa_r+0xb34>
 800868a:	601e      	str	r6, [r3, #0]
 800868c:	e31a      	b.n	8008cc4 <_dtoa_r+0xb34>
 800868e:	07e2      	lsls	r2, r4, #31
 8008690:	d505      	bpl.n	800869e <_dtoa_r+0x50e>
 8008692:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008696:	f7f7 ffaf 	bl	80005f8 <__aeabi_dmul>
 800869a:	3601      	adds	r6, #1
 800869c:	2301      	movs	r3, #1
 800869e:	1064      	asrs	r4, r4, #1
 80086a0:	3508      	adds	r5, #8
 80086a2:	e73f      	b.n	8008524 <_dtoa_r+0x394>
 80086a4:	2602      	movs	r6, #2
 80086a6:	e742      	b.n	800852e <_dtoa_r+0x39e>
 80086a8:	9c07      	ldr	r4, [sp, #28]
 80086aa:	9704      	str	r7, [sp, #16]
 80086ac:	e761      	b.n	8008572 <_dtoa_r+0x3e2>
 80086ae:	4b27      	ldr	r3, [pc, #156]	@ (800874c <_dtoa_r+0x5bc>)
 80086b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ba:	4454      	add	r4, sl
 80086bc:	2900      	cmp	r1, #0
 80086be:	d053      	beq.n	8008768 <_dtoa_r+0x5d8>
 80086c0:	4928      	ldr	r1, [pc, #160]	@ (8008764 <_dtoa_r+0x5d4>)
 80086c2:	2000      	movs	r0, #0
 80086c4:	f7f8 f8c2 	bl	800084c <__aeabi_ddiv>
 80086c8:	4633      	mov	r3, r6
 80086ca:	462a      	mov	r2, r5
 80086cc:	f7f7 fddc 	bl	8000288 <__aeabi_dsub>
 80086d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086d4:	4656      	mov	r6, sl
 80086d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086da:	f7f8 fa3d 	bl	8000b58 <__aeabi_d2iz>
 80086de:	4605      	mov	r5, r0
 80086e0:	f7f7 ff20 	bl	8000524 <__aeabi_i2d>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ec:	f7f7 fdcc 	bl	8000288 <__aeabi_dsub>
 80086f0:	3530      	adds	r5, #48	@ 0x30
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086fa:	f806 5b01 	strb.w	r5, [r6], #1
 80086fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008702:	f7f8 f9eb 	bl	8000adc <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	d171      	bne.n	80087ee <_dtoa_r+0x65e>
 800870a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800870e:	4911      	ldr	r1, [pc, #68]	@ (8008754 <_dtoa_r+0x5c4>)
 8008710:	2000      	movs	r0, #0
 8008712:	f7f7 fdb9 	bl	8000288 <__aeabi_dsub>
 8008716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800871a:	f7f8 f9df 	bl	8000adc <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	f040 8095 	bne.w	800884e <_dtoa_r+0x6be>
 8008724:	42a6      	cmp	r6, r4
 8008726:	f43f af50 	beq.w	80085ca <_dtoa_r+0x43a>
 800872a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800872e:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <_dtoa_r+0x5c8>)
 8008730:	2200      	movs	r2, #0
 8008732:	f7f7 ff61 	bl	80005f8 <__aeabi_dmul>
 8008736:	4b08      	ldr	r3, [pc, #32]	@ (8008758 <_dtoa_r+0x5c8>)
 8008738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800873c:	2200      	movs	r2, #0
 800873e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008742:	f7f7 ff59 	bl	80005f8 <__aeabi_dmul>
 8008746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800874a:	e7c4      	b.n	80086d6 <_dtoa_r+0x546>
 800874c:	0800a670 	.word	0x0800a670
 8008750:	0800a648 	.word	0x0800a648
 8008754:	3ff00000 	.word	0x3ff00000
 8008758:	40240000 	.word	0x40240000
 800875c:	401c0000 	.word	0x401c0000
 8008760:	40140000 	.word	0x40140000
 8008764:	3fe00000 	.word	0x3fe00000
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	f7f7 ff44 	bl	80005f8 <__aeabi_dmul>
 8008770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008774:	9415      	str	r4, [sp, #84]	@ 0x54
 8008776:	4656      	mov	r6, sl
 8008778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877c:	f7f8 f9ec 	bl	8000b58 <__aeabi_d2iz>
 8008780:	4605      	mov	r5, r0
 8008782:	f7f7 fecf 	bl	8000524 <__aeabi_i2d>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878e:	f7f7 fd7b 	bl	8000288 <__aeabi_dsub>
 8008792:	3530      	adds	r5, #48	@ 0x30
 8008794:	f806 5b01 	strb.w	r5, [r6], #1
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	42a6      	cmp	r6, r4
 800879e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	d124      	bne.n	80087f2 <_dtoa_r+0x662>
 80087a8:	4bac      	ldr	r3, [pc, #688]	@ (8008a5c <_dtoa_r+0x8cc>)
 80087aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087ae:	f7f7 fd6d 	bl	800028c <__adddf3>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ba:	f7f8 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d145      	bne.n	800884e <_dtoa_r+0x6be>
 80087c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087c6:	49a5      	ldr	r1, [pc, #660]	@ (8008a5c <_dtoa_r+0x8cc>)
 80087c8:	2000      	movs	r0, #0
 80087ca:	f7f7 fd5d 	bl	8000288 <__aeabi_dsub>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d6:	f7f8 f981 	bl	8000adc <__aeabi_dcmplt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f43f aef5 	beq.w	80085ca <_dtoa_r+0x43a>
 80087e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80087e2:	1e73      	subs	r3, r6, #1
 80087e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80087e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087ea:	2b30      	cmp	r3, #48	@ 0x30
 80087ec:	d0f8      	beq.n	80087e0 <_dtoa_r+0x650>
 80087ee:	9f04      	ldr	r7, [sp, #16]
 80087f0:	e73e      	b.n	8008670 <_dtoa_r+0x4e0>
 80087f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008a60 <_dtoa_r+0x8d0>)
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fc:	e7bc      	b.n	8008778 <_dtoa_r+0x5e8>
 80087fe:	d10c      	bne.n	800881a <_dtoa_r+0x68a>
 8008800:	4b98      	ldr	r3, [pc, #608]	@ (8008a64 <_dtoa_r+0x8d4>)
 8008802:	2200      	movs	r2, #0
 8008804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008810:	f7f8 f978 	bl	8000b04 <__aeabi_dcmpge>
 8008814:	2800      	cmp	r0, #0
 8008816:	f000 8157 	beq.w	8008ac8 <_dtoa_r+0x938>
 800881a:	2400      	movs	r4, #0
 800881c:	4625      	mov	r5, r4
 800881e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008820:	43db      	mvns	r3, r3
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	4656      	mov	r6, sl
 8008826:	2700      	movs	r7, #0
 8008828:	4621      	mov	r1, r4
 800882a:	4658      	mov	r0, fp
 800882c:	f000 fbb4 	bl	8008f98 <_Bfree>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d0dc      	beq.n	80087ee <_dtoa_r+0x65e>
 8008834:	b12f      	cbz	r7, 8008842 <_dtoa_r+0x6b2>
 8008836:	42af      	cmp	r7, r5
 8008838:	d003      	beq.n	8008842 <_dtoa_r+0x6b2>
 800883a:	4639      	mov	r1, r7
 800883c:	4658      	mov	r0, fp
 800883e:	f000 fbab 	bl	8008f98 <_Bfree>
 8008842:	4629      	mov	r1, r5
 8008844:	4658      	mov	r0, fp
 8008846:	f000 fba7 	bl	8008f98 <_Bfree>
 800884a:	e7d0      	b.n	80087ee <_dtoa_r+0x65e>
 800884c:	9704      	str	r7, [sp, #16]
 800884e:	4633      	mov	r3, r6
 8008850:	461e      	mov	r6, r3
 8008852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008856:	2a39      	cmp	r2, #57	@ 0x39
 8008858:	d107      	bne.n	800886a <_dtoa_r+0x6da>
 800885a:	459a      	cmp	sl, r3
 800885c:	d1f8      	bne.n	8008850 <_dtoa_r+0x6c0>
 800885e:	9a04      	ldr	r2, [sp, #16]
 8008860:	3201      	adds	r2, #1
 8008862:	9204      	str	r2, [sp, #16]
 8008864:	2230      	movs	r2, #48	@ 0x30
 8008866:	f88a 2000 	strb.w	r2, [sl]
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	3201      	adds	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e7bd      	b.n	80087ee <_dtoa_r+0x65e>
 8008872:	4b7b      	ldr	r3, [pc, #492]	@ (8008a60 <_dtoa_r+0x8d0>)
 8008874:	2200      	movs	r2, #0
 8008876:	f7f7 febf 	bl	80005f8 <__aeabi_dmul>
 800887a:	2200      	movs	r2, #0
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	460d      	mov	r5, r1
 8008882:	f7f8 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f aebb 	beq.w	8008602 <_dtoa_r+0x472>
 800888c:	e6f0      	b.n	8008670 <_dtoa_r+0x4e0>
 800888e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008890:	2a00      	cmp	r2, #0
 8008892:	f000 80db 	beq.w	8008a4c <_dtoa_r+0x8bc>
 8008896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008898:	2a01      	cmp	r2, #1
 800889a:	f300 80bf 	bgt.w	8008a1c <_dtoa_r+0x88c>
 800889e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	f000 80b7 	beq.w	8008a14 <_dtoa_r+0x884>
 80088a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088ac:	4646      	mov	r6, r8
 80088ae:	9a08      	ldr	r2, [sp, #32]
 80088b0:	2101      	movs	r1, #1
 80088b2:	441a      	add	r2, r3
 80088b4:	4658      	mov	r0, fp
 80088b6:	4498      	add	r8, r3
 80088b8:	9208      	str	r2, [sp, #32]
 80088ba:	f000 fc21 	bl	8009100 <__i2b>
 80088be:	4605      	mov	r5, r0
 80088c0:	b15e      	cbz	r6, 80088da <_dtoa_r+0x74a>
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd08      	ble.n	80088da <_dtoa_r+0x74a>
 80088c8:	42b3      	cmp	r3, r6
 80088ca:	9a08      	ldr	r2, [sp, #32]
 80088cc:	bfa8      	it	ge
 80088ce:	4633      	movge	r3, r6
 80088d0:	eba8 0803 	sub.w	r8, r8, r3
 80088d4:	1af6      	subs	r6, r6, r3
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	9308      	str	r3, [sp, #32]
 80088da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088dc:	b1f3      	cbz	r3, 800891c <_dtoa_r+0x78c>
 80088de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80b7 	beq.w	8008a54 <_dtoa_r+0x8c4>
 80088e6:	b18c      	cbz	r4, 800890c <_dtoa_r+0x77c>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4622      	mov	r2, r4
 80088ec:	4658      	mov	r0, fp
 80088ee:	f000 fcc7 	bl	8009280 <__pow5mult>
 80088f2:	464a      	mov	r2, r9
 80088f4:	4601      	mov	r1, r0
 80088f6:	4605      	mov	r5, r0
 80088f8:	4658      	mov	r0, fp
 80088fa:	f000 fc17 	bl	800912c <__multiply>
 80088fe:	4649      	mov	r1, r9
 8008900:	9004      	str	r0, [sp, #16]
 8008902:	4658      	mov	r0, fp
 8008904:	f000 fb48 	bl	8008f98 <_Bfree>
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	4699      	mov	r9, r3
 800890c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890e:	1b1a      	subs	r2, r3, r4
 8008910:	d004      	beq.n	800891c <_dtoa_r+0x78c>
 8008912:	4649      	mov	r1, r9
 8008914:	4658      	mov	r0, fp
 8008916:	f000 fcb3 	bl	8009280 <__pow5mult>
 800891a:	4681      	mov	r9, r0
 800891c:	2101      	movs	r1, #1
 800891e:	4658      	mov	r0, fp
 8008920:	f000 fbee 	bl	8009100 <__i2b>
 8008924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008926:	4604      	mov	r4, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 81cf 	beq.w	8008ccc <_dtoa_r+0xb3c>
 800892e:	461a      	mov	r2, r3
 8008930:	4601      	mov	r1, r0
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fca4 	bl	8009280 <__pow5mult>
 8008938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893a:	2b01      	cmp	r3, #1
 800893c:	4604      	mov	r4, r0
 800893e:	f300 8095 	bgt.w	8008a6c <_dtoa_r+0x8dc>
 8008942:	9b02      	ldr	r3, [sp, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 8087 	bne.w	8008a58 <_dtoa_r+0x8c8>
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 8089 	bne.w	8008a68 <_dtoa_r+0x8d8>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800895c:	0d1b      	lsrs	r3, r3, #20
 800895e:	051b      	lsls	r3, r3, #20
 8008960:	b12b      	cbz	r3, 800896e <_dtoa_r+0x7de>
 8008962:	9b08      	ldr	r3, [sp, #32]
 8008964:	3301      	adds	r3, #1
 8008966:	9308      	str	r3, [sp, #32]
 8008968:	f108 0801 	add.w	r8, r8, #1
 800896c:	2301      	movs	r3, #1
 800896e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 81b0 	beq.w	8008cd8 <_dtoa_r+0xb48>
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800897e:	6918      	ldr	r0, [r3, #16]
 8008980:	f000 fb72 	bl	8009068 <__hi0bits>
 8008984:	f1c0 0020 	rsb	r0, r0, #32
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	4418      	add	r0, r3
 800898c:	f010 001f 	ands.w	r0, r0, #31
 8008990:	d077      	beq.n	8008a82 <_dtoa_r+0x8f2>
 8008992:	f1c0 0320 	rsb	r3, r0, #32
 8008996:	2b04      	cmp	r3, #4
 8008998:	dd6b      	ble.n	8008a72 <_dtoa_r+0x8e2>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	f1c0 001c 	rsb	r0, r0, #28
 80089a0:	4403      	add	r3, r0
 80089a2:	4480      	add	r8, r0
 80089a4:	4406      	add	r6, r0
 80089a6:	9308      	str	r3, [sp, #32]
 80089a8:	f1b8 0f00 	cmp.w	r8, #0
 80089ac:	dd05      	ble.n	80089ba <_dtoa_r+0x82a>
 80089ae:	4649      	mov	r1, r9
 80089b0:	4642      	mov	r2, r8
 80089b2:	4658      	mov	r0, fp
 80089b4:	f000 fcbe 	bl	8009334 <__lshift>
 80089b8:	4681      	mov	r9, r0
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd05      	ble.n	80089cc <_dtoa_r+0x83c>
 80089c0:	4621      	mov	r1, r4
 80089c2:	461a      	mov	r2, r3
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fcb5 	bl	8009334 <__lshift>
 80089ca:	4604      	mov	r4, r0
 80089cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d059      	beq.n	8008a86 <_dtoa_r+0x8f6>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4648      	mov	r0, r9
 80089d6:	f000 fd19 	bl	800940c <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	da53      	bge.n	8008a86 <_dtoa_r+0x8f6>
 80089de:	1e7b      	subs	r3, r7, #1
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	4649      	mov	r1, r9
 80089e4:	2300      	movs	r3, #0
 80089e6:	220a      	movs	r2, #10
 80089e8:	4658      	mov	r0, fp
 80089ea:	f000 faf7 	bl	8008fdc <__multadd>
 80089ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f0:	4681      	mov	r9, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 8172 	beq.w	8008cdc <_dtoa_r+0xb4c>
 80089f8:	2300      	movs	r3, #0
 80089fa:	4629      	mov	r1, r5
 80089fc:	220a      	movs	r2, #10
 80089fe:	4658      	mov	r0, fp
 8008a00:	f000 faec 	bl	8008fdc <__multadd>
 8008a04:	9b00      	ldr	r3, [sp, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	4605      	mov	r5, r0
 8008a0a:	dc67      	bgt.n	8008adc <_dtoa_r+0x94c>
 8008a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc41      	bgt.n	8008a96 <_dtoa_r+0x906>
 8008a12:	e063      	b.n	8008adc <_dtoa_r+0x94c>
 8008a14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a1a:	e746      	b.n	80088aa <_dtoa_r+0x71a>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	1e5c      	subs	r4, r3, #1
 8008a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	bfbf      	itttt	lt
 8008a26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a2c:	1ae3      	sublt	r3, r4, r3
 8008a2e:	bfb4      	ite	lt
 8008a30:	18d2      	addlt	r2, r2, r3
 8008a32:	1b1c      	subge	r4, r3, r4
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	bfbc      	itt	lt
 8008a38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a3a:	2400      	movlt	r4, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bfb5      	itete	lt
 8008a40:	eba8 0603 	sublt.w	r6, r8, r3
 8008a44:	9b07      	ldrge	r3, [sp, #28]
 8008a46:	2300      	movlt	r3, #0
 8008a48:	4646      	movge	r6, r8
 8008a4a:	e730      	b.n	80088ae <_dtoa_r+0x71e>
 8008a4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a50:	4646      	mov	r6, r8
 8008a52:	e735      	b.n	80088c0 <_dtoa_r+0x730>
 8008a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a56:	e75c      	b.n	8008912 <_dtoa_r+0x782>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e788      	b.n	800896e <_dtoa_r+0x7de>
 8008a5c:	3fe00000 	.word	0x3fe00000
 8008a60:	40240000 	.word	0x40240000
 8008a64:	40140000 	.word	0x40140000
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	e780      	b.n	800896e <_dtoa_r+0x7de>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a70:	e782      	b.n	8008978 <_dtoa_r+0x7e8>
 8008a72:	d099      	beq.n	80089a8 <_dtoa_r+0x818>
 8008a74:	9a08      	ldr	r2, [sp, #32]
 8008a76:	331c      	adds	r3, #28
 8008a78:	441a      	add	r2, r3
 8008a7a:	4498      	add	r8, r3
 8008a7c:	441e      	add	r6, r3
 8008a7e:	9208      	str	r2, [sp, #32]
 8008a80:	e792      	b.n	80089a8 <_dtoa_r+0x818>
 8008a82:	4603      	mov	r3, r0
 8008a84:	e7f6      	b.n	8008a74 <_dtoa_r+0x8e4>
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	9704      	str	r7, [sp, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	dc20      	bgt.n	8008ad0 <_dtoa_r+0x940>
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	dd1e      	ble.n	8008ad4 <_dtoa_r+0x944>
 8008a96:	9b00      	ldr	r3, [sp, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f47f aec0 	bne.w	800881e <_dtoa_r+0x68e>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	2205      	movs	r2, #5
 8008aa2:	4658      	mov	r0, fp
 8008aa4:	f000 fa9a 	bl	8008fdc <__multadd>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4648      	mov	r0, r9
 8008aae:	f000 fcad 	bl	800940c <__mcmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f77f aeb3 	ble.w	800881e <_dtoa_r+0x68e>
 8008ab8:	4656      	mov	r6, sl
 8008aba:	2331      	movs	r3, #49	@ 0x31
 8008abc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	e6ae      	b.n	8008826 <_dtoa_r+0x696>
 8008ac8:	9c07      	ldr	r4, [sp, #28]
 8008aca:	9704      	str	r7, [sp, #16]
 8008acc:	4625      	mov	r5, r4
 8008ace:	e7f3      	b.n	8008ab8 <_dtoa_r+0x928>
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8104 	beq.w	8008ce4 <_dtoa_r+0xb54>
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	dd05      	ble.n	8008aec <_dtoa_r+0x95c>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fc25 	bl	8009334 <__lshift>
 8008aea:	4605      	mov	r5, r0
 8008aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d05a      	beq.n	8008ba8 <_dtoa_r+0xa18>
 8008af2:	6869      	ldr	r1, [r5, #4]
 8008af4:	4658      	mov	r0, fp
 8008af6:	f000 fa0f 	bl	8008f18 <_Balloc>
 8008afa:	4606      	mov	r6, r0
 8008afc:	b928      	cbnz	r0, 8008b0a <_dtoa_r+0x97a>
 8008afe:	4b84      	ldr	r3, [pc, #528]	@ (8008d10 <_dtoa_r+0xb80>)
 8008b00:	4602      	mov	r2, r0
 8008b02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b06:	f7ff bb5a 	b.w	80081be <_dtoa_r+0x2e>
 8008b0a:	692a      	ldr	r2, [r5, #16]
 8008b0c:	3202      	adds	r2, #2
 8008b0e:	0092      	lsls	r2, r2, #2
 8008b10:	f105 010c 	add.w	r1, r5, #12
 8008b14:	300c      	adds	r0, #12
 8008b16:	f7ff faa4 	bl	8008062 <memcpy>
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f000 fc08 	bl	8009334 <__lshift>
 8008b24:	f10a 0301 	add.w	r3, sl, #1
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	9b00      	ldr	r3, [sp, #0]
 8008b2c:	4453      	add	r3, sl
 8008b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	462f      	mov	r7, r5
 8008b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	4621      	mov	r1, r4
 8008b40:	3b01      	subs	r3, #1
 8008b42:	4648      	mov	r0, r9
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	f7ff fa9a 	bl	800807e <quorem>
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	9002      	str	r0, [sp, #8]
 8008b4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b52:	4648      	mov	r0, r9
 8008b54:	f000 fc5a 	bl	800940c <__mcmp>
 8008b58:	462a      	mov	r2, r5
 8008b5a:	9008      	str	r0, [sp, #32]
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4658      	mov	r0, fp
 8008b60:	f000 fc70 	bl	8009444 <__mdiff>
 8008b64:	68c2      	ldr	r2, [r0, #12]
 8008b66:	4606      	mov	r6, r0
 8008b68:	bb02      	cbnz	r2, 8008bac <_dtoa_r+0xa1c>
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4648      	mov	r0, r9
 8008b6e:	f000 fc4d 	bl	800940c <__mcmp>
 8008b72:	4602      	mov	r2, r0
 8008b74:	4631      	mov	r1, r6
 8008b76:	4658      	mov	r0, fp
 8008b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b7a:	f000 fa0d 	bl	8008f98 <_Bfree>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b82:	9e07      	ldr	r6, [sp, #28]
 8008b84:	ea43 0102 	orr.w	r1, r3, r2
 8008b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b8a:	4319      	orrs	r1, r3
 8008b8c:	d110      	bne.n	8008bb0 <_dtoa_r+0xa20>
 8008b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b92:	d029      	beq.n	8008be8 <_dtoa_r+0xa58>
 8008b94:	9b08      	ldr	r3, [sp, #32]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dd02      	ble.n	8008ba0 <_dtoa_r+0xa10>
 8008b9a:	9b02      	ldr	r3, [sp, #8]
 8008b9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	f883 8000 	strb.w	r8, [r3]
 8008ba6:	e63f      	b.n	8008828 <_dtoa_r+0x698>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	e7bb      	b.n	8008b24 <_dtoa_r+0x994>
 8008bac:	2201      	movs	r2, #1
 8008bae:	e7e1      	b.n	8008b74 <_dtoa_r+0x9e4>
 8008bb0:	9b08      	ldr	r3, [sp, #32]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	db04      	blt.n	8008bc0 <_dtoa_r+0xa30>
 8008bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	d120      	bne.n	8008c02 <_dtoa_r+0xa72>
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	dded      	ble.n	8008ba0 <_dtoa_r+0xa10>
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f000 fbb3 	bl	8009334 <__lshift>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4681      	mov	r9, r0
 8008bd2:	f000 fc1b 	bl	800940c <__mcmp>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	dc03      	bgt.n	8008be2 <_dtoa_r+0xa52>
 8008bda:	d1e1      	bne.n	8008ba0 <_dtoa_r+0xa10>
 8008bdc:	f018 0f01 	tst.w	r8, #1
 8008be0:	d0de      	beq.n	8008ba0 <_dtoa_r+0xa10>
 8008be2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008be6:	d1d8      	bne.n	8008b9a <_dtoa_r+0xa0a>
 8008be8:	9a00      	ldr	r2, [sp, #0]
 8008bea:	2339      	movs	r3, #57	@ 0x39
 8008bec:	7013      	strb	r3, [r2, #0]
 8008bee:	4633      	mov	r3, r6
 8008bf0:	461e      	mov	r6, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bf8:	2a39      	cmp	r2, #57	@ 0x39
 8008bfa:	d052      	beq.n	8008ca2 <_dtoa_r+0xb12>
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e612      	b.n	8008828 <_dtoa_r+0x698>
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	dd07      	ble.n	8008c16 <_dtoa_r+0xa86>
 8008c06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c0a:	d0ed      	beq.n	8008be8 <_dtoa_r+0xa58>
 8008c0c:	9a00      	ldr	r2, [sp, #0]
 8008c0e:	f108 0301 	add.w	r3, r8, #1
 8008c12:	7013      	strb	r3, [r2, #0]
 8008c14:	e608      	b.n	8008828 <_dtoa_r+0x698>
 8008c16:	9b07      	ldr	r3, [sp, #28]
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d028      	beq.n	8008c76 <_dtoa_r+0xae6>
 8008c24:	4649      	mov	r1, r9
 8008c26:	2300      	movs	r3, #0
 8008c28:	220a      	movs	r2, #10
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	f000 f9d6 	bl	8008fdc <__multadd>
 8008c30:	42af      	cmp	r7, r5
 8008c32:	4681      	mov	r9, r0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	f04f 020a 	mov.w	r2, #10
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4658      	mov	r0, fp
 8008c40:	d107      	bne.n	8008c52 <_dtoa_r+0xac2>
 8008c42:	f000 f9cb 	bl	8008fdc <__multadd>
 8008c46:	4607      	mov	r7, r0
 8008c48:	4605      	mov	r5, r0
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	e774      	b.n	8008b3c <_dtoa_r+0x9ac>
 8008c52:	f000 f9c3 	bl	8008fdc <__multadd>
 8008c56:	4629      	mov	r1, r5
 8008c58:	4607      	mov	r7, r0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	4658      	mov	r0, fp
 8008c60:	f000 f9bc 	bl	8008fdc <__multadd>
 8008c64:	4605      	mov	r5, r0
 8008c66:	e7f0      	b.n	8008c4a <_dtoa_r+0xaba>
 8008c68:	9b00      	ldr	r3, [sp, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bfcc      	ite	gt
 8008c6e:	461e      	movgt	r6, r3
 8008c70:	2601      	movle	r6, #1
 8008c72:	4456      	add	r6, sl
 8008c74:	2700      	movs	r7, #0
 8008c76:	4649      	mov	r1, r9
 8008c78:	2201      	movs	r2, #1
 8008c7a:	4658      	mov	r0, fp
 8008c7c:	f000 fb5a 	bl	8009334 <__lshift>
 8008c80:	4621      	mov	r1, r4
 8008c82:	4681      	mov	r9, r0
 8008c84:	f000 fbc2 	bl	800940c <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dcb0      	bgt.n	8008bee <_dtoa_r+0xa5e>
 8008c8c:	d102      	bne.n	8008c94 <_dtoa_r+0xb04>
 8008c8e:	f018 0f01 	tst.w	r8, #1
 8008c92:	d1ac      	bne.n	8008bee <_dtoa_r+0xa5e>
 8008c94:	4633      	mov	r3, r6
 8008c96:	461e      	mov	r6, r3
 8008c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c9c:	2a30      	cmp	r2, #48	@ 0x30
 8008c9e:	d0fa      	beq.n	8008c96 <_dtoa_r+0xb06>
 8008ca0:	e5c2      	b.n	8008828 <_dtoa_r+0x698>
 8008ca2:	459a      	cmp	sl, r3
 8008ca4:	d1a4      	bne.n	8008bf0 <_dtoa_r+0xa60>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	9304      	str	r3, [sp, #16]
 8008cac:	2331      	movs	r3, #49	@ 0x31
 8008cae:	f88a 3000 	strb.w	r3, [sl]
 8008cb2:	e5b9      	b.n	8008828 <_dtoa_r+0x698>
 8008cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d14 <_dtoa_r+0xb84>
 8008cba:	b11b      	cbz	r3, 8008cc4 <_dtoa_r+0xb34>
 8008cbc:	f10a 0308 	add.w	r3, sl, #8
 8008cc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	b019      	add	sp, #100	@ 0x64
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	f77f ae37 	ble.w	8008942 <_dtoa_r+0x7b2>
 8008cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cd8:	2001      	movs	r0, #1
 8008cda:	e655      	b.n	8008988 <_dtoa_r+0x7f8>
 8008cdc:	9b00      	ldr	r3, [sp, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f77f aed6 	ble.w	8008a90 <_dtoa_r+0x900>
 8008ce4:	4656      	mov	r6, sl
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4648      	mov	r0, r9
 8008cea:	f7ff f9c8 	bl	800807e <quorem>
 8008cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cf2:	f806 8b01 	strb.w	r8, [r6], #1
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	eba6 020a 	sub.w	r2, r6, sl
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	ddb3      	ble.n	8008c68 <_dtoa_r+0xad8>
 8008d00:	4649      	mov	r1, r9
 8008d02:	2300      	movs	r3, #0
 8008d04:	220a      	movs	r2, #10
 8008d06:	4658      	mov	r0, fp
 8008d08:	f000 f968 	bl	8008fdc <__multadd>
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	e7ea      	b.n	8008ce6 <_dtoa_r+0xb56>
 8008d10:	0800a5ce 	.word	0x0800a5ce
 8008d14:	0800a552 	.word	0x0800a552

08008d18 <_free_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	d041      	beq.n	8008da4 <_free_r+0x8c>
 8008d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d24:	1f0c      	subs	r4, r1, #4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bfb8      	it	lt
 8008d2a:	18e4      	addlt	r4, r4, r3
 8008d2c:	f000 f8e8 	bl	8008f00 <__malloc_lock>
 8008d30:	4a1d      	ldr	r2, [pc, #116]	@ (8008da8 <_free_r+0x90>)
 8008d32:	6813      	ldr	r3, [r2, #0]
 8008d34:	b933      	cbnz	r3, 8008d44 <_free_r+0x2c>
 8008d36:	6063      	str	r3, [r4, #4]
 8008d38:	6014      	str	r4, [r2, #0]
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d40:	f000 b8e4 	b.w	8008f0c <__malloc_unlock>
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d908      	bls.n	8008d5a <_free_r+0x42>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	1821      	adds	r1, r4, r0
 8008d4c:	428b      	cmp	r3, r1
 8008d4e:	bf01      	itttt	eq
 8008d50:	6819      	ldreq	r1, [r3, #0]
 8008d52:	685b      	ldreq	r3, [r3, #4]
 8008d54:	1809      	addeq	r1, r1, r0
 8008d56:	6021      	streq	r1, [r4, #0]
 8008d58:	e7ed      	b.n	8008d36 <_free_r+0x1e>
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	b10b      	cbz	r3, 8008d64 <_free_r+0x4c>
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	d9fa      	bls.n	8008d5a <_free_r+0x42>
 8008d64:	6811      	ldr	r1, [r2, #0]
 8008d66:	1850      	adds	r0, r2, r1
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d10b      	bne.n	8008d84 <_free_r+0x6c>
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	4401      	add	r1, r0
 8008d70:	1850      	adds	r0, r2, r1
 8008d72:	4283      	cmp	r3, r0
 8008d74:	6011      	str	r1, [r2, #0]
 8008d76:	d1e0      	bne.n	8008d3a <_free_r+0x22>
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	6053      	str	r3, [r2, #4]
 8008d7e:	4408      	add	r0, r1
 8008d80:	6010      	str	r0, [r2, #0]
 8008d82:	e7da      	b.n	8008d3a <_free_r+0x22>
 8008d84:	d902      	bls.n	8008d8c <_free_r+0x74>
 8008d86:	230c      	movs	r3, #12
 8008d88:	602b      	str	r3, [r5, #0]
 8008d8a:	e7d6      	b.n	8008d3a <_free_r+0x22>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	1821      	adds	r1, r4, r0
 8008d90:	428b      	cmp	r3, r1
 8008d92:	bf04      	itt	eq
 8008d94:	6819      	ldreq	r1, [r3, #0]
 8008d96:	685b      	ldreq	r3, [r3, #4]
 8008d98:	6063      	str	r3, [r4, #4]
 8008d9a:	bf04      	itt	eq
 8008d9c:	1809      	addeq	r1, r1, r0
 8008d9e:	6021      	streq	r1, [r4, #0]
 8008da0:	6054      	str	r4, [r2, #4]
 8008da2:	e7ca      	b.n	8008d3a <_free_r+0x22>
 8008da4:	bd38      	pop	{r3, r4, r5, pc}
 8008da6:	bf00      	nop
 8008da8:	200007cc 	.word	0x200007cc

08008dac <malloc>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	@ (8008db8 <malloc+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 b825 	b.w	8008e00 <_malloc_r>
 8008db6:	bf00      	nop
 8008db8:	2000002c 	.word	0x2000002c

08008dbc <sbrk_aligned>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8008dfc <sbrk_aligned+0x40>)
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	6831      	ldr	r1, [r6, #0]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	b911      	cbnz	r1, 8008dce <sbrk_aligned+0x12>
 8008dc8:	f000 fe46 	bl	8009a58 <_sbrk_r>
 8008dcc:	6030      	str	r0, [r6, #0]
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 fe41 	bl	8009a58 <_sbrk_r>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d103      	bne.n	8008de2 <sbrk_aligned+0x26>
 8008dda:	f04f 34ff 	mov.w	r4, #4294967295
 8008dde:	4620      	mov	r0, r4
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	1cc4      	adds	r4, r0, #3
 8008de4:	f024 0403 	bic.w	r4, r4, #3
 8008de8:	42a0      	cmp	r0, r4
 8008dea:	d0f8      	beq.n	8008dde <sbrk_aligned+0x22>
 8008dec:	1a21      	subs	r1, r4, r0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 fe32 	bl	8009a58 <_sbrk_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d1f2      	bne.n	8008dde <sbrk_aligned+0x22>
 8008df8:	e7ef      	b.n	8008dda <sbrk_aligned+0x1e>
 8008dfa:	bf00      	nop
 8008dfc:	200007c8 	.word	0x200007c8

08008e00 <_malloc_r>:
 8008e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	1ccd      	adds	r5, r1, #3
 8008e06:	f025 0503 	bic.w	r5, r5, #3
 8008e0a:	3508      	adds	r5, #8
 8008e0c:	2d0c      	cmp	r5, #12
 8008e0e:	bf38      	it	cc
 8008e10:	250c      	movcc	r5, #12
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	4606      	mov	r6, r0
 8008e16:	db01      	blt.n	8008e1c <_malloc_r+0x1c>
 8008e18:	42a9      	cmp	r1, r5
 8008e1a:	d904      	bls.n	8008e26 <_malloc_r+0x26>
 8008e1c:	230c      	movs	r3, #12
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	2000      	movs	r0, #0
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008efc <_malloc_r+0xfc>
 8008e2a:	f000 f869 	bl	8008f00 <__malloc_lock>
 8008e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e32:	461c      	mov	r4, r3
 8008e34:	bb44      	cbnz	r4, 8008e88 <_malloc_r+0x88>
 8008e36:	4629      	mov	r1, r5
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7ff ffbf 	bl	8008dbc <sbrk_aligned>
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	4604      	mov	r4, r0
 8008e42:	d158      	bne.n	8008ef6 <_malloc_r+0xf6>
 8008e44:	f8d8 4000 	ldr.w	r4, [r8]
 8008e48:	4627      	mov	r7, r4
 8008e4a:	2f00      	cmp	r7, #0
 8008e4c:	d143      	bne.n	8008ed6 <_malloc_r+0xd6>
 8008e4e:	2c00      	cmp	r4, #0
 8008e50:	d04b      	beq.n	8008eea <_malloc_r+0xea>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	4639      	mov	r1, r7
 8008e56:	4630      	mov	r0, r6
 8008e58:	eb04 0903 	add.w	r9, r4, r3
 8008e5c:	f000 fdfc 	bl	8009a58 <_sbrk_r>
 8008e60:	4581      	cmp	r9, r0
 8008e62:	d142      	bne.n	8008eea <_malloc_r+0xea>
 8008e64:	6821      	ldr	r1, [r4, #0]
 8008e66:	1a6d      	subs	r5, r5, r1
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ffa6 	bl	8008dbc <sbrk_aligned>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d03a      	beq.n	8008eea <_malloc_r+0xea>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	442b      	add	r3, r5
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	bb62      	cbnz	r2, 8008edc <_malloc_r+0xdc>
 8008e82:	f8c8 7000 	str.w	r7, [r8]
 8008e86:	e00f      	b.n	8008ea8 <_malloc_r+0xa8>
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	1b52      	subs	r2, r2, r5
 8008e8c:	d420      	bmi.n	8008ed0 <_malloc_r+0xd0>
 8008e8e:	2a0b      	cmp	r2, #11
 8008e90:	d917      	bls.n	8008ec2 <_malloc_r+0xc2>
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	6025      	str	r5, [r4, #0]
 8008e98:	bf18      	it	ne
 8008e9a:	6059      	strne	r1, [r3, #4]
 8008e9c:	6863      	ldr	r3, [r4, #4]
 8008e9e:	bf08      	it	eq
 8008ea0:	f8c8 1000 	streq.w	r1, [r8]
 8008ea4:	5162      	str	r2, [r4, r5]
 8008ea6:	604b      	str	r3, [r1, #4]
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 f82f 	bl	8008f0c <__malloc_unlock>
 8008eae:	f104 000b 	add.w	r0, r4, #11
 8008eb2:	1d23      	adds	r3, r4, #4
 8008eb4:	f020 0007 	bic.w	r0, r0, #7
 8008eb8:	1ac2      	subs	r2, r0, r3
 8008eba:	bf1c      	itt	ne
 8008ebc:	1a1b      	subne	r3, r3, r0
 8008ebe:	50a3      	strne	r3, [r4, r2]
 8008ec0:	e7af      	b.n	8008e22 <_malloc_r+0x22>
 8008ec2:	6862      	ldr	r2, [r4, #4]
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	bf0c      	ite	eq
 8008ec8:	f8c8 2000 	streq.w	r2, [r8]
 8008ecc:	605a      	strne	r2, [r3, #4]
 8008ece:	e7eb      	b.n	8008ea8 <_malloc_r+0xa8>
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	6864      	ldr	r4, [r4, #4]
 8008ed4:	e7ae      	b.n	8008e34 <_malloc_r+0x34>
 8008ed6:	463c      	mov	r4, r7
 8008ed8:	687f      	ldr	r7, [r7, #4]
 8008eda:	e7b6      	b.n	8008e4a <_malloc_r+0x4a>
 8008edc:	461a      	mov	r2, r3
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d1fb      	bne.n	8008edc <_malloc_r+0xdc>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	6053      	str	r3, [r2, #4]
 8008ee8:	e7de      	b.n	8008ea8 <_malloc_r+0xa8>
 8008eea:	230c      	movs	r3, #12
 8008eec:	6033      	str	r3, [r6, #0]
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f000 f80c 	bl	8008f0c <__malloc_unlock>
 8008ef4:	e794      	b.n	8008e20 <_malloc_r+0x20>
 8008ef6:	6005      	str	r5, [r0, #0]
 8008ef8:	e7d6      	b.n	8008ea8 <_malloc_r+0xa8>
 8008efa:	bf00      	nop
 8008efc:	200007cc 	.word	0x200007cc

08008f00 <__malloc_lock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	@ (8008f08 <__malloc_lock+0x8>)
 8008f02:	f7ff b8ac 	b.w	800805e <__retarget_lock_acquire_recursive>
 8008f06:	bf00      	nop
 8008f08:	200007c4 	.word	0x200007c4

08008f0c <__malloc_unlock>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	@ (8008f14 <__malloc_unlock+0x8>)
 8008f0e:	f7ff b8a7 	b.w	8008060 <__retarget_lock_release_recursive>
 8008f12:	bf00      	nop
 8008f14:	200007c4 	.word	0x200007c4

08008f18 <_Balloc>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	69c6      	ldr	r6, [r0, #28]
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	b976      	cbnz	r6, 8008f40 <_Balloc+0x28>
 8008f22:	2010      	movs	r0, #16
 8008f24:	f7ff ff42 	bl	8008dac <malloc>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	61e0      	str	r0, [r4, #28]
 8008f2c:	b920      	cbnz	r0, 8008f38 <_Balloc+0x20>
 8008f2e:	4b18      	ldr	r3, [pc, #96]	@ (8008f90 <_Balloc+0x78>)
 8008f30:	4818      	ldr	r0, [pc, #96]	@ (8008f94 <_Balloc+0x7c>)
 8008f32:	216b      	movs	r1, #107	@ 0x6b
 8008f34:	f000 fda0 	bl	8009a78 <__assert_func>
 8008f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f3c:	6006      	str	r6, [r0, #0]
 8008f3e:	60c6      	str	r6, [r0, #12]
 8008f40:	69e6      	ldr	r6, [r4, #28]
 8008f42:	68f3      	ldr	r3, [r6, #12]
 8008f44:	b183      	cbz	r3, 8008f68 <_Balloc+0x50>
 8008f46:	69e3      	ldr	r3, [r4, #28]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f4e:	b9b8      	cbnz	r0, 8008f80 <_Balloc+0x68>
 8008f50:	2101      	movs	r1, #1
 8008f52:	fa01 f605 	lsl.w	r6, r1, r5
 8008f56:	1d72      	adds	r2, r6, #5
 8008f58:	0092      	lsls	r2, r2, #2
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fdaa 	bl	8009ab4 <_calloc_r>
 8008f60:	b160      	cbz	r0, 8008f7c <_Balloc+0x64>
 8008f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f66:	e00e      	b.n	8008f86 <_Balloc+0x6e>
 8008f68:	2221      	movs	r2, #33	@ 0x21
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fda1 	bl	8009ab4 <_calloc_r>
 8008f72:	69e3      	ldr	r3, [r4, #28]
 8008f74:	60f0      	str	r0, [r6, #12]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e4      	bne.n	8008f46 <_Balloc+0x2e>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	6802      	ldr	r2, [r0, #0]
 8008f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f86:	2300      	movs	r3, #0
 8008f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f8c:	e7f7      	b.n	8008f7e <_Balloc+0x66>
 8008f8e:	bf00      	nop
 8008f90:	0800a55f 	.word	0x0800a55f
 8008f94:	0800a5df 	.word	0x0800a5df

08008f98 <_Bfree>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	69c6      	ldr	r6, [r0, #28]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	b976      	cbnz	r6, 8008fc0 <_Bfree+0x28>
 8008fa2:	2010      	movs	r0, #16
 8008fa4:	f7ff ff02 	bl	8008dac <malloc>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	61e8      	str	r0, [r5, #28]
 8008fac:	b920      	cbnz	r0, 8008fb8 <_Bfree+0x20>
 8008fae:	4b09      	ldr	r3, [pc, #36]	@ (8008fd4 <_Bfree+0x3c>)
 8008fb0:	4809      	ldr	r0, [pc, #36]	@ (8008fd8 <_Bfree+0x40>)
 8008fb2:	218f      	movs	r1, #143	@ 0x8f
 8008fb4:	f000 fd60 	bl	8009a78 <__assert_func>
 8008fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fbc:	6006      	str	r6, [r0, #0]
 8008fbe:	60c6      	str	r6, [r0, #12]
 8008fc0:	b13c      	cbz	r4, 8008fd2 <_Bfree+0x3a>
 8008fc2:	69eb      	ldr	r3, [r5, #28]
 8008fc4:	6862      	ldr	r2, [r4, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fcc:	6021      	str	r1, [r4, #0]
 8008fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	0800a55f 	.word	0x0800a55f
 8008fd8:	0800a5df 	.word	0x0800a5df

08008fdc <__multadd>:
 8008fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe0:	690d      	ldr	r5, [r1, #16]
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	461e      	mov	r6, r3
 8008fe8:	f101 0c14 	add.w	ip, r1, #20
 8008fec:	2000      	movs	r0, #0
 8008fee:	f8dc 3000 	ldr.w	r3, [ip]
 8008ff2:	b299      	uxth	r1, r3
 8008ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ff8:	0c1e      	lsrs	r6, r3, #16
 8008ffa:	0c0b      	lsrs	r3, r1, #16
 8008ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8009000:	b289      	uxth	r1, r1
 8009002:	3001      	adds	r0, #1
 8009004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009008:	4285      	cmp	r5, r0
 800900a:	f84c 1b04 	str.w	r1, [ip], #4
 800900e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009012:	dcec      	bgt.n	8008fee <__multadd+0x12>
 8009014:	b30e      	cbz	r6, 800905a <__multadd+0x7e>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	42ab      	cmp	r3, r5
 800901a:	dc19      	bgt.n	8009050 <__multadd+0x74>
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	4638      	mov	r0, r7
 8009020:	3101      	adds	r1, #1
 8009022:	f7ff ff79 	bl	8008f18 <_Balloc>
 8009026:	4680      	mov	r8, r0
 8009028:	b928      	cbnz	r0, 8009036 <__multadd+0x5a>
 800902a:	4602      	mov	r2, r0
 800902c:	4b0c      	ldr	r3, [pc, #48]	@ (8009060 <__multadd+0x84>)
 800902e:	480d      	ldr	r0, [pc, #52]	@ (8009064 <__multadd+0x88>)
 8009030:	21ba      	movs	r1, #186	@ 0xba
 8009032:	f000 fd21 	bl	8009a78 <__assert_func>
 8009036:	6922      	ldr	r2, [r4, #16]
 8009038:	3202      	adds	r2, #2
 800903a:	f104 010c 	add.w	r1, r4, #12
 800903e:	0092      	lsls	r2, r2, #2
 8009040:	300c      	adds	r0, #12
 8009042:	f7ff f80e 	bl	8008062 <memcpy>
 8009046:	4621      	mov	r1, r4
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa5 	bl	8008f98 <_Bfree>
 800904e:	4644      	mov	r4, r8
 8009050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009054:	3501      	adds	r5, #1
 8009056:	615e      	str	r6, [r3, #20]
 8009058:	6125      	str	r5, [r4, #16]
 800905a:	4620      	mov	r0, r4
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	0800a5ce 	.word	0x0800a5ce
 8009064:	0800a5df 	.word	0x0800a5df

08009068 <__hi0bits>:
 8009068:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800906c:	4603      	mov	r3, r0
 800906e:	bf36      	itet	cc
 8009070:	0403      	lslcc	r3, r0, #16
 8009072:	2000      	movcs	r0, #0
 8009074:	2010      	movcc	r0, #16
 8009076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800907a:	bf3c      	itt	cc
 800907c:	021b      	lslcc	r3, r3, #8
 800907e:	3008      	addcc	r0, #8
 8009080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009084:	bf3c      	itt	cc
 8009086:	011b      	lslcc	r3, r3, #4
 8009088:	3004      	addcc	r0, #4
 800908a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800908e:	bf3c      	itt	cc
 8009090:	009b      	lslcc	r3, r3, #2
 8009092:	3002      	addcc	r0, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	db05      	blt.n	80090a4 <__hi0bits+0x3c>
 8009098:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800909c:	f100 0001 	add.w	r0, r0, #1
 80090a0:	bf08      	it	eq
 80090a2:	2020      	moveq	r0, #32
 80090a4:	4770      	bx	lr

080090a6 <__lo0bits>:
 80090a6:	6803      	ldr	r3, [r0, #0]
 80090a8:	4602      	mov	r2, r0
 80090aa:	f013 0007 	ands.w	r0, r3, #7
 80090ae:	d00b      	beq.n	80090c8 <__lo0bits+0x22>
 80090b0:	07d9      	lsls	r1, r3, #31
 80090b2:	d421      	bmi.n	80090f8 <__lo0bits+0x52>
 80090b4:	0798      	lsls	r0, r3, #30
 80090b6:	bf49      	itett	mi
 80090b8:	085b      	lsrmi	r3, r3, #1
 80090ba:	089b      	lsrpl	r3, r3, #2
 80090bc:	2001      	movmi	r0, #1
 80090be:	6013      	strmi	r3, [r2, #0]
 80090c0:	bf5c      	itt	pl
 80090c2:	6013      	strpl	r3, [r2, #0]
 80090c4:	2002      	movpl	r0, #2
 80090c6:	4770      	bx	lr
 80090c8:	b299      	uxth	r1, r3
 80090ca:	b909      	cbnz	r1, 80090d0 <__lo0bits+0x2a>
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	2010      	movs	r0, #16
 80090d0:	b2d9      	uxtb	r1, r3
 80090d2:	b909      	cbnz	r1, 80090d8 <__lo0bits+0x32>
 80090d4:	3008      	adds	r0, #8
 80090d6:	0a1b      	lsrs	r3, r3, #8
 80090d8:	0719      	lsls	r1, r3, #28
 80090da:	bf04      	itt	eq
 80090dc:	091b      	lsreq	r3, r3, #4
 80090de:	3004      	addeq	r0, #4
 80090e0:	0799      	lsls	r1, r3, #30
 80090e2:	bf04      	itt	eq
 80090e4:	089b      	lsreq	r3, r3, #2
 80090e6:	3002      	addeq	r0, #2
 80090e8:	07d9      	lsls	r1, r3, #31
 80090ea:	d403      	bmi.n	80090f4 <__lo0bits+0x4e>
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	f100 0001 	add.w	r0, r0, #1
 80090f2:	d003      	beq.n	80090fc <__lo0bits+0x56>
 80090f4:	6013      	str	r3, [r2, #0]
 80090f6:	4770      	bx	lr
 80090f8:	2000      	movs	r0, #0
 80090fa:	4770      	bx	lr
 80090fc:	2020      	movs	r0, #32
 80090fe:	4770      	bx	lr

08009100 <__i2b>:
 8009100:	b510      	push	{r4, lr}
 8009102:	460c      	mov	r4, r1
 8009104:	2101      	movs	r1, #1
 8009106:	f7ff ff07 	bl	8008f18 <_Balloc>
 800910a:	4602      	mov	r2, r0
 800910c:	b928      	cbnz	r0, 800911a <__i2b+0x1a>
 800910e:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <__i2b+0x24>)
 8009110:	4805      	ldr	r0, [pc, #20]	@ (8009128 <__i2b+0x28>)
 8009112:	f240 1145 	movw	r1, #325	@ 0x145
 8009116:	f000 fcaf 	bl	8009a78 <__assert_func>
 800911a:	2301      	movs	r3, #1
 800911c:	6144      	str	r4, [r0, #20]
 800911e:	6103      	str	r3, [r0, #16]
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	0800a5ce 	.word	0x0800a5ce
 8009128:	0800a5df 	.word	0x0800a5df

0800912c <__multiply>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4614      	mov	r4, r2
 8009132:	690a      	ldr	r2, [r1, #16]
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	429a      	cmp	r2, r3
 8009138:	bfa8      	it	ge
 800913a:	4623      	movge	r3, r4
 800913c:	460f      	mov	r7, r1
 800913e:	bfa4      	itt	ge
 8009140:	460c      	movge	r4, r1
 8009142:	461f      	movge	r7, r3
 8009144:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009148:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800914c:	68a3      	ldr	r3, [r4, #8]
 800914e:	6861      	ldr	r1, [r4, #4]
 8009150:	eb0a 0609 	add.w	r6, sl, r9
 8009154:	42b3      	cmp	r3, r6
 8009156:	b085      	sub	sp, #20
 8009158:	bfb8      	it	lt
 800915a:	3101      	addlt	r1, #1
 800915c:	f7ff fedc 	bl	8008f18 <_Balloc>
 8009160:	b930      	cbnz	r0, 8009170 <__multiply+0x44>
 8009162:	4602      	mov	r2, r0
 8009164:	4b44      	ldr	r3, [pc, #272]	@ (8009278 <__multiply+0x14c>)
 8009166:	4845      	ldr	r0, [pc, #276]	@ (800927c <__multiply+0x150>)
 8009168:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800916c:	f000 fc84 	bl	8009a78 <__assert_func>
 8009170:	f100 0514 	add.w	r5, r0, #20
 8009174:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009178:	462b      	mov	r3, r5
 800917a:	2200      	movs	r2, #0
 800917c:	4543      	cmp	r3, r8
 800917e:	d321      	bcc.n	80091c4 <__multiply+0x98>
 8009180:	f107 0114 	add.w	r1, r7, #20
 8009184:	f104 0214 	add.w	r2, r4, #20
 8009188:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800918c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	1b13      	subs	r3, r2, r4
 8009194:	3b15      	subs	r3, #21
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	3304      	adds	r3, #4
 800919c:	f104 0715 	add.w	r7, r4, #21
 80091a0:	42ba      	cmp	r2, r7
 80091a2:	bf38      	it	cc
 80091a4:	2304      	movcc	r3, #4
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	9b02      	ldr	r3, [sp, #8]
 80091aa:	9103      	str	r1, [sp, #12]
 80091ac:	428b      	cmp	r3, r1
 80091ae:	d80c      	bhi.n	80091ca <__multiply+0x9e>
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	dd03      	ble.n	80091bc <__multiply+0x90>
 80091b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d05b      	beq.n	8009274 <__multiply+0x148>
 80091bc:	6106      	str	r6, [r0, #16]
 80091be:	b005      	add	sp, #20
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	f843 2b04 	str.w	r2, [r3], #4
 80091c8:	e7d8      	b.n	800917c <__multiply+0x50>
 80091ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80091ce:	f1ba 0f00 	cmp.w	sl, #0
 80091d2:	d024      	beq.n	800921e <__multiply+0xf2>
 80091d4:	f104 0e14 	add.w	lr, r4, #20
 80091d8:	46a9      	mov	r9, r5
 80091da:	f04f 0c00 	mov.w	ip, #0
 80091de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091e2:	f8d9 3000 	ldr.w	r3, [r9]
 80091e6:	fa1f fb87 	uxth.w	fp, r7
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80091f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091f4:	f8d9 7000 	ldr.w	r7, [r9]
 80091f8:	4463      	add	r3, ip
 80091fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8009202:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800920c:	4572      	cmp	r2, lr
 800920e:	f849 3b04 	str.w	r3, [r9], #4
 8009212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009216:	d8e2      	bhi.n	80091de <__multiply+0xb2>
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	f845 c003 	str.w	ip, [r5, r3]
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009224:	3104      	adds	r1, #4
 8009226:	f1b9 0f00 	cmp.w	r9, #0
 800922a:	d021      	beq.n	8009270 <__multiply+0x144>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	f104 0c14 	add.w	ip, r4, #20
 8009232:	46ae      	mov	lr, r5
 8009234:	f04f 0a00 	mov.w	sl, #0
 8009238:	f8bc b000 	ldrh.w	fp, [ip]
 800923c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009240:	fb09 770b 	mla	r7, r9, fp, r7
 8009244:	4457      	add	r7, sl
 8009246:	b29b      	uxth	r3, r3
 8009248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800924c:	f84e 3b04 	str.w	r3, [lr], #4
 8009250:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009258:	f8be 3000 	ldrh.w	r3, [lr]
 800925c:	fb09 330a 	mla	r3, r9, sl, r3
 8009260:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009264:	4562      	cmp	r2, ip
 8009266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800926a:	d8e5      	bhi.n	8009238 <__multiply+0x10c>
 800926c:	9f01      	ldr	r7, [sp, #4]
 800926e:	51eb      	str	r3, [r5, r7]
 8009270:	3504      	adds	r5, #4
 8009272:	e799      	b.n	80091a8 <__multiply+0x7c>
 8009274:	3e01      	subs	r6, #1
 8009276:	e79b      	b.n	80091b0 <__multiply+0x84>
 8009278:	0800a5ce 	.word	0x0800a5ce
 800927c:	0800a5df 	.word	0x0800a5df

08009280 <__pow5mult>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	4615      	mov	r5, r2
 8009286:	f012 0203 	ands.w	r2, r2, #3
 800928a:	4607      	mov	r7, r0
 800928c:	460e      	mov	r6, r1
 800928e:	d007      	beq.n	80092a0 <__pow5mult+0x20>
 8009290:	4c25      	ldr	r4, [pc, #148]	@ (8009328 <__pow5mult+0xa8>)
 8009292:	3a01      	subs	r2, #1
 8009294:	2300      	movs	r3, #0
 8009296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800929a:	f7ff fe9f 	bl	8008fdc <__multadd>
 800929e:	4606      	mov	r6, r0
 80092a0:	10ad      	asrs	r5, r5, #2
 80092a2:	d03d      	beq.n	8009320 <__pow5mult+0xa0>
 80092a4:	69fc      	ldr	r4, [r7, #28]
 80092a6:	b97c      	cbnz	r4, 80092c8 <__pow5mult+0x48>
 80092a8:	2010      	movs	r0, #16
 80092aa:	f7ff fd7f 	bl	8008dac <malloc>
 80092ae:	4602      	mov	r2, r0
 80092b0:	61f8      	str	r0, [r7, #28]
 80092b2:	b928      	cbnz	r0, 80092c0 <__pow5mult+0x40>
 80092b4:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <__pow5mult+0xac>)
 80092b6:	481e      	ldr	r0, [pc, #120]	@ (8009330 <__pow5mult+0xb0>)
 80092b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092bc:	f000 fbdc 	bl	8009a78 <__assert_func>
 80092c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092c4:	6004      	str	r4, [r0, #0]
 80092c6:	60c4      	str	r4, [r0, #12]
 80092c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092d0:	b94c      	cbnz	r4, 80092e6 <__pow5mult+0x66>
 80092d2:	f240 2171 	movw	r1, #625	@ 0x271
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff ff12 	bl	8009100 <__i2b>
 80092dc:	2300      	movs	r3, #0
 80092de:	f8c8 0008 	str.w	r0, [r8, #8]
 80092e2:	4604      	mov	r4, r0
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	f04f 0900 	mov.w	r9, #0
 80092ea:	07eb      	lsls	r3, r5, #31
 80092ec:	d50a      	bpl.n	8009304 <__pow5mult+0x84>
 80092ee:	4631      	mov	r1, r6
 80092f0:	4622      	mov	r2, r4
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7ff ff1a 	bl	800912c <__multiply>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4680      	mov	r8, r0
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff fe4b 	bl	8008f98 <_Bfree>
 8009302:	4646      	mov	r6, r8
 8009304:	106d      	asrs	r5, r5, #1
 8009306:	d00b      	beq.n	8009320 <__pow5mult+0xa0>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	b938      	cbnz	r0, 800931c <__pow5mult+0x9c>
 800930c:	4622      	mov	r2, r4
 800930e:	4621      	mov	r1, r4
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ff0b 	bl	800912c <__multiply>
 8009316:	6020      	str	r0, [r4, #0]
 8009318:	f8c0 9000 	str.w	r9, [r0]
 800931c:	4604      	mov	r4, r0
 800931e:	e7e4      	b.n	80092ea <__pow5mult+0x6a>
 8009320:	4630      	mov	r0, r6
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	bf00      	nop
 8009328:	0800a638 	.word	0x0800a638
 800932c:	0800a55f 	.word	0x0800a55f
 8009330:	0800a5df 	.word	0x0800a5df

08009334 <__lshift>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	6849      	ldr	r1, [r1, #4]
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	4607      	mov	r7, r0
 8009346:	4691      	mov	r9, r2
 8009348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800934c:	f108 0601 	add.w	r6, r8, #1
 8009350:	42b3      	cmp	r3, r6
 8009352:	db0b      	blt.n	800936c <__lshift+0x38>
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff fddf 	bl	8008f18 <_Balloc>
 800935a:	4605      	mov	r5, r0
 800935c:	b948      	cbnz	r0, 8009372 <__lshift+0x3e>
 800935e:	4602      	mov	r2, r0
 8009360:	4b28      	ldr	r3, [pc, #160]	@ (8009404 <__lshift+0xd0>)
 8009362:	4829      	ldr	r0, [pc, #164]	@ (8009408 <__lshift+0xd4>)
 8009364:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009368:	f000 fb86 	bl	8009a78 <__assert_func>
 800936c:	3101      	adds	r1, #1
 800936e:	005b      	lsls	r3, r3, #1
 8009370:	e7ee      	b.n	8009350 <__lshift+0x1c>
 8009372:	2300      	movs	r3, #0
 8009374:	f100 0114 	add.w	r1, r0, #20
 8009378:	f100 0210 	add.w	r2, r0, #16
 800937c:	4618      	mov	r0, r3
 800937e:	4553      	cmp	r3, sl
 8009380:	db33      	blt.n	80093ea <__lshift+0xb6>
 8009382:	6920      	ldr	r0, [r4, #16]
 8009384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009388:	f104 0314 	add.w	r3, r4, #20
 800938c:	f019 091f 	ands.w	r9, r9, #31
 8009390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009394:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009398:	d02b      	beq.n	80093f2 <__lshift+0xbe>
 800939a:	f1c9 0e20 	rsb	lr, r9, #32
 800939e:	468a      	mov	sl, r1
 80093a0:	2200      	movs	r2, #0
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	fa00 f009 	lsl.w	r0, r0, r9
 80093a8:	4310      	orrs	r0, r2
 80093aa:	f84a 0b04 	str.w	r0, [sl], #4
 80093ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b2:	459c      	cmp	ip, r3
 80093b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80093b8:	d8f3      	bhi.n	80093a2 <__lshift+0x6e>
 80093ba:	ebac 0304 	sub.w	r3, ip, r4
 80093be:	3b15      	subs	r3, #21
 80093c0:	f023 0303 	bic.w	r3, r3, #3
 80093c4:	3304      	adds	r3, #4
 80093c6:	f104 0015 	add.w	r0, r4, #21
 80093ca:	4584      	cmp	ip, r0
 80093cc:	bf38      	it	cc
 80093ce:	2304      	movcc	r3, #4
 80093d0:	50ca      	str	r2, [r1, r3]
 80093d2:	b10a      	cbz	r2, 80093d8 <__lshift+0xa4>
 80093d4:	f108 0602 	add.w	r6, r8, #2
 80093d8:	3e01      	subs	r6, #1
 80093da:	4638      	mov	r0, r7
 80093dc:	612e      	str	r6, [r5, #16]
 80093de:	4621      	mov	r1, r4
 80093e0:	f7ff fdda 	bl	8008f98 <_Bfree>
 80093e4:	4628      	mov	r0, r5
 80093e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ee:	3301      	adds	r3, #1
 80093f0:	e7c5      	b.n	800937e <__lshift+0x4a>
 80093f2:	3904      	subs	r1, #4
 80093f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093fc:	459c      	cmp	ip, r3
 80093fe:	d8f9      	bhi.n	80093f4 <__lshift+0xc0>
 8009400:	e7ea      	b.n	80093d8 <__lshift+0xa4>
 8009402:	bf00      	nop
 8009404:	0800a5ce 	.word	0x0800a5ce
 8009408:	0800a5df 	.word	0x0800a5df

0800940c <__mcmp>:
 800940c:	690a      	ldr	r2, [r1, #16]
 800940e:	4603      	mov	r3, r0
 8009410:	6900      	ldr	r0, [r0, #16]
 8009412:	1a80      	subs	r0, r0, r2
 8009414:	b530      	push	{r4, r5, lr}
 8009416:	d10e      	bne.n	8009436 <__mcmp+0x2a>
 8009418:	3314      	adds	r3, #20
 800941a:	3114      	adds	r1, #20
 800941c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009420:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009424:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009428:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800942c:	4295      	cmp	r5, r2
 800942e:	d003      	beq.n	8009438 <__mcmp+0x2c>
 8009430:	d205      	bcs.n	800943e <__mcmp+0x32>
 8009432:	f04f 30ff 	mov.w	r0, #4294967295
 8009436:	bd30      	pop	{r4, r5, pc}
 8009438:	42a3      	cmp	r3, r4
 800943a:	d3f3      	bcc.n	8009424 <__mcmp+0x18>
 800943c:	e7fb      	b.n	8009436 <__mcmp+0x2a>
 800943e:	2001      	movs	r0, #1
 8009440:	e7f9      	b.n	8009436 <__mcmp+0x2a>
	...

08009444 <__mdiff>:
 8009444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	4689      	mov	r9, r1
 800944a:	4606      	mov	r6, r0
 800944c:	4611      	mov	r1, r2
 800944e:	4648      	mov	r0, r9
 8009450:	4614      	mov	r4, r2
 8009452:	f7ff ffdb 	bl	800940c <__mcmp>
 8009456:	1e05      	subs	r5, r0, #0
 8009458:	d112      	bne.n	8009480 <__mdiff+0x3c>
 800945a:	4629      	mov	r1, r5
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff fd5b 	bl	8008f18 <_Balloc>
 8009462:	4602      	mov	r2, r0
 8009464:	b928      	cbnz	r0, 8009472 <__mdiff+0x2e>
 8009466:	4b3f      	ldr	r3, [pc, #252]	@ (8009564 <__mdiff+0x120>)
 8009468:	f240 2137 	movw	r1, #567	@ 0x237
 800946c:	483e      	ldr	r0, [pc, #248]	@ (8009568 <__mdiff+0x124>)
 800946e:	f000 fb03 	bl	8009a78 <__assert_func>
 8009472:	2301      	movs	r3, #1
 8009474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009478:	4610      	mov	r0, r2
 800947a:	b003      	add	sp, #12
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	bfbc      	itt	lt
 8009482:	464b      	movlt	r3, r9
 8009484:	46a1      	movlt	r9, r4
 8009486:	4630      	mov	r0, r6
 8009488:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800948c:	bfba      	itte	lt
 800948e:	461c      	movlt	r4, r3
 8009490:	2501      	movlt	r5, #1
 8009492:	2500      	movge	r5, #0
 8009494:	f7ff fd40 	bl	8008f18 <_Balloc>
 8009498:	4602      	mov	r2, r0
 800949a:	b918      	cbnz	r0, 80094a4 <__mdiff+0x60>
 800949c:	4b31      	ldr	r3, [pc, #196]	@ (8009564 <__mdiff+0x120>)
 800949e:	f240 2145 	movw	r1, #581	@ 0x245
 80094a2:	e7e3      	b.n	800946c <__mdiff+0x28>
 80094a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094a8:	6926      	ldr	r6, [r4, #16]
 80094aa:	60c5      	str	r5, [r0, #12]
 80094ac:	f109 0310 	add.w	r3, r9, #16
 80094b0:	f109 0514 	add.w	r5, r9, #20
 80094b4:	f104 0e14 	add.w	lr, r4, #20
 80094b8:	f100 0b14 	add.w	fp, r0, #20
 80094bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	46d9      	mov	r9, fp
 80094c8:	f04f 0c00 	mov.w	ip, #0
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	fa1f f38a 	uxth.w	r3, sl
 80094dc:	4619      	mov	r1, r3
 80094de:	b283      	uxth	r3, r0
 80094e0:	1acb      	subs	r3, r1, r3
 80094e2:	0c00      	lsrs	r0, r0, #16
 80094e4:	4463      	add	r3, ip
 80094e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094f4:	4576      	cmp	r6, lr
 80094f6:	f849 3b04 	str.w	r3, [r9], #4
 80094fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094fe:	d8e5      	bhi.n	80094cc <__mdiff+0x88>
 8009500:	1b33      	subs	r3, r6, r4
 8009502:	3b15      	subs	r3, #21
 8009504:	f023 0303 	bic.w	r3, r3, #3
 8009508:	3415      	adds	r4, #21
 800950a:	3304      	adds	r3, #4
 800950c:	42a6      	cmp	r6, r4
 800950e:	bf38      	it	cc
 8009510:	2304      	movcc	r3, #4
 8009512:	441d      	add	r5, r3
 8009514:	445b      	add	r3, fp
 8009516:	461e      	mov	r6, r3
 8009518:	462c      	mov	r4, r5
 800951a:	4544      	cmp	r4, r8
 800951c:	d30e      	bcc.n	800953c <__mdiff+0xf8>
 800951e:	f108 0103 	add.w	r1, r8, #3
 8009522:	1b49      	subs	r1, r1, r5
 8009524:	f021 0103 	bic.w	r1, r1, #3
 8009528:	3d03      	subs	r5, #3
 800952a:	45a8      	cmp	r8, r5
 800952c:	bf38      	it	cc
 800952e:	2100      	movcc	r1, #0
 8009530:	440b      	add	r3, r1
 8009532:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009536:	b191      	cbz	r1, 800955e <__mdiff+0x11a>
 8009538:	6117      	str	r7, [r2, #16]
 800953a:	e79d      	b.n	8009478 <__mdiff+0x34>
 800953c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009540:	46e6      	mov	lr, ip
 8009542:	0c08      	lsrs	r0, r1, #16
 8009544:	fa1c fc81 	uxtah	ip, ip, r1
 8009548:	4471      	add	r1, lr
 800954a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800954e:	b289      	uxth	r1, r1
 8009550:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009554:	f846 1b04 	str.w	r1, [r6], #4
 8009558:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800955c:	e7dd      	b.n	800951a <__mdiff+0xd6>
 800955e:	3f01      	subs	r7, #1
 8009560:	e7e7      	b.n	8009532 <__mdiff+0xee>
 8009562:	bf00      	nop
 8009564:	0800a5ce 	.word	0x0800a5ce
 8009568:	0800a5df 	.word	0x0800a5df

0800956c <__d2b>:
 800956c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009570:	460f      	mov	r7, r1
 8009572:	2101      	movs	r1, #1
 8009574:	ec59 8b10 	vmov	r8, r9, d0
 8009578:	4616      	mov	r6, r2
 800957a:	f7ff fccd 	bl	8008f18 <_Balloc>
 800957e:	4604      	mov	r4, r0
 8009580:	b930      	cbnz	r0, 8009590 <__d2b+0x24>
 8009582:	4602      	mov	r2, r0
 8009584:	4b23      	ldr	r3, [pc, #140]	@ (8009614 <__d2b+0xa8>)
 8009586:	4824      	ldr	r0, [pc, #144]	@ (8009618 <__d2b+0xac>)
 8009588:	f240 310f 	movw	r1, #783	@ 0x30f
 800958c:	f000 fa74 	bl	8009a78 <__assert_func>
 8009590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009598:	b10d      	cbz	r5, 800959e <__d2b+0x32>
 800959a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	f1b8 0300 	subs.w	r3, r8, #0
 80095a4:	d023      	beq.n	80095ee <__d2b+0x82>
 80095a6:	4668      	mov	r0, sp
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	f7ff fd7c 	bl	80090a6 <__lo0bits>
 80095ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095b2:	b1d0      	cbz	r0, 80095ea <__d2b+0x7e>
 80095b4:	f1c0 0320 	rsb	r3, r0, #32
 80095b8:	fa02 f303 	lsl.w	r3, r2, r3
 80095bc:	430b      	orrs	r3, r1
 80095be:	40c2      	lsrs	r2, r0
 80095c0:	6163      	str	r3, [r4, #20]
 80095c2:	9201      	str	r2, [sp, #4]
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	61a3      	str	r3, [r4, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bf0c      	ite	eq
 80095cc:	2201      	moveq	r2, #1
 80095ce:	2202      	movne	r2, #2
 80095d0:	6122      	str	r2, [r4, #16]
 80095d2:	b1a5      	cbz	r5, 80095fe <__d2b+0x92>
 80095d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095d8:	4405      	add	r5, r0
 80095da:	603d      	str	r5, [r7, #0]
 80095dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095e0:	6030      	str	r0, [r6, #0]
 80095e2:	4620      	mov	r0, r4
 80095e4:	b003      	add	sp, #12
 80095e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ea:	6161      	str	r1, [r4, #20]
 80095ec:	e7ea      	b.n	80095c4 <__d2b+0x58>
 80095ee:	a801      	add	r0, sp, #4
 80095f0:	f7ff fd59 	bl	80090a6 <__lo0bits>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	6163      	str	r3, [r4, #20]
 80095f8:	3020      	adds	r0, #32
 80095fa:	2201      	movs	r2, #1
 80095fc:	e7e8      	b.n	80095d0 <__d2b+0x64>
 80095fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009602:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009606:	6038      	str	r0, [r7, #0]
 8009608:	6918      	ldr	r0, [r3, #16]
 800960a:	f7ff fd2d 	bl	8009068 <__hi0bits>
 800960e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009612:	e7e5      	b.n	80095e0 <__d2b+0x74>
 8009614:	0800a5ce 	.word	0x0800a5ce
 8009618:	0800a5df 	.word	0x0800a5df

0800961c <__ssputs_r>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	688e      	ldr	r6, [r1, #8]
 8009622:	461f      	mov	r7, r3
 8009624:	42be      	cmp	r6, r7
 8009626:	680b      	ldr	r3, [r1, #0]
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	d82d      	bhi.n	800968c <__ssputs_r+0x70>
 8009630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009638:	d026      	beq.n	8009688 <__ssputs_r+0x6c>
 800963a:	6965      	ldr	r5, [r4, #20]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009642:	eba3 0901 	sub.w	r9, r3, r1
 8009646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964a:	1c7b      	adds	r3, r7, #1
 800964c:	444b      	add	r3, r9
 800964e:	106d      	asrs	r5, r5, #1
 8009650:	429d      	cmp	r5, r3
 8009652:	bf38      	it	cc
 8009654:	461d      	movcc	r5, r3
 8009656:	0553      	lsls	r3, r2, #21
 8009658:	d527      	bpl.n	80096aa <__ssputs_r+0x8e>
 800965a:	4629      	mov	r1, r5
 800965c:	f7ff fbd0 	bl	8008e00 <_malloc_r>
 8009660:	4606      	mov	r6, r0
 8009662:	b360      	cbz	r0, 80096be <__ssputs_r+0xa2>
 8009664:	6921      	ldr	r1, [r4, #16]
 8009666:	464a      	mov	r2, r9
 8009668:	f7fe fcfb 	bl	8008062 <memcpy>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	6126      	str	r6, [r4, #16]
 800967a:	6165      	str	r5, [r4, #20]
 800967c:	444e      	add	r6, r9
 800967e:	eba5 0509 	sub.w	r5, r5, r9
 8009682:	6026      	str	r6, [r4, #0]
 8009684:	60a5      	str	r5, [r4, #8]
 8009686:	463e      	mov	r6, r7
 8009688:	42be      	cmp	r6, r7
 800968a:	d900      	bls.n	800968e <__ssputs_r+0x72>
 800968c:	463e      	mov	r6, r7
 800968e:	6820      	ldr	r0, [r4, #0]
 8009690:	4632      	mov	r2, r6
 8009692:	4641      	mov	r1, r8
 8009694:	f000 f9c6 	bl	8009a24 <memmove>
 8009698:	68a3      	ldr	r3, [r4, #8]
 800969a:	1b9b      	subs	r3, r3, r6
 800969c:	60a3      	str	r3, [r4, #8]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	4433      	add	r3, r6
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096aa:	462a      	mov	r2, r5
 80096ac:	f000 fa28 	bl	8009b00 <_realloc_r>
 80096b0:	4606      	mov	r6, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d1e0      	bne.n	8009678 <__ssputs_r+0x5c>
 80096b6:	6921      	ldr	r1, [r4, #16]
 80096b8:	4650      	mov	r0, sl
 80096ba:	f7ff fb2d 	bl	8008d18 <_free_r>
 80096be:	230c      	movs	r3, #12
 80096c0:	f8ca 3000 	str.w	r3, [sl]
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e7e9      	b.n	80096a6 <__ssputs_r+0x8a>
	...

080096d4 <_svfiprintf_r>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	4698      	mov	r8, r3
 80096da:	898b      	ldrh	r3, [r1, #12]
 80096dc:	061b      	lsls	r3, r3, #24
 80096de:	b09d      	sub	sp, #116	@ 0x74
 80096e0:	4607      	mov	r7, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	4614      	mov	r4, r2
 80096e6:	d510      	bpl.n	800970a <_svfiprintf_r+0x36>
 80096e8:	690b      	ldr	r3, [r1, #16]
 80096ea:	b973      	cbnz	r3, 800970a <_svfiprintf_r+0x36>
 80096ec:	2140      	movs	r1, #64	@ 0x40
 80096ee:	f7ff fb87 	bl	8008e00 <_malloc_r>
 80096f2:	6028      	str	r0, [r5, #0]
 80096f4:	6128      	str	r0, [r5, #16]
 80096f6:	b930      	cbnz	r0, 8009706 <_svfiprintf_r+0x32>
 80096f8:	230c      	movs	r3, #12
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	b01d      	add	sp, #116	@ 0x74
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	2340      	movs	r3, #64	@ 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	@ 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	@ 0x30
 800971a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098b8 <_svfiprintf_r+0x1e4>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x60>
 8009730:	2a25      	cmp	r2, #37	@ 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x54>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7e>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6b 	bl	800961c <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80a7 	beq.w	800989a <_svfiprintf_r+0x1c6>
 800974c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	@ 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 809f 	beq.w	800989a <_svfiprintf_r+0x1c6>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009772:	931a      	str	r3, [sp, #104]	@ 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	484e      	ldr	r0, [pc, #312]	@ (80098b8 <_svfiprintf_r+0x1e4>)
 800977e:	f7f6 fd27 	bl	80001d0 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xea>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	@ 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xfa>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	@ 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94b      	bls.n	8009850 <_svfiprintf_r+0x17c>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x114>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x114>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0xa0>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ec:	d10a      	bne.n	8009804 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f2:	d132      	bne.n	800985a <_svfiprintf_r+0x186>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009800:	3402      	adds	r4, #2
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098c8 <_svfiprintf_r+0x1f4>
 8009808:	7821      	ldrb	r1, [r4, #0]
 800980a:	2203      	movs	r2, #3
 800980c:	4650      	mov	r0, sl
 800980e:	f7f6 fcdf 	bl	80001d0 <memchr>
 8009812:	b138      	cbz	r0, 8009824 <_svfiprintf_r+0x150>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	eba0 000a 	sub.w	r0, r0, sl
 800981a:	2240      	movs	r2, #64	@ 0x40
 800981c:	4082      	lsls	r2, r0
 800981e:	4313      	orrs	r3, r2
 8009820:	3401      	adds	r4, #1
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009828:	4824      	ldr	r0, [pc, #144]	@ (80098bc <_svfiprintf_r+0x1e8>)
 800982a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800982e:	2206      	movs	r2, #6
 8009830:	f7f6 fcce 	bl	80001d0 <memchr>
 8009834:	2800      	cmp	r0, #0
 8009836:	d036      	beq.n	80098a6 <_svfiprintf_r+0x1d2>
 8009838:	4b21      	ldr	r3, [pc, #132]	@ (80098c0 <_svfiprintf_r+0x1ec>)
 800983a:	bb1b      	cbnz	r3, 8009884 <_svfiprintf_r+0x1b0>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	3307      	adds	r3, #7
 8009840:	f023 0307 	bic.w	r3, r3, #7
 8009844:	3308      	adds	r3, #8
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800984a:	4433      	add	r3, r6
 800984c:	9309      	str	r3, [sp, #36]	@ 0x24
 800984e:	e76a      	b.n	8009726 <_svfiprintf_r+0x52>
 8009850:	fb0c 3202 	mla	r2, ip, r2, r3
 8009854:	460c      	mov	r4, r1
 8009856:	2001      	movs	r0, #1
 8009858:	e7a8      	b.n	80097ac <_svfiprintf_r+0xd8>
 800985a:	2300      	movs	r3, #0
 800985c:	3401      	adds	r4, #1
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	4619      	mov	r1, r3
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4620      	mov	r0, r4
 8009868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800986c:	3a30      	subs	r2, #48	@ 0x30
 800986e:	2a09      	cmp	r2, #9
 8009870:	d903      	bls.n	800987a <_svfiprintf_r+0x1a6>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0c6      	beq.n	8009804 <_svfiprintf_r+0x130>
 8009876:	9105      	str	r1, [sp, #20]
 8009878:	e7c4      	b.n	8009804 <_svfiprintf_r+0x130>
 800987a:	fb0c 2101 	mla	r1, ip, r1, r2
 800987e:	4604      	mov	r4, r0
 8009880:	2301      	movs	r3, #1
 8009882:	e7f0      	b.n	8009866 <_svfiprintf_r+0x192>
 8009884:	ab03      	add	r3, sp, #12
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	462a      	mov	r2, r5
 800988a:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <_svfiprintf_r+0x1f0>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	4638      	mov	r0, r7
 8009890:	f7fd fe56 	bl	8007540 <_printf_float>
 8009894:	1c42      	adds	r2, r0, #1
 8009896:	4606      	mov	r6, r0
 8009898:	d1d6      	bne.n	8009848 <_svfiprintf_r+0x174>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	065b      	lsls	r3, r3, #25
 800989e:	f53f af2d 	bmi.w	80096fc <_svfiprintf_r+0x28>
 80098a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098a4:	e72c      	b.n	8009700 <_svfiprintf_r+0x2c>
 80098a6:	ab03      	add	r3, sp, #12
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	462a      	mov	r2, r5
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <_svfiprintf_r+0x1f0>)
 80098ae:	a904      	add	r1, sp, #16
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7fe f8dd 	bl	8007a70 <_printf_i>
 80098b6:	e7ed      	b.n	8009894 <_svfiprintf_r+0x1c0>
 80098b8:	0800a738 	.word	0x0800a738
 80098bc:	0800a742 	.word	0x0800a742
 80098c0:	08007541 	.word	0x08007541
 80098c4:	0800961d 	.word	0x0800961d
 80098c8:	0800a73e 	.word	0x0800a73e

080098cc <__sflush_r>:
 80098cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	0716      	lsls	r6, r2, #28
 80098d6:	4605      	mov	r5, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	d454      	bmi.n	8009986 <__sflush_r+0xba>
 80098dc:	684b      	ldr	r3, [r1, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dc02      	bgt.n	80098e8 <__sflush_r+0x1c>
 80098e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd48      	ble.n	800997a <__sflush_r+0xae>
 80098e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	d045      	beq.n	800997a <__sflush_r+0xae>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098f4:	682f      	ldr	r7, [r5, #0]
 80098f6:	6a21      	ldr	r1, [r4, #32]
 80098f8:	602b      	str	r3, [r5, #0]
 80098fa:	d030      	beq.n	800995e <__sflush_r+0x92>
 80098fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	0759      	lsls	r1, r3, #29
 8009902:	d505      	bpl.n	8009910 <__sflush_r+0x44>
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	1ad2      	subs	r2, r2, r3
 8009908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800990a:	b10b      	cbz	r3, 8009910 <__sflush_r+0x44>
 800990c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	2300      	movs	r3, #0
 8009912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	4628      	mov	r0, r5
 8009918:	47b0      	blx	r6
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	d106      	bne.n	800992e <__sflush_r+0x62>
 8009920:	6829      	ldr	r1, [r5, #0]
 8009922:	291d      	cmp	r1, #29
 8009924:	d82b      	bhi.n	800997e <__sflush_r+0xb2>
 8009926:	4a2a      	ldr	r2, [pc, #168]	@ (80099d0 <__sflush_r+0x104>)
 8009928:	410a      	asrs	r2, r1
 800992a:	07d6      	lsls	r6, r2, #31
 800992c:	d427      	bmi.n	800997e <__sflush_r+0xb2>
 800992e:	2200      	movs	r2, #0
 8009930:	6062      	str	r2, [r4, #4]
 8009932:	04d9      	lsls	r1, r3, #19
 8009934:	6922      	ldr	r2, [r4, #16]
 8009936:	6022      	str	r2, [r4, #0]
 8009938:	d504      	bpl.n	8009944 <__sflush_r+0x78>
 800993a:	1c42      	adds	r2, r0, #1
 800993c:	d101      	bne.n	8009942 <__sflush_r+0x76>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b903      	cbnz	r3, 8009944 <__sflush_r+0x78>
 8009942:	6560      	str	r0, [r4, #84]	@ 0x54
 8009944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009946:	602f      	str	r7, [r5, #0]
 8009948:	b1b9      	cbz	r1, 800997a <__sflush_r+0xae>
 800994a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800994e:	4299      	cmp	r1, r3
 8009950:	d002      	beq.n	8009958 <__sflush_r+0x8c>
 8009952:	4628      	mov	r0, r5
 8009954:	f7ff f9e0 	bl	8008d18 <_free_r>
 8009958:	2300      	movs	r3, #0
 800995a:	6363      	str	r3, [r4, #52]	@ 0x34
 800995c:	e00d      	b.n	800997a <__sflush_r+0xae>
 800995e:	2301      	movs	r3, #1
 8009960:	4628      	mov	r0, r5
 8009962:	47b0      	blx	r6
 8009964:	4602      	mov	r2, r0
 8009966:	1c50      	adds	r0, r2, #1
 8009968:	d1c9      	bne.n	80098fe <__sflush_r+0x32>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0c6      	beq.n	80098fe <__sflush_r+0x32>
 8009970:	2b1d      	cmp	r3, #29
 8009972:	d001      	beq.n	8009978 <__sflush_r+0xac>
 8009974:	2b16      	cmp	r3, #22
 8009976:	d11e      	bne.n	80099b6 <__sflush_r+0xea>
 8009978:	602f      	str	r7, [r5, #0]
 800997a:	2000      	movs	r0, #0
 800997c:	e022      	b.n	80099c4 <__sflush_r+0xf8>
 800997e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009982:	b21b      	sxth	r3, r3
 8009984:	e01b      	b.n	80099be <__sflush_r+0xf2>
 8009986:	690f      	ldr	r7, [r1, #16]
 8009988:	2f00      	cmp	r7, #0
 800998a:	d0f6      	beq.n	800997a <__sflush_r+0xae>
 800998c:	0793      	lsls	r3, r2, #30
 800998e:	680e      	ldr	r6, [r1, #0]
 8009990:	bf08      	it	eq
 8009992:	694b      	ldreq	r3, [r1, #20]
 8009994:	600f      	str	r7, [r1, #0]
 8009996:	bf18      	it	ne
 8009998:	2300      	movne	r3, #0
 800999a:	eba6 0807 	sub.w	r8, r6, r7
 800999e:	608b      	str	r3, [r1, #8]
 80099a0:	f1b8 0f00 	cmp.w	r8, #0
 80099a4:	dde9      	ble.n	800997a <__sflush_r+0xae>
 80099a6:	6a21      	ldr	r1, [r4, #32]
 80099a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099aa:	4643      	mov	r3, r8
 80099ac:	463a      	mov	r2, r7
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b0      	blx	r6
 80099b2:	2800      	cmp	r0, #0
 80099b4:	dc08      	bgt.n	80099c8 <__sflush_r+0xfc>
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c8:	4407      	add	r7, r0
 80099ca:	eba8 0800 	sub.w	r8, r8, r0
 80099ce:	e7e7      	b.n	80099a0 <__sflush_r+0xd4>
 80099d0:	dfbffffe 	.word	0xdfbffffe

080099d4 <_fflush_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	690b      	ldr	r3, [r1, #16]
 80099d8:	4605      	mov	r5, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	b913      	cbnz	r3, 80099e4 <_fflush_r+0x10>
 80099de:	2500      	movs	r5, #0
 80099e0:	4628      	mov	r0, r5
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	b118      	cbz	r0, 80099ee <_fflush_r+0x1a>
 80099e6:	6a03      	ldr	r3, [r0, #32]
 80099e8:	b90b      	cbnz	r3, 80099ee <_fflush_r+0x1a>
 80099ea:	f7fe f9ed 	bl	8007dc8 <__sinit>
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0f3      	beq.n	80099de <_fflush_r+0xa>
 80099f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099f8:	07d0      	lsls	r0, r2, #31
 80099fa:	d404      	bmi.n	8009a06 <_fflush_r+0x32>
 80099fc:	0599      	lsls	r1, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_fflush_r+0x32>
 8009a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a02:	f7fe fb2c 	bl	800805e <__retarget_lock_acquire_recursive>
 8009a06:	4628      	mov	r0, r5
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f7ff ff5f 	bl	80098cc <__sflush_r>
 8009a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a10:	07da      	lsls	r2, r3, #31
 8009a12:	4605      	mov	r5, r0
 8009a14:	d4e4      	bmi.n	80099e0 <_fflush_r+0xc>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	059b      	lsls	r3, r3, #22
 8009a1a:	d4e1      	bmi.n	80099e0 <_fflush_r+0xc>
 8009a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a1e:	f7fe fb1f 	bl	8008060 <__retarget_lock_release_recursive>
 8009a22:	e7dd      	b.n	80099e0 <_fflush_r+0xc>

08009a24 <memmove>:
 8009a24:	4288      	cmp	r0, r1
 8009a26:	b510      	push	{r4, lr}
 8009a28:	eb01 0402 	add.w	r4, r1, r2
 8009a2c:	d902      	bls.n	8009a34 <memmove+0x10>
 8009a2e:	4284      	cmp	r4, r0
 8009a30:	4623      	mov	r3, r4
 8009a32:	d807      	bhi.n	8009a44 <memmove+0x20>
 8009a34:	1e43      	subs	r3, r0, #1
 8009a36:	42a1      	cmp	r1, r4
 8009a38:	d008      	beq.n	8009a4c <memmove+0x28>
 8009a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a42:	e7f8      	b.n	8009a36 <memmove+0x12>
 8009a44:	4402      	add	r2, r0
 8009a46:	4601      	mov	r1, r0
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	d100      	bne.n	8009a4e <memmove+0x2a>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a56:	e7f7      	b.n	8009a48 <memmove+0x24>

08009a58 <_sbrk_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	@ (8009a74 <_sbrk_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 f972 	bl	8001d4c <_sbrk>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_sbrk_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_sbrk_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	200007c0 	.word	0x200007c0

08009a78 <__assert_func>:
 8009a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7a:	4614      	mov	r4, r2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <__assert_func+0x2c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4605      	mov	r5, r0
 8009a84:	68d8      	ldr	r0, [r3, #12]
 8009a86:	b954      	cbnz	r4, 8009a9e <__assert_func+0x26>
 8009a88:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <__assert_func+0x30>)
 8009a8a:	461c      	mov	r4, r3
 8009a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	462b      	mov	r3, r5
 8009a94:	4905      	ldr	r1, [pc, #20]	@ (8009aac <__assert_func+0x34>)
 8009a96:	f000 f86f 	bl	8009b78 <fiprintf>
 8009a9a:	f000 f87f 	bl	8009b9c <abort>
 8009a9e:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <__assert_func+0x38>)
 8009aa0:	e7f4      	b.n	8009a8c <__assert_func+0x14>
 8009aa2:	bf00      	nop
 8009aa4:	2000002c 	.word	0x2000002c
 8009aa8:	0800a78e 	.word	0x0800a78e
 8009aac:	0800a760 	.word	0x0800a760
 8009ab0:	0800a753 	.word	0x0800a753

08009ab4 <_calloc_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	fba1 5402 	umull	r5, r4, r1, r2
 8009aba:	b93c      	cbnz	r4, 8009acc <_calloc_r+0x18>
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7ff f99f 	bl	8008e00 <_malloc_r>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <_calloc_r+0x1e>
 8009ac6:	2600      	movs	r6, #0
 8009ac8:	4630      	mov	r0, r6
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	220c      	movs	r2, #12
 8009ace:	6002      	str	r2, [r0, #0]
 8009ad0:	e7f9      	b.n	8009ac6 <_calloc_r+0x12>
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f7fe fa44 	bl	8007f62 <memset>
 8009ada:	e7f5      	b.n	8009ac8 <_calloc_r+0x14>

08009adc <__ascii_mbtowc>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	b901      	cbnz	r1, 8009ae2 <__ascii_mbtowc+0x6>
 8009ae0:	a901      	add	r1, sp, #4
 8009ae2:	b142      	cbz	r2, 8009af6 <__ascii_mbtowc+0x1a>
 8009ae4:	b14b      	cbz	r3, 8009afa <__ascii_mbtowc+0x1e>
 8009ae6:	7813      	ldrb	r3, [r2, #0]
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	1e10      	subs	r0, r2, #0
 8009aee:	bf18      	it	ne
 8009af0:	2001      	movne	r0, #1
 8009af2:	b002      	add	sp, #8
 8009af4:	4770      	bx	lr
 8009af6:	4610      	mov	r0, r2
 8009af8:	e7fb      	b.n	8009af2 <__ascii_mbtowc+0x16>
 8009afa:	f06f 0001 	mvn.w	r0, #1
 8009afe:	e7f8      	b.n	8009af2 <__ascii_mbtowc+0x16>

08009b00 <_realloc_r>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4680      	mov	r8, r0
 8009b06:	4615      	mov	r5, r2
 8009b08:	460c      	mov	r4, r1
 8009b0a:	b921      	cbnz	r1, 8009b16 <_realloc_r+0x16>
 8009b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b10:	4611      	mov	r1, r2
 8009b12:	f7ff b975 	b.w	8008e00 <_malloc_r>
 8009b16:	b92a      	cbnz	r2, 8009b24 <_realloc_r+0x24>
 8009b18:	f7ff f8fe 	bl	8008d18 <_free_r>
 8009b1c:	2400      	movs	r4, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	f000 f841 	bl	8009baa <_malloc_usable_size_r>
 8009b28:	4285      	cmp	r5, r0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	d802      	bhi.n	8009b34 <_realloc_r+0x34>
 8009b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b32:	d8f4      	bhi.n	8009b1e <_realloc_r+0x1e>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7ff f962 	bl	8008e00 <_malloc_r>
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0ec      	beq.n	8009b1c <_realloc_r+0x1c>
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	462a      	mov	r2, r5
 8009b46:	4621      	mov	r1, r4
 8009b48:	bf28      	it	cs
 8009b4a:	4632      	movcs	r2, r6
 8009b4c:	f7fe fa89 	bl	8008062 <memcpy>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4640      	mov	r0, r8
 8009b54:	f7ff f8e0 	bl	8008d18 <_free_r>
 8009b58:	463c      	mov	r4, r7
 8009b5a:	e7e0      	b.n	8009b1e <_realloc_r+0x1e>

08009b5c <__ascii_wctomb>:
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	b141      	cbz	r1, 8009b74 <__ascii_wctomb+0x18>
 8009b62:	2aff      	cmp	r2, #255	@ 0xff
 8009b64:	d904      	bls.n	8009b70 <__ascii_wctomb+0x14>
 8009b66:	228a      	movs	r2, #138	@ 0x8a
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6e:	4770      	bx	lr
 8009b70:	700a      	strb	r2, [r1, #0]
 8009b72:	2001      	movs	r0, #1
 8009b74:	4770      	bx	lr
	...

08009b78 <fiprintf>:
 8009b78:	b40e      	push	{r1, r2, r3}
 8009b7a:	b503      	push	{r0, r1, lr}
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <fiprintf+0x20>)
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	6800      	ldr	r0, [r0, #0]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f000 f83f 	bl	8009c0c <_vfiprintf_r>
 8009b8e:	b002      	add	sp, #8
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b003      	add	sp, #12
 8009b96:	4770      	bx	lr
 8009b98:	2000002c 	.word	0x2000002c

08009b9c <abort>:
 8009b9c:	b508      	push	{r3, lr}
 8009b9e:	2006      	movs	r0, #6
 8009ba0:	f000 fa08 	bl	8009fb4 <raise>
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	f7f8 f859 	bl	8001c5c <_exit>

08009baa <_malloc_usable_size_r>:
 8009baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bae:	1f18      	subs	r0, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfbc      	itt	lt
 8009bb4:	580b      	ldrlt	r3, [r1, r0]
 8009bb6:	18c0      	addlt	r0, r0, r3
 8009bb8:	4770      	bx	lr

08009bba <__sfputc_r>:
 8009bba:	6893      	ldr	r3, [r2, #8]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	b410      	push	{r4}
 8009bc2:	6093      	str	r3, [r2, #8]
 8009bc4:	da08      	bge.n	8009bd8 <__sfputc_r+0x1e>
 8009bc6:	6994      	ldr	r4, [r2, #24]
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	db01      	blt.n	8009bd0 <__sfputc_r+0x16>
 8009bcc:	290a      	cmp	r1, #10
 8009bce:	d103      	bne.n	8009bd8 <__sfputc_r+0x1e>
 8009bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd4:	f000 b932 	b.w	8009e3c <__swbuf_r>
 8009bd8:	6813      	ldr	r3, [r2, #0]
 8009bda:	1c58      	adds	r0, r3, #1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	7019      	strb	r1, [r3, #0]
 8009be0:	4608      	mov	r0, r1
 8009be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <__sfputs_r>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	4614      	mov	r4, r2
 8009bf0:	18d5      	adds	r5, r2, r3
 8009bf2:	42ac      	cmp	r4, r5
 8009bf4:	d101      	bne.n	8009bfa <__sfputs_r+0x12>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e007      	b.n	8009c0a <__sfputs_r+0x22>
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ffda 	bl	8009bba <__sfputc_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d1f3      	bne.n	8009bf2 <__sfputs_r+0xa>
 8009c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c0c <_vfiprintf_r>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	460d      	mov	r5, r1
 8009c12:	b09d      	sub	sp, #116	@ 0x74
 8009c14:	4614      	mov	r4, r2
 8009c16:	4698      	mov	r8, r3
 8009c18:	4606      	mov	r6, r0
 8009c1a:	b118      	cbz	r0, 8009c24 <_vfiprintf_r+0x18>
 8009c1c:	6a03      	ldr	r3, [r0, #32]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x18>
 8009c20:	f7fe f8d2 	bl	8007dc8 <__sinit>
 8009c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x2a>
 8009c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c32:	f7fe fa14 	bl	800805e <__retarget_lock_acquire_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	071b      	lsls	r3, r3, #28
 8009c3a:	d501      	bpl.n	8009c40 <_vfiprintf_r+0x34>
 8009c3c:	692b      	ldr	r3, [r5, #16]
 8009c3e:	b99b      	cbnz	r3, 8009c68 <_vfiprintf_r+0x5c>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f938 	bl	8009eb8 <__swsetup_r>
 8009c48:	b170      	cbz	r0, 8009c68 <_vfiprintf_r+0x5c>
 8009c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c4c:	07dc      	lsls	r4, r3, #31
 8009c4e:	d504      	bpl.n	8009c5a <_vfiprintf_r+0x4e>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b01d      	add	sp, #116	@ 0x74
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	0598      	lsls	r0, r3, #22
 8009c5e:	d4f7      	bmi.n	8009c50 <_vfiprintf_r+0x44>
 8009c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c62:	f7fe f9fd 	bl	8008060 <__retarget_lock_release_recursive>
 8009c66:	e7f3      	b.n	8009c50 <_vfiprintf_r+0x44>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c76:	2330      	movs	r3, #48	@ 0x30
 8009c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e28 <_vfiprintf_r+0x21c>
 8009c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c80:	f04f 0901 	mov.w	r9, #1
 8009c84:	4623      	mov	r3, r4
 8009c86:	469a      	mov	sl, r3
 8009c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8c:	b10a      	cbz	r2, 8009c92 <_vfiprintf_r+0x86>
 8009c8e:	2a25      	cmp	r2, #37	@ 0x25
 8009c90:	d1f9      	bne.n	8009c86 <_vfiprintf_r+0x7a>
 8009c92:	ebba 0b04 	subs.w	fp, sl, r4
 8009c96:	d00b      	beq.n	8009cb0 <_vfiprintf_r+0xa4>
 8009c98:	465b      	mov	r3, fp
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ffa2 	bl	8009be8 <__sfputs_r>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f000 80a7 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cac:	445a      	add	r2, fp
 8009cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 809f 	beq.w	8009df8 <_vfiprintf_r+0x1ec>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc4:	f10a 0a01 	add.w	sl, sl, #1
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	9307      	str	r3, [sp, #28]
 8009ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cd2:	4654      	mov	r4, sl
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	4853      	ldr	r0, [pc, #332]	@ (8009e28 <_vfiprintf_r+0x21c>)
 8009cdc:	f7f6 fa78 	bl	80001d0 <memchr>
 8009ce0:	9a04      	ldr	r2, [sp, #16]
 8009ce2:	b9d8      	cbnz	r0, 8009d1c <_vfiprintf_r+0x110>
 8009ce4:	06d1      	lsls	r1, r2, #27
 8009ce6:	bf44      	itt	mi
 8009ce8:	2320      	movmi	r3, #32
 8009cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cee:	0713      	lsls	r3, r2, #28
 8009cf0:	bf44      	itt	mi
 8009cf2:	232b      	movmi	r3, #43	@ 0x2b
 8009cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfe:	d015      	beq.n	8009d2c <_vfiprintf_r+0x120>
 8009d00:	9a07      	ldr	r2, [sp, #28]
 8009d02:	4654      	mov	r4, sl
 8009d04:	2000      	movs	r0, #0
 8009d06:	f04f 0c0a 	mov.w	ip, #10
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d10:	3b30      	subs	r3, #48	@ 0x30
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d94b      	bls.n	8009dae <_vfiprintf_r+0x1a2>
 8009d16:	b1b0      	cbz	r0, 8009d46 <_vfiprintf_r+0x13a>
 8009d18:	9207      	str	r2, [sp, #28]
 8009d1a:	e014      	b.n	8009d46 <_vfiprintf_r+0x13a>
 8009d1c:	eba0 0308 	sub.w	r3, r0, r8
 8009d20:	fa09 f303 	lsl.w	r3, r9, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	46a2      	mov	sl, r4
 8009d2a:	e7d2      	b.n	8009cd2 <_vfiprintf_r+0xc6>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	1d19      	adds	r1, r3, #4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	9103      	str	r1, [sp, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfbb      	ittet	lt
 8009d38:	425b      	neglt	r3, r3
 8009d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d3e:	9307      	strge	r3, [sp, #28]
 8009d40:	9307      	strlt	r3, [sp, #28]
 8009d42:	bfb8      	it	lt
 8009d44:	9204      	strlt	r2, [sp, #16]
 8009d46:	7823      	ldrb	r3, [r4, #0]
 8009d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d4a:	d10a      	bne.n	8009d62 <_vfiprintf_r+0x156>
 8009d4c:	7863      	ldrb	r3, [r4, #1]
 8009d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d50:	d132      	bne.n	8009db8 <_vfiprintf_r+0x1ac>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	9203      	str	r2, [sp, #12]
 8009d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d5e:	3402      	adds	r4, #2
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e38 <_vfiprintf_r+0x22c>
 8009d66:	7821      	ldrb	r1, [r4, #0]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7f6 fa30 	bl	80001d0 <memchr>
 8009d70:	b138      	cbz	r0, 8009d82 <_vfiprintf_r+0x176>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	eba0 000a 	sub.w	r0, r0, sl
 8009d78:	2240      	movs	r2, #64	@ 0x40
 8009d7a:	4082      	lsls	r2, r0
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	3401      	adds	r4, #1
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	4829      	ldr	r0, [pc, #164]	@ (8009e2c <_vfiprintf_r+0x220>)
 8009d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d8c:	2206      	movs	r2, #6
 8009d8e:	f7f6 fa1f 	bl	80001d0 <memchr>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d03f      	beq.n	8009e16 <_vfiprintf_r+0x20a>
 8009d96:	4b26      	ldr	r3, [pc, #152]	@ (8009e30 <_vfiprintf_r+0x224>)
 8009d98:	bb1b      	cbnz	r3, 8009de2 <_vfiprintf_r+0x1d6>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	3307      	adds	r3, #7
 8009d9e:	f023 0307 	bic.w	r3, r3, #7
 8009da2:	3308      	adds	r3, #8
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	443b      	add	r3, r7
 8009daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dac:	e76a      	b.n	8009c84 <_vfiprintf_r+0x78>
 8009dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009db2:	460c      	mov	r4, r1
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7a8      	b.n	8009d0a <_vfiprintf_r+0xfe>
 8009db8:	2300      	movs	r3, #0
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f04f 0c0a 	mov.w	ip, #10
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dca:	3a30      	subs	r2, #48	@ 0x30
 8009dcc:	2a09      	cmp	r2, #9
 8009dce:	d903      	bls.n	8009dd8 <_vfiprintf_r+0x1cc>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0c6      	beq.n	8009d62 <_vfiprintf_r+0x156>
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	e7c4      	b.n	8009d62 <_vfiprintf_r+0x156>
 8009dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7f0      	b.n	8009dc4 <_vfiprintf_r+0x1b8>
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4b12      	ldr	r3, [pc, #72]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009dea:	a904      	add	r1, sp, #16
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7fd fba7 	bl	8007540 <_printf_float>
 8009df2:	4607      	mov	r7, r0
 8009df4:	1c78      	adds	r0, r7, #1
 8009df6:	d1d6      	bne.n	8009da6 <_vfiprintf_r+0x19a>
 8009df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x1fe>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fe f92b 	bl	8008060 <__retarget_lock_release_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	065b      	lsls	r3, r3, #25
 8009e0e:	f53f af1f 	bmi.w	8009c50 <_vfiprintf_r+0x44>
 8009e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e14:	e71e      	b.n	8009c54 <_vfiprintf_r+0x48>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fd fe25 	bl	8007a70 <_printf_i>
 8009e26:	e7e4      	b.n	8009df2 <_vfiprintf_r+0x1e6>
 8009e28:	0800a738 	.word	0x0800a738
 8009e2c:	0800a742 	.word	0x0800a742
 8009e30:	08007541 	.word	0x08007541
 8009e34:	08009be9 	.word	0x08009be9
 8009e38:	0800a73e 	.word	0x0800a73e

08009e3c <__swbuf_r>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	4614      	mov	r4, r2
 8009e42:	4605      	mov	r5, r0
 8009e44:	b118      	cbz	r0, 8009e4e <__swbuf_r+0x12>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <__swbuf_r+0x12>
 8009e4a:	f7fd ffbd 	bl	8007dc8 <__sinit>
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d501      	bpl.n	8009e5c <__swbuf_r+0x20>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b943      	cbnz	r3, 8009e6e <__swbuf_r+0x32>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f82a 	bl	8009eb8 <__swsetup_r>
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x32>
 8009e66:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	1a98      	subs	r0, r3, r2
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	b2f6      	uxtb	r6, r6
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	dc05      	bgt.n	8009e8a <__swbuf_r+0x4e>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff fda7 	bl	80099d4 <_fflush_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d1ed      	bne.n	8009e66 <__swbuf_r+0x2a>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	701e      	strb	r6, [r3, #0]
 8009e98:	6962      	ldr	r2, [r4, #20]
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d004      	beq.n	8009eaa <__swbuf_r+0x6e>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d5e1      	bpl.n	8009e6a <__swbuf_r+0x2e>
 8009ea6:	2e0a      	cmp	r6, #10
 8009ea8:	d1df      	bne.n	8009e6a <__swbuf_r+0x2e>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fd91 	bl	80099d4 <_fflush_r>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0d9      	beq.n	8009e6a <__swbuf_r+0x2e>
 8009eb6:	e7d6      	b.n	8009e66 <__swbuf_r+0x2a>

08009eb8 <__swsetup_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4b29      	ldr	r3, [pc, #164]	@ (8009f60 <__swsetup_r+0xa8>)
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b118      	cbz	r0, 8009ecc <__swsetup_r+0x14>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <__swsetup_r+0x14>
 8009ec8:	f7fd ff7e 	bl	8007dc8 <__sinit>
 8009ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed0:	0719      	lsls	r1, r3, #28
 8009ed2:	d422      	bmi.n	8009f1a <__swsetup_r+0x62>
 8009ed4:	06da      	lsls	r2, r3, #27
 8009ed6:	d407      	bmi.n	8009ee8 <__swsetup_r+0x30>
 8009ed8:	2209      	movs	r2, #9
 8009eda:	602a      	str	r2, [r5, #0]
 8009edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	e033      	b.n	8009f50 <__swsetup_r+0x98>
 8009ee8:	0758      	lsls	r0, r3, #29
 8009eea:	d512      	bpl.n	8009f12 <__swsetup_r+0x5a>
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	b141      	cbz	r1, 8009f02 <__swsetup_r+0x4a>
 8009ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	d002      	beq.n	8009efe <__swsetup_r+0x46>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7fe ff0d 	bl	8008d18 <_free_r>
 8009efe:	2300      	movs	r3, #0
 8009f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0308 	orr.w	r3, r3, #8
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	b94b      	cbnz	r3, 8009f32 <__swsetup_r+0x7a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	d003      	beq.n	8009f32 <__swsetup_r+0x7a>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f883 	bl	800a038 <__smakebuf_r>
 8009f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f36:	f013 0201 	ands.w	r2, r3, #1
 8009f3a:	d00a      	beq.n	8009f52 <__swsetup_r+0x9a>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	60a2      	str	r2, [r4, #8]
 8009f40:	6962      	ldr	r2, [r4, #20]
 8009f42:	4252      	negs	r2, r2
 8009f44:	61a2      	str	r2, [r4, #24]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	b942      	cbnz	r2, 8009f5c <__swsetup_r+0xa4>
 8009f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f4e:	d1c5      	bne.n	8009edc <__swsetup_r+0x24>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	0799      	lsls	r1, r3, #30
 8009f54:	bf58      	it	pl
 8009f56:	6962      	ldrpl	r2, [r4, #20]
 8009f58:	60a2      	str	r2, [r4, #8]
 8009f5a:	e7f4      	b.n	8009f46 <__swsetup_r+0x8e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7f7      	b.n	8009f50 <__swsetup_r+0x98>
 8009f60:	2000002c 	.word	0x2000002c

08009f64 <_raise_r>:
 8009f64:	291f      	cmp	r1, #31
 8009f66:	b538      	push	{r3, r4, r5, lr}
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	d904      	bls.n	8009f78 <_raise_r+0x14>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f7a:	b112      	cbz	r2, 8009f82 <_raise_r+0x1e>
 8009f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f80:	b94b      	cbnz	r3, 8009f96 <_raise_r+0x32>
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f830 	bl	8009fe8 <_getpid_r>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f92:	f000 b817 	b.w	8009fc4 <_kill_r>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00a      	beq.n	8009fb0 <_raise_r+0x4c>
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	d103      	bne.n	8009fa6 <_raise_r+0x42>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7e7      	b.n	8009f76 <_raise_r+0x12>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fac:	4620      	mov	r0, r4
 8009fae:	4798      	blx	r3
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7e0      	b.n	8009f76 <_raise_r+0x12>

08009fb4 <raise>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	@ (8009fc0 <raise+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f7ff bfd3 	b.w	8009f64 <_raise_r>
 8009fbe:	bf00      	nop
 8009fc0:	2000002c 	.word	0x2000002c

08009fc4 <_kill_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_kill_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f7 fe33 	bl	8001c3c <_kill>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_kill_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_kill_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200007c0 	.word	0x200007c0

08009fe8 <_getpid_r>:
 8009fe8:	f7f7 be20 	b.w	8001c2c <_getpid>

08009fec <__swhatbuf_r>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	b096      	sub	sp, #88	@ 0x58
 8009ff8:	4615      	mov	r5, r2
 8009ffa:	461e      	mov	r6, r3
 8009ffc:	da0d      	bge.n	800a01a <__swhatbuf_r+0x2e>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a004:	f04f 0100 	mov.w	r1, #0
 800a008:	bf14      	ite	ne
 800a00a:	2340      	movne	r3, #64	@ 0x40
 800a00c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a010:	2000      	movs	r0, #0
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	b016      	add	sp, #88	@ 0x58
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	466a      	mov	r2, sp
 800a01c:	f000 f848 	bl	800a0b0 <_fstat_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	dbec      	blt.n	8009ffe <__swhatbuf_r+0x12>
 800a024:	9901      	ldr	r1, [sp, #4]
 800a026:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a02a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a02e:	4259      	negs	r1, r3
 800a030:	4159      	adcs	r1, r3
 800a032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a036:	e7eb      	b.n	800a010 <__swhatbuf_r+0x24>

0800a038 <__smakebuf_r>:
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03c:	079d      	lsls	r5, r3, #30
 800a03e:	4606      	mov	r6, r0
 800a040:	460c      	mov	r4, r1
 800a042:	d507      	bpl.n	800a054 <__smakebuf_r+0x1c>
 800a044:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	2301      	movs	r3, #1
 800a04e:	6163      	str	r3, [r4, #20]
 800a050:	b003      	add	sp, #12
 800a052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a054:	ab01      	add	r3, sp, #4
 800a056:	466a      	mov	r2, sp
 800a058:	f7ff ffc8 	bl	8009fec <__swhatbuf_r>
 800a05c:	9f00      	ldr	r7, [sp, #0]
 800a05e:	4605      	mov	r5, r0
 800a060:	4639      	mov	r1, r7
 800a062:	4630      	mov	r0, r6
 800a064:	f7fe fecc 	bl	8008e00 <_malloc_r>
 800a068:	b948      	cbnz	r0, 800a07e <__smakebuf_r+0x46>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	059a      	lsls	r2, r3, #22
 800a070:	d4ee      	bmi.n	800a050 <__smakebuf_r+0x18>
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	e7e2      	b.n	800a044 <__smakebuf_r+0xc>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	6020      	str	r0, [r4, #0]
 800a082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a08e:	b15b      	cbz	r3, 800a0a8 <__smakebuf_r+0x70>
 800a090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f81d 	bl	800a0d4 <_isatty_r>
 800a09a:	b128      	cbz	r0, 800a0a8 <__smakebuf_r+0x70>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	f043 0301 	orr.w	r3, r3, #1
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	431d      	orrs	r5, r3
 800a0ac:	81a5      	strh	r5, [r4, #12]
 800a0ae:	e7cf      	b.n	800a050 <__smakebuf_r+0x18>

0800a0b0 <_fstat_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	@ (800a0d0 <_fstat_r+0x20>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f7f7 fe1d 	bl	8001cfc <_fstat>
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	d102      	bne.n	800a0cc <_fstat_r+0x1c>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b103      	cbz	r3, 800a0cc <_fstat_r+0x1c>
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200007c0 	.word	0x200007c0

0800a0d4 <_isatty_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_isatty_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f7 fe1c 	bl	8001d1c <_isatty>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_isatty_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_isatty_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	200007c0 	.word	0x200007c0

0800a0f4 <expf>:
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	ed2d 8b02 	vpush	{d8}
 800a0fa:	eef0 8a40 	vmov.f32	s17, s0
 800a0fe:	f000 f8b7 	bl	800a270 <__ieee754_expf>
 800a102:	eeb0 8a40 	vmov.f32	s16, s0
 800a106:	eeb0 0a68 	vmov.f32	s0, s17
 800a10a:	f000 f829 	bl	800a160 <finitef>
 800a10e:	b160      	cbz	r0, 800a12a <expf+0x36>
 800a110:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800a150 <expf+0x5c>
 800a114:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	dd0a      	ble.n	800a134 <expf+0x40>
 800a11e:	f7fd ff73 	bl	8008008 <__errno>
 800a122:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800a154 <expf+0x60>
 800a126:	2322      	movs	r3, #34	@ 0x22
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	eeb0 0a48 	vmov.f32	s0, s16
 800a12e:	ecbd 8b02 	vpop	{d8}
 800a132:	bd08      	pop	{r3, pc}
 800a134:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a158 <expf+0x64>
 800a138:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a140:	d5f3      	bpl.n	800a12a <expf+0x36>
 800a142:	f7fd ff61 	bl	8008008 <__errno>
 800a146:	2322      	movs	r3, #34	@ 0x22
 800a148:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800a15c <expf+0x68>
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	e7ec      	b.n	800a12a <expf+0x36>
 800a150:	42b17217 	.word	0x42b17217
 800a154:	7f800000 	.word	0x7f800000
 800a158:	c2cff1b5 	.word	0xc2cff1b5
 800a15c:	00000000 	.word	0x00000000

0800a160 <finitef>:
 800a160:	ee10 3a10 	vmov	r3, s0
 800a164:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a168:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a16c:	bfac      	ite	ge
 800a16e:	2000      	movge	r0, #0
 800a170:	2001      	movlt	r0, #1
 800a172:	4770      	bx	lr
 800a174:	0000      	movs	r0, r0
	...

0800a178 <floor>:
 800a178:	ec51 0b10 	vmov	r0, r1, d0
 800a17c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a188:	2e13      	cmp	r6, #19
 800a18a:	460c      	mov	r4, r1
 800a18c:	4605      	mov	r5, r0
 800a18e:	4680      	mov	r8, r0
 800a190:	dc34      	bgt.n	800a1fc <floor+0x84>
 800a192:	2e00      	cmp	r6, #0
 800a194:	da17      	bge.n	800a1c6 <floor+0x4e>
 800a196:	a332      	add	r3, pc, #200	@ (adr r3, 800a260 <floor+0xe8>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 f876 	bl	800028c <__adddf3>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f7f6 fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a8:	b150      	cbz	r0, 800a1c0 <floor+0x48>
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	da55      	bge.n	800a25a <floor+0xe2>
 800a1ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a1b2:	432c      	orrs	r4, r5
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	42ac      	cmp	r4, r5
 800a1b8:	4c2b      	ldr	r4, [pc, #172]	@ (800a268 <floor+0xf0>)
 800a1ba:	bf08      	it	eq
 800a1bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	e023      	b.n	800a20e <floor+0x96>
 800a1c6:	4f29      	ldr	r7, [pc, #164]	@ (800a26c <floor+0xf4>)
 800a1c8:	4137      	asrs	r7, r6
 800a1ca:	ea01 0307 	and.w	r3, r1, r7
 800a1ce:	4303      	orrs	r3, r0
 800a1d0:	d01d      	beq.n	800a20e <floor+0x96>
 800a1d2:	a323      	add	r3, pc, #140	@ (adr r3, 800a260 <floor+0xe8>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f7f6 fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d0eb      	beq.n	800a1c0 <floor+0x48>
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	bfbe      	ittt	lt
 800a1ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a1f0:	4133      	asrlt	r3, r6
 800a1f2:	18e4      	addlt	r4, r4, r3
 800a1f4:	ea24 0407 	bic.w	r4, r4, r7
 800a1f8:	2500      	movs	r5, #0
 800a1fa:	e7e1      	b.n	800a1c0 <floor+0x48>
 800a1fc:	2e33      	cmp	r6, #51	@ 0x33
 800a1fe:	dd0a      	ble.n	800a216 <floor+0x9e>
 800a200:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a204:	d103      	bne.n	800a20e <floor+0x96>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	f7f6 f83f 	bl	800028c <__adddf3>
 800a20e:	ec41 0b10 	vmov	d0, r0, r1
 800a212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a216:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a21a:	f04f 37ff 	mov.w	r7, #4294967295
 800a21e:	40df      	lsrs	r7, r3
 800a220:	4207      	tst	r7, r0
 800a222:	d0f4      	beq.n	800a20e <floor+0x96>
 800a224:	a30e      	add	r3, pc, #56	@ (adr r3, 800a260 <floor+0xe8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 f82f 	bl	800028c <__adddf3>
 800a22e:	2200      	movs	r2, #0
 800a230:	2300      	movs	r3, #0
 800a232:	f7f6 fc71 	bl	8000b18 <__aeabi_dcmpgt>
 800a236:	2800      	cmp	r0, #0
 800a238:	d0c2      	beq.n	800a1c0 <floor+0x48>
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	da0a      	bge.n	800a254 <floor+0xdc>
 800a23e:	2e14      	cmp	r6, #20
 800a240:	d101      	bne.n	800a246 <floor+0xce>
 800a242:	3401      	adds	r4, #1
 800a244:	e006      	b.n	800a254 <floor+0xdc>
 800a246:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a24a:	2301      	movs	r3, #1
 800a24c:	40b3      	lsls	r3, r6
 800a24e:	441d      	add	r5, r3
 800a250:	4545      	cmp	r5, r8
 800a252:	d3f6      	bcc.n	800a242 <floor+0xca>
 800a254:	ea25 0507 	bic.w	r5, r5, r7
 800a258:	e7b2      	b.n	800a1c0 <floor+0x48>
 800a25a:	2500      	movs	r5, #0
 800a25c:	462c      	mov	r4, r5
 800a25e:	e7af      	b.n	800a1c0 <floor+0x48>
 800a260:	8800759c 	.word	0x8800759c
 800a264:	7e37e43c 	.word	0x7e37e43c
 800a268:	bff00000 	.word	0xbff00000
 800a26c:	000fffff 	.word	0x000fffff

0800a270 <__ieee754_expf>:
 800a270:	ee10 2a10 	vmov	r2, s0
 800a274:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800a278:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a27c:	d902      	bls.n	800a284 <__ieee754_expf+0x14>
 800a27e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a282:	4770      	bx	lr
 800a284:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a288:	d106      	bne.n	800a298 <__ieee754_expf+0x28>
 800a28a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800a3c4 <__ieee754_expf+0x154>
 800a28e:	2900      	cmp	r1, #0
 800a290:	bf18      	it	ne
 800a292:	eeb0 0a67 	vmovne.f32	s0, s15
 800a296:	4770      	bx	lr
 800a298:	484b      	ldr	r0, [pc, #300]	@ (800a3c8 <__ieee754_expf+0x158>)
 800a29a:	4282      	cmp	r2, r0
 800a29c:	dd02      	ble.n	800a2a4 <__ieee754_expf+0x34>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f000 b8d4 	b.w	800a44c <__math_oflowf>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	da05      	bge.n	800a2b4 <__ieee754_expf+0x44>
 800a2a8:	4a48      	ldr	r2, [pc, #288]	@ (800a3cc <__ieee754_expf+0x15c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d902      	bls.n	800a2b4 <__ieee754_expf+0x44>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f000 b8c6 	b.w	800a440 <__math_uflowf>
 800a2b4:	4a46      	ldr	r2, [pc, #280]	@ (800a3d0 <__ieee754_expf+0x160>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a2bc:	d952      	bls.n	800a364 <__ieee754_expf+0xf4>
 800a2be:	4a45      	ldr	r2, [pc, #276]	@ (800a3d4 <__ieee754_expf+0x164>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a2c6:	d834      	bhi.n	800a332 <__ieee754_expf+0xc2>
 800a2c8:	4b43      	ldr	r3, [pc, #268]	@ (800a3d8 <__ieee754_expf+0x168>)
 800a2ca:	4413      	add	r3, r2
 800a2cc:	ed93 7a00 	vldr	s14, [r3]
 800a2d0:	4b42      	ldr	r3, [pc, #264]	@ (800a3dc <__ieee754_expf+0x16c>)
 800a2d2:	4413      	add	r3, r2
 800a2d4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a2d8:	f1c1 0201 	rsb	r2, r1, #1
 800a2dc:	edd3 7a00 	vldr	s15, [r3]
 800a2e0:	1a52      	subs	r2, r2, r1
 800a2e2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a2e6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a2ea:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800a3e0 <__ieee754_expf+0x170>
 800a2ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a3e4 <__ieee754_expf+0x174>
 800a2f2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a2f6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800a3e8 <__ieee754_expf+0x178>
 800a2fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a2fe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a3ec <__ieee754_expf+0x17c>
 800a302:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a306:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800a3f0 <__ieee754_expf+0x180>
 800a30a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a30e:	eef0 6a40 	vmov.f32	s13, s0
 800a312:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a316:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800a31a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a31e:	bb92      	cbnz	r2, 800a386 <__ieee754_expf+0x116>
 800a320:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a324:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a328:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a32c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a330:	4770      	bx	lr
 800a332:	4b30      	ldr	r3, [pc, #192]	@ (800a3f4 <__ieee754_expf+0x184>)
 800a334:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800a3f8 <__ieee754_expf+0x188>
 800a338:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800a3fc <__ieee754_expf+0x18c>
 800a33c:	4413      	add	r3, r2
 800a33e:	edd3 7a00 	vldr	s15, [r3]
 800a342:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a346:	eeb0 7a40 	vmov.f32	s14, s0
 800a34a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a34e:	ee17 2a90 	vmov	r2, s15
 800a352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a356:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a35a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a400 <__ieee754_expf+0x190>
 800a35e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a362:	e7be      	b.n	800a2e2 <__ieee754_expf+0x72>
 800a364:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800a368:	d20b      	bcs.n	800a382 <__ieee754_expf+0x112>
 800a36a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a404 <__ieee754_expf+0x194>
 800a36e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a372:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37a:	dd02      	ble.n	800a382 <__ieee754_expf+0x112>
 800a37c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a380:	4770      	bx	lr
 800a382:	2200      	movs	r2, #0
 800a384:	e7af      	b.n	800a2e6 <__ieee754_expf+0x76>
 800a386:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a38a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800a38e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a392:	bfb8      	it	lt
 800a394:	3264      	addlt	r2, #100	@ 0x64
 800a396:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a39a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a39e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a3a2:	ee17 3a90 	vmov	r3, s15
 800a3a6:	bfab      	itete	ge
 800a3a8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a3ac:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a3b0:	ee00 3a10 	vmovge	s0, r3
 800a3b4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800a408 <__ieee754_expf+0x198>
 800a3b8:	bfbc      	itt	lt
 800a3ba:	ee00 3a10 	vmovlt	s0, r3
 800a3be:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a3c2:	4770      	bx	lr
 800a3c4:	00000000 	.word	0x00000000
 800a3c8:	42b17217 	.word	0x42b17217
 800a3cc:	42cff1b5 	.word	0x42cff1b5
 800a3d0:	3eb17218 	.word	0x3eb17218
 800a3d4:	3f851591 	.word	0x3f851591
 800a3d8:	0800a898 	.word	0x0800a898
 800a3dc:	0800a890 	.word	0x0800a890
 800a3e0:	3331bb4c 	.word	0x3331bb4c
 800a3e4:	b5ddea0e 	.word	0xb5ddea0e
 800a3e8:	388ab355 	.word	0x388ab355
 800a3ec:	bb360b61 	.word	0xbb360b61
 800a3f0:	3e2aaaab 	.word	0x3e2aaaab
 800a3f4:	0800a8a0 	.word	0x0800a8a0
 800a3f8:	3fb8aa3b 	.word	0x3fb8aa3b
 800a3fc:	3f317180 	.word	0x3f317180
 800a400:	3717f7d1 	.word	0x3717f7d1
 800a404:	7149f2ca 	.word	0x7149f2ca
 800a408:	0d800000 	.word	0x0d800000

0800a40c <with_errnof>:
 800a40c:	b510      	push	{r4, lr}
 800a40e:	ed2d 8b02 	vpush	{d8}
 800a412:	eeb0 8a40 	vmov.f32	s16, s0
 800a416:	4604      	mov	r4, r0
 800a418:	f7fd fdf6 	bl	8008008 <__errno>
 800a41c:	eeb0 0a48 	vmov.f32	s0, s16
 800a420:	ecbd 8b02 	vpop	{d8}
 800a424:	6004      	str	r4, [r0, #0]
 800a426:	bd10      	pop	{r4, pc}

0800a428 <xflowf>:
 800a428:	b130      	cbz	r0, 800a438 <xflowf+0x10>
 800a42a:	eef1 7a40 	vneg.f32	s15, s0
 800a42e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a432:	2022      	movs	r0, #34	@ 0x22
 800a434:	f7ff bfea 	b.w	800a40c <with_errnof>
 800a438:	eef0 7a40 	vmov.f32	s15, s0
 800a43c:	e7f7      	b.n	800a42e <xflowf+0x6>
	...

0800a440 <__math_uflowf>:
 800a440:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a448 <__math_uflowf+0x8>
 800a444:	f7ff bff0 	b.w	800a428 <xflowf>
 800a448:	10000000 	.word	0x10000000

0800a44c <__math_oflowf>:
 800a44c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a454 <__math_oflowf+0x8>
 800a450:	f7ff bfea 	b.w	800a428 <xflowf>
 800a454:	70000000 	.word	0x70000000

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
