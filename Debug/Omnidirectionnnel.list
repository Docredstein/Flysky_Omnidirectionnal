
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009340  08009340  00019340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009734  08009734  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800973c  0800973c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800973c  0800973c  0001973c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200001e8  0800992c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0800992c  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119a6  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a4  00000000  00000000  00031c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000343a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c87  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281ab  00000000  00000000  0003604f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013eb3  00000000  00000000  0005e1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c2e  00000000  00000000  000720ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055cc  00000000  00000000  00166cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0016c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009328 	.word	0x08009328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009328 	.word	0x08009328

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee8:	b0b5      	sub	sp, #212	; 0xd4
 8000eea:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f001 f91c 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f8c8 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 fa7e 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef8:	f000 fa56 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f9f4 	bl	80012e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f00:	f000 f9be 	bl	8001280 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 fa20 	bl	8001348 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f08:	f000 f90e 	bl	8001128 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 8000f0c:	4952      	ldr	r1, [pc, #328]	; (8001058 <main+0x174>)
 8000f0e:	4853      	ldr	r0, [pc, #332]	; (800105c <main+0x178>)
 8000f10:	f000 fdd9 	bl	8001ac6 <IBUS_Init>
  Sabertooth_Init(&saber, &huart3, motor ,address);
 8000f14:	4b52      	ldr	r3, [pc, #328]	; (8001060 <main+0x17c>)
 8000f16:	4a53      	ldr	r2, [pc, #332]	; (8001064 <main+0x180>)
 8000f18:	4953      	ldr	r1, [pc, #332]	; (8001068 <main+0x184>)
 8000f1a:	4854      	ldr	r0, [pc, #336]	; (800106c <main+0x188>)
 8000f1c:	f000 ffc6 	bl	8001eac <Sabertooth_Init>
  channel = IBUS_GetChannels(&Ibus);
 8000f20:	484e      	ldr	r0, [pc, #312]	; (800105c <main+0x178>)
 8000f22:	f000 fe6e 	bl	8001c02 <IBUS_GetChannels>
 8000f26:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

  char msg[150] = {0};
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2292      	movs	r2, #146	; 0x92
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 ff47 	bl	8006dca <memset>
  IBUS_Update(&Ibus);
 8000f3c:	4847      	ldr	r0, [pc, #284]	; (800105c <main+0x178>)
 8000f3e:	f000 fde6 	bl	8001b0e <IBUS_Update>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Receiving
	  IBUS_Update(&Ibus);
 8000f42:	4846      	ldr	r0, [pc, #280]	; (800105c <main+0x178>)
 8000f44:	f000 fde3 	bl	8001b0e <IBUS_Update>

	//Processing
	  uint16_t swap = channel[0];
 8000f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  channel[0] = channel[2];
 8000f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f56:	889a      	ldrh	r2, [r3, #4]
 8000f58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f5c:	801a      	strh	r2, [r3, #0]
	  channel[1] = swap;
 8000f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f62:	3302      	adds	r3, #2
 8000f64:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8000f68:	801a      	strh	r2, [r3, #0]
	  channel[2] = channel[3];
 8000f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f6e:	3304      	adds	r3, #4
 8000f70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000f74:	88d2      	ldrh	r2, [r2, #6]
 8000f76:	801a      	strh	r2, [r3, #0]

	  Transform_Omni(channel, command);
 8000f78:	493d      	ldr	r1, [pc, #244]	; (8001070 <main+0x18c>)
 8000f7a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000f7e:	f000 fe97 	bl	8001cb0 <Transform_Omni>



	//Controlling
	  if (channel[8]<1500) {
 8000f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f86:	3310      	adds	r3, #16
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d810      	bhi.n	8000fb4 <main+0xd0>
		  Sabertooth_Drive(&saber,Stop);
 8000f92:	4938      	ldr	r1, [pc, #224]	; (8001074 <main+0x190>)
 8000f94:	4835      	ldr	r0, [pc, #212]	; (800106c <main+0x188>)
 8000f96:	f001 f841 	bl	800201c <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f001 fdf1 	bl	8002b88 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, "-", 1, 5);
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4933      	ldr	r1, [pc, #204]	; (8001078 <main+0x194>)
 8000fac:	4833      	ldr	r0, [pc, #204]	; (800107c <main+0x198>)
 8000fae:	f004 f917 	bl	80051e0 <HAL_UART_Transmit>
 8000fb2:	e009      	b.n	8000fc8 <main+0xe4>
	  }
	  else {
		  Sabertooth_Drive(&saber,command);
 8000fb4:	492e      	ldr	r1, [pc, #184]	; (8001070 <main+0x18c>)
 8000fb6:	482d      	ldr	r0, [pc, #180]	; (800106c <main+0x188>)
 8000fb8:	f001 f830 	bl	800201c <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 fde0 	bl	8002b88 <HAL_GPIO_WritePin>
	  }
	  sprintf(msg,"%i;%i;%i; ==> %f;%f;%f;%f\r\n",channel[0],channel[1],channel[2],command[0],command[1],command[2],command[3]);
 8000fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fde:	3304      	adds	r3, #4
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	461e      	mov	r6, r3
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <main+0x18c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff faad 	bl	8000548 <__aeabi_f2d>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <main+0x18c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4680      	mov	r8, r0
 8000ffe:	4689      	mov	r9, r1
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <main+0x18c>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa9f 	bl	8000548 <__aeabi_f2d>
 800100a:	4682      	mov	sl, r0
 800100c:	468b      	mov	fp, r1
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <main+0x18c>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001024:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001028:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800102c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001030:	9600      	str	r6, [sp, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4912      	ldr	r1, [pc, #72]	; (8001080 <main+0x19c>)
 8001038:	f005 fe64 	bl	8006d04 <siprintf>
	  //HAL_UART_Transmit(&huart2, "-", 1, 5);


	  //sprintf(msg,"%i,%f;\r\n",channel[0],command[0]);
	  //sprintf(msg,"%i;%i;%i;%i;%i;%i;%i;%i;%i;%i\r\n",channel[0],channel[1],channel[2],channel[3],channel[4],channel[5],channel[6],channel[7],channel[8],channel[9]);
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f915 	bl	8000270 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f107 010c 	add.w	r1, r7, #12
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <main+0x198>)
 8001052:	f004 f8c5 	bl	80051e0 <HAL_UART_Transmit>
  {
 8001056:	e774      	b.n	8000f42 <main+0x5e>
 8001058:	20000250 	.word	0x20000250
 800105c:	20000478 	.word	0x20000478
 8001060:	20000004 	.word	0x20000004
 8001064:	20000000 	.word	0x20000000
 8001068:	20000360 	.word	0x20000360
 800106c:	20000510 	.word	0x20000510
 8001070:	20000538 	.word	0x20000538
 8001074:	20000528 	.word	0x20000528
 8001078:	08009340 	.word	0x08009340
 800107c:	200002d8 	.word	0x200002d8
 8001080:	08009344 	.word	0x08009344

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fe99 	bl	8006dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010aa:	f001 fd93 	bl	8002bd4 <HAL_PWREx_ControlVoltageScaling>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b4:	f000 fa04 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c2:	2310      	movs	r3, #16
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010d2:	230a      	movs	r3, #10
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d6:	2307      	movs	r3, #7
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fdca 	bl	8002c80 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010f2:	f000 f9e5 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2303      	movs	r3, #3
 80010fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	2104      	movs	r1, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f992 	bl	8003438 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800111a:	f000 f9d1 	bl	80014c0 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3758      	adds	r7, #88	; 0x58
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09a      	sub	sp, #104	; 0x68
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	222c      	movs	r2, #44	; 0x2c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f005 fe31 	bl	8006dca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <MX_TIM1_Init+0x150>)
 800116a:	4a44      	ldr	r2, [pc, #272]	; (800127c <MX_TIM1_Init+0x154>)
 800116c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <MX_TIM1_Init+0x150>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <MX_TIM1_Init+0x150>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <MX_TIM1_Init+0x150>)
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <MX_TIM1_Init+0x150>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_TIM1_Init+0x150>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_TIM1_Init+0x150>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001194:	4838      	ldr	r0, [pc, #224]	; (8001278 <MX_TIM1_Init+0x150>)
 8001196:	f003 f82f 	bl	80041f8 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 f98e 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ae:	4619      	mov	r1, r3
 80011b0:	4831      	ldr	r0, [pc, #196]	; (8001278 <MX_TIM1_Init+0x150>)
 80011b2:	f003 f9ed 	bl	8004590 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011bc:	f000 f980 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c0:	482d      	ldr	r0, [pc, #180]	; (8001278 <MX_TIM1_Init+0x150>)
 80011c2:	f003 f870 	bl	80042a6 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011cc:	f000 f978 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e0:	4619      	mov	r1, r3
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <MX_TIM1_Init+0x150>)
 80011e4:	f003 fea8 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ee:	f000 f967 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	; 0x60
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM1_Init+0x150>)
 8001218:	f003 f8a6 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001222:	f000 f94d 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM1_Init+0x150>)
 800125c:	f003 fef4 	bl	8005048 <HAL_TIMEx_ConfigBreakDeadTime>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001266:	f000 f92b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM1_Init+0x150>)
 800126c:	f000 f972 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8001270:	bf00      	nop
 8001272:	3768      	adds	r7, #104	; 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000204 	.word	0x20000204
 800127c:	40012c00 	.word	0x40012c00

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <MX_USART1_UART_Init+0x64>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012be:	2208      	movs	r2, #8
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART1_UART_Init+0x60>)
 80012cc:	f003 ff3a 	bl	8005144 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80012d6:	f000 f8f3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000250 	.word	0x20000250
 80012e4:	40013800 	.word	0x40013800

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <MX_USART2_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800132c:	f003 ff0a 	bl	8005144 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f8c3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002d8 	.word	0x200002d8
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MX_USART3_UART_Init+0x5c>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800136e:	2208      	movs	r2, #8
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800138c:	f003 feda 	bl	8005144 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 f893 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000360 	.word	0x20000360
 80013a4:	40004800 	.word	0x40004800

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_DMA_Init+0x48>)
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <MX_DMA_Init+0x48>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_DMA_Init+0x48>)
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200c      	movs	r0, #12
 80013cc:	f001 f803 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013d0:	200c      	movs	r0, #12
 80013d2:	f001 f81c 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 fffb 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013e0:	200f      	movs	r0, #15
 80013e2:	f001 f814 	bl	800240e <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <MX_GPIO_Init+0xc4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_GPIO_Init+0xc4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_GPIO_Init+0xc4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f001 fb89 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <MX_GPIO_Init+0xc8>)
 800148e:	f001 f9d1 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2320      	movs	r3, #32
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 f9c2 	bl	8002834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000800 	.word	0x48000800

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0x38>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10b      	bne.n	800153e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_TIM_Base_MspInit+0x3c>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0x3c>)
 800152c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_TIM_Base_MspInit+0x3c>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_TIM_MspPostInit+0x68>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11d      	bne.n	80015b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_TIM_MspPostInit+0x6c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_TIM_MspPostInit+0x6c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f001 f941 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0b0      	sub	sp, #192	; 0xc0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	2288      	movs	r2, #136	; 0x88
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fbf0 	bl	8006dca <memset>
  if(huart->Instance==USART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a8d      	ldr	r2, [pc, #564]	; (8001824 <HAL_UART_MspInit+0x260>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d167      	bne.n	80016c4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4618      	mov	r0, r3
 8001602:	f002 f93d 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff ff58 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	4a84      	ldr	r2, [pc, #528]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6613      	str	r3, [r2, #96]	; 0x60
 800161c:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_UART_MspInit+0x264>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_UART_MspInit+0x264>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a7e      	ldr	r2, [pc, #504]	; (8001828 <HAL_UART_MspInit+0x264>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800165a:	2307      	movs	r3, #7
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f001 f8e3 	bl	8002834 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_UART_MspInit+0x268>)
 8001670:	4a6f      	ldr	r2, [pc, #444]	; (8001830 <HAL_UART_MspInit+0x26c>)
 8001672:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <HAL_UART_MspInit+0x268>)
 8001676:	2202      	movs	r2, #2
 8001678:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_UART_MspInit+0x268>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_UART_MspInit+0x268>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001686:	4b69      	ldr	r3, [pc, #420]	; (800182c <HAL_UART_MspInit+0x268>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_UART_MspInit+0x268>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_UART_MspInit+0x268>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001698:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_UART_MspInit+0x268>)
 800169a:	2220      	movs	r2, #32
 800169c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_UART_MspInit+0x268>)
 80016a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016a6:	4861      	ldr	r0, [pc, #388]	; (800182c <HAL_UART_MspInit+0x268>)
 80016a8:	f000 fecc 	bl	8002444 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80016b2:	f7ff ff05 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a5c      	ldr	r2, [pc, #368]	; (800182c <HAL_UART_MspInit+0x268>)
 80016ba:	675a      	str	r2, [r3, #116]	; 0x74
 80016bc:	4a5b      	ldr	r2, [pc, #364]	; (800182c <HAL_UART_MspInit+0x268>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c2:	e0aa      	b.n	800181a <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_UART_MspInit+0x270>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d13c      	bne.n	8001748 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 f8d0 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x126>
      Error_Handler();
 80016e6:	f7ff feeb 	bl	80014c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ea:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <HAL_UART_MspInit+0x264>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_UART_MspInit+0x264>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_UART_MspInit+0x264>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171a:	230c      	movs	r3, #12
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f001 f877 	bl	8002834 <HAL_GPIO_Init>
}
 8001746:	e068      	b.n	800181a <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3a      	ldr	r2, [pc, #232]	; (8001838 <HAL_UART_MspInit+0x274>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d163      	bne.n	800181a <HAL_UART_MspInit+0x256>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001756:	2300      	movs	r3, #0
 8001758:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4618      	mov	r0, r3
 8001760:	f002 f88e 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800176a:	f7ff fea9 	bl	80014c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_UART_MspInit+0x264>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_UART_MspInit+0x264>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_UART_MspInit+0x264>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800179e:	2330      	movs	r3, #48	; 0x30
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b6:	2307      	movs	r3, #7
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c0:	4619      	mov	r1, r3
 80017c2:	481e      	ldr	r0, [pc, #120]	; (800183c <HAL_UART_MspInit+0x278>)
 80017c4:	f001 f836 	bl	8002834 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_UART_MspInit+0x280>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017d6:	2210      	movs	r2, #16
 80017d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x27c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_UART_MspInit+0x27c>)
 8001800:	f000 fe20 	bl	8002444 <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x24a>
      Error_Handler();
 800180a:	f7ff fe59 	bl	80014c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_UART_MspInit+0x27c>)
 8001812:	671a      	str	r2, [r3, #112]	; 0x70
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_UART_MspInit+0x27c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6293      	str	r3, [r2, #40]	; 0x28
}
 800181a:	bf00      	nop
 800181c:	37c0      	adds	r7, #192	; 0xc0
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013800 	.word	0x40013800
 8001828:	40021000 	.word	0x40021000
 800182c:	200003e8 	.word	0x200003e8
 8001830:	40020058 	.word	0x40020058
 8001834:	40004400 	.word	0x40004400
 8001838:	40004800 	.word	0x40004800
 800183c:	48000800 	.word	0x48000800
 8001840:	20000430 	.word	0x20000430
 8001844:	4002001c 	.word	0x4002001c

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 fca4 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA1_Channel2_IRQHandler+0x10>)
 80018a2:	f000 fee7 	bl	8002674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000430 	.word	0x20000430

080018b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA1_Channel5_IRQHandler+0x10>)
 80018b6:	f000 fedd 	bl	8002674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200003e8 	.word	0x200003e8

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018de:	f005 fac7 	bl	8006e70 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_exit>:

void _exit (int status)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001906:	e7fe      	b.n	8001906 <_exit+0x12>

08001908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e00a      	b.n	8001930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191a:	f3af 8000 	nop.w
 800191e:	4601      	mov	r1, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf0      	blt.n	800191a <_read+0x12>
  }

  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e009      	b.n	8001968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf1      	blt.n	8001954 <_write+0x12>
  }
  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_close>:

int _close(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a2:	605a      	str	r2, [r3, #4]
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_isatty>:

int _isatty(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f005 fa2c 	bl	8006e70 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20018000 	.word	0x20018000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20000548 	.word	0x20000548
 8001a4c:	200006a0 	.word	0x200006a0

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff ffea 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	; (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f005 f9eb 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff fa1d 	bl	8000ee4 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ab8:	08009744 	.word	0x08009744
  ldr r2, =_sbss
 8001abc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ac0:	200006a0 	.word	0x200006a0

08001ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_2_IRQHandler>

08001ac6 <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel, 1500, 6 * sizeof(uint16_t));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 f975 	bl	8006dca <memset>
	Ibus->handle = handle;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer, 0, 128);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 f96b 	bl	8006dca <memset>
	return HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3318      	adds	r3, #24
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	4619      	mov	r1, r3
 8001b00:	f003 fc74 	bl	80053ec <HAL_UART_Receive_DMA>
 8001b04:	4603      	mov	r3, r0

}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b094      	sub	sp, #80	; 0x50
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 64);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	2240      	movs	r2, #64	; 0x40
 8001b20:	4619      	mov	r1, r3
 8001b22:	f003 fc63 	bl	80053ec <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = { 0 };
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	223c      	movs	r2, #60	; 0x3c
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 f949 	bl	8006dca <memset>
	uint16_t packetStart = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001b44:	e018      	b.n	8001b78 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i + 1] == 0x40) {
 8001b46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	7e1b      	ldrb	r3, [r3, #24]
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d10c      	bne.n	8001b6e <IBUS_Update+0x60>
 8001b54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b58:	3301      	adds	r3, #1
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	7e1b      	ldrb	r3, [r3, #24]
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d104      	bne.n	8001b6e <IBUS_Update+0x60>
			packetStart = i;
 8001b64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			break;
 8001b6c:	e008      	b.n	8001b80 <IBUS_Update+0x72>
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001b6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b72:	3301      	adds	r3, #1
 8001b74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001b78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8001b7e:	d9e2      	bls.n	8001b46 <IBUS_Update+0x38>
		}
	}
	if (packetStart >= 64) {
 8001b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b84:	2b3f      	cmp	r3, #63	; 0x3f
 8001b86:	d901      	bls.n	8001b8c <IBUS_Update+0x7e>
		return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e036      	b.n	8001bfa <IBUS_Update+0xec>
	}
	memcpy(Packet, Ibus->UARTBuffer + packetStart + 2, 32);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 0218 	add.w	r2, r3, #24
 8001b92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b96:	3302      	adds	r3, #2
 8001b98:	18d1      	adds	r1, r2, r3
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 f992 	bl	8006eca <memcpy>



	for (uint16_t i = 0; i < 10	; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001bac:	e020      	b.n	8001bf0 <IBUS_Update+0xe2>
		Ibus->channel[i] = (Packet[2 * i + 1] << 8) | Packet[2 * i];
 8001bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	3350      	adds	r3, #80	; 0x50
 8001bb8:	443b      	add	r3, r7
 8001bba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	3350      	adds	r3, #80	; 0x50
 8001bca:	443b      	add	r3, r7
 8001bcc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bda:	b291      	uxth	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	460a      	mov	r2, r1
 8001be4:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < 10	; i++) {
 8001be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bea:	3301      	adds	r3, #1
 8001bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d9da      	bls.n	8001bae <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3750      	adds	r7, #80	; 0x50
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3304      	adds	r3, #4
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <CurveInput>:
#include "Omnidirection.h"
float exponent[3] = {2,2,2};


void CurveInput(float input[3]) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	ed2d 8b02 	vpush	{d8}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	for (int i =0;i<3;i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e034      	b.n	8001c98 <CurveInput+0x7c>
		input[i] =expf( fabsf(input[i]) * exponent[i] )*input[i]/expf(exponent[i]);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <CurveInput+0x90>)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	f007 f9b3 	bl	8008fbc <expf>
 8001c56:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <CurveInput+0x90>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	f007 f99f 	bl	8008fbc <expf>
 8001c7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	for (int i =0;i<3;i++) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	ddc7      	ble.n	8001c2e <CurveInput+0x12>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	ecbd 8b02 	vpop	{d8}
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <Transform_Omni>:
HAL_StatusTypeDef Transform_Omni(uint16_t Channel[3], float output[4]) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	float input[3] = { 0 };
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
	int8_t forward[4] = { 1, 1, 1, 1 };
 8001cc6:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8001cca:	613b      	str	r3, [r7, #16]
	int8_t right[4] = { 1, -1, -1, 1 };
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <Transform_Omni+0x174>)
 8001cce:	60fb      	str	r3, [r7, #12]
	int8_t rotate_c[4] = { 1, 1, -1, -1 };
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <Transform_Omni+0x178>)
 8001cd2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	e032      	b.n	8001d40 <Transform_Omni+0x90>
		input[i] = ((float) Channel[i] - 1500) / 500;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001e2c <Transform_Omni+0x17c>
 8001cf0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001e30 <Transform_Omni+0x180>
 8001cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	3328      	adds	r3, #40	; 0x28
 8001d02:	443b      	add	r3, r7
 8001d04:	3b14      	subs	r3, #20
 8001d06:	edc3 7a00 	vstr	s15, [r3]
		if (Channel[i] <500 || Channel[i] >2000) {
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d18:	d307      	bcc.n	8001d2a <Transform_Omni+0x7a>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d28:	d907      	bls.n	8001d3a <Transform_Omni+0x8a>
			input[i]=0;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3328      	adds	r3, #40	; 0x28
 8001d30:	443b      	add	r3, r7
 8001d32:	3b14      	subs	r3, #20
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	ddc9      	ble.n	8001cda <Transform_Omni+0x2a>
		}

	}
	CurveInput(input);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff66 	bl	8001c1c <CurveInput>
	for (int i = 0; i < 4; i++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	e05e      	b.n	8001e14 <Transform_Omni+0x164>
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001d56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d5a:	f107 0210 	add.w	r2, r7, #16
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	4413      	add	r3, r2
 8001d62:	f993 3000 	ldrsb.w	r3, [r3]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d72:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ input[2] * rotate_c[i];
 8001d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d96:	f107 0208 	add.w	r2, r7, #8
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	4413      	add	r3, r2
						+ input[2] * rotate_c[i];
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001dba:	edc3 7a00 	vstr	s15, [r3]
				if (output[i]>1) {
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	dd07      	ble.n	8001de8 <Transform_Omni+0x138>
					output[i]=1;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e012      	b.n	8001e0e <Transform_Omni+0x15e>
				}
				else if (output[i]<-1) {
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d505      	bpl.n	8001e0e <Transform_Omni+0x15e>
					output[i]=-1;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <Transform_Omni+0x184>)
 8001e0c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	3301      	adds	r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	dd9d      	ble.n	8001d56 <Transform_Omni+0xa6>
			}
	/*float norme = sqrtf(
			output[0] * output[0] + output[1] * output[1] + output[2] * output[2]+output[3] * output[3]);*/


	return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	01ffff01 	.word	0x01ffff01
 8001e28:	ffff0101 	.word	0xffff0101
 8001e2c:	44bb8000 	.word	0x44bb8000
 8001e30:	43fa0000 	.word	0x43fa0000
 8001e34:	bf800000 	.word	0xbf800000

08001e38 <HAL_UART_RxCpltCallback>:
 */

#include "Sabertooth.h"
static Sabertooth *sabertooth_ptr;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	if (huart != sabertooth_ptr->handle) {
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d129      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x68>
		return;
	}
	if (sabertooth_ptr->Queue.NumberOfPacket <= 0) {
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	89db      	ldrh	r3, [r3, #14]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_UART_RxCpltCallback+0x28>
		sabertooth_ptr->Queue.CurrentlySending = 0;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	731a      	strb	r2, [r3, #12]
 8001e5e:	e020      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x6a>
	} else {
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	6819      	ldr	r1, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->length);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f003 fa3e 	bl	80052f4 <HAL_UART_Transmit_DMA>
		sabertooth_ptr->Queue.FirstPacket =
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
		sabertooth_ptr->Queue.FirstPacket =
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e80:	681b      	ldr	r3, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001e82:	6892      	ldr	r2, [r2, #8]
		sabertooth_ptr->Queue.FirstPacket =
 8001e84:	611a      	str	r2, [r3, #16]
		sabertooth_ptr->Queue.NumberOfPacket -= 1;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	89da      	ldrh	r2, [r3, #14]
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3a01      	subs	r2, #1
 8001e92:	b292      	uxth	r2, r2
 8001e94:	81da      	strh	r2, [r3, #14]
		sabertooth_ptr->Queue.CurrentlySending = 1;
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_UART_RxCpltCallback+0x70>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	731a      	strb	r2, [r3, #12]
 8001e9e:	e000      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x6a>
		return;
 8001ea0:	bf00      	nop
	}
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000054c 	.word	0x2000054c

08001eac <Sabertooth_Init>:
HAL_StatusTypeDef Sabertooth_Init(Sabertooth *saber, UART_HandleTypeDef *handle,
		uint8_t motor[4], uint8_t adress[4]) {
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
	sabertooth_ptr = saber;
 8001eba:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <Sabertooth_Init+0x64>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e016      	b.n	8001ef4 <Sabertooth_Init+0x48>
		saber->adress[i] = adress[i];
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	7819      	ldrb	r1, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
		saber->motor[i] = motor[i];
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	7819      	ldrb	r1, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3308      	adds	r3, #8
 8001eea:	460a      	mov	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	dde5      	ble.n	8001ec6 <Sabertooth_Init+0x1a>
	}
	saber->handle = handle;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	601a      	str	r2, [r3, #0]
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000054c 	.word	0x2000054c

08001f14 <Sabertooth_Send>:
HAL_StatusTypeDef Sabertooth_Send(Sabertooth *saber, uint8_t address,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8001f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f18:	b08b      	sub	sp, #44	; 0x2c
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	72fb      	strb	r3, [r7, #11]
 8001f24:	4613      	mov	r3, r2
 8001f26:	72bb      	strb	r3, [r7, #10]
 8001f28:	466b      	mov	r3, sp
 8001f2a:	461e      	mov	r6, r3
	uint8_t Packet[3 + data_length];
 8001f2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f30:	1cd9      	adds	r1, r3, #3
 8001f32:	1e4b      	subs	r3, r1, #1
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	460a      	mov	r2, r1
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4690      	mov	r8, r2
 8001f3c:	4699      	mov	r9, r3
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f52:	460a      	mov	r2, r1
 8001f54:	2300      	movs	r3, #0
 8001f56:	4614      	mov	r4, r2
 8001f58:	461d      	mov	r5, r3
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	00eb      	lsls	r3, r5, #3
 8001f64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f68:	00e2      	lsls	r2, r4, #3
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	3307      	adds	r3, #7
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	ebad 0d03 	sub.w	sp, sp, r3
 8001f76:	466b      	mov	r3, sp
 8001f78:	3300      	adds	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
	Packet[0] = address;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	7afa      	ldrb	r2, [r7, #11]
 8001f80:	701a      	strb	r2, [r3, #0]
	Packet[1] = command;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	7aba      	ldrb	r2, [r7, #10]
 8001f86:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	e00a      	b.n	8001fa4 <Sabertooth_Send+0x90>
		Packet[i + 2] = data[i];
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	441a      	add	r2, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3302      	adds	r3, #2
 8001f98:	7811      	ldrb	r1, [r2, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < data_length; i++) {
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbef      	blt.n	8001f8e <Sabertooth_Send+0x7a>
	}
	uint8_t Checksum = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e00b      	b.n	8001fd2 <Sabertooth_Send+0xbe>
		Checksum += Packet[i];
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dded      	ble.n	8001fba <Sabertooth_Send+0xa6>
	}
	Checksum = Checksum & 0x7F;
 8001fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Packet[2 + data_length] = Checksum;
 8001fea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fee:	3302      	adds	r3, #2
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001ff6:	54d1      	strb	r1, [r2, r3]
	//return HAL_UART_Transmit_DMA(saber->handle, Packet, 3 + data_length);
	return HAL_UART_Transmit(saber->handle, Packet, 3+data_length,10);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002000:	3303      	adds	r3, #3
 8002002:	b29a      	uxth	r2, r3
 8002004:	230a      	movs	r3, #10
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	f003 f8ea 	bl	80051e0 <HAL_UART_Transmit>
 800200c:	4603      	mov	r3, r0
 800200e:	46b5      	mov	sp, r6
		saber->Queue.FirstPacket = &PacketToSend;
		saber->Queue.lastPacket = &PacketToSend;
		saber->Queue.NumberOfPacket = 1;
	}*/
	return HAL_OK;
}
 8002010:	4618      	mov	r0, r3
 8002012:	372c      	adds	r7, #44	; 0x2c
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800201c <Sabertooth_Drive>:

HAL_StatusTypeDef Sabertooth_Drive(Sabertooth *saber, float command[4]) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++) {
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e072      	b.n	8002112 <Sabertooth_Drive+0xf6>
		if (command[i] >= 0) {
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	db30      	blt.n	80020a4 <Sabertooth_Drive+0x88>
			uint8_t data = floor(command[i] * 127);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002124 <Sabertooth_Drive+0x108>
 8002052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002056:	ee17 0a90 	vmov	r0, s15
 800205a:	f7fe fa75 	bl	8000548 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	ec43 2b10 	vmov	d0, r2, r3
 8002066:	f006 ffef 	bl	8009048 <floor>
 800206a:	ec53 2b10 	vmov	r2, r3, d0
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fd99 	bl	8000ba8 <__aeabi_d2uiz>
 8002076:	4603      	mov	r3, r0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	72fb      	strb	r3, [r7, #11]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i], &data,
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	7819      	ldrb	r1, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	3308      	adds	r3, #8
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	b2da      	uxtb	r2, r3
 8002094:	f107 030b 	add.w	r3, r7, #11
 8002098:	2001      	movs	r0, #1
 800209a:	9000      	str	r0, [sp, #0]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff39 	bl	8001f14 <Sabertooth_Send>
 80020a2:	e033      	b.n	800210c <Sabertooth_Drive+0xf0>
					1);

		} else {
			uint8_t data = floor(-command[i] * 127);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	eef1 7a67 	vneg.f32	s15, s15
 80020b4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002124 <Sabertooth_Drive+0x108>
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	ee17 0a90 	vmov	r0, s15
 80020c0:	f7fe fa42 	bl	8000548 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	ec43 2b10 	vmov	d0, r2, r3
 80020cc:	f006 ffbc 	bl	8009048 <floor>
 80020d0:	ec53 2b10 	vmov	r2, r3, d0
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd66 	bl	8000ba8 <__aeabi_d2uiz>
 80020dc:	4603      	mov	r3, r0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	72bb      	strb	r3, [r7, #10]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i] + 1,
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	3308      	adds	r3, #8
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	f107 030a 	add.w	r3, r7, #10
 8002102:	2001      	movs	r0, #1
 8002104:	9000      	str	r0, [sp, #0]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff04 	bl	8001f14 <Sabertooth_Send>
	for (int i = 0; i < 4; i++) {
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b03      	cmp	r3, #3
 8002116:	dd89      	ble.n	800202c <Sabertooth_Drive+0x10>
					&data, 1);
		}
	}

	return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	42fe0000 	.word	0x42fe0000

08002128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_Init+0x3c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_Init+0x3c>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213e:	2003      	movs	r0, #3
 8002140:	f000 f93e 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f80f 	bl	8002168 <HAL_InitTick>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	e001      	b.n	800215a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002156:	f7ff f9b9 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800215a:	79fb      	ldrb	r3, [r7, #7]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_InitTick+0x6c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_InitTick+0x70>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_InitTick+0x6c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f949 	bl	800242a <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10f      	bne.n	80021be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d809      	bhi.n	80021b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 f913 	bl	80023d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_InitTick+0x74>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e004      	b.n	80021c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e001      	b.n	80021c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000001c 	.word	0x2000001c
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000018 	.word	0x20000018

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000001c 	.word	0x2000001c
 8002204:	20000550 	.word	0x20000550

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000550 	.word	0x20000550

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff29 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff3e 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff8e 	bl	8002314 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5d 	bl	80022c0 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff31 	bl	8002284 <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e098      	b.n	8002588 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_DMA_Init+0x150>)
 800245e:	429a      	cmp	r2, r3
 8002460:	d80f      	bhi.n	8002482 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_DMA_Init+0x154>)
 800246a:	4413      	add	r3, r2
 800246c:	4a4b      	ldr	r2, [pc, #300]	; (800259c <HAL_DMA_Init+0x158>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_DMA_Init+0x15c>)
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
 8002480:	e00e      	b.n	80024a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_DMA_Init+0x160>)
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_DMA_Init+0x158>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_DMA_Init+0x164>)
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024fa:	d039      	beq.n	8002570 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_DMA_Init+0x15c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d11a      	bne.n	800253c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_DMA_Init+0x168>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f003 031c 	and.w	r3, r3, #28
 8002512:	210f      	movs	r1, #15
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4924      	ldr	r1, [pc, #144]	; (80025ac <HAL_DMA_Init+0x168>)
 800251c:	4013      	ands	r3, r2
 800251e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_DMA_Init+0x168>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	f003 031c 	and.w	r3, r3, #28
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	491d      	ldr	r1, [pc, #116]	; (80025ac <HAL_DMA_Init+0x168>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
 800253a:	e019      	b.n	8002570 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_DMA_Init+0x16c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f003 031c 	and.w	r3, r3, #28
 8002548:	210f      	movs	r1, #15
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	4917      	ldr	r1, [pc, #92]	; (80025b0 <HAL_DMA_Init+0x16c>)
 8002552:	4013      	ands	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_DMA_Init+0x16c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 031c 	and.w	r3, r3, #28
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	4911      	ldr	r1, [pc, #68]	; (80025b0 <HAL_DMA_Init+0x16c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40020407 	.word	0x40020407
 8002598:	bffdfff8 	.word	0xbffdfff8
 800259c:	cccccccd 	.word	0xcccccccd
 80025a0:	40020000 	.word	0x40020000
 80025a4:	bffdfbf8 	.word	0xbffdfbf8
 80025a8:	40020400 	.word	0x40020400
 80025ac:	400200a8 	.word	0x400200a8
 80025b0:	400204a8 	.word	0x400204a8

080025b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_DMA_Start_IT+0x20>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e04b      	b.n	800266c <HAL_DMA_Start_IT+0xb8>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d13a      	bne.n	800265e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f8e0 	bl	80027d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 020e 	orr.w	r2, r2, #14
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e00f      	b.n	800264c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 020a 	orr.w	r2, r2, #10
 800264a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e005      	b.n	800266a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f003 031c 	and.w	r3, r3, #28
 8002694:	2204      	movs	r2, #4
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d026      	beq.n	80026ee <HAL_DMA_IRQHandler+0x7a>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d021      	beq.n	80026ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	f003 021c 	and.w	r2, r3, #28
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2104      	movs	r1, #4
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d071      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ec:	e06c      	b.n	80027c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f003 031c 	and.w	r3, r3, #28
 80026f6:	2202      	movs	r2, #2
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02e      	beq.n	8002760 <HAL_DMA_IRQHandler+0xec>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d029      	beq.n	8002760 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020a 	bic.w	r2, r2, #10
 8002728:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f003 021c 	and.w	r2, r3, #28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2102      	movs	r1, #2
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d038      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800275e:	e033      	b.n	80027c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f003 031c 	and.w	r3, r3, #28
 8002768:	2208      	movs	r2, #8
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02a      	beq.n	80027ca <HAL_DMA_IRQHandler+0x156>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d025      	beq.n	80027ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 020e 	bic.w	r2, r2, #14
 800278c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 021c 	and.w	r2, r3, #28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
}
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 021c 	and.w	r2, r3, #28
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b10      	cmp	r3, #16
 8002802:	d108      	bne.n	8002816 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002814:	e007      	b.n	8002826 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	60da      	str	r2, [r3, #12]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002842:	e17f      	b.n	8002b44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8171 	beq.w	8002b3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d005      	beq.n	8002874 <HAL_GPIO_Init+0x40>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d130      	bne.n	80028d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028aa:	2201      	movs	r2, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0201 	and.w	r2, r3, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d118      	bne.n	8002914 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	6939      	ldr	r1, [r7, #16]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80ac 	beq.w	8002b3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_GPIO_Init+0x330>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	4a5e      	ldr	r2, [pc, #376]	; (8002b64 <HAL_GPIO_Init+0x330>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6613      	str	r3, [r2, #96]	; 0x60
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_GPIO_Init+0x330>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029fe:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a28:	d025      	beq.n	8002a76 <HAL_GPIO_Init+0x242>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <HAL_GPIO_Init+0x338>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_GPIO_Init+0x23e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <HAL_GPIO_Init+0x33c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x23a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_GPIO_Init+0x340>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x236>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_GPIO_Init+0x344>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x232>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	; (8002b7c <HAL_GPIO_Init+0x348>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x22e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_GPIO_Init+0x34c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x22a>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00c      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00a      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a62:	2305      	movs	r3, #5
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a66:	2304      	movs	r3, #4
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x244>
 8002a76:	2300      	movs	r3, #0
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aba:	4a32      	ldr	r2, [pc, #200]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b38:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f47f ae78 	bne.w	8002844 <HAL_GPIO_Init+0x10>
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000c00 	.word	0x48000c00
 8002b78:	48001000 	.word	0x48001000
 8002b7c:	48001400 	.word	0x48001400
 8002b80:	48001800 	.word	0x48001800
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d130      	bne.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d038      	beq.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2232      	movs	r2, #50	; 0x32
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	3301      	adds	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c18:	e002      	b.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d102      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f2      	bne.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d110      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d007      	beq.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5c:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40007000 	.word	0x40007000
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e3ca      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c92:	4b97      	ldr	r3, [pc, #604]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9c:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80e4 	beq.w	8002e7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_RCC_OscConfig+0x4a>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	f040 808b 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	f040 8087 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e3a2      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_RCC_OscConfig+0x7c>
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_OscConfig+0x88>
 8002cfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d223      	bcs.n	8002d54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fd55 	bl	80037c0 <RCC_SetFlashLatencyFromMSIRange>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e383      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d20:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	496d      	ldr	r1, [pc, #436]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4968      	ldr	r1, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
 8002d52:	e025      	b.n	8002da0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	f043 0308 	orr.w	r3, r3, #8
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4960      	ldr	r1, [pc, #384]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d72:	4b5f      	ldr	r3, [pc, #380]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	495b      	ldr	r1, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd15 	bl	80037c0 <RCC_SetFlashLatencyFromMSIRange>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e343      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da0:	f000 fc4a 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	4950      	ldr	r1, [pc, #320]	; (8002ef4 <HAL_RCC_OscConfig+0x274>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	4a4e      	ldr	r2, [pc, #312]	; (8002ef8 <HAL_RCC_OscConfig+0x278>)
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f9cf 	bl	8002168 <HAL_InitTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d052      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	e327      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d032      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002de0:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a42      	ldr	r2, [pc, #264]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dec:	f7ff fa0c 	bl	8002208 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df4:	f7ff fa08 	bl	8002208 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e310      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a36      	ldr	r2, [pc, #216]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4931      	ldr	r1, [pc, #196]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	492c      	ldr	r1, [pc, #176]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
 8002e44:	e01a      	b.n	8002e7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e52:	f7ff f9d9 	bl	8002208 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e5a:	f7ff f9d5 	bl	8002208 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e2dd      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1da>
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d074      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d005      	beq.n	8002e9a <HAL_RCC_OscConfig+0x21a>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d10e      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d10b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d064      	beq.n	8002f70 <HAL_RCC_OscConfig+0x2f0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d160      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e2ba      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x24a>
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e026      	b.n	8002f18 <HAL_RCC_OscConfig+0x298>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed2:	d115      	bne.n	8002f00 <HAL_RCC_OscConfig+0x280>
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a02      	ldr	r2, [pc, #8]	; (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e014      	b.n	8002f18 <HAL_RCC_OscConfig+0x298>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08009360 	.word	0x08009360
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	20000018 	.word	0x20000018
 8002f00:	4ba0      	ldr	r3, [pc, #640]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a9f      	ldr	r2, [pc, #636]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b9d      	ldr	r3, [pc, #628]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a9c      	ldr	r2, [pc, #624]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f972 	bl	8002208 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff f96e 	bl	8002208 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e276      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3a:	4b92      	ldr	r3, [pc, #584]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x2a8>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7ff f95e 	bl	8002208 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7ff f95a 	bl	8002208 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e262      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2d0>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d060      	beq.n	8003040 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_OscConfig+0x310>
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d116      	bne.n	8002fbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f90:	4b7c      	ldr	r3, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x328>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e23f      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b76      	ldr	r3, [pc, #472]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	4973      	ldr	r1, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbc:	e040      	b.n	8003040 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d023      	beq.n	800300e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc6:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6e      	ldr	r2, [pc, #440]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7ff f919 	bl	8002208 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7ff f915 	bl	8002208 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e21d      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fec:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b62      	ldr	r3, [pc, #392]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	495f      	ldr	r1, [pc, #380]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
 800300c:	e018      	b.n	8003040 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b5d      	ldr	r3, [pc, #372]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5c      	ldr	r2, [pc, #368]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7ff f8f5 	bl	8002208 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003022:	f7ff f8f1 	bl	8002208 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1f9      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d03c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01c      	beq.n	800308e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7ff f8d0 	bl	8002208 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306c:	f7ff f8cc 	bl	8002208 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1d4      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ef      	beq.n	800306c <HAL_RCC_OscConfig+0x3ec>
 800308c:	e01b      	b.n	80030c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7ff f8b3 	bl	8002208 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a6:	f7ff f8af 	bl	8002208 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1b7      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ef      	bne.n	80030a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a6 	beq.w	8003220 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6593      	str	r3, [r2, #88]	; 0x58
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCC_OscConfig+0x508>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d118      	bne.n	800313e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCC_OscConfig+0x508>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_RCC_OscConfig+0x508>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7ff f876 	bl	8002208 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7ff f872 	bl	8002208 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e17a      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_RCC_OscConfig+0x508>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x4d8>
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003156:	e029      	b.n	80031ac <HAL_RCC_OscConfig+0x52c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d115      	bne.n	800318c <HAL_RCC_OscConfig+0x50c>
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a03      	ldr	r2, [pc, #12]	; (8003184 <HAL_RCC_OscConfig+0x504>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003180:	e014      	b.n	80031ac <HAL_RCC_OscConfig+0x52c>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	40007000 	.word	0x40007000
 800318c:	4b9c      	ldr	r3, [pc, #624]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a9b      	ldr	r2, [pc, #620]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800319c:	4b98      	ldr	r3, [pc, #608]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a97      	ldr	r2, [pc, #604]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7ff f828 	bl	8002208 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7ff f824 	bl	8002208 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e12a      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ed      	beq.n	80031bc <HAL_RCC_OscConfig+0x53c>
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7ff f811 	bl	8002208 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7ff f80d 	bl	8002208 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e113      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003200:	4b7f      	ldr	r3, [pc, #508]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ed      	bne.n	80031ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003214:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a79      	ldr	r2, [pc, #484]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80fe 	beq.w	8003426 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	2b02      	cmp	r3, #2
 8003230:	f040 80d0 	bne.w	80033d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003234:	4b72      	ldr	r3, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d130      	bne.n	80032aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	3b01      	subs	r3, #1
 8003254:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d127      	bne.n	80032aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d11f      	bne.n	80032aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003274:	2a07      	cmp	r2, #7
 8003276:	bf14      	ite	ne
 8003278:	2201      	movne	r2, #1
 800327a:	2200      	moveq	r2, #0
 800327c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327e:	4293      	cmp	r3, r2
 8003280:	d113      	bne.n	80032aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d109      	bne.n	80032aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d06e      	beq.n	8003388 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d069      	beq.n	8003384 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0ad      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032cc:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a4b      	ldr	r2, [pc, #300]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d8:	f7fe ff96 	bl	8002208 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe ff92 	bl	8002208 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e09a      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f2:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fe:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x784>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800330e:	3a01      	subs	r2, #1
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003318:	0212      	lsls	r2, r2, #8
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003320:	0852      	lsrs	r2, r2, #1
 8003322:	3a01      	subs	r2, #1
 8003324:	0552      	lsls	r2, r2, #21
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800332c:	0852      	lsrs	r2, r2, #1
 800332e:	3a01      	subs	r2, #1
 8003330:	0652      	lsls	r2, r2, #25
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003338:	0912      	lsrs	r2, r2, #4
 800333a:	0452      	lsls	r2, r2, #17
 800333c:	430a      	orrs	r2, r1
 800333e:	4930      	ldr	r1, [pc, #192]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003340:	4313      	orrs	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335c:	f7fe ff54 	bl	8002208 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe ff50 	bl	8002208 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e058      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003382:	e050      	b.n	8003426 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e04f      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d148      	bne.n	8003426 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ac:	f7fe ff2c 	bl	8002208 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe ff28 	bl	8002208 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e030      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x734>
 80033d2:	e028      	b.n	8003426 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d023      	beq.n	8003422 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <HAL_RCC_OscConfig+0x780>)
 80033e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe ff0f 	bl	8002208 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ec:	e00c      	b.n	8003408 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe ff0b 	bl	8002208 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d905      	bls.n	8003408 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e013      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
 8003400:	40021000 	.word	0x40021000
 8003404:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x7b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ec      	bne.n	80033ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x7b0>)
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	4905      	ldr	r1, [pc, #20]	; (8003430 <HAL_RCC_OscConfig+0x7b0>)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_OscConfig+0x7b4>)
 800341c:	4013      	ands	r3, r2
 800341e:	60cb      	str	r3, [r1, #12]
 8003420:	e001      	b.n	8003426 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	feeefffc 	.word	0xfeeefffc

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0e7      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d910      	bls.n	800347c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4970      	ldr	r1, [pc, #448]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0cf      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d010      	beq.n	80034aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003494:	429a      	cmp	r2, r3
 8003496:	d908      	bls.n	80034aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4960      	ldr	r1, [pc, #384]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04c      	beq.n	8003550 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d121      	bne.n	800350e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0a6      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e09a      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ee:	4b4e      	ldr	r3, [pc, #312]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e08e      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e086      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fe fe72 	bl	8002208 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fe6e 	bl	8002208 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e06e      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b31      	ldr	r3, [pc, #196]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003568:	429a      	cmp	r2, r3
 800356a:	d208      	bcs.n	800357e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	492b      	ldr	r1, [pc, #172]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d210      	bcs.n	80035ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	4923      	ldr	r1, [pc, #140]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_ClockConfig+0x1ec>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e036      	b.n	800361c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4918      	ldr	r1, [pc, #96]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d009      	beq.n	80035ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4910      	ldr	r1, [pc, #64]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ec:	f000 f824 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	490b      	ldr	r1, [pc, #44]	; (800362c <HAL_RCC_ClockConfig+0x1f4>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 800360a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1fc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fda9 	bl	8002168 <HAL_InitTick>
 8003616:	4603      	mov	r3, r0
 8003618:	72fb      	strb	r3, [r7, #11]

  return status;
 800361a:	7afb      	ldrb	r3, [r7, #11]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40022000 	.word	0x40022000
 8003628:	40021000 	.word	0x40021000
 800362c:	08009360 	.word	0x08009360
 8003630:	20000008 	.word	0x20000008
 8003634:	20000018 	.word	0x20000018

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003646:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x34>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d121      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d11e      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800366c:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e005      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	e004      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_RCC_GetSysClockFreq+0x114>)
 80036be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d134      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0xa6>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d003      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0xac>
 80036dc:	e005      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_GetSysClockFreq+0x110>)
 80036e0:	617b      	str	r3, [r7, #20]
      break;
 80036e2:	e005      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_GetSysClockFreq+0x114>)
 80036e6:	617b      	str	r3, [r7, #20]
      break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	617b      	str	r3, [r7, #20]
      break;
 80036ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	3301      	adds	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	fb03 f202 	mul.w	r2, r3, r2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	0e5b      	lsrs	r3, r3, #25
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	3301      	adds	r3, #1
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003730:	69bb      	ldr	r3, [r7, #24]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	08009378 	.word	0x08009378
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200

08003750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCC_GetHCLKFreq+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800376c:	f7ff fff0 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	08009370 	.word	0x08009370

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003798:	f7ff ffda 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0adb      	lsrs	r3, r3, #11
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4904      	ldr	r1, [pc, #16]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08009370 	.word	0x08009370

080037c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d8:	f7ff f9ee 	bl	8002bb8 <HAL_PWREx_GetVoltageRange>
 80037dc:	6178      	str	r0, [r7, #20]
 80037de:	e014      	b.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f8:	f7ff f9de 	bl	8002bb8 <HAL_PWREx_GetVoltageRange>
 80037fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003810:	d10b      	bne.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d919      	bls.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2ba0      	cmp	r3, #160	; 0xa0
 800381c:	d902      	bls.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800381e:	2302      	movs	r3, #2
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e013      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003824:	2301      	movs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e010      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d902      	bls.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003830:	2303      	movs	r3, #3
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e00a      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d102      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383c:	2302      	movs	r3, #2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e004      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d101      	bne.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003848:	2301      	movs	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40022000 	.word	0x40022000

08003880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003888:	2300      	movs	r3, #0
 800388a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800388c:	2300      	movs	r3, #0
 800388e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d041      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038a4:	d02a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038aa:	d824      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b6:	d81e      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c0:	d010      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038c2:	e018      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038c4:	4b86      	ldr	r3, [pc, #536]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a85      	ldr	r2, [pc, #532]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038d0:	e015      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fabb 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e2:	e00c      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3320      	adds	r3, #32
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fba6 	bl	800403c <RCCEx_PLLSAI2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	74fb      	strb	r3, [r7, #19]
      break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003904:	4b76      	ldr	r3, [pc, #472]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003912:	4973      	ldr	r1, [pc, #460]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800391a:	e001      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d041      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003934:	d02a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800393a:	d824      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800393c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003940:	d008      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003946:	d81e      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003950:	d010      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003952:	e018      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003954:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a61      	ldr	r2, [pc, #388]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003960:	e015      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fa73 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3320      	adds	r3, #32
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fb5e 	bl	800403c <RCCEx_PLLSAI2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	74fb      	strb	r3, [r7, #19]
      break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003994:	4b52      	ldr	r3, [pc, #328]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a2:	494f      	ldr	r1, [pc, #316]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a0 	beq.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d8:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	4a40      	ldr	r2, [pc, #256]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6593      	str	r3, [r2, #88]	; 0x58
 80039e4:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f0:	2301      	movs	r3, #1
 80039f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3a      	ldr	r2, [pc, #232]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a00:	f7fe fc02 	bl	8002208 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a06:	e009      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fe fbfe 	bl	8002208 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	74fb      	strb	r3, [r7, #19]
        break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d15c      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01f      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d019      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fbbd 	bl	8002208 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a90:	e00b      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe fbb9 	bl	8002208 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d902      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	74fb      	strb	r3, [r7, #19]
            break;
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ec      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ad6:	e009      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	74bb      	strb	r3, [r7, #18]
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aec:	7c7b      	ldrb	r3, [r7, #17]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af2:	4b9e      	ldr	r3, [pc, #632]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	4a9d      	ldr	r2, [pc, #628]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b0a:	4b98      	ldr	r3, [pc, #608]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 0203 	bic.w	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	4994      	ldr	r1, [pc, #592]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b2c:	4b8f      	ldr	r3, [pc, #572]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 020c 	bic.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	498c      	ldr	r1, [pc, #560]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b4e:	4b87      	ldr	r3, [pc, #540]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	4983      	ldr	r1, [pc, #524]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b70:	4b7e      	ldr	r3, [pc, #504]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	497b      	ldr	r1, [pc, #492]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b92:	4b76      	ldr	r3, [pc, #472]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	4972      	ldr	r1, [pc, #456]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb4:	4b6d      	ldr	r3, [pc, #436]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	496a      	ldr	r1, [pc, #424]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	4961      	ldr	r1, [pc, #388]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bf8:	4b5c      	ldr	r3, [pc, #368]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	4959      	ldr	r1, [pc, #356]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	4950      	ldr	r1, [pc, #320]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	4948      	ldr	r1, [pc, #288]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c5e:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	493f      	ldr	r1, [pc, #252]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d028      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8e:	4937      	ldr	r1, [pc, #220]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9e:	d106      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca0:	4b32      	ldr	r3, [pc, #200]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a31      	ldr	r2, [pc, #196]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003caa:	60d3      	str	r3, [r2, #12]
 8003cac:	e011      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f8c8 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d028      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	491f      	ldr	r1, [pc, #124]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d08:	60d3      	str	r3, [r2, #12]
 8003d0a:	e011      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f899 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	4908      	ldr	r1, [pc, #32]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5a:	d109      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a02      	ldr	r2, [pc, #8]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d66:	60d3      	str	r3, [r2, #12]
 8003d68:	e014      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f867 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02f      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	4928      	ldr	r1, [pc, #160]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f844 	bl	8003e54 <RCCEx_PLLSAI1_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d014      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	74bb      	strb	r3, [r7, #18]
 8003dda:	e011      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3320      	adds	r3, #32
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f925 	bl	800403c <RCCEx_PLLSAI2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	490d      	ldr	r1, [pc, #52]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e46:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000

08003e54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e62:	4b75      	ldr	r3, [pc, #468]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e6e:	4b72      	ldr	r3, [pc, #456]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0203 	and.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10d      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
       ||
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
       ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d047      	beq.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e044      	b.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d018      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x86>
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d825      	bhi.n	8003ef8 <RCCEx_PLLSAI1_Config+0xa4>
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <RCCEx_PLLSAI1_Config+0x62>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d009      	beq.n	8003ec8 <RCCEx_PLLSAI1_Config+0x74>
 8003eb4:	e020      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eb6:	4b60      	ldr	r3, [pc, #384]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11d      	bne.n	8003efe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec6:	e01a      	b.n	8003efe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ec8:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e013      	b.n	8003f02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eda:	4b57      	ldr	r3, [pc, #348]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ee6:	4b54      	ldr	r3, [pc, #336]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ef6:	e006      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e004      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f0e:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	430b      	orrs	r3, r1
 8003f24:	4944      	ldr	r1, [pc, #272]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d17d      	bne.n	800402c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a40      	ldr	r2, [pc, #256]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fe f964 	bl	8002208 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f44:	f7fe f960 	bl	8002208 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
        break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f58:	4b37      	ldr	r3, [pc, #220]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d160      	bne.n	800402c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f70:	4b31      	ldr	r3, [pc, #196]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	0211      	lsls	r1, r2, #8
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	0912      	lsrs	r2, r2, #4
 8003f88:	0452      	lsls	r2, r2, #17
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	492a      	ldr	r1, [pc, #168]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	610b      	str	r3, [r1, #16]
 8003f92:	e027      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d112      	bne.n	8003fc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	0211      	lsls	r1, r2, #8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6912      	ldr	r2, [r2, #16]
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	0552      	lsls	r2, r2, #21
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	491f      	ldr	r1, [pc, #124]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	610b      	str	r3, [r1, #16]
 8003fbe:	e011      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	0211      	lsls	r1, r2, #8
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6952      	ldr	r2, [r2, #20]
 8003fd6:	0852      	lsrs	r2, r2, #1
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	0652      	lsls	r2, r2, #25
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	4916      	ldr	r1, [pc, #88]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe f90a 	bl	8002208 <HAL_GetTick>
 8003ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff6:	e009      	b.n	800400c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ff8:	f7fe f906 	bl	8002208 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d902      	bls.n	800400c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	73fb      	strb	r3, [r7, #15]
          break;
 800400a:	e005      	b.n	8004018 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4904      	ldr	r1, [pc, #16]	; (8004038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000

0800403c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800404a:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0203 	and.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d10d      	bne.n	8004082 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
       ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
       ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d047      	beq.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	e044      	b.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d018      	beq.n	80040c2 <RCCEx_PLLSAI2_Config+0x86>
 8004090:	2b03      	cmp	r3, #3
 8004092:	d825      	bhi.n	80040e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004094:	2b01      	cmp	r3, #1
 8004096:	d002      	beq.n	800409e <RCCEx_PLLSAI2_Config+0x62>
 8004098:	2b02      	cmp	r3, #2
 800409a:	d009      	beq.n	80040b0 <RCCEx_PLLSAI2_Config+0x74>
 800409c:	e020      	b.n	80040e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800409e:	4b55      	ldr	r3, [pc, #340]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11d      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e01a      	b.n	80040e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c0:	e013      	b.n	80040ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040c2:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ce:	4b49      	ldr	r3, [pc, #292]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040de:	e006      	b.n	80040ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e004      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040f6:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	430b      	orrs	r3, r1
 800410c:	4939      	ldr	r1, [pc, #228]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d167      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a35      	ldr	r2, [pc, #212]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fe f870 	bl	8002208 <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800412a:	e009      	b.n	8004140 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800412c:	f7fe f86c 	bl	8002208 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d902      	bls.n	8004140 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	73fb      	strb	r3, [r7, #15]
        break;
 800413e:	e005      	b.n	800414c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ef      	bne.n	800412c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d14a      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d111      	bne.n	800417c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004158:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6892      	ldr	r2, [r2, #8]
 8004168:	0211      	lsls	r1, r2, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	0912      	lsrs	r2, r2, #4
 8004170:	0452      	lsls	r2, r2, #17
 8004172:	430a      	orrs	r2, r1
 8004174:	491f      	ldr	r1, [pc, #124]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	614b      	str	r3, [r1, #20]
 800417a:	e011      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6892      	ldr	r2, [r2, #8]
 800418c:	0211      	lsls	r1, r2, #8
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6912      	ldr	r2, [r2, #16]
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	430a      	orrs	r2, r1
 800419a:	4916      	ldr	r1, [pc, #88]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fe f82c 	bl	8002208 <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b2:	e009      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041b4:	f7fe f828 	bl	8002208 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d902      	bls.n	80041c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	73fb      	strb	r3, [r7, #15]
          break;
 80041c6:	e005      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4904      	ldr	r1, [pc, #16]	; (80041f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e049      	b.n	800429e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd f978 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f000 fa74 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e049      	b.n	800434c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f841 	bl	8004354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 fa1d 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0ff      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b14      	cmp	r3, #20
 8004392:	f200 80f0 	bhi.w	8004576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	08004577 	.word	0x08004577
 80043a4:	08004577 	.word	0x08004577
 80043a8:	08004577 	.word	0x08004577
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004577 	.word	0x08004577
 80043b4:	08004577 	.word	0x08004577
 80043b8:	08004577 	.word	0x08004577
 80043bc:	08004473 	.word	0x08004473
 80043c0:	08004577 	.word	0x08004577
 80043c4:	08004577 	.word	0x08004577
 80043c8:	08004577 	.word	0x08004577
 80043cc:	080044b3 	.word	0x080044b3
 80043d0:	08004577 	.word	0x08004577
 80043d4:	08004577 	.word	0x08004577
 80043d8:	08004577 	.word	0x08004577
 80043dc:	080044f5 	.word	0x080044f5
 80043e0:	08004577 	.word	0x08004577
 80043e4:	08004577 	.word	0x08004577
 80043e8:	08004577 	.word	0x08004577
 80043ec:	08004535 	.word	0x08004535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fa2e 	bl	8004858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
      break;
 800442e:	e0a5      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa9e 	bl	8004978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      break;
 8004470:	e084      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb07 	bl	8004a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0208 	orr.w	r2, r2, #8
 800448c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0204 	bic.w	r2, r2, #4
 800449c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	61da      	str	r2, [r3, #28]
      break;
 80044b0:	e064      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb6f 	bl	8004b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	021a      	lsls	r2, r3, #8
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	61da      	str	r2, [r3, #28]
      break;
 80044f2:	e043      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fbb8 	bl	8004c70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004532:	e023      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fbfc 	bl	8004d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004574:	e002      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
      break;
 800457a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_ConfigClockSource+0x1c>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e0b6      	b.n	800471a <HAL_TIM_ConfigClockSource+0x18a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e8:	d03e      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0xd8>
 80045ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ee:	f200 8087 	bhi.w	8004700 <HAL_TIM_ConfigClockSource+0x170>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	f000 8086 	beq.w	8004706 <HAL_TIM_ConfigClockSource+0x176>
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fe:	d87f      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004600:	2b70      	cmp	r3, #112	; 0x70
 8004602:	d01a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xaa>
 8004604:	2b70      	cmp	r3, #112	; 0x70
 8004606:	d87b      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004608:	2b60      	cmp	r3, #96	; 0x60
 800460a:	d050      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0x11e>
 800460c:	2b60      	cmp	r3, #96	; 0x60
 800460e:	d877      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004610:	2b50      	cmp	r3, #80	; 0x50
 8004612:	d03c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0xfe>
 8004614:	2b50      	cmp	r3, #80	; 0x50
 8004616:	d873      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d058      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x13e>
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d86f      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004620:	2b30      	cmp	r3, #48	; 0x30
 8004622:	d064      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15e>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	d86b      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004628:	2b20      	cmp	r3, #32
 800462a:	d060      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15e>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d867      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d05c      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15e>
 8004634:	2b10      	cmp	r3, #16
 8004636:	d05a      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x15e>
 8004638:	e062      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	f000 fc55 	bl	8004ef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800465c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	609a      	str	r2, [r3, #8]
      break;
 8004666:	e04f      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004678:	f000 fc3e 	bl	8004ef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800468a:	609a      	str	r2, [r3, #8]
      break;
 800468c:	e03c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	461a      	mov	r2, r3
 800469c:	f000 fbb2 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2150      	movs	r1, #80	; 0x50
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fc0b 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 80046ac:	e02c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fbd1 	bl	8004e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2160      	movs	r1, #96	; 0x60
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbfb 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e01c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fb92 	bl	8004e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fbeb 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 80046ec:	e00c      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 fbe2 	bl	8004ec2 <TIM_ITRx_SetConfig>
      break;
 80046fe:	e003      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e000      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a40      	ldr	r2, [pc, #256]	; (8004838 <TIM_Base_SetConfig+0x114>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d00f      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <TIM_Base_SetConfig+0x118>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <TIM_Base_SetConfig+0x120>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <TIM_Base_SetConfig+0x124>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2f      	ldr	r2, [pc, #188]	; (8004838 <TIM_Base_SetConfig+0x114>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01f      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004784:	d01b      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <TIM_Base_SetConfig+0x118>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d017      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <TIM_Base_SetConfig+0x11c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <TIM_Base_SetConfig+0x120>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00f      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a29      	ldr	r2, [pc, #164]	; (8004848 <TIM_Base_SetConfig+0x124>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a28      	ldr	r2, [pc, #160]	; (800484c <TIM_Base_SetConfig+0x128>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a27      	ldr	r2, [pc, #156]	; (8004850 <TIM_Base_SetConfig+0x12c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a26      	ldr	r2, [pc, #152]	; (8004854 <TIM_Base_SetConfig+0x130>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <TIM_Base_SetConfig+0x114>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0xf8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <TIM_Base_SetConfig+0x124>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <TIM_Base_SetConfig+0x128>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <TIM_Base_SetConfig+0x12c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0xf8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <TIM_Base_SetConfig+0x130>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d103      	bne.n	8004824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	615a      	str	r2, [r3, #20]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800

08004858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0201 	bic.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0302 	bic.w	r3, r3, #2
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_OC1_SetConfig+0x10c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_OC1_SetConfig+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_OC1_SetConfig+0x110>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_OC1_SetConfig+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_OC1_SetConfig+0x114>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_OC1_SetConfig+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_OC1_SetConfig+0x118>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_OC1_SetConfig+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_OC1_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10c      	bne.n	80048f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0308 	bic.w	r3, r3, #8
 80048de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 0304 	bic.w	r3, r3, #4
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <TIM_OC1_SetConfig+0x10c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_OC1_SetConfig+0xc2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <TIM_OC1_SetConfig+0x110>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_OC1_SetConfig+0xc2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a19      	ldr	r2, [pc, #100]	; (800496c <TIM_OC1_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_OC1_SetConfig+0xc2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <TIM_OC1_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_OC1_SetConfig+0xc2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <TIM_OC1_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d111      	bne.n	800493e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40013400 	.word	0x40013400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0320 	bic.w	r3, r3, #32
 80049c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <TIM_OC2_SetConfig+0x100>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC2_SetConfig+0x6c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <TIM_OC2_SetConfig+0x104>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10d      	bne.n	8004a00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <TIM_OC2_SetConfig+0x100>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00f      	beq.n	8004a28 <TIM_OC2_SetConfig+0xb0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <TIM_OC2_SetConfig+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_OC2_SetConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <TIM_OC2_SetConfig+0x108>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_OC2_SetConfig+0xb0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <TIM_OC2_SetConfig+0x10c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC2_SetConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <TIM_OC2_SetConfig+0x110>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d113      	bne.n	8004a50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800

08004a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_OC3_SetConfig+0xfc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_OC3_SetConfig+0x6a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <TIM_OC3_SetConfig+0x100>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10d      	bne.n	8004b12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <TIM_OC3_SetConfig+0xfc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <TIM_OC3_SetConfig+0xae>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <TIM_OC3_SetConfig+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_OC3_SetConfig+0xae>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC3_SetConfig+0x104>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_OC3_SetConfig+0xae>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC3_SetConfig+0x108>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_OC3_SetConfig+0xae>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC3_SetConfig+0x10c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d113      	bne.n	8004b62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800

08004b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_OC4_SetConfig+0xc0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <TIM_OC4_SetConfig+0x84>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC4_SetConfig+0xc4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_OC4_SetConfig+0x84>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC4_SetConfig+0xc8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC4_SetConfig+0x84>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <TIM_OC4_SetConfig+0xcc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC4_SetConfig+0x84>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <TIM_OC4_SetConfig+0xd0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC5_SetConfig+0xb4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <TIM_OC5_SetConfig+0x7a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_OC5_SetConfig+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_OC5_SetConfig+0x7a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_OC5_SetConfig+0xbc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_OC5_SetConfig+0x7a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_OC5_SetConfig+0xc0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC5_SetConfig+0x7a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <TIM_OC5_SetConfig+0xc4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d109      	bne.n	8004cfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	621a      	str	r2, [r3, #32]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800

08004d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	051b      	lsls	r3, r3, #20
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <TIM_OC6_SetConfig+0xb8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00f      	beq.n	8004db4 <TIM_OC6_SetConfig+0x7c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <TIM_OC6_SetConfig+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_OC6_SetConfig+0x7c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <TIM_OC6_SetConfig+0xc0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_OC6_SetConfig+0x7c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <TIM_OC6_SetConfig+0xc4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_OC6_SetConfig+0x7c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <TIM_OC6_SetConfig+0xc8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d109      	bne.n	8004dc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0210 	bic.w	r2, r3, #16
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f043 0307 	orr.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e068      	b.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1a      	ldr	r2, [pc, #104]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000

08005048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005060:	2302      	movs	r3, #2
 8005062:	e065      	b.n	8005130 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d115      	bne.n	800511e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	051b      	lsls	r3, r3, #20
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40013400 	.word	0x40013400

08005144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e040      	b.n	80051d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fa2c 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fc66 	bl	8005a5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f9ab 	bl	80054ec <UART_SetConfig>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e01b      	b.n	80051d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fce5 	bl	8005ba0 <UART_CheckIdleState>
 80051d6:	4603      	mov	r3, r0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d178      	bne.n	80052ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_UART_Transmit+0x24>
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e071      	b.n	80052ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2221      	movs	r2, #33	; 0x21
 8005214:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005216:	f7fc fff7 	bl	8002208 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d108      	bne.n	8005248 <HAL_UART_Transmit+0x68>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e003      	b.n	8005250 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005250:	e030      	b.n	80052b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fd47 	bl	8005cf0 <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e03c      	b.n	80052ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	b292      	uxth	r2, r2
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	3302      	adds	r3, #2
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e008      	b.n	80052a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b292      	uxth	r2, r2
 800529a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	3301      	adds	r3, #1
 80052a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1c8      	bne.n	8005252 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 fd10 	bl	8005cf0 <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e005      	b.n	80052ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005306:	2b20      	cmp	r3, #32
 8005308:	d165      	bne.n	80053d6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_UART_Transmit_DMA+0x22>
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e05e      	b.n	80053d8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2221      	movs	r2, #33	; 0x21
 800533c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	2b00      	cmp	r3, #0
 8005344:	d027      	beq.n	8005396 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <HAL_UART_Transmit_DMA+0xec>)
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <HAL_UART_Transmit_DMA+0xf0>)
 8005354:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <HAL_UART_Transmit_DMA+0xf4>)
 800535c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	2200      	movs	r2, #0
 8005364:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	4619      	mov	r1, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3328      	adds	r3, #40	; 0x28
 8005376:	461a      	mov	r2, r3
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	f7fd f91b 	bl	80025b4 <HAL_DMA_Start_IT>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2210      	movs	r2, #16
 8005388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e020      	b.n	80053d8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2240      	movs	r2, #64	; 0x40
 800539c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	613b      	str	r3, [r7, #16]
   return(result);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	623a      	str	r2, [r7, #32]
 80053c0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	69f9      	ldr	r1, [r7, #28]
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08006015 	.word	0x08006015
 80053e4:	080060af 	.word	0x080060af
 80053e8:	08006235 	.word	0x08006235

080053ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005400:	2b20      	cmp	r3, #32
 8005402:	d137      	bne.n	8005474 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Receive_DMA+0x24>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e030      	b.n	8005476 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_UART_Receive_DMA+0x94>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01f      	beq.n	8005464 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	461a      	mov	r2, r3
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fca8 	bl	8005dc0 <UART_Start_Receive_DMA>
 8005470:	4603      	mov	r3, r0
 8005472:	e000      	b.n	8005476 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	; 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40008000 	.word	0x40008000

08005484 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b08a      	sub	sp, #40	; 0x28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	431a      	orrs	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4313      	orrs	r3, r2
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4ba4      	ldr	r3, [pc, #656]	; (80057ac <UART_SetConfig+0x2c0>)
 800551c:	4013      	ands	r3, r2
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005524:	430b      	orrs	r3, r1
 8005526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a99      	ldr	r2, [pc, #612]	; (80057b0 <UART_SetConfig+0x2c4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	4313      	orrs	r3, r2
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a90      	ldr	r2, [pc, #576]	; (80057b4 <UART_SetConfig+0x2c8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d126      	bne.n	80055c4 <UART_SetConfig+0xd8>
 8005576:	4b90      	ldr	r3, [pc, #576]	; (80057b8 <UART_SetConfig+0x2cc>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b03      	cmp	r3, #3
 8005582:	d81b      	bhi.n	80055bc <UART_SetConfig+0xd0>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0xa0>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	0800559d 	.word	0x0800559d
 8005590:	080055ad 	.word	0x080055ad
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b5 	.word	0x080055b5
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e116      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80055a4:	2302      	movs	r3, #2
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e112      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e10e      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e10a      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e106      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7c      	ldr	r2, [pc, #496]	; (80057bc <UART_SetConfig+0x2d0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d138      	bne.n	8005640 <UART_SetConfig+0x154>
 80055ce:	4b7a      	ldr	r3, [pc, #488]	; (80057b8 <UART_SetConfig+0x2cc>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f003 030c 	and.w	r3, r3, #12
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d82d      	bhi.n	8005638 <UART_SetConfig+0x14c>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0xf8>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	08005619 	.word	0x08005619
 80055e8:	08005639 	.word	0x08005639
 80055ec:	08005639 	.word	0x08005639
 80055f0:	08005639 	.word	0x08005639
 80055f4:	08005629 	.word	0x08005629
 80055f8:	08005639 	.word	0x08005639
 80055fc:	08005639 	.word	0x08005639
 8005600:	08005639 	.word	0x08005639
 8005604:	08005621 	.word	0x08005621
 8005608:	08005639 	.word	0x08005639
 800560c:	08005639 	.word	0x08005639
 8005610:	08005639 	.word	0x08005639
 8005614:	08005631 	.word	0x08005631
 8005618:	2300      	movs	r3, #0
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e0d8      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005620:	2302      	movs	r3, #2
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e0d4      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005628:	2304      	movs	r3, #4
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e0d0      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005630:	2308      	movs	r3, #8
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005636:	e0cc      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005638:	2310      	movs	r3, #16
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563e:	e0c8      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5e      	ldr	r2, [pc, #376]	; (80057c0 <UART_SetConfig+0x2d4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d125      	bne.n	8005696 <UART_SetConfig+0x1aa>
 800564a:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <UART_SetConfig+0x2cc>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005654:	2b30      	cmp	r3, #48	; 0x30
 8005656:	d016      	beq.n	8005686 <UART_SetConfig+0x19a>
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	d818      	bhi.n	800568e <UART_SetConfig+0x1a2>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d00a      	beq.n	8005676 <UART_SetConfig+0x18a>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d814      	bhi.n	800568e <UART_SetConfig+0x1a2>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <UART_SetConfig+0x182>
 8005668:	2b10      	cmp	r3, #16
 800566a:	d008      	beq.n	800567e <UART_SetConfig+0x192>
 800566c:	e00f      	b.n	800568e <UART_SetConfig+0x1a2>
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005674:	e0ad      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005676:	2302      	movs	r3, #2
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567c:	e0a9      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800567e:	2304      	movs	r3, #4
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005684:	e0a5      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005686:	2308      	movs	r3, #8
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568c:	e0a1      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800568e:	2310      	movs	r3, #16
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005694:	e09d      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a4a      	ldr	r2, [pc, #296]	; (80057c4 <UART_SetConfig+0x2d8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d125      	bne.n	80056ec <UART_SetConfig+0x200>
 80056a0:	4b45      	ldr	r3, [pc, #276]	; (80057b8 <UART_SetConfig+0x2cc>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056aa:	2bc0      	cmp	r3, #192	; 0xc0
 80056ac:	d016      	beq.n	80056dc <UART_SetConfig+0x1f0>
 80056ae:	2bc0      	cmp	r3, #192	; 0xc0
 80056b0:	d818      	bhi.n	80056e4 <UART_SetConfig+0x1f8>
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d00a      	beq.n	80056cc <UART_SetConfig+0x1e0>
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d814      	bhi.n	80056e4 <UART_SetConfig+0x1f8>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <UART_SetConfig+0x1d8>
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d008      	beq.n	80056d4 <UART_SetConfig+0x1e8>
 80056c2:	e00f      	b.n	80056e4 <UART_SetConfig+0x1f8>
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e082      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80056cc:	2302      	movs	r3, #2
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e07e      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80056d4:	2304      	movs	r3, #4
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e07a      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80056dc:	2308      	movs	r3, #8
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	e076      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80056e4:	2310      	movs	r3, #16
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ea:	e072      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a35      	ldr	r2, [pc, #212]	; (80057c8 <UART_SetConfig+0x2dc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d12a      	bne.n	800574c <UART_SetConfig+0x260>
 80056f6:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <UART_SetConfig+0x2cc>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005704:	d01a      	beq.n	800573c <UART_SetConfig+0x250>
 8005706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570a:	d81b      	bhi.n	8005744 <UART_SetConfig+0x258>
 800570c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005710:	d00c      	beq.n	800572c <UART_SetConfig+0x240>
 8005712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005716:	d815      	bhi.n	8005744 <UART_SetConfig+0x258>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <UART_SetConfig+0x238>
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	d008      	beq.n	8005734 <UART_SetConfig+0x248>
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x258>
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e052      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800572c:	2302      	movs	r3, #2
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e04e      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e04a      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e046      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e042      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <UART_SetConfig+0x2c4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d13a      	bne.n	80057cc <UART_SetConfig+0x2e0>
 8005756:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <UART_SetConfig+0x2cc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005764:	d01a      	beq.n	800579c <UART_SetConfig+0x2b0>
 8005766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576a:	d81b      	bhi.n	80057a4 <UART_SetConfig+0x2b8>
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005770:	d00c      	beq.n	800578c <UART_SetConfig+0x2a0>
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	d815      	bhi.n	80057a4 <UART_SetConfig+0x2b8>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <UART_SetConfig+0x298>
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d008      	beq.n	8005794 <UART_SetConfig+0x2a8>
 8005782:	e00f      	b.n	80057a4 <UART_SetConfig+0x2b8>
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e022      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800578c:	2302      	movs	r3, #2
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e01e      	b.n	80057d2 <UART_SetConfig+0x2e6>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e01a      	b.n	80057d2 <UART_SetConfig+0x2e6>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e016      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e012      	b.n	80057d2 <UART_SetConfig+0x2e6>
 80057ac:	efff69f3 	.word	0xefff69f3
 80057b0:	40008000 	.word	0x40008000
 80057b4:	40013800 	.word	0x40013800
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40004400 	.word	0x40004400
 80057c0:	40004800 	.word	0x40004800
 80057c4:	40004c00 	.word	0x40004c00
 80057c8:	40005000 	.word	0x40005000
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a9f      	ldr	r2, [pc, #636]	; (8005a54 <UART_SetConfig+0x568>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d17a      	bne.n	80058d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d824      	bhi.n	800582e <UART_SetConfig+0x342>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x300>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005811 	.word	0x08005811
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	08005819 	.word	0x08005819
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800581f 	.word	0x0800581f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	0800582f 	.word	0x0800582f
 8005808:	0800582f 	.word	0x0800582f
 800580c:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fd ffaa 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8005814:	61f8      	str	r0, [r7, #28]
        break;
 8005816:	e010      	b.n	800583a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <UART_SetConfig+0x56c>)
 800581a:	61fb      	str	r3, [r7, #28]
        break;
 800581c:	e00d      	b.n	800583a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fd ff0b 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 8005822:	61f8      	str	r0, [r7, #28]
        break;
 8005824:	e009      	b.n	800583a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	61fb      	str	r3, [r7, #28]
        break;
 800582c:	e005      	b.n	800583a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80fb 	beq.w	8005a38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	429a      	cmp	r2, r3
 8005850:	d305      	bcc.n	800585e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	429a      	cmp	r2, r3
 800585c:	d903      	bls.n	8005866 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005864:	e0e8      	b.n	8005a38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	2200      	movs	r2, #0
 800586a:	461c      	mov	r4, r3
 800586c:	4615      	mov	r5, r2
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	022b      	lsls	r3, r5, #8
 8005878:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800587c:	0222      	lsls	r2, r4, #8
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	6849      	ldr	r1, [r1, #4]
 8005882:	0849      	lsrs	r1, r1, #1
 8005884:	2000      	movs	r0, #0
 8005886:	4688      	mov	r8, r1
 8005888:	4681      	mov	r9, r0
 800588a:	eb12 0a08 	adds.w	sl, r2, r8
 800588e:	eb43 0b09 	adc.w	fp, r3, r9
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a0:	4650      	mov	r0, sl
 80058a2:	4659      	mov	r1, fp
 80058a4:	f7fb f9a0 	bl	8000be8 <__aeabi_uldivmod>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4613      	mov	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058b6:	d308      	bcc.n	80058ca <UART_SetConfig+0x3de>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d204      	bcs.n	80058ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	e0b6      	b.n	8005a38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058d0:	e0b2      	b.n	8005a38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058da:	d15e      	bne.n	800599a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d828      	bhi.n	8005936 <UART_SetConfig+0x44a>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0x400>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005937 	.word	0x08005937
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005937 	.word	0x08005937
 8005904:	08005937 	.word	0x08005937
 8005908:	08005937 	.word	0x08005937
 800590c:	0800592f 	.word	0x0800592f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fd ff2a 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8005914:	61f8      	str	r0, [r7, #28]
        break;
 8005916:	e014      	b.n	8005942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fd ff3c 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 800591c:	61f8      	str	r0, [r7, #28]
        break;
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005920:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <UART_SetConfig+0x56c>)
 8005922:	61fb      	str	r3, [r7, #28]
        break;
 8005924:	e00d      	b.n	8005942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005926:	f7fd fe87 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 800592a:	61f8      	str	r0, [r7, #28]
        break;
 800592c:	e009      	b.n	8005942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005932:	61fb      	str	r3, [r7, #28]
        break;
 8005934:	e005      	b.n	8005942 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d077      	beq.n	8005a38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	005a      	lsls	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	441a      	add	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d916      	bls.n	8005992 <UART_SetConfig+0x4a6>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596a:	d212      	bcs.n	8005992 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f023 030f 	bic.w	r3, r3, #15
 8005974:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	b29b      	uxth	r3, r3
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	b29a      	uxth	r2, r3
 8005982:	8afb      	ldrh	r3, [r7, #22]
 8005984:	4313      	orrs	r3, r2
 8005986:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	8afa      	ldrh	r2, [r7, #22]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e052      	b.n	8005a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005998:	e04e      	b.n	8005a38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d827      	bhi.n	80059f2 <UART_SetConfig+0x506>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x4bc>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fd fecc 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 80059d0:	61f8      	str	r0, [r7, #28]
        break;
 80059d2:	e014      	b.n	80059fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fd fede 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 80059d8:	61f8      	str	r0, [r7, #28]
        break;
 80059da:	e010      	b.n	80059fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <UART_SetConfig+0x56c>)
 80059de:	61fb      	str	r3, [r7, #28]
        break;
 80059e0:	e00d      	b.n	80059fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fd fe29 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80059e6:	61f8      	str	r0, [r7, #28]
        break;
 80059e8:	e009      	b.n	80059fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	61fb      	str	r3, [r7, #28]
        break;
 80059f0:	e005      	b.n	80059fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059fc:	bf00      	nop
    }

    if (pclk != 0U)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d019      	beq.n	8005a38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	085a      	lsrs	r2, r3, #1
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	d909      	bls.n	8005a32 <UART_SetConfig+0x546>
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d205      	bcs.n	8005a32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	e002      	b.n	8005a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3728      	adds	r7, #40	; 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a52:	bf00      	nop
 8005a54:	40008000 	.word	0x40008000
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d10a      	bne.n	8005b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b098      	sub	sp, #96	; 0x60
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb0:	f7fc fb2a 	bl	8002208 <HAL_GetTick>
 8005bb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d12e      	bne.n	8005c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f88c 	bl	8005cf0 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d021      	beq.n	8005c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e062      	b.n	8005ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d149      	bne.n	8005cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f856 	bl	8005cf0 <UART_WaitOnFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03c      	beq.n	8005cc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	623b      	str	r3, [r7, #32]
   return(result);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9c:	61fa      	str	r2, [r7, #28]
 8005c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	69b9      	ldr	r1, [r7, #24]
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e011      	b.n	8005ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3758      	adds	r7, #88	; 0x58
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d00:	e049      	b.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d045      	beq.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0a:	f7fc fa7d 	bl	8002208 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e048      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d031      	beq.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d110      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2208      	movs	r2, #8
 8005d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f8ff 	bl	8005f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2208      	movs	r2, #8
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e029      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d70:	d111      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8e5 	bl	8005f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e00f      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	bf0c      	ite	eq
 8005da6:	2301      	moveq	r3, #1
 8005da8:	2300      	movne	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d0a6      	beq.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b096      	sub	sp, #88	; 0x58
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2222      	movs	r2, #34	; 0x22
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d028      	beq.n	8005e46 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df8:	4a3e      	ldr	r2, [pc, #248]	; (8005ef4 <UART_Start_Receive_DMA+0x134>)
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e00:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <UART_Start_Receive_DMA+0x138>)
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <UART_Start_Receive_DMA+0x13c>)
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e10:	2200      	movs	r2, #0
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	461a      	mov	r2, r3
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	f7fc fbc4 	bl	80025b4 <HAL_DMA_Start_IT>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2210      	movs	r2, #16
 8005e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e051      	b.n	8005eea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d018      	beq.n	8005e80 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	657b      	str	r3, [r7, #84]	; 0x54
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	653b      	str	r3, [r7, #80]	; 0x50
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed4:	623a      	str	r2, [r7, #32]
 8005ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3758      	adds	r7, #88	; 0x58
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	080060cb 	.word	0x080060cb
 8005ef8:	080061f7 	.word	0x080061f7
 8005efc:	08006235 	.word	0x08006235

08005f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	613b      	str	r3, [r7, #16]
   return(result);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005f40:	bf00      	nop
 8005f42:	3724      	adds	r7, #36	; 0x24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b095      	sub	sp, #84	; 0x54
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	643b      	str	r3, [r7, #64]	; 0x40
 8005f74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d118      	bne.n	8005ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0310 	bic.w	r3, r3, #16
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6979      	ldr	r1, [r7, #20]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	613b      	str	r3, [r7, #16]
   return(result);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e6      	bne.n	8005fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006008:	bf00      	nop
 800600a:	3754      	adds	r7, #84	; 0x54
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b090      	sub	sp, #64	; 0x40
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d137      	bne.n	80060a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006032:	2200      	movs	r2, #0
 8006034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	623b      	str	r3, [r7, #32]
   return(result);
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006058:	633a      	str	r2, [r7, #48]	; 0x30
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800605e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60fb      	str	r3, [r7, #12]
   return(result);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	69b9      	ldr	r1, [r7, #24]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	617b      	str	r3, [r7, #20]
   return(result);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800609e:	e002      	b.n	80060a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80060a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060a2:	f7ff f9ef 	bl	8005484 <HAL_UART_TxCpltCallback>
}
 80060a6:	bf00      	nop
 80060a8:	3740      	adds	r7, #64	; 0x40
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff f9eb 	bl	8005498 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b09c      	sub	sp, #112	; 0x70
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d171      	bne.n	80061ca <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80060e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006102:	66bb      	str	r3, [r7, #104]	; 0x68
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800610c:	65bb      	str	r3, [r7, #88]	; 0x58
 800610e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e6      	bne.n	80060ee <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	667b      	str	r3, [r7, #100]	; 0x64
 8006138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006140:	647a      	str	r2, [r7, #68]	; 0x44
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	623b      	str	r3, [r7, #32]
   return(result);
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616a:	663b      	str	r3, [r7, #96]	; 0x60
 800616c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3308      	adds	r3, #8
 8006172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006174:	633a      	str	r2, [r7, #48]	; 0x30
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	2220      	movs	r2, #32
 800618c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006194:	2b01      	cmp	r3, #1
 8006196:	d118      	bne.n	80061ca <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f023 0310 	bic.w	r3, r3, #16
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	617b      	str	r3, [r7, #20]
   return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	2200      	movs	r2, #0
 80061ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d107      	bne.n	80061e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061de:	4619      	mov	r1, r3
 80061e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061e2:	f7ff f977 	bl	80054d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061e6:	e002      	b.n	80061ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80061e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061ea:	f7fb fe25 	bl	8001e38 <HAL_UART_RxCpltCallback>
}
 80061ee:	bf00      	nop
 80061f0:	3770      	adds	r7, #112	; 0x70
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620e:	2b01      	cmp	r3, #1
 8006210:	d109      	bne.n	8006226 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff f958 	bl	80054d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006224:	e002      	b.n	800622c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff f940 	bl	80054ac <HAL_UART_RxHalfCpltCallback>
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006246:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d109      	bne.n	8006272 <UART_DMAError+0x3e>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b21      	cmp	r3, #33	; 0x21
 8006262:	d106      	bne.n	8006272 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f7ff fe47 	bl	8005f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d109      	bne.n	8006294 <UART_DMAError+0x60>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b22      	cmp	r3, #34	; 0x22
 8006284:	d106      	bne.n	8006294 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800628e:	6978      	ldr	r0, [r7, #20]
 8006290:	f7ff fe5c 	bl	8005f4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	f043 0210 	orr.w	r2, r3, #16
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062a4:	6978      	ldr	r0, [r7, #20]
 80062a6:	f7ff f90b 	bl	80054c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <__cvt>:
 80062b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b6:	ec55 4b10 	vmov	r4, r5, d0
 80062ba:	2d00      	cmp	r5, #0
 80062bc:	460e      	mov	r6, r1
 80062be:	4619      	mov	r1, r3
 80062c0:	462b      	mov	r3, r5
 80062c2:	bfbb      	ittet	lt
 80062c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062c8:	461d      	movlt	r5, r3
 80062ca:	2300      	movge	r3, #0
 80062cc:	232d      	movlt	r3, #45	; 0x2d
 80062ce:	700b      	strb	r3, [r1, #0]
 80062d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062d6:	4691      	mov	r9, r2
 80062d8:	f023 0820 	bic.w	r8, r3, #32
 80062dc:	bfbc      	itt	lt
 80062de:	4622      	movlt	r2, r4
 80062e0:	4614      	movlt	r4, r2
 80062e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e6:	d005      	beq.n	80062f4 <__cvt+0x42>
 80062e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062ec:	d100      	bne.n	80062f0 <__cvt+0x3e>
 80062ee:	3601      	adds	r6, #1
 80062f0:	2102      	movs	r1, #2
 80062f2:	e000      	b.n	80062f6 <__cvt+0x44>
 80062f4:	2103      	movs	r1, #3
 80062f6:	ab03      	add	r3, sp, #12
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	ab02      	add	r3, sp, #8
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	ec45 4b10 	vmov	d0, r4, r5
 8006302:	4653      	mov	r3, sl
 8006304:	4632      	mov	r2, r6
 8006306:	f000 fe77 	bl	8006ff8 <_dtoa_r>
 800630a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800630e:	4607      	mov	r7, r0
 8006310:	d102      	bne.n	8006318 <__cvt+0x66>
 8006312:	f019 0f01 	tst.w	r9, #1
 8006316:	d022      	beq.n	800635e <__cvt+0xac>
 8006318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800631c:	eb07 0906 	add.w	r9, r7, r6
 8006320:	d110      	bne.n	8006344 <__cvt+0x92>
 8006322:	783b      	ldrb	r3, [r7, #0]
 8006324:	2b30      	cmp	r3, #48	; 0x30
 8006326:	d10a      	bne.n	800633e <__cvt+0x8c>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7fa fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006334:	b918      	cbnz	r0, 800633e <__cvt+0x8c>
 8006336:	f1c6 0601 	rsb	r6, r6, #1
 800633a:	f8ca 6000 	str.w	r6, [sl]
 800633e:	f8da 3000 	ldr.w	r3, [sl]
 8006342:	4499      	add	r9, r3
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7fa fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006350:	b108      	cbz	r0, 8006356 <__cvt+0xa4>
 8006352:	f8cd 900c 	str.w	r9, [sp, #12]
 8006356:	2230      	movs	r2, #48	; 0x30
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	454b      	cmp	r3, r9
 800635c:	d307      	bcc.n	800636e <__cvt+0xbc>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006362:	1bdb      	subs	r3, r3, r7
 8006364:	4638      	mov	r0, r7
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	b004      	add	sp, #16
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	9103      	str	r1, [sp, #12]
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e7f0      	b.n	8006358 <__cvt+0xa6>

08006376 <__exponent>:
 8006376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006378:	4603      	mov	r3, r0
 800637a:	2900      	cmp	r1, #0
 800637c:	bfb8      	it	lt
 800637e:	4249      	neglt	r1, r1
 8006380:	f803 2b02 	strb.w	r2, [r3], #2
 8006384:	bfb4      	ite	lt
 8006386:	222d      	movlt	r2, #45	; 0x2d
 8006388:	222b      	movge	r2, #43	; 0x2b
 800638a:	2909      	cmp	r1, #9
 800638c:	7042      	strb	r2, [r0, #1]
 800638e:	dd2a      	ble.n	80063e6 <__exponent+0x70>
 8006390:	f10d 0207 	add.w	r2, sp, #7
 8006394:	4617      	mov	r7, r2
 8006396:	260a      	movs	r6, #10
 8006398:	4694      	mov	ip, r2
 800639a:	fb91 f5f6 	sdiv	r5, r1, r6
 800639e:	fb06 1415 	mls	r4, r6, r5, r1
 80063a2:	3430      	adds	r4, #48	; 0x30
 80063a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80063a8:	460c      	mov	r4, r1
 80063aa:	2c63      	cmp	r4, #99	; 0x63
 80063ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80063b0:	4629      	mov	r1, r5
 80063b2:	dcf1      	bgt.n	8006398 <__exponent+0x22>
 80063b4:	3130      	adds	r1, #48	; 0x30
 80063b6:	f1ac 0402 	sub.w	r4, ip, #2
 80063ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063be:	1c41      	adds	r1, r0, #1
 80063c0:	4622      	mov	r2, r4
 80063c2:	42ba      	cmp	r2, r7
 80063c4:	d30a      	bcc.n	80063dc <__exponent+0x66>
 80063c6:	f10d 0209 	add.w	r2, sp, #9
 80063ca:	eba2 020c 	sub.w	r2, r2, ip
 80063ce:	42bc      	cmp	r4, r7
 80063d0:	bf88      	it	hi
 80063d2:	2200      	movhi	r2, #0
 80063d4:	4413      	add	r3, r2
 80063d6:	1a18      	subs	r0, r3, r0
 80063d8:	b003      	add	sp, #12
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063e4:	e7ed      	b.n	80063c2 <__exponent+0x4c>
 80063e6:	2330      	movs	r3, #48	; 0x30
 80063e8:	3130      	adds	r1, #48	; 0x30
 80063ea:	7083      	strb	r3, [r0, #2]
 80063ec:	70c1      	strb	r1, [r0, #3]
 80063ee:	1d03      	adds	r3, r0, #4
 80063f0:	e7f1      	b.n	80063d6 <__exponent+0x60>
	...

080063f4 <_printf_float>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	ed2d 8b02 	vpush	{d8}
 80063fc:	b08d      	sub	sp, #52	; 0x34
 80063fe:	460c      	mov	r4, r1
 8006400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006404:	4616      	mov	r6, r2
 8006406:	461f      	mov	r7, r3
 8006408:	4605      	mov	r5, r0
 800640a:	f000 fce7 	bl	8006ddc <_localeconv_r>
 800640e:	f8d0 a000 	ldr.w	sl, [r0]
 8006412:	4650      	mov	r0, sl
 8006414:	f7f9 ff2c 	bl	8000270 <strlen>
 8006418:	2300      	movs	r3, #0
 800641a:	930a      	str	r3, [sp, #40]	; 0x28
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	9305      	str	r3, [sp, #20]
 8006420:	f8d8 3000 	ldr.w	r3, [r8]
 8006424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006428:	3307      	adds	r3, #7
 800642a:	f023 0307 	bic.w	r3, r3, #7
 800642e:	f103 0208 	add.w	r2, r3, #8
 8006432:	f8c8 2000 	str.w	r2, [r8]
 8006436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800643a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	f8cd 8018 	str.w	r8, [sp, #24]
 8006444:	ee08 0a10 	vmov	s16, r0
 8006448:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800644c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006450:	4b9e      	ldr	r3, [pc, #632]	; (80066cc <_printf_float+0x2d8>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	f7fa fb69 	bl	8000b2c <__aeabi_dcmpun>
 800645a:	bb88      	cbnz	r0, 80064c0 <_printf_float+0xcc>
 800645c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006460:	4b9a      	ldr	r3, [pc, #616]	; (80066cc <_printf_float+0x2d8>)
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	f7fa fb43 	bl	8000af0 <__aeabi_dcmple>
 800646a:	bb48      	cbnz	r0, 80064c0 <_printf_float+0xcc>
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa fb32 	bl	8000adc <__aeabi_dcmplt>
 8006478:	b110      	cbz	r0, 8006480 <_printf_float+0x8c>
 800647a:	232d      	movs	r3, #45	; 0x2d
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	4a93      	ldr	r2, [pc, #588]	; (80066d0 <_printf_float+0x2dc>)
 8006482:	4b94      	ldr	r3, [pc, #592]	; (80066d4 <_printf_float+0x2e0>)
 8006484:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006488:	bf94      	ite	ls
 800648a:	4690      	movls	r8, r2
 800648c:	4698      	movhi	r8, r3
 800648e:	2303      	movs	r3, #3
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f04f 0900 	mov.w	r9, #0
 800649e:	9700      	str	r7, [sp, #0]
 80064a0:	4633      	mov	r3, r6
 80064a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f9da 	bl	8006860 <_printf_common>
 80064ac:	3001      	adds	r0, #1
 80064ae:	f040 8090 	bne.w	80065d2 <_printf_float+0x1de>
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	b00d      	add	sp, #52	; 0x34
 80064b8:	ecbd 8b02 	vpop	{d8}
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7fa fb30 	bl	8000b2c <__aeabi_dcmpun>
 80064cc:	b140      	cbz	r0, 80064e0 <_printf_float+0xec>
 80064ce:	464b      	mov	r3, r9
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbc      	itt	lt
 80064d4:	232d      	movlt	r3, #45	; 0x2d
 80064d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064da:	4a7f      	ldr	r2, [pc, #508]	; (80066d8 <_printf_float+0x2e4>)
 80064dc:	4b7f      	ldr	r3, [pc, #508]	; (80066dc <_printf_float+0x2e8>)
 80064de:	e7d1      	b.n	8006484 <_printf_float+0x90>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064e6:	9206      	str	r2, [sp, #24]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	d13f      	bne.n	800656c <_printf_float+0x178>
 80064ec:	2306      	movs	r3, #6
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	9b05      	ldr	r3, [sp, #20]
 80064f2:	6861      	ldr	r1, [r4, #4]
 80064f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064f8:	2300      	movs	r3, #0
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	ab0a      	add	r3, sp, #40	; 0x28
 80064fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006502:	ab09      	add	r3, sp, #36	; 0x24
 8006504:	ec49 8b10 	vmov	d0, r8, r9
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006510:	4628      	mov	r0, r5
 8006512:	f7ff fece 	bl	80062b2 <__cvt>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800651a:	2b47      	cmp	r3, #71	; 0x47
 800651c:	4680      	mov	r8, r0
 800651e:	d108      	bne.n	8006532 <_printf_float+0x13e>
 8006520:	1cc8      	adds	r0, r1, #3
 8006522:	db02      	blt.n	800652a <_printf_float+0x136>
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	4299      	cmp	r1, r3
 8006528:	dd41      	ble.n	80065ae <_printf_float+0x1ba>
 800652a:	f1ab 0302 	sub.w	r3, fp, #2
 800652e:	fa5f fb83 	uxtb.w	fp, r3
 8006532:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006536:	d820      	bhi.n	800657a <_printf_float+0x186>
 8006538:	3901      	subs	r1, #1
 800653a:	465a      	mov	r2, fp
 800653c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006540:	9109      	str	r1, [sp, #36]	; 0x24
 8006542:	f7ff ff18 	bl	8006376 <__exponent>
 8006546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006548:	1813      	adds	r3, r2, r0
 800654a:	2a01      	cmp	r2, #1
 800654c:	4681      	mov	r9, r0
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	dc02      	bgt.n	8006558 <_printf_float+0x164>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	07d2      	lsls	r2, r2, #31
 8006556:	d501      	bpl.n	800655c <_printf_float+0x168>
 8006558:	3301      	adds	r3, #1
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006560:	2b00      	cmp	r3, #0
 8006562:	d09c      	beq.n	800649e <_printf_float+0xaa>
 8006564:	232d      	movs	r3, #45	; 0x2d
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656a:	e798      	b.n	800649e <_printf_float+0xaa>
 800656c:	9a06      	ldr	r2, [sp, #24]
 800656e:	2a47      	cmp	r2, #71	; 0x47
 8006570:	d1be      	bne.n	80064f0 <_printf_float+0xfc>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1bc      	bne.n	80064f0 <_printf_float+0xfc>
 8006576:	2301      	movs	r3, #1
 8006578:	e7b9      	b.n	80064ee <_printf_float+0xfa>
 800657a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800657e:	d118      	bne.n	80065b2 <_printf_float+0x1be>
 8006580:	2900      	cmp	r1, #0
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	dd0b      	ble.n	800659e <_printf_float+0x1aa>
 8006586:	6121      	str	r1, [r4, #16]
 8006588:	b913      	cbnz	r3, 8006590 <_printf_float+0x19c>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	07d0      	lsls	r0, r2, #31
 800658e:	d502      	bpl.n	8006596 <_printf_float+0x1a2>
 8006590:	3301      	adds	r3, #1
 8006592:	440b      	add	r3, r1
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	65a1      	str	r1, [r4, #88]	; 0x58
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	e7de      	b.n	800655c <_printf_float+0x168>
 800659e:	b913      	cbnz	r3, 80065a6 <_printf_float+0x1b2>
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	07d2      	lsls	r2, r2, #31
 80065a4:	d501      	bpl.n	80065aa <_printf_float+0x1b6>
 80065a6:	3302      	adds	r3, #2
 80065a8:	e7f4      	b.n	8006594 <_printf_float+0x1a0>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7f2      	b.n	8006594 <_printf_float+0x1a0>
 80065ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b4:	4299      	cmp	r1, r3
 80065b6:	db05      	blt.n	80065c4 <_printf_float+0x1d0>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	6121      	str	r1, [r4, #16]
 80065bc:	07d8      	lsls	r0, r3, #31
 80065be:	d5ea      	bpl.n	8006596 <_printf_float+0x1a2>
 80065c0:	1c4b      	adds	r3, r1, #1
 80065c2:	e7e7      	b.n	8006594 <_printf_float+0x1a0>
 80065c4:	2900      	cmp	r1, #0
 80065c6:	bfd4      	ite	le
 80065c8:	f1c1 0202 	rsble	r2, r1, #2
 80065cc:	2201      	movgt	r2, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	e7e0      	b.n	8006594 <_printf_float+0x1a0>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	055a      	lsls	r2, r3, #21
 80065d6:	d407      	bmi.n	80065e8 <_printf_float+0x1f4>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	4642      	mov	r2, r8
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	d12c      	bne.n	8006640 <_printf_float+0x24c>
 80065e6:	e764      	b.n	80064b2 <_printf_float+0xbe>
 80065e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ec:	f240 80e0 	bls.w	80067b0 <_printf_float+0x3bc>
 80065f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f7fa fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d034      	beq.n	800666a <_printf_float+0x276>
 8006600:	4a37      	ldr	r2, [pc, #220]	; (80066e0 <_printf_float+0x2ec>)
 8006602:	2301      	movs	r3, #1
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af51 	beq.w	80064b2 <_printf_float+0xbe>
 8006610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006614:	429a      	cmp	r2, r3
 8006616:	db02      	blt.n	800661e <_printf_float+0x22a>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07d8      	lsls	r0, r3, #31
 800661c:	d510      	bpl.n	8006640 <_printf_float+0x24c>
 800661e:	ee18 3a10 	vmov	r3, s16
 8006622:	4652      	mov	r2, sl
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af41 	beq.w	80064b2 <_printf_float+0xbe>
 8006630:	f04f 0800 	mov.w	r8, #0
 8006634:	f104 091a 	add.w	r9, r4, #26
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	3b01      	subs	r3, #1
 800663c:	4543      	cmp	r3, r8
 800663e:	dc09      	bgt.n	8006654 <_printf_float+0x260>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	079b      	lsls	r3, r3, #30
 8006644:	f100 8107 	bmi.w	8006856 <_printf_float+0x462>
 8006648:	68e0      	ldr	r0, [r4, #12]
 800664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800664c:	4298      	cmp	r0, r3
 800664e:	bfb8      	it	lt
 8006650:	4618      	movlt	r0, r3
 8006652:	e730      	b.n	80064b6 <_printf_float+0xc2>
 8006654:	2301      	movs	r3, #1
 8006656:	464a      	mov	r2, r9
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	f43f af27 	beq.w	80064b2 <_printf_float+0xbe>
 8006664:	f108 0801 	add.w	r8, r8, #1
 8006668:	e7e6      	b.n	8006638 <_printf_float+0x244>
 800666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc39      	bgt.n	80066e4 <_printf_float+0x2f0>
 8006670:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <_printf_float+0x2ec>)
 8006672:	2301      	movs	r3, #1
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af19 	beq.w	80064b2 <_printf_float+0xbe>
 8006680:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006684:	4313      	orrs	r3, r2
 8006686:	d102      	bne.n	800668e <_printf_float+0x29a>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07d9      	lsls	r1, r3, #31
 800668c:	d5d8      	bpl.n	8006640 <_printf_float+0x24c>
 800668e:	ee18 3a10 	vmov	r3, s16
 8006692:	4652      	mov	r2, sl
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af09 	beq.w	80064b2 <_printf_float+0xbe>
 80066a0:	f04f 0900 	mov.w	r9, #0
 80066a4:	f104 0a1a 	add.w	sl, r4, #26
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	425b      	negs	r3, r3
 80066ac:	454b      	cmp	r3, r9
 80066ae:	dc01      	bgt.n	80066b4 <_printf_float+0x2c0>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	e792      	b.n	80065da <_printf_float+0x1e6>
 80066b4:	2301      	movs	r3, #1
 80066b6:	4652      	mov	r2, sl
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f aef7 	beq.w	80064b2 <_printf_float+0xbe>
 80066c4:	f109 0901 	add.w	r9, r9, #1
 80066c8:	e7ee      	b.n	80066a8 <_printf_float+0x2b4>
 80066ca:	bf00      	nop
 80066cc:	7fefffff 	.word	0x7fefffff
 80066d0:	080093a8 	.word	0x080093a8
 80066d4:	080093ac 	.word	0x080093ac
 80066d8:	080093b0 	.word	0x080093b0
 80066dc:	080093b4 	.word	0x080093b4
 80066e0:	080093b8 	.word	0x080093b8
 80066e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bfa8      	it	ge
 80066ec:	461a      	movge	r2, r3
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	4691      	mov	r9, r2
 80066f2:	dc37      	bgt.n	8006764 <_printf_float+0x370>
 80066f4:	f04f 0b00 	mov.w	fp, #0
 80066f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066fc:	f104 021a 	add.w	r2, r4, #26
 8006700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	eba3 0309 	sub.w	r3, r3, r9
 8006708:	455b      	cmp	r3, fp
 800670a:	dc33      	bgt.n	8006774 <_printf_float+0x380>
 800670c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006710:	429a      	cmp	r2, r3
 8006712:	db3b      	blt.n	800678c <_printf_float+0x398>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d438      	bmi.n	800678c <_printf_float+0x398>
 800671a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800671e:	eba2 0903 	sub.w	r9, r2, r3
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	4591      	cmp	r9, r2
 8006728:	bfa8      	it	ge
 800672a:	4691      	movge	r9, r2
 800672c:	f1b9 0f00 	cmp.w	r9, #0
 8006730:	dc35      	bgt.n	800679e <_printf_float+0x3aa>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800673a:	f104 0a1a 	add.w	sl, r4, #26
 800673e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	eba3 0309 	sub.w	r3, r3, r9
 8006748:	4543      	cmp	r3, r8
 800674a:	f77f af79 	ble.w	8006640 <_printf_float+0x24c>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	f43f aeaa 	beq.w	80064b2 <_printf_float+0xbe>
 800675e:	f108 0801 	add.w	r8, r8, #1
 8006762:	e7ec      	b.n	800673e <_printf_float+0x34a>
 8006764:	4613      	mov	r3, r2
 8006766:	4631      	mov	r1, r6
 8006768:	4642      	mov	r2, r8
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	d1c0      	bne.n	80066f4 <_printf_float+0x300>
 8006772:	e69e      	b.n	80064b2 <_printf_float+0xbe>
 8006774:	2301      	movs	r3, #1
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	9205      	str	r2, [sp, #20]
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f ae97 	beq.w	80064b2 <_printf_float+0xbe>
 8006784:	9a05      	ldr	r2, [sp, #20]
 8006786:	f10b 0b01 	add.w	fp, fp, #1
 800678a:	e7b9      	b.n	8006700 <_printf_float+0x30c>
 800678c:	ee18 3a10 	vmov	r3, s16
 8006790:	4652      	mov	r2, sl
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	d1be      	bne.n	800671a <_printf_float+0x326>
 800679c:	e689      	b.n	80064b2 <_printf_float+0xbe>
 800679e:	9a05      	ldr	r2, [sp, #20]
 80067a0:	464b      	mov	r3, r9
 80067a2:	4442      	add	r2, r8
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d1c1      	bne.n	8006732 <_printf_float+0x33e>
 80067ae:	e680      	b.n	80064b2 <_printf_float+0xbe>
 80067b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b2:	2a01      	cmp	r2, #1
 80067b4:	dc01      	bgt.n	80067ba <_printf_float+0x3c6>
 80067b6:	07db      	lsls	r3, r3, #31
 80067b8:	d53a      	bpl.n	8006830 <_printf_float+0x43c>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4642      	mov	r2, r8
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae74 	beq.w	80064b2 <_printf_float+0xbe>
 80067ca:	ee18 3a10 	vmov	r3, s16
 80067ce:	4652      	mov	r2, sl
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f ae6b 	beq.w	80064b2 <_printf_float+0xbe>
 80067dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80067e8:	f7fa f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ec:	b9d8      	cbnz	r0, 8006826 <_printf_float+0x432>
 80067ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067f2:	f108 0201 	add.w	r2, r8, #1
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	d10e      	bne.n	800681e <_printf_float+0x42a>
 8006800:	e657      	b.n	80064b2 <_printf_float+0xbe>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae50 	beq.w	80064b2 <_printf_float+0xbe>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	4543      	cmp	r3, r8
 800681c:	dcf1      	bgt.n	8006802 <_printf_float+0x40e>
 800681e:	464b      	mov	r3, r9
 8006820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006824:	e6da      	b.n	80065dc <_printf_float+0x1e8>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0a1a 	add.w	sl, r4, #26
 800682e:	e7f2      	b.n	8006816 <_printf_float+0x422>
 8006830:	2301      	movs	r3, #1
 8006832:	4642      	mov	r2, r8
 8006834:	e7df      	b.n	80067f6 <_printf_float+0x402>
 8006836:	2301      	movs	r3, #1
 8006838:	464a      	mov	r2, r9
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f ae36 	beq.w	80064b2 <_printf_float+0xbe>
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	4543      	cmp	r3, r8
 8006852:	dcf0      	bgt.n	8006836 <_printf_float+0x442>
 8006854:	e6f8      	b.n	8006648 <_printf_float+0x254>
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	f104 0919 	add.w	r9, r4, #25
 800685e:	e7f4      	b.n	800684a <_printf_float+0x456>

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4699      	mov	r9, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068ac:	1e13      	subs	r3, r2, #0
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068bc:	4649      	mov	r1, r9
 80068be:	4638      	mov	r0, r7
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	f003 0306 	and.w	r3, r3, #6
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf02      	ittt	eq
 80068d2:	68e5      	ldreq	r5, [r4, #12]
 80068d4:	6833      	ldreq	r3, [r6, #0]
 80068d6:	1aed      	subeq	r5, r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4649      	mov	r1, r9
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c0      	blx	r8
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	; 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4649      	mov	r1, r9
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	7e0f      	ldrb	r7, [r1, #24]
 8006942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006944:	2f78      	cmp	r7, #120	; 0x78
 8006946:	4691      	mov	r9, r2
 8006948:	4680      	mov	r8, r0
 800694a:	460c      	mov	r4, r1
 800694c:	469a      	mov	sl, r3
 800694e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	; 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d4 	beq.w	8006b06 <_printf_i+0x1ca>
 800695e:	2f58      	cmp	r7, #88	; 0x58
 8006960:	f000 80c0 	beq.w	8006ae4 <_printf_i+0x1a8>
 8006964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a101      	add	r1, pc, #4	; (adr r1, 800697c <_printf_i+0x40>)
 8006978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006aed 	.word	0x08006aed
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006aa7 	.word	0x08006aa7
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b0f 	.word	0x08006b0f
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006aaf 	.word	0x08006aaf
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	602a      	str	r2, [r5, #0]
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e09f      	b.n	8006b28 <_printf_i+0x1ec>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	0607      	lsls	r7, r0, #24
 80069ee:	f103 0104 	add.w	r1, r3, #4
 80069f2:	6029      	str	r1, [r5, #0]
 80069f4:	d501      	bpl.n	80069fa <_printf_i+0xbe>
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	e003      	b.n	8006a02 <_printf_i+0xc6>
 80069fa:	0646      	lsls	r6, r0, #25
 80069fc:	d5fb      	bpl.n	80069f6 <_printf_i+0xba>
 80069fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	da03      	bge.n	8006a0e <_printf_i+0xd2>
 8006a06:	232d      	movs	r3, #45	; 0x2d
 8006a08:	4276      	negs	r6, r6
 8006a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0e:	485a      	ldr	r0, [pc, #360]	; (8006b78 <_printf_i+0x23c>)
 8006a10:	230a      	movs	r3, #10
 8006a12:	e012      	b.n	8006a3a <_printf_i+0xfe>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1d19      	adds	r1, r3, #4
 8006a1a:	6029      	str	r1, [r5, #0]
 8006a1c:	0605      	lsls	r5, r0, #24
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0xe8>
 8006a20:	681e      	ldr	r6, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <_printf_i+0xee>
 8006a24:	0641      	lsls	r1, r0, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0xe4>
 8006a28:	881e      	ldrh	r6, [r3, #0]
 8006a2a:	4853      	ldr	r0, [pc, #332]	; (8006b78 <_printf_i+0x23c>)
 8006a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a2e:	bf0c      	ite	eq
 8006a30:	2308      	moveq	r3, #8
 8006a32:	230a      	movne	r3, #10
 8006a34:	2100      	movs	r1, #0
 8006a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3a:	6865      	ldr	r5, [r4, #4]
 8006a3c:	60a5      	str	r5, [r4, #8]
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	bfa2      	ittt	ge
 8006a42:	6821      	ldrge	r1, [r4, #0]
 8006a44:	f021 0104 	bicge.w	r1, r1, #4
 8006a48:	6021      	strge	r1, [r4, #0]
 8006a4a:	b90e      	cbnz	r6, 8006a50 <_printf_i+0x114>
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d04b      	beq.n	8006ae8 <_printf_i+0x1ac>
 8006a50:	4615      	mov	r5, r2
 8006a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a56:	fb03 6711 	mls	r7, r3, r1, r6
 8006a5a:	5dc7      	ldrb	r7, [r0, r7]
 8006a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a60:	4637      	mov	r7, r6
 8006a62:	42bb      	cmp	r3, r7
 8006a64:	460e      	mov	r6, r1
 8006a66:	d9f4      	bls.n	8006a52 <_printf_i+0x116>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d10b      	bne.n	8006a84 <_printf_i+0x148>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	07de      	lsls	r6, r3, #31
 8006a70:	d508      	bpl.n	8006a84 <_printf_i+0x148>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4299      	cmp	r1, r3
 8006a78:	bfde      	ittt	le
 8006a7a:	2330      	movle	r3, #48	; 0x30
 8006a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a84:	1b52      	subs	r2, r2, r5
 8006a86:	6122      	str	r2, [r4, #16]
 8006a88:	f8cd a000 	str.w	sl, [sp]
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	aa03      	add	r2, sp, #12
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fee4 	bl	8006860 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d14a      	bne.n	8006b32 <_printf_i+0x1f6>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b004      	add	sp, #16
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	4833      	ldr	r0, [pc, #204]	; (8006b7c <_printf_i+0x240>)
 8006ab0:	2778      	movs	r7, #120	; 0x78
 8006ab2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	061f      	lsls	r7, r3, #24
 8006abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0x18c>
 8006ac2:	065f      	lsls	r7, r3, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2b6      	uxthmi	r6, r6
 8006ac8:	07df      	lsls	r7, r3, #31
 8006aca:	bf48      	it	mi
 8006acc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	bf48      	it	mi
 8006ad4:	6023      	strmi	r3, [r4, #0]
 8006ad6:	b91e      	cbnz	r6, 8006ae0 <_printf_i+0x1a4>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	f023 0320 	bic.w	r3, r3, #32
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	e7a7      	b.n	8006a34 <_printf_i+0xf8>
 8006ae4:	4824      	ldr	r0, [pc, #144]	; (8006b78 <_printf_i+0x23c>)
 8006ae6:	e7e4      	b.n	8006ab2 <_printf_i+0x176>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	e7bd      	b.n	8006a68 <_printf_i+0x12c>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	6826      	ldr	r6, [r4, #0]
 8006af0:	6961      	ldr	r1, [r4, #20]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6028      	str	r0, [r5, #0]
 8006af6:	0635      	lsls	r5, r6, #24
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0x1c4>
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	e002      	b.n	8006b06 <_printf_i+0x1ca>
 8006b00:	0670      	lsls	r0, r6, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0x1c0>
 8006b04:	8019      	strh	r1, [r3, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	4615      	mov	r5, r2
 8006b0c:	e7bc      	b.n	8006a88 <_printf_i+0x14c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	6862      	ldr	r2, [r4, #4]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fb58 	bl	80001d0 <memchr>
 8006b20:	b108      	cbz	r0, 8006b26 <_printf_i+0x1ea>
 8006b22:	1b40      	subs	r0, r0, r5
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	e7aa      	b.n	8006a88 <_printf_i+0x14c>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	462a      	mov	r2, r5
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0ad      	beq.n	8006a9c <_printf_i+0x160>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	d413      	bmi.n	8006b6e <_printf_i+0x232>
 8006b46:	68e0      	ldr	r0, [r4, #12]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	4298      	cmp	r0, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	4618      	movlt	r0, r3
 8006b50:	e7a6      	b.n	8006aa0 <_printf_i+0x164>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d09d      	beq.n	8006a9c <_printf_i+0x160>
 8006b60:	3501      	adds	r5, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9903      	ldr	r1, [sp, #12]
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dcf2      	bgt.n	8006b52 <_printf_i+0x216>
 8006b6c:	e7eb      	b.n	8006b46 <_printf_i+0x20a>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	f104 0619 	add.w	r6, r4, #25
 8006b74:	e7f5      	b.n	8006b62 <_printf_i+0x226>
 8006b76:	bf00      	nop
 8006b78:	080093ba 	.word	0x080093ba
 8006b7c:	080093cb 	.word	0x080093cb

08006b80 <std>:
 8006b80:	2300      	movs	r3, #0
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	e9c0 3300 	strd	r3, r3, [r0]
 8006b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b8e:	6083      	str	r3, [r0, #8]
 8006b90:	8181      	strh	r1, [r0, #12]
 8006b92:	6643      	str	r3, [r0, #100]	; 0x64
 8006b94:	81c2      	strh	r2, [r0, #14]
 8006b96:	6183      	str	r3, [r0, #24]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	305c      	adds	r0, #92	; 0x5c
 8006b9e:	f000 f914 	bl	8006dca <memset>
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <std+0x58>)
 8006ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <std+0x5c>)
 8006ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <std+0x60>)
 8006bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bae:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <std+0x64>)
 8006bb0:	6323      	str	r3, [r4, #48]	; 0x30
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <std+0x68>)
 8006bb4:	6224      	str	r4, [r4, #32]
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d006      	beq.n	8006bc8 <std+0x48>
 8006bba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006bbe:	4294      	cmp	r4, r2
 8006bc0:	d002      	beq.n	8006bc8 <std+0x48>
 8006bc2:	33d0      	adds	r3, #208	; 0xd0
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	d105      	bne.n	8006bd4 <std+0x54>
 8006bc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f000 b978 	b.w	8006ec4 <__retarget_lock_init_recursive>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08006d45 	.word	0x08006d45
 8006bdc:	08006d67 	.word	0x08006d67
 8006be0:	08006d9f 	.word	0x08006d9f
 8006be4:	08006dc3 	.word	0x08006dc3
 8006be8:	20000554 	.word	0x20000554

08006bec <stdio_exit_handler>:
 8006bec:	4a02      	ldr	r2, [pc, #8]	; (8006bf8 <stdio_exit_handler+0xc>)
 8006bee:	4903      	ldr	r1, [pc, #12]	; (8006bfc <stdio_exit_handler+0x10>)
 8006bf0:	4803      	ldr	r0, [pc, #12]	; (8006c00 <stdio_exit_handler+0x14>)
 8006bf2:	f000 b869 	b.w	8006cc8 <_fwalk_sglue>
 8006bf6:	bf00      	nop
 8006bf8:	20000020 	.word	0x20000020
 8006bfc:	08008891 	.word	0x08008891
 8006c00:	2000002c 	.word	0x2000002c

08006c04 <cleanup_stdio>:
 8006c04:	6841      	ldr	r1, [r0, #4]
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <cleanup_stdio+0x34>)
 8006c08:	4299      	cmp	r1, r3
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	d001      	beq.n	8006c14 <cleanup_stdio+0x10>
 8006c10:	f001 fe3e 	bl	8008890 <_fflush_r>
 8006c14:	68a1      	ldr	r1, [r4, #8]
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <cleanup_stdio+0x38>)
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <cleanup_stdio+0x1e>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f001 fe37 	bl	8008890 <_fflush_r>
 8006c22:	68e1      	ldr	r1, [r4, #12]
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <cleanup_stdio+0x3c>)
 8006c26:	4299      	cmp	r1, r3
 8006c28:	d004      	beq.n	8006c34 <cleanup_stdio+0x30>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c30:	f001 be2e 	b.w	8008890 <_fflush_r>
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	20000554 	.word	0x20000554
 8006c3c:	200005bc 	.word	0x200005bc
 8006c40:	20000624 	.word	0x20000624

08006c44 <global_stdio_init.part.0>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <global_stdio_init.part.0+0x30>)
 8006c48:	4c0b      	ldr	r4, [pc, #44]	; (8006c78 <global_stdio_init.part.0+0x34>)
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <global_stdio_init.part.0+0x38>)
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	2200      	movs	r2, #0
 8006c52:	2104      	movs	r1, #4
 8006c54:	f7ff ff94 	bl	8006b80 <std>
 8006c58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2109      	movs	r1, #9
 8006c60:	f7ff ff8e 	bl	8006b80 <std>
 8006c64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c68:	2202      	movs	r2, #2
 8006c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6e:	2112      	movs	r1, #18
 8006c70:	f7ff bf86 	b.w	8006b80 <std>
 8006c74:	2000068c 	.word	0x2000068c
 8006c78:	20000554 	.word	0x20000554
 8006c7c:	08006bed 	.word	0x08006bed

08006c80 <__sfp_lock_acquire>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__sfp_lock_acquire+0x8>)
 8006c82:	f000 b920 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000695 	.word	0x20000695

08006c8c <__sfp_lock_release>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__sfp_lock_release+0x8>)
 8006c8e:	f000 b91b 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000695 	.word	0x20000695

08006c98 <__sinit>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	f7ff fff0 	bl	8006c80 <__sfp_lock_acquire>
 8006ca0:	6a23      	ldr	r3, [r4, #32]
 8006ca2:	b11b      	cbz	r3, 8006cac <__sinit+0x14>
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f7ff bff0 	b.w	8006c8c <__sfp_lock_release>
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <__sinit+0x28>)
 8006cae:	6223      	str	r3, [r4, #32]
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <__sinit+0x2c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f5      	bne.n	8006ca4 <__sinit+0xc>
 8006cb8:	f7ff ffc4 	bl	8006c44 <global_stdio_init.part.0>
 8006cbc:	e7f2      	b.n	8006ca4 <__sinit+0xc>
 8006cbe:	bf00      	nop
 8006cc0:	08006c05 	.word	0x08006c05
 8006cc4:	2000068c 	.word	0x2000068c

08006cc8 <_fwalk_sglue>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4607      	mov	r7, r0
 8006cce:	4688      	mov	r8, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cdc:	d505      	bpl.n	8006cea <_fwalk_sglue+0x22>
 8006cde:	6824      	ldr	r4, [r4, #0]
 8006ce0:	2c00      	cmp	r4, #0
 8006ce2:	d1f7      	bne.n	8006cd4 <_fwalk_sglue+0xc>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cea:	89ab      	ldrh	r3, [r5, #12]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d907      	bls.n	8006d00 <_fwalk_sglue+0x38>
 8006cf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	d003      	beq.n	8006d00 <_fwalk_sglue+0x38>
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c0      	blx	r8
 8006cfe:	4306      	orrs	r6, r0
 8006d00:	3568      	adds	r5, #104	; 0x68
 8006d02:	e7e9      	b.n	8006cd8 <_fwalk_sglue+0x10>

08006d04 <siprintf>:
 8006d04:	b40e      	push	{r1, r2, r3}
 8006d06:	b500      	push	{lr}
 8006d08:	b09c      	sub	sp, #112	; 0x70
 8006d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d0c:	9002      	str	r0, [sp, #8]
 8006d0e:	9006      	str	r0, [sp, #24]
 8006d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d14:	4809      	ldr	r0, [pc, #36]	; (8006d3c <siprintf+0x38>)
 8006d16:	9107      	str	r1, [sp, #28]
 8006d18:	9104      	str	r1, [sp, #16]
 8006d1a:	4909      	ldr	r1, [pc, #36]	; (8006d40 <siprintf+0x3c>)
 8006d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	6800      	ldr	r0, [r0, #0]
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	a902      	add	r1, sp, #8
 8006d28:	f001 fc2e 	bl	8008588 <_svfiprintf_r>
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	b01c      	add	sp, #112	; 0x70
 8006d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d38:	b003      	add	sp, #12
 8006d3a:	4770      	bx	lr
 8006d3c:	20000078 	.word	0x20000078
 8006d40:	ffff0208 	.word	0xffff0208

08006d44 <__sread>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4c:	f000 f86c 	bl	8006e28 <_read_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	bfab      	itete	ge
 8006d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d56:	89a3      	ldrhlt	r3, [r4, #12]
 8006d58:	181b      	addge	r3, r3, r0
 8006d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d5e:	bfac      	ite	ge
 8006d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d62:	81a3      	strhlt	r3, [r4, #12]
 8006d64:	bd10      	pop	{r4, pc}

08006d66 <__swrite>:
 8006d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	898b      	ldrh	r3, [r1, #12]
 8006d6e:	05db      	lsls	r3, r3, #23
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4616      	mov	r6, r2
 8006d76:	d505      	bpl.n	8006d84 <__swrite+0x1e>
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f000 f840 	bl	8006e04 <_lseek_r>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	4628      	mov	r0, r5
 8006d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9a:	f000 b857 	b.w	8006e4c <_write_r>

08006d9e <__sseek>:
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	460c      	mov	r4, r1
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 f82d 	bl	8006e04 <_lseek_r>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	bf15      	itete	ne
 8006db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dba:	81a3      	strheq	r3, [r4, #12]
 8006dbc:	bf18      	it	ne
 8006dbe:	81a3      	strhne	r3, [r4, #12]
 8006dc0:	bd10      	pop	{r4, pc}

08006dc2 <__sclose>:
 8006dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc6:	f000 b80d 	b.w	8006de4 <_close_r>

08006dca <memset>:
 8006dca:	4402      	add	r2, r0
 8006dcc:	4603      	mov	r3, r0
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d100      	bne.n	8006dd4 <memset+0xa>
 8006dd2:	4770      	bx	lr
 8006dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd8:	e7f9      	b.n	8006dce <memset+0x4>
	...

08006ddc <_localeconv_r>:
 8006ddc:	4800      	ldr	r0, [pc, #0]	; (8006de0 <_localeconv_r+0x4>)
 8006dde:	4770      	bx	lr
 8006de0:	2000016c 	.word	0x2000016c

08006de4 <_close_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_close_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fa fdc3 	bl	800197a <_close>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_close_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_close_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	20000690 	.word	0x20000690

08006e04 <_lseek_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	; (8006e24 <_lseek_r+0x20>)
 8006e08:	4604      	mov	r4, r0
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	602a      	str	r2, [r5, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f7fa fdd8 	bl	80019c8 <_lseek>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_lseek_r+0x1e>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_lseek_r+0x1e>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000690 	.word	0x20000690

08006e28 <_read_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	; (8006e48 <_read_r+0x20>)
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fa fd66 	bl	8001908 <_read>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_read_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_read_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000690 	.word	0x20000690

08006e4c <_write_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	; (8006e6c <_write_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fa fd71 	bl	8001942 <_write>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_write_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_write_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000690 	.word	0x20000690

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	; (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000078 	.word	0x20000078

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4d0d      	ldr	r5, [pc, #52]	; (8006eb4 <__libc_init_array+0x38>)
 8006e80:	4c0d      	ldr	r4, [pc, #52]	; (8006eb8 <__libc_init_array+0x3c>)
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	2600      	movs	r6, #0
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4d0b      	ldr	r5, [pc, #44]	; (8006ebc <__libc_init_array+0x40>)
 8006e8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ec0 <__libc_init_array+0x44>)
 8006e90:	f002 fa4a 	bl	8009328 <_init>
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	2600      	movs	r6, #0
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	4798      	blx	r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	4798      	blx	r3
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	0800973c 	.word	0x0800973c
 8006eb8:	0800973c 	.word	0x0800973c
 8006ebc:	0800973c 	.word	0x0800973c
 8006ec0:	08009740 	.word	0x08009740

08006ec4 <__retarget_lock_init_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <__retarget_lock_acquire_recursive>:
 8006ec6:	4770      	bx	lr

08006ec8 <__retarget_lock_release_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <memcpy>:
 8006eca:	440a      	add	r2, r1
 8006ecc:	4291      	cmp	r1, r2
 8006ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ed2:	d100      	bne.n	8006ed6 <memcpy+0xc>
 8006ed4:	4770      	bx	lr
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee0:	4291      	cmp	r1, r2
 8006ee2:	d1f9      	bne.n	8006ed8 <memcpy+0xe>
 8006ee4:	bd10      	pop	{r4, pc}

08006ee6 <quorem>:
 8006ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eea:	6903      	ldr	r3, [r0, #16]
 8006eec:	690c      	ldr	r4, [r1, #16]
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	db7e      	blt.n	8006ff2 <quorem+0x10c>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	f101 0814 	add.w	r8, r1, #20
 8006efa:	f100 0514 	add.w	r5, r0, #20
 8006efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f1c:	d331      	bcc.n	8006f82 <quorem+0x9c>
 8006f1e:	f04f 0e00 	mov.w	lr, #0
 8006f22:	4640      	mov	r0, r8
 8006f24:	46ac      	mov	ip, r5
 8006f26:	46f2      	mov	sl, lr
 8006f28:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f2c:	b293      	uxth	r3, r2
 8006f2e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f36:	0c1a      	lsrs	r2, r3, #16
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006f3e:	f8dc a000 	ldr.w	sl, [ip]
 8006f42:	fa13 f38a 	uxtah	r3, r3, sl
 8006f46:	fb06 220e 	mla	r2, r6, lr, r2
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f52:	b292      	uxth	r2, r2
 8006f54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f60:	4581      	cmp	r9, r0
 8006f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f66:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f6e:	d2db      	bcs.n	8006f28 <quorem+0x42>
 8006f70:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f74:	b92b      	cbnz	r3, 8006f82 <quorem+0x9c>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	3b04      	subs	r3, #4
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	d32c      	bcc.n	8006fda <quorem+0xf4>
 8006f80:	613c      	str	r4, [r7, #16]
 8006f82:	4638      	mov	r0, r7
 8006f84:	f001 f9a6 	bl	80082d4 <__mcmp>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	db22      	blt.n	8006fd2 <quorem+0xec>
 8006f8c:	3601      	adds	r6, #1
 8006f8e:	4629      	mov	r1, r5
 8006f90:	2000      	movs	r0, #0
 8006f92:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f96:	f8d1 c000 	ldr.w	ip, [r1]
 8006f9a:	b293      	uxth	r3, r2
 8006f9c:	1ac3      	subs	r3, r0, r3
 8006f9e:	0c12      	lsrs	r2, r2, #16
 8006fa0:	fa13 f38c 	uxtah	r3, r3, ip
 8006fa4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006fa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb2:	45c1      	cmp	r9, r8
 8006fb4:	f841 3b04 	str.w	r3, [r1], #4
 8006fb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fbc:	d2e9      	bcs.n	8006f92 <quorem+0xac>
 8006fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fc6:	b922      	cbnz	r2, 8006fd2 <quorem+0xec>
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	429d      	cmp	r5, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	d30a      	bcc.n	8006fe6 <quorem+0x100>
 8006fd0:	613c      	str	r4, [r7, #16]
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	b003      	add	sp, #12
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d1ce      	bne.n	8006f80 <quorem+0x9a>
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	e7c9      	b.n	8006f7a <quorem+0x94>
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	d1f0      	bne.n	8006fd0 <quorem+0xea>
 8006fee:	3c01      	subs	r4, #1
 8006ff0:	e7eb      	b.n	8006fca <quorem+0xe4>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7ee      	b.n	8006fd4 <quorem+0xee>
	...

08006ff8 <_dtoa_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b04 	vpush	{d8-d9}
 8007000:	69c5      	ldr	r5, [r0, #28]
 8007002:	b093      	sub	sp, #76	; 0x4c
 8007004:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007008:	ec57 6b10 	vmov	r6, r7, d0
 800700c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007010:	9107      	str	r1, [sp, #28]
 8007012:	4604      	mov	r4, r0
 8007014:	920a      	str	r2, [sp, #40]	; 0x28
 8007016:	930d      	str	r3, [sp, #52]	; 0x34
 8007018:	b975      	cbnz	r5, 8007038 <_dtoa_r+0x40>
 800701a:	2010      	movs	r0, #16
 800701c:	f000 fe2a 	bl	8007c74 <malloc>
 8007020:	4602      	mov	r2, r0
 8007022:	61e0      	str	r0, [r4, #28]
 8007024:	b920      	cbnz	r0, 8007030 <_dtoa_r+0x38>
 8007026:	4bae      	ldr	r3, [pc, #696]	; (80072e0 <_dtoa_r+0x2e8>)
 8007028:	21ef      	movs	r1, #239	; 0xef
 800702a:	48ae      	ldr	r0, [pc, #696]	; (80072e4 <_dtoa_r+0x2ec>)
 800702c:	f001 fc82 	bl	8008934 <__assert_func>
 8007030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007034:	6005      	str	r5, [r0, #0]
 8007036:	60c5      	str	r5, [r0, #12]
 8007038:	69e3      	ldr	r3, [r4, #28]
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	b151      	cbz	r1, 8007054 <_dtoa_r+0x5c>
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	604a      	str	r2, [r1, #4]
 8007042:	2301      	movs	r3, #1
 8007044:	4093      	lsls	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
 8007048:	4620      	mov	r0, r4
 800704a:	f000 ff07 	bl	8007e5c <_Bfree>
 800704e:	69e3      	ldr	r3, [r4, #28]
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	1e3b      	subs	r3, r7, #0
 8007056:	bfbb      	ittet	lt
 8007058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800705c:	9303      	strlt	r3, [sp, #12]
 800705e:	2300      	movge	r3, #0
 8007060:	2201      	movlt	r2, #1
 8007062:	bfac      	ite	ge
 8007064:	f8c8 3000 	strge.w	r3, [r8]
 8007068:	f8c8 2000 	strlt.w	r2, [r8]
 800706c:	4b9e      	ldr	r3, [pc, #632]	; (80072e8 <_dtoa_r+0x2f0>)
 800706e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007072:	ea33 0308 	bics.w	r3, r3, r8
 8007076:	d11b      	bne.n	80070b0 <_dtoa_r+0xb8>
 8007078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800707a:	f242 730f 	movw	r3, #9999	; 0x270f
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007084:	4333      	orrs	r3, r6
 8007086:	f000 8593 	beq.w	8007bb0 <_dtoa_r+0xbb8>
 800708a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800708c:	b963      	cbnz	r3, 80070a8 <_dtoa_r+0xb0>
 800708e:	4b97      	ldr	r3, [pc, #604]	; (80072ec <_dtoa_r+0x2f4>)
 8007090:	e027      	b.n	80070e2 <_dtoa_r+0xea>
 8007092:	4b97      	ldr	r3, [pc, #604]	; (80072f0 <_dtoa_r+0x2f8>)
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	9800      	ldr	r0, [sp, #0]
 800709e:	b013      	add	sp, #76	; 0x4c
 80070a0:	ecbd 8b04 	vpop	{d8-d9}
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	4b90      	ldr	r3, [pc, #576]	; (80072ec <_dtoa_r+0x2f4>)
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	3303      	adds	r3, #3
 80070ae:	e7f3      	b.n	8007098 <_dtoa_r+0xa0>
 80070b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	ec51 0b17 	vmov	r0, r1, d7
 80070ba:	eeb0 8a47 	vmov.f32	s16, s14
 80070be:	eef0 8a67 	vmov.f32	s17, s15
 80070c2:	2300      	movs	r3, #0
 80070c4:	f7f9 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c8:	4681      	mov	r9, r0
 80070ca:	b160      	cbz	r0, 80070e6 <_dtoa_r+0xee>
 80070cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070ce:	2301      	movs	r3, #1
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8568 	beq.w	8007baa <_dtoa_r+0xbb2>
 80070da:	4b86      	ldr	r3, [pc, #536]	; (80072f4 <_dtoa_r+0x2fc>)
 80070dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	e7da      	b.n	800709c <_dtoa_r+0xa4>
 80070e6:	aa10      	add	r2, sp, #64	; 0x40
 80070e8:	a911      	add	r1, sp, #68	; 0x44
 80070ea:	4620      	mov	r0, r4
 80070ec:	eeb0 0a48 	vmov.f32	s0, s16
 80070f0:	eef0 0a68 	vmov.f32	s1, s17
 80070f4:	f001 f994 	bl	8008420 <__d2b>
 80070f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070fc:	4682      	mov	sl, r0
 80070fe:	2d00      	cmp	r5, #0
 8007100:	d07f      	beq.n	8007202 <_dtoa_r+0x20a>
 8007102:	ee18 3a90 	vmov	r3, s17
 8007106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800710a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800710e:	ec51 0b18 	vmov	r0, r1, d8
 8007112:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800711a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800711e:	4619      	mov	r1, r3
 8007120:	2200      	movs	r2, #0
 8007122:	4b75      	ldr	r3, [pc, #468]	; (80072f8 <_dtoa_r+0x300>)
 8007124:	f7f9 f8b0 	bl	8000288 <__aeabi_dsub>
 8007128:	a367      	add	r3, pc, #412	; (adr r3, 80072c8 <_dtoa_r+0x2d0>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fa63 	bl	80005f8 <__aeabi_dmul>
 8007132:	a367      	add	r3, pc, #412	; (adr r3, 80072d0 <_dtoa_r+0x2d8>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f7f9 f8a8 	bl	800028c <__adddf3>
 800713c:	4606      	mov	r6, r0
 800713e:	4628      	mov	r0, r5
 8007140:	460f      	mov	r7, r1
 8007142:	f7f9 f9ef 	bl	8000524 <__aeabi_i2d>
 8007146:	a364      	add	r3, pc, #400	; (adr r3, 80072d8 <_dtoa_r+0x2e0>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 fa54 	bl	80005f8 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 f898 	bl	800028c <__adddf3>
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	f7f9 fcfa 	bl	8000b58 <__aeabi_d2iz>
 8007164:	2200      	movs	r2, #0
 8007166:	4683      	mov	fp, r0
 8007168:	2300      	movs	r3, #0
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 fcb5 	bl	8000adc <__aeabi_dcmplt>
 8007172:	b148      	cbz	r0, 8007188 <_dtoa_r+0x190>
 8007174:	4658      	mov	r0, fp
 8007176:	f7f9 f9d5 	bl	8000524 <__aeabi_i2d>
 800717a:	4632      	mov	r2, r6
 800717c:	463b      	mov	r3, r7
 800717e:	f7f9 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007182:	b908      	cbnz	r0, 8007188 <_dtoa_r+0x190>
 8007184:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007188:	f1bb 0f16 	cmp.w	fp, #22
 800718c:	d857      	bhi.n	800723e <_dtoa_r+0x246>
 800718e:	4b5b      	ldr	r3, [pc, #364]	; (80072fc <_dtoa_r+0x304>)
 8007190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	ec51 0b18 	vmov	r0, r1, d8
 800719c:	f7f9 fc9e 	bl	8000adc <__aeabi_dcmplt>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d04e      	beq.n	8007242 <_dtoa_r+0x24a>
 80071a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071a8:	2300      	movs	r3, #0
 80071aa:	930c      	str	r3, [sp, #48]	; 0x30
 80071ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ae:	1b5b      	subs	r3, r3, r5
 80071b0:	1e5a      	subs	r2, r3, #1
 80071b2:	bf45      	ittet	mi
 80071b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80071b8:	9305      	strmi	r3, [sp, #20]
 80071ba:	2300      	movpl	r3, #0
 80071bc:	2300      	movmi	r3, #0
 80071be:	9206      	str	r2, [sp, #24]
 80071c0:	bf54      	ite	pl
 80071c2:	9305      	strpl	r3, [sp, #20]
 80071c4:	9306      	strmi	r3, [sp, #24]
 80071c6:	f1bb 0f00 	cmp.w	fp, #0
 80071ca:	db3c      	blt.n	8007246 <_dtoa_r+0x24e>
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80071d2:	445b      	add	r3, fp
 80071d4:	9306      	str	r3, [sp, #24]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9308      	str	r3, [sp, #32]
 80071da:	9b07      	ldr	r3, [sp, #28]
 80071dc:	2b09      	cmp	r3, #9
 80071de:	d868      	bhi.n	80072b2 <_dtoa_r+0x2ba>
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	bfc4      	itt	gt
 80071e4:	3b04      	subgt	r3, #4
 80071e6:	9307      	strgt	r3, [sp, #28]
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	f1a3 0302 	sub.w	r3, r3, #2
 80071ee:	bfcc      	ite	gt
 80071f0:	2500      	movgt	r5, #0
 80071f2:	2501      	movle	r5, #1
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	f200 8085 	bhi.w	8007304 <_dtoa_r+0x30c>
 80071fa:	e8df f003 	tbb	[pc, r3]
 80071fe:	3b2e      	.short	0x3b2e
 8007200:	5839      	.short	0x5839
 8007202:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007206:	441d      	add	r5, r3
 8007208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800720c:	2b20      	cmp	r3, #32
 800720e:	bfc1      	itttt	gt
 8007210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007214:	fa08 f803 	lslgt.w	r8, r8, r3
 8007218:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800721c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007220:	bfd6      	itet	le
 8007222:	f1c3 0320 	rsble	r3, r3, #32
 8007226:	ea48 0003 	orrgt.w	r0, r8, r3
 800722a:	fa06 f003 	lslle.w	r0, r6, r3
 800722e:	f7f9 f969 	bl	8000504 <__aeabi_ui2d>
 8007232:	2201      	movs	r2, #1
 8007234:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007238:	3d01      	subs	r5, #1
 800723a:	920e      	str	r2, [sp, #56]	; 0x38
 800723c:	e76f      	b.n	800711e <_dtoa_r+0x126>
 800723e:	2301      	movs	r3, #1
 8007240:	e7b3      	b.n	80071aa <_dtoa_r+0x1b2>
 8007242:	900c      	str	r0, [sp, #48]	; 0x30
 8007244:	e7b2      	b.n	80071ac <_dtoa_r+0x1b4>
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	eba3 030b 	sub.w	r3, r3, fp
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	f1cb 0300 	rsb	r3, fp, #0
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	2300      	movs	r3, #0
 8007256:	930b      	str	r3, [sp, #44]	; 0x2c
 8007258:	e7bf      	b.n	80071da <_dtoa_r+0x1e2>
 800725a:	2300      	movs	r3, #0
 800725c:	9309      	str	r3, [sp, #36]	; 0x24
 800725e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc52      	bgt.n	800730a <_dtoa_r+0x312>
 8007264:	2301      	movs	r3, #1
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	461a      	mov	r2, r3
 800726c:	920a      	str	r2, [sp, #40]	; 0x28
 800726e:	e00b      	b.n	8007288 <_dtoa_r+0x290>
 8007270:	2301      	movs	r3, #1
 8007272:	e7f3      	b.n	800725c <_dtoa_r+0x264>
 8007274:	2300      	movs	r3, #0
 8007276:	9309      	str	r3, [sp, #36]	; 0x24
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	445b      	add	r3, fp
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	3301      	adds	r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	bfb8      	it	lt
 8007286:	2301      	movlt	r3, #1
 8007288:	69e0      	ldr	r0, [r4, #28]
 800728a:	2100      	movs	r1, #0
 800728c:	2204      	movs	r2, #4
 800728e:	f102 0614 	add.w	r6, r2, #20
 8007292:	429e      	cmp	r6, r3
 8007294:	d93d      	bls.n	8007312 <_dtoa_r+0x31a>
 8007296:	6041      	str	r1, [r0, #4]
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fd9f 	bl	8007ddc <_Balloc>
 800729e:	9000      	str	r0, [sp, #0]
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d139      	bne.n	8007318 <_dtoa_r+0x320>
 80072a4:	4b16      	ldr	r3, [pc, #88]	; (8007300 <_dtoa_r+0x308>)
 80072a6:	4602      	mov	r2, r0
 80072a8:	f240 11af 	movw	r1, #431	; 0x1af
 80072ac:	e6bd      	b.n	800702a <_dtoa_r+0x32>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e7e1      	b.n	8007276 <_dtoa_r+0x27e>
 80072b2:	2501      	movs	r5, #1
 80072b4:	2300      	movs	r3, #0
 80072b6:	9307      	str	r3, [sp, #28]
 80072b8:	9509      	str	r5, [sp, #36]	; 0x24
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	2200      	movs	r2, #0
 80072c4:	2312      	movs	r3, #18
 80072c6:	e7d1      	b.n	800726c <_dtoa_r+0x274>
 80072c8:	636f4361 	.word	0x636f4361
 80072cc:	3fd287a7 	.word	0x3fd287a7
 80072d0:	8b60c8b3 	.word	0x8b60c8b3
 80072d4:	3fc68a28 	.word	0x3fc68a28
 80072d8:	509f79fb 	.word	0x509f79fb
 80072dc:	3fd34413 	.word	0x3fd34413
 80072e0:	080093e9 	.word	0x080093e9
 80072e4:	08009400 	.word	0x08009400
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	080093e5 	.word	0x080093e5
 80072f0:	080093dc 	.word	0x080093dc
 80072f4:	080093b9 	.word	0x080093b9
 80072f8:	3ff80000 	.word	0x3ff80000
 80072fc:	080094f0 	.word	0x080094f0
 8007300:	08009458 	.word	0x08009458
 8007304:	2301      	movs	r3, #1
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	e7d7      	b.n	80072ba <_dtoa_r+0x2c2>
 800730a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	e7ba      	b.n	8007288 <_dtoa_r+0x290>
 8007312:	3101      	adds	r1, #1
 8007314:	0052      	lsls	r2, r2, #1
 8007316:	e7ba      	b.n	800728e <_dtoa_r+0x296>
 8007318:	69e3      	ldr	r3, [r4, #28]
 800731a:	9a00      	ldr	r2, [sp, #0]
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	2b0e      	cmp	r3, #14
 8007322:	f200 80a8 	bhi.w	8007476 <_dtoa_r+0x47e>
 8007326:	2d00      	cmp	r5, #0
 8007328:	f000 80a5 	beq.w	8007476 <_dtoa_r+0x47e>
 800732c:	f1bb 0f00 	cmp.w	fp, #0
 8007330:	dd38      	ble.n	80073a4 <_dtoa_r+0x3ac>
 8007332:	4bc0      	ldr	r3, [pc, #768]	; (8007634 <_dtoa_r+0x63c>)
 8007334:	f00b 020f 	and.w	r2, fp, #15
 8007338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800733c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007340:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007344:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007348:	d019      	beq.n	800737e <_dtoa_r+0x386>
 800734a:	4bbb      	ldr	r3, [pc, #748]	; (8007638 <_dtoa_r+0x640>)
 800734c:	ec51 0b18 	vmov	r0, r1, d8
 8007350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007354:	f7f9 fa7a 	bl	800084c <__aeabi_ddiv>
 8007358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800735c:	f008 080f 	and.w	r8, r8, #15
 8007360:	2503      	movs	r5, #3
 8007362:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007638 <_dtoa_r+0x640>
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	d10a      	bne.n	8007382 <_dtoa_r+0x38a>
 800736c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	f7f9 fa6a 	bl	800084c <__aeabi_ddiv>
 8007378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800737c:	e02b      	b.n	80073d6 <_dtoa_r+0x3de>
 800737e:	2502      	movs	r5, #2
 8007380:	e7ef      	b.n	8007362 <_dtoa_r+0x36a>
 8007382:	f018 0f01 	tst.w	r8, #1
 8007386:	d008      	beq.n	800739a <_dtoa_r+0x3a2>
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007390:	f7f9 f932 	bl	80005f8 <__aeabi_dmul>
 8007394:	3501      	adds	r5, #1
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800739e:	f109 0908 	add.w	r9, r9, #8
 80073a2:	e7e0      	b.n	8007366 <_dtoa_r+0x36e>
 80073a4:	f000 809f 	beq.w	80074e6 <_dtoa_r+0x4ee>
 80073a8:	f1cb 0600 	rsb	r6, fp, #0
 80073ac:	4ba1      	ldr	r3, [pc, #644]	; (8007634 <_dtoa_r+0x63c>)
 80073ae:	4fa2      	ldr	r7, [pc, #648]	; (8007638 <_dtoa_r+0x640>)
 80073b0:	f006 020f 	and.w	r2, r6, #15
 80073b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	ec51 0b18 	vmov	r0, r1, d8
 80073c0:	f7f9 f91a 	bl	80005f8 <__aeabi_dmul>
 80073c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c8:	1136      	asrs	r6, r6, #4
 80073ca:	2300      	movs	r3, #0
 80073cc:	2502      	movs	r5, #2
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	d17e      	bne.n	80074d0 <_dtoa_r+0x4d8>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1d0      	bne.n	8007378 <_dtoa_r+0x380>
 80073d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8084 	beq.w	80074ea <_dtoa_r+0x4f2>
 80073e2:	4b96      	ldr	r3, [pc, #600]	; (800763c <_dtoa_r+0x644>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	4640      	mov	r0, r8
 80073e8:	4649      	mov	r1, r9
 80073ea:	f7f9 fb77 	bl	8000adc <__aeabi_dcmplt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d07b      	beq.n	80074ea <_dtoa_r+0x4f2>
 80073f2:	9b04      	ldr	r3, [sp, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d078      	beq.n	80074ea <_dtoa_r+0x4f2>
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dd39      	ble.n	8007472 <_dtoa_r+0x47a>
 80073fe:	4b90      	ldr	r3, [pc, #576]	; (8007640 <_dtoa_r+0x648>)
 8007400:	2200      	movs	r2, #0
 8007402:	4640      	mov	r0, r8
 8007404:	4649      	mov	r1, r9
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	9e01      	ldr	r6, [sp, #4]
 8007410:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007414:	3501      	adds	r5, #1
 8007416:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800741a:	4628      	mov	r0, r5
 800741c:	f7f9 f882 	bl	8000524 <__aeabi_i2d>
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	f7f9 f8e8 	bl	80005f8 <__aeabi_dmul>
 8007428:	4b86      	ldr	r3, [pc, #536]	; (8007644 <_dtoa_r+0x64c>)
 800742a:	2200      	movs	r2, #0
 800742c:	f7f8 ff2e 	bl	800028c <__adddf3>
 8007430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	2e00      	cmp	r6, #0
 800743c:	d158      	bne.n	80074f0 <_dtoa_r+0x4f8>
 800743e:	4b82      	ldr	r3, [pc, #520]	; (8007648 <_dtoa_r+0x650>)
 8007440:	2200      	movs	r2, #0
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f7f8 ff1f 	bl	8000288 <__aeabi_dsub>
 800744a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800744e:	4680      	mov	r8, r0
 8007450:	4689      	mov	r9, r1
 8007452:	f7f9 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 8007456:	2800      	cmp	r0, #0
 8007458:	f040 8296 	bne.w	8007988 <_dtoa_r+0x990>
 800745c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007460:	4640      	mov	r0, r8
 8007462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007466:	4649      	mov	r1, r9
 8007468:	f7f9 fb38 	bl	8000adc <__aeabi_dcmplt>
 800746c:	2800      	cmp	r0, #0
 800746e:	f040 8289 	bne.w	8007984 <_dtoa_r+0x98c>
 8007472:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007478:	2b00      	cmp	r3, #0
 800747a:	f2c0 814e 	blt.w	800771a <_dtoa_r+0x722>
 800747e:	f1bb 0f0e 	cmp.w	fp, #14
 8007482:	f300 814a 	bgt.w	800771a <_dtoa_r+0x722>
 8007486:	4b6b      	ldr	r3, [pc, #428]	; (8007634 <_dtoa_r+0x63c>)
 8007488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800748c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	f280 80dc 	bge.w	8007650 <_dtoa_r+0x658>
 8007498:	9b04      	ldr	r3, [sp, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f300 80d8 	bgt.w	8007650 <_dtoa_r+0x658>
 80074a0:	f040 826f 	bne.w	8007982 <_dtoa_r+0x98a>
 80074a4:	4b68      	ldr	r3, [pc, #416]	; (8007648 <_dtoa_r+0x650>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f7f9 f8a4 	bl	80005f8 <__aeabi_dmul>
 80074b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074b4:	f7f9 fb26 	bl	8000b04 <__aeabi_dcmpge>
 80074b8:	9e04      	ldr	r6, [sp, #16]
 80074ba:	4637      	mov	r7, r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	f040 8245 	bne.w	800794c <_dtoa_r+0x954>
 80074c2:	9d00      	ldr	r5, [sp, #0]
 80074c4:	2331      	movs	r3, #49	; 0x31
 80074c6:	f805 3b01 	strb.w	r3, [r5], #1
 80074ca:	f10b 0b01 	add.w	fp, fp, #1
 80074ce:	e241      	b.n	8007954 <_dtoa_r+0x95c>
 80074d0:	07f2      	lsls	r2, r6, #31
 80074d2:	d505      	bpl.n	80074e0 <_dtoa_r+0x4e8>
 80074d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d8:	f7f9 f88e 	bl	80005f8 <__aeabi_dmul>
 80074dc:	3501      	adds	r5, #1
 80074de:	2301      	movs	r3, #1
 80074e0:	1076      	asrs	r6, r6, #1
 80074e2:	3708      	adds	r7, #8
 80074e4:	e773      	b.n	80073ce <_dtoa_r+0x3d6>
 80074e6:	2502      	movs	r5, #2
 80074e8:	e775      	b.n	80073d6 <_dtoa_r+0x3de>
 80074ea:	9e04      	ldr	r6, [sp, #16]
 80074ec:	465f      	mov	r7, fp
 80074ee:	e792      	b.n	8007416 <_dtoa_r+0x41e>
 80074f0:	9900      	ldr	r1, [sp, #0]
 80074f2:	4b50      	ldr	r3, [pc, #320]	; (8007634 <_dtoa_r+0x63c>)
 80074f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074f8:	4431      	add	r1, r6
 80074fa:	9102      	str	r1, [sp, #8]
 80074fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fe:	eeb0 9a47 	vmov.f32	s18, s14
 8007502:	eef0 9a67 	vmov.f32	s19, s15
 8007506:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800750a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800750e:	2900      	cmp	r1, #0
 8007510:	d044      	beq.n	800759c <_dtoa_r+0x5a4>
 8007512:	494e      	ldr	r1, [pc, #312]	; (800764c <_dtoa_r+0x654>)
 8007514:	2000      	movs	r0, #0
 8007516:	f7f9 f999 	bl	800084c <__aeabi_ddiv>
 800751a:	ec53 2b19 	vmov	r2, r3, d9
 800751e:	f7f8 feb3 	bl	8000288 <__aeabi_dsub>
 8007522:	9d00      	ldr	r5, [sp, #0]
 8007524:	ec41 0b19 	vmov	d9, r0, r1
 8007528:	4649      	mov	r1, r9
 800752a:	4640      	mov	r0, r8
 800752c:	f7f9 fb14 	bl	8000b58 <__aeabi_d2iz>
 8007530:	4606      	mov	r6, r0
 8007532:	f7f8 fff7 	bl	8000524 <__aeabi_i2d>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f8 fea3 	bl	8000288 <__aeabi_dsub>
 8007542:	3630      	adds	r6, #48	; 0x30
 8007544:	f805 6b01 	strb.w	r6, [r5], #1
 8007548:	ec53 2b19 	vmov	r2, r3, d9
 800754c:	4680      	mov	r8, r0
 800754e:	4689      	mov	r9, r1
 8007550:	f7f9 fac4 	bl	8000adc <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	d164      	bne.n	8007622 <_dtoa_r+0x62a>
 8007558:	4642      	mov	r2, r8
 800755a:	464b      	mov	r3, r9
 800755c:	4937      	ldr	r1, [pc, #220]	; (800763c <_dtoa_r+0x644>)
 800755e:	2000      	movs	r0, #0
 8007560:	f7f8 fe92 	bl	8000288 <__aeabi_dsub>
 8007564:	ec53 2b19 	vmov	r2, r3, d9
 8007568:	f7f9 fab8 	bl	8000adc <__aeabi_dcmplt>
 800756c:	2800      	cmp	r0, #0
 800756e:	f040 80b6 	bne.w	80076de <_dtoa_r+0x6e6>
 8007572:	9b02      	ldr	r3, [sp, #8]
 8007574:	429d      	cmp	r5, r3
 8007576:	f43f af7c 	beq.w	8007472 <_dtoa_r+0x47a>
 800757a:	4b31      	ldr	r3, [pc, #196]	; (8007640 <_dtoa_r+0x648>)
 800757c:	ec51 0b19 	vmov	r0, r1, d9
 8007580:	2200      	movs	r2, #0
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <_dtoa_r+0x648>)
 8007588:	ec41 0b19 	vmov	d9, r0, r1
 800758c:	2200      	movs	r2, #0
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f9 f831 	bl	80005f8 <__aeabi_dmul>
 8007596:	4680      	mov	r8, r0
 8007598:	4689      	mov	r9, r1
 800759a:	e7c5      	b.n	8007528 <_dtoa_r+0x530>
 800759c:	ec51 0b17 	vmov	r0, r1, d7
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	9d00      	ldr	r5, [sp, #0]
 80075a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80075aa:	ec41 0b19 	vmov	d9, r0, r1
 80075ae:	4649      	mov	r1, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	f7f9 fad1 	bl	8000b58 <__aeabi_d2iz>
 80075b6:	4606      	mov	r6, r0
 80075b8:	f7f8 ffb4 	bl	8000524 <__aeabi_i2d>
 80075bc:	3630      	adds	r6, #48	; 0x30
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	f805 6b01 	strb.w	r6, [r5], #1
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	429d      	cmp	r5, r3
 80075d2:	4680      	mov	r8, r0
 80075d4:	4689      	mov	r9, r1
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	d124      	bne.n	8007626 <_dtoa_r+0x62e>
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <_dtoa_r+0x654>)
 80075de:	ec51 0b19 	vmov	r0, r1, d9
 80075e2:	f7f8 fe53 	bl	800028c <__adddf3>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f9 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d173      	bne.n	80076de <_dtoa_r+0x6e6>
 80075f6:	ec53 2b19 	vmov	r2, r3, d9
 80075fa:	4914      	ldr	r1, [pc, #80]	; (800764c <_dtoa_r+0x654>)
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7f8 fe43 	bl	8000288 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4640      	mov	r0, r8
 8007608:	4649      	mov	r1, r9
 800760a:	f7f9 fa67 	bl	8000adc <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f af2f 	beq.w	8007472 <_dtoa_r+0x47a>
 8007614:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007616:	1e6b      	subs	r3, r5, #1
 8007618:	930f      	str	r3, [sp, #60]	; 0x3c
 800761a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800761e:	2b30      	cmp	r3, #48	; 0x30
 8007620:	d0f8      	beq.n	8007614 <_dtoa_r+0x61c>
 8007622:	46bb      	mov	fp, r7
 8007624:	e04a      	b.n	80076bc <_dtoa_r+0x6c4>
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <_dtoa_r+0x648>)
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	4680      	mov	r8, r0
 800762e:	4689      	mov	r9, r1
 8007630:	e7bd      	b.n	80075ae <_dtoa_r+0x5b6>
 8007632:	bf00      	nop
 8007634:	080094f0 	.word	0x080094f0
 8007638:	080094c8 	.word	0x080094c8
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	40240000 	.word	0x40240000
 8007644:	401c0000 	.word	0x401c0000
 8007648:	40140000 	.word	0x40140000
 800764c:	3fe00000 	.word	0x3fe00000
 8007650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007654:	9d00      	ldr	r5, [sp, #0]
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	4630      	mov	r0, r6
 800765c:	4639      	mov	r1, r7
 800765e:	f7f9 f8f5 	bl	800084c <__aeabi_ddiv>
 8007662:	f7f9 fa79 	bl	8000b58 <__aeabi_d2iz>
 8007666:	9001      	str	r0, [sp, #4]
 8007668:	f7f8 ff5c 	bl	8000524 <__aeabi_i2d>
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	f7f8 ffc2 	bl	80005f8 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f8 fe04 	bl	8000288 <__aeabi_dsub>
 8007680:	9e01      	ldr	r6, [sp, #4]
 8007682:	9f04      	ldr	r7, [sp, #16]
 8007684:	3630      	adds	r6, #48	; 0x30
 8007686:	f805 6b01 	strb.w	r6, [r5], #1
 800768a:	9e00      	ldr	r6, [sp, #0]
 800768c:	1bae      	subs	r6, r5, r6
 800768e:	42b7      	cmp	r7, r6
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	d134      	bne.n	8007700 <_dtoa_r+0x708>
 8007696:	f7f8 fdf9 	bl	800028c <__adddf3>
 800769a:	4642      	mov	r2, r8
 800769c:	464b      	mov	r3, r9
 800769e:	4606      	mov	r6, r0
 80076a0:	460f      	mov	r7, r1
 80076a2:	f7f9 fa39 	bl	8000b18 <__aeabi_dcmpgt>
 80076a6:	b9c8      	cbnz	r0, 80076dc <_dtoa_r+0x6e4>
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f9 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b4:	b110      	cbz	r0, 80076bc <_dtoa_r+0x6c4>
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	07db      	lsls	r3, r3, #31
 80076ba:	d40f      	bmi.n	80076dc <_dtoa_r+0x6e4>
 80076bc:	4651      	mov	r1, sl
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 fbcc 	bl	8007e5c <_Bfree>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076c8:	702b      	strb	r3, [r5, #0]
 80076ca:	f10b 0301 	add.w	r3, fp, #1
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f43f ace2 	beq.w	800709c <_dtoa_r+0xa4>
 80076d8:	601d      	str	r5, [r3, #0]
 80076da:	e4df      	b.n	800709c <_dtoa_r+0xa4>
 80076dc:	465f      	mov	r7, fp
 80076de:	462b      	mov	r3, r5
 80076e0:	461d      	mov	r5, r3
 80076e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076e6:	2a39      	cmp	r2, #57	; 0x39
 80076e8:	d106      	bne.n	80076f8 <_dtoa_r+0x700>
 80076ea:	9a00      	ldr	r2, [sp, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d1f7      	bne.n	80076e0 <_dtoa_r+0x6e8>
 80076f0:	9900      	ldr	r1, [sp, #0]
 80076f2:	2230      	movs	r2, #48	; 0x30
 80076f4:	3701      	adds	r7, #1
 80076f6:	700a      	strb	r2, [r1, #0]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	3201      	adds	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e790      	b.n	8007622 <_dtoa_r+0x62a>
 8007700:	4ba3      	ldr	r3, [pc, #652]	; (8007990 <_dtoa_r+0x998>)
 8007702:	2200      	movs	r2, #0
 8007704:	f7f8 ff78 	bl	80005f8 <__aeabi_dmul>
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	4606      	mov	r6, r0
 800770e:	460f      	mov	r7, r1
 8007710:	f7f9 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8007714:	2800      	cmp	r0, #0
 8007716:	d09e      	beq.n	8007656 <_dtoa_r+0x65e>
 8007718:	e7d0      	b.n	80076bc <_dtoa_r+0x6c4>
 800771a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800771c:	2a00      	cmp	r2, #0
 800771e:	f000 80ca 	beq.w	80078b6 <_dtoa_r+0x8be>
 8007722:	9a07      	ldr	r2, [sp, #28]
 8007724:	2a01      	cmp	r2, #1
 8007726:	f300 80ad 	bgt.w	8007884 <_dtoa_r+0x88c>
 800772a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800772c:	2a00      	cmp	r2, #0
 800772e:	f000 80a5 	beq.w	800787c <_dtoa_r+0x884>
 8007732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007736:	9e08      	ldr	r6, [sp, #32]
 8007738:	9d05      	ldr	r5, [sp, #20]
 800773a:	9a05      	ldr	r2, [sp, #20]
 800773c:	441a      	add	r2, r3
 800773e:	9205      	str	r2, [sp, #20]
 8007740:	9a06      	ldr	r2, [sp, #24]
 8007742:	2101      	movs	r1, #1
 8007744:	441a      	add	r2, r3
 8007746:	4620      	mov	r0, r4
 8007748:	9206      	str	r2, [sp, #24]
 800774a:	f000 fc3d 	bl	8007fc8 <__i2b>
 800774e:	4607      	mov	r7, r0
 8007750:	b165      	cbz	r5, 800776c <_dtoa_r+0x774>
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dd09      	ble.n	800776c <_dtoa_r+0x774>
 8007758:	42ab      	cmp	r3, r5
 800775a:	9a05      	ldr	r2, [sp, #20]
 800775c:	bfa8      	it	ge
 800775e:	462b      	movge	r3, r5
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	9205      	str	r2, [sp, #20]
 8007764:	9a06      	ldr	r2, [sp, #24]
 8007766:	1aed      	subs	r5, r5, r3
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	9306      	str	r3, [sp, #24]
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	b1f3      	cbz	r3, 80077ae <_dtoa_r+0x7b6>
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80a3 	beq.w	80078be <_dtoa_r+0x8c6>
 8007778:	2e00      	cmp	r6, #0
 800777a:	dd10      	ble.n	800779e <_dtoa_r+0x7a6>
 800777c:	4639      	mov	r1, r7
 800777e:	4632      	mov	r2, r6
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fce1 	bl	8008148 <__pow5mult>
 8007786:	4652      	mov	r2, sl
 8007788:	4601      	mov	r1, r0
 800778a:	4607      	mov	r7, r0
 800778c:	4620      	mov	r0, r4
 800778e:	f000 fc31 	bl	8007ff4 <__multiply>
 8007792:	4651      	mov	r1, sl
 8007794:	4680      	mov	r8, r0
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fb60 	bl	8007e5c <_Bfree>
 800779c:	46c2      	mov	sl, r8
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	1b9a      	subs	r2, r3, r6
 80077a2:	d004      	beq.n	80077ae <_dtoa_r+0x7b6>
 80077a4:	4651      	mov	r1, sl
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fcce 	bl	8008148 <__pow5mult>
 80077ac:	4682      	mov	sl, r0
 80077ae:	2101      	movs	r1, #1
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fc09 	bl	8007fc8 <__i2b>
 80077b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	4606      	mov	r6, r0
 80077bc:	f340 8081 	ble.w	80078c2 <_dtoa_r+0x8ca>
 80077c0:	461a      	mov	r2, r3
 80077c2:	4601      	mov	r1, r0
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fcbf 	bl	8008148 <__pow5mult>
 80077ca:	9b07      	ldr	r3, [sp, #28]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	4606      	mov	r6, r0
 80077d0:	dd7a      	ble.n	80078c8 <_dtoa_r+0x8d0>
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	6933      	ldr	r3, [r6, #16]
 80077d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077dc:	6918      	ldr	r0, [r3, #16]
 80077de:	f000 fba5 	bl	8007f2c <__hi0bits>
 80077e2:	f1c0 0020 	rsb	r0, r0, #32
 80077e6:	9b06      	ldr	r3, [sp, #24]
 80077e8:	4418      	add	r0, r3
 80077ea:	f010 001f 	ands.w	r0, r0, #31
 80077ee:	f000 8094 	beq.w	800791a <_dtoa_r+0x922>
 80077f2:	f1c0 0320 	rsb	r3, r0, #32
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	f340 8085 	ble.w	8007906 <_dtoa_r+0x90e>
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	f1c0 001c 	rsb	r0, r0, #28
 8007802:	4403      	add	r3, r0
 8007804:	9305      	str	r3, [sp, #20]
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	4403      	add	r3, r0
 800780a:	4405      	add	r5, r0
 800780c:	9306      	str	r3, [sp, #24]
 800780e:	9b05      	ldr	r3, [sp, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	dd05      	ble.n	8007820 <_dtoa_r+0x828>
 8007814:	4651      	mov	r1, sl
 8007816:	461a      	mov	r2, r3
 8007818:	4620      	mov	r0, r4
 800781a:	f000 fcef 	bl	80081fc <__lshift>
 800781e:	4682      	mov	sl, r0
 8007820:	9b06      	ldr	r3, [sp, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd05      	ble.n	8007832 <_dtoa_r+0x83a>
 8007826:	4631      	mov	r1, r6
 8007828:	461a      	mov	r2, r3
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fce6 	bl	80081fc <__lshift>
 8007830:	4606      	mov	r6, r0
 8007832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d072      	beq.n	800791e <_dtoa_r+0x926>
 8007838:	4631      	mov	r1, r6
 800783a:	4650      	mov	r0, sl
 800783c:	f000 fd4a 	bl	80082d4 <__mcmp>
 8007840:	2800      	cmp	r0, #0
 8007842:	da6c      	bge.n	800791e <_dtoa_r+0x926>
 8007844:	2300      	movs	r3, #0
 8007846:	4651      	mov	r1, sl
 8007848:	220a      	movs	r2, #10
 800784a:	4620      	mov	r0, r4
 800784c:	f000 fb28 	bl	8007ea0 <__multadd>
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007856:	4682      	mov	sl, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 81b0 	beq.w	8007bbe <_dtoa_r+0xbc6>
 800785e:	2300      	movs	r3, #0
 8007860:	4639      	mov	r1, r7
 8007862:	220a      	movs	r2, #10
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fb1b 	bl	8007ea0 <__multadd>
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	4607      	mov	r7, r0
 8007870:	f300 8096 	bgt.w	80079a0 <_dtoa_r+0x9a8>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc59      	bgt.n	800792e <_dtoa_r+0x936>
 800787a:	e091      	b.n	80079a0 <_dtoa_r+0x9a8>
 800787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007882:	e758      	b.n	8007736 <_dtoa_r+0x73e>
 8007884:	9b04      	ldr	r3, [sp, #16]
 8007886:	1e5e      	subs	r6, r3, #1
 8007888:	9b08      	ldr	r3, [sp, #32]
 800788a:	42b3      	cmp	r3, r6
 800788c:	bfbf      	itttt	lt
 800788e:	9b08      	ldrlt	r3, [sp, #32]
 8007890:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007892:	9608      	strlt	r6, [sp, #32]
 8007894:	1af3      	sublt	r3, r6, r3
 8007896:	bfb4      	ite	lt
 8007898:	18d2      	addlt	r2, r2, r3
 800789a:	1b9e      	subge	r6, r3, r6
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	bfbc      	itt	lt
 80078a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80078a2:	2600      	movlt	r6, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb7      	itett	lt
 80078a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80078ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80078b0:	1a9d      	sublt	r5, r3, r2
 80078b2:	2300      	movlt	r3, #0
 80078b4:	e741      	b.n	800773a <_dtoa_r+0x742>
 80078b6:	9e08      	ldr	r6, [sp, #32]
 80078b8:	9d05      	ldr	r5, [sp, #20]
 80078ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078bc:	e748      	b.n	8007750 <_dtoa_r+0x758>
 80078be:	9a08      	ldr	r2, [sp, #32]
 80078c0:	e770      	b.n	80077a4 <_dtoa_r+0x7ac>
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	dc19      	bgt.n	80078fc <_dtoa_r+0x904>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	b9bb      	cbnz	r3, 80078fc <_dtoa_r+0x904>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d2:	b99b      	cbnz	r3, 80078fc <_dtoa_r+0x904>
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078da:	0d1b      	lsrs	r3, r3, #20
 80078dc:	051b      	lsls	r3, r3, #20
 80078de:	b183      	cbz	r3, 8007902 <_dtoa_r+0x90a>
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	3301      	adds	r3, #1
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	3301      	adds	r3, #1
 80078ea:	9306      	str	r3, [sp, #24]
 80078ec:	f04f 0801 	mov.w	r8, #1
 80078f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af6f 	bne.w	80077d6 <_dtoa_r+0x7de>
 80078f8:	2001      	movs	r0, #1
 80078fa:	e774      	b.n	80077e6 <_dtoa_r+0x7ee>
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	e7f6      	b.n	80078f0 <_dtoa_r+0x8f8>
 8007902:	4698      	mov	r8, r3
 8007904:	e7f4      	b.n	80078f0 <_dtoa_r+0x8f8>
 8007906:	d082      	beq.n	800780e <_dtoa_r+0x816>
 8007908:	9a05      	ldr	r2, [sp, #20]
 800790a:	331c      	adds	r3, #28
 800790c:	441a      	add	r2, r3
 800790e:	9205      	str	r2, [sp, #20]
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	441a      	add	r2, r3
 8007914:	441d      	add	r5, r3
 8007916:	9206      	str	r2, [sp, #24]
 8007918:	e779      	b.n	800780e <_dtoa_r+0x816>
 800791a:	4603      	mov	r3, r0
 800791c:	e7f4      	b.n	8007908 <_dtoa_r+0x910>
 800791e:	9b04      	ldr	r3, [sp, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc37      	bgt.n	8007994 <_dtoa_r+0x99c>
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	2b02      	cmp	r3, #2
 8007928:	dd34      	ble.n	8007994 <_dtoa_r+0x99c>
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	b963      	cbnz	r3, 800794c <_dtoa_r+0x954>
 8007932:	4631      	mov	r1, r6
 8007934:	2205      	movs	r2, #5
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fab2 	bl	8007ea0 <__multadd>
 800793c:	4601      	mov	r1, r0
 800793e:	4606      	mov	r6, r0
 8007940:	4650      	mov	r0, sl
 8007942:	f000 fcc7 	bl	80082d4 <__mcmp>
 8007946:	2800      	cmp	r0, #0
 8007948:	f73f adbb 	bgt.w	80074c2 <_dtoa_r+0x4ca>
 800794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794e:	9d00      	ldr	r5, [sp, #0]
 8007950:	ea6f 0b03 	mvn.w	fp, r3
 8007954:	f04f 0800 	mov.w	r8, #0
 8007958:	4631      	mov	r1, r6
 800795a:	4620      	mov	r0, r4
 800795c:	f000 fa7e 	bl	8007e5c <_Bfree>
 8007960:	2f00      	cmp	r7, #0
 8007962:	f43f aeab 	beq.w	80076bc <_dtoa_r+0x6c4>
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	d005      	beq.n	8007978 <_dtoa_r+0x980>
 800796c:	45b8      	cmp	r8, r7
 800796e:	d003      	beq.n	8007978 <_dtoa_r+0x980>
 8007970:	4641      	mov	r1, r8
 8007972:	4620      	mov	r0, r4
 8007974:	f000 fa72 	bl	8007e5c <_Bfree>
 8007978:	4639      	mov	r1, r7
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fa6e 	bl	8007e5c <_Bfree>
 8007980:	e69c      	b.n	80076bc <_dtoa_r+0x6c4>
 8007982:	2600      	movs	r6, #0
 8007984:	4637      	mov	r7, r6
 8007986:	e7e1      	b.n	800794c <_dtoa_r+0x954>
 8007988:	46bb      	mov	fp, r7
 800798a:	4637      	mov	r7, r6
 800798c:	e599      	b.n	80074c2 <_dtoa_r+0x4ca>
 800798e:	bf00      	nop
 8007990:	40240000 	.word	0x40240000
 8007994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80c8 	beq.w	8007b2c <_dtoa_r+0xb34>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	dd05      	ble.n	80079b0 <_dtoa_r+0x9b8>
 80079a4:	4639      	mov	r1, r7
 80079a6:	462a      	mov	r2, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fc27 	bl	80081fc <__lshift>
 80079ae:	4607      	mov	r7, r0
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	d05b      	beq.n	8007a6e <_dtoa_r+0xa76>
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fa0f 	bl	8007ddc <_Balloc>
 80079be:	4605      	mov	r5, r0
 80079c0:	b928      	cbnz	r0, 80079ce <_dtoa_r+0x9d6>
 80079c2:	4b83      	ldr	r3, [pc, #524]	; (8007bd0 <_dtoa_r+0xbd8>)
 80079c4:	4602      	mov	r2, r0
 80079c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079ca:	f7ff bb2e 	b.w	800702a <_dtoa_r+0x32>
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	f107 010c 	add.w	r1, r7, #12
 80079d8:	300c      	adds	r0, #12
 80079da:	f7ff fa76 	bl	8006eca <memcpy>
 80079de:	2201      	movs	r2, #1
 80079e0:	4629      	mov	r1, r5
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fc0a 	bl	80081fc <__lshift>
 80079e8:	9b00      	ldr	r3, [sp, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f2:	4413      	add	r3, r2
 80079f4:	9308      	str	r3, [sp, #32]
 80079f6:	9b02      	ldr	r3, [sp, #8]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	46b8      	mov	r8, r7
 80079fe:	9306      	str	r3, [sp, #24]
 8007a00:	4607      	mov	r7, r0
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	4631      	mov	r1, r6
 8007a06:	3b01      	subs	r3, #1
 8007a08:	4650      	mov	r0, sl
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f7ff fa6b 	bl	8006ee6 <quorem>
 8007a10:	4641      	mov	r1, r8
 8007a12:	9002      	str	r0, [sp, #8]
 8007a14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f000 fc5b 	bl	80082d4 <__mcmp>
 8007a1e:	463a      	mov	r2, r7
 8007a20:	9005      	str	r0, [sp, #20]
 8007a22:	4631      	mov	r1, r6
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fc71 	bl	800830c <__mdiff>
 8007a2a:	68c2      	ldr	r2, [r0, #12]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	bb02      	cbnz	r2, 8007a72 <_dtoa_r+0xa7a>
 8007a30:	4601      	mov	r1, r0
 8007a32:	4650      	mov	r0, sl
 8007a34:	f000 fc4e 	bl	80082d4 <__mcmp>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a40:	f000 fa0c 	bl	8007e5c <_Bfree>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a48:	9d04      	ldr	r5, [sp, #16]
 8007a4a:	ea43 0102 	orr.w	r1, r3, r2
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	4319      	orrs	r1, r3
 8007a52:	d110      	bne.n	8007a76 <_dtoa_r+0xa7e>
 8007a54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a58:	d029      	beq.n	8007aae <_dtoa_r+0xab6>
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd02      	ble.n	8007a66 <_dtoa_r+0xa6e>
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	f883 9000 	strb.w	r9, [r3]
 8007a6c:	e774      	b.n	8007958 <_dtoa_r+0x960>
 8007a6e:	4638      	mov	r0, r7
 8007a70:	e7ba      	b.n	80079e8 <_dtoa_r+0x9f0>
 8007a72:	2201      	movs	r2, #1
 8007a74:	e7e1      	b.n	8007a3a <_dtoa_r+0xa42>
 8007a76:	9b05      	ldr	r3, [sp, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db04      	blt.n	8007a86 <_dtoa_r+0xa8e>
 8007a7c:	9907      	ldr	r1, [sp, #28]
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	9906      	ldr	r1, [sp, #24]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	d120      	bne.n	8007ac8 <_dtoa_r+0xad0>
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	dded      	ble.n	8007a66 <_dtoa_r+0xa6e>
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fbb4 	bl	80081fc <__lshift>
 8007a94:	4631      	mov	r1, r6
 8007a96:	4682      	mov	sl, r0
 8007a98:	f000 fc1c 	bl	80082d4 <__mcmp>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	dc03      	bgt.n	8007aa8 <_dtoa_r+0xab0>
 8007aa0:	d1e1      	bne.n	8007a66 <_dtoa_r+0xa6e>
 8007aa2:	f019 0f01 	tst.w	r9, #1
 8007aa6:	d0de      	beq.n	8007a66 <_dtoa_r+0xa6e>
 8007aa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007aac:	d1d8      	bne.n	8007a60 <_dtoa_r+0xa68>
 8007aae:	9a01      	ldr	r2, [sp, #4]
 8007ab0:	2339      	movs	r3, #57	; 0x39
 8007ab2:	7013      	strb	r3, [r2, #0]
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007abe:	2a39      	cmp	r2, #57	; 0x39
 8007ac0:	d06c      	beq.n	8007b9c <_dtoa_r+0xba4>
 8007ac2:	3201      	adds	r2, #1
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	e747      	b.n	8007958 <_dtoa_r+0x960>
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	dd07      	ble.n	8007adc <_dtoa_r+0xae4>
 8007acc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ad0:	d0ed      	beq.n	8007aae <_dtoa_r+0xab6>
 8007ad2:	9a01      	ldr	r2, [sp, #4]
 8007ad4:	f109 0301 	add.w	r3, r9, #1
 8007ad8:	7013      	strb	r3, [r2, #0]
 8007ada:	e73d      	b.n	8007958 <_dtoa_r+0x960>
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	9a08      	ldr	r2, [sp, #32]
 8007ae0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d043      	beq.n	8007b70 <_dtoa_r+0xb78>
 8007ae8:	4651      	mov	r1, sl
 8007aea:	2300      	movs	r3, #0
 8007aec:	220a      	movs	r2, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f9d6 	bl	8007ea0 <__multadd>
 8007af4:	45b8      	cmp	r8, r7
 8007af6:	4682      	mov	sl, r0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	f04f 020a 	mov.w	r2, #10
 8007b00:	4641      	mov	r1, r8
 8007b02:	4620      	mov	r0, r4
 8007b04:	d107      	bne.n	8007b16 <_dtoa_r+0xb1e>
 8007b06:	f000 f9cb 	bl	8007ea0 <__multadd>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	9b04      	ldr	r3, [sp, #16]
 8007b10:	3301      	adds	r3, #1
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	e775      	b.n	8007a02 <_dtoa_r+0xa0a>
 8007b16:	f000 f9c3 	bl	8007ea0 <__multadd>
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	220a      	movs	r2, #10
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f9bc 	bl	8007ea0 <__multadd>
 8007b28:	4607      	mov	r7, r0
 8007b2a:	e7f0      	b.n	8007b0e <_dtoa_r+0xb16>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	9d00      	ldr	r5, [sp, #0]
 8007b32:	4631      	mov	r1, r6
 8007b34:	4650      	mov	r0, sl
 8007b36:	f7ff f9d6 	bl	8006ee6 <quorem>
 8007b3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	f805 9b01 	strb.w	r9, [r5], #1
 8007b44:	1aea      	subs	r2, r5, r3
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	dd07      	ble.n	8007b5c <_dtoa_r+0xb64>
 8007b4c:	4651      	mov	r1, sl
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220a      	movs	r2, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f9a4 	bl	8007ea0 <__multadd>
 8007b58:	4682      	mov	sl, r0
 8007b5a:	e7ea      	b.n	8007b32 <_dtoa_r+0xb3a>
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfc8      	it	gt
 8007b62:	461d      	movgt	r5, r3
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	bfd8      	it	le
 8007b68:	2501      	movle	r5, #1
 8007b6a:	441d      	add	r5, r3
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	4651      	mov	r1, sl
 8007b72:	2201      	movs	r2, #1
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fb41 	bl	80081fc <__lshift>
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	f000 fba9 	bl	80082d4 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	dc96      	bgt.n	8007ab4 <_dtoa_r+0xabc>
 8007b86:	d102      	bne.n	8007b8e <_dtoa_r+0xb96>
 8007b88:	f019 0f01 	tst.w	r9, #1
 8007b8c:	d192      	bne.n	8007ab4 <_dtoa_r+0xabc>
 8007b8e:	462b      	mov	r3, r5
 8007b90:	461d      	mov	r5, r3
 8007b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b96:	2a30      	cmp	r2, #48	; 0x30
 8007b98:	d0fa      	beq.n	8007b90 <_dtoa_r+0xb98>
 8007b9a:	e6dd      	b.n	8007958 <_dtoa_r+0x960>
 8007b9c:	9a00      	ldr	r2, [sp, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d189      	bne.n	8007ab6 <_dtoa_r+0xabe>
 8007ba2:	f10b 0b01 	add.w	fp, fp, #1
 8007ba6:	2331      	movs	r3, #49	; 0x31
 8007ba8:	e796      	b.n	8007ad8 <_dtoa_r+0xae0>
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <_dtoa_r+0xbdc>)
 8007bac:	f7ff ba99 	b.w	80070e2 <_dtoa_r+0xea>
 8007bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f47f aa6d 	bne.w	8007092 <_dtoa_r+0x9a>
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_dtoa_r+0xbe0>)
 8007bba:	f7ff ba92 	b.w	80070e2 <_dtoa_r+0xea>
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dcb5      	bgt.n	8007b30 <_dtoa_r+0xb38>
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	f73f aeb1 	bgt.w	800792e <_dtoa_r+0x936>
 8007bcc:	e7b0      	b.n	8007b30 <_dtoa_r+0xb38>
 8007bce:	bf00      	nop
 8007bd0:	08009458 	.word	0x08009458
 8007bd4:	080093b8 	.word	0x080093b8
 8007bd8:	080093dc 	.word	0x080093dc

08007bdc <_free_r>:
 8007bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d044      	beq.n	8007c6c <_free_r+0x90>
 8007be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be6:	9001      	str	r0, [sp, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f1a1 0404 	sub.w	r4, r1, #4
 8007bee:	bfb8      	it	lt
 8007bf0:	18e4      	addlt	r4, r4, r3
 8007bf2:	f000 f8e7 	bl	8007dc4 <__malloc_lock>
 8007bf6:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <_free_r+0x94>)
 8007bf8:	9801      	ldr	r0, [sp, #4]
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	b933      	cbnz	r3, 8007c0c <_free_r+0x30>
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	6014      	str	r4, [r2, #0]
 8007c02:	b003      	add	sp, #12
 8007c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c08:	f000 b8e2 	b.w	8007dd0 <__malloc_unlock>
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d908      	bls.n	8007c22 <_free_r+0x46>
 8007c10:	6825      	ldr	r5, [r4, #0]
 8007c12:	1961      	adds	r1, r4, r5
 8007c14:	428b      	cmp	r3, r1
 8007c16:	bf01      	itttt	eq
 8007c18:	6819      	ldreq	r1, [r3, #0]
 8007c1a:	685b      	ldreq	r3, [r3, #4]
 8007c1c:	1949      	addeq	r1, r1, r5
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	e7ed      	b.n	8007bfe <_free_r+0x22>
 8007c22:	461a      	mov	r2, r3
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b10b      	cbz	r3, 8007c2c <_free_r+0x50>
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x46>
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	1855      	adds	r5, r2, r1
 8007c30:	42a5      	cmp	r5, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x70>
 8007c34:	6824      	ldr	r4, [r4, #0]
 8007c36:	4421      	add	r1, r4
 8007c38:	1854      	adds	r4, r2, r1
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	6011      	str	r1, [r2, #0]
 8007c3e:	d1e0      	bne.n	8007c02 <_free_r+0x26>
 8007c40:	681c      	ldr	r4, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	6053      	str	r3, [r2, #4]
 8007c46:	440c      	add	r4, r1
 8007c48:	6014      	str	r4, [r2, #0]
 8007c4a:	e7da      	b.n	8007c02 <_free_r+0x26>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x78>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	6003      	str	r3, [r0, #0]
 8007c52:	e7d6      	b.n	8007c02 <_free_r+0x26>
 8007c54:	6825      	ldr	r5, [r4, #0]
 8007c56:	1961      	adds	r1, r4, r5
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	6063      	str	r3, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1949      	addeq	r1, r1, r5
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	6054      	str	r4, [r2, #4]
 8007c6a:	e7ca      	b.n	8007c02 <_free_r+0x26>
 8007c6c:	b003      	add	sp, #12
 8007c6e:	bd30      	pop	{r4, r5, pc}
 8007c70:	20000698 	.word	0x20000698

08007c74 <malloc>:
 8007c74:	4b02      	ldr	r3, [pc, #8]	; (8007c80 <malloc+0xc>)
 8007c76:	4601      	mov	r1, r0
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	f000 b823 	b.w	8007cc4 <_malloc_r>
 8007c7e:	bf00      	nop
 8007c80:	20000078 	.word	0x20000078

08007c84 <sbrk_aligned>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	4e0e      	ldr	r6, [pc, #56]	; (8007cc0 <sbrk_aligned+0x3c>)
 8007c88:	460c      	mov	r4, r1
 8007c8a:	6831      	ldr	r1, [r6, #0]
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	b911      	cbnz	r1, 8007c96 <sbrk_aligned+0x12>
 8007c90:	f000 fe40 	bl	8008914 <_sbrk_r>
 8007c94:	6030      	str	r0, [r6, #0]
 8007c96:	4621      	mov	r1, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 fe3b 	bl	8008914 <_sbrk_r>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	d00a      	beq.n	8007cb8 <sbrk_aligned+0x34>
 8007ca2:	1cc4      	adds	r4, r0, #3
 8007ca4:	f024 0403 	bic.w	r4, r4, #3
 8007ca8:	42a0      	cmp	r0, r4
 8007caa:	d007      	beq.n	8007cbc <sbrk_aligned+0x38>
 8007cac:	1a21      	subs	r1, r4, r0
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 fe30 	bl	8008914 <_sbrk_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d101      	bne.n	8007cbc <sbrk_aligned+0x38>
 8007cb8:	f04f 34ff 	mov.w	r4, #4294967295
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	2000069c 	.word	0x2000069c

08007cc4 <_malloc_r>:
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	1ccd      	adds	r5, r1, #3
 8007cca:	f025 0503 	bic.w	r5, r5, #3
 8007cce:	3508      	adds	r5, #8
 8007cd0:	2d0c      	cmp	r5, #12
 8007cd2:	bf38      	it	cc
 8007cd4:	250c      	movcc	r5, #12
 8007cd6:	2d00      	cmp	r5, #0
 8007cd8:	4607      	mov	r7, r0
 8007cda:	db01      	blt.n	8007ce0 <_malloc_r+0x1c>
 8007cdc:	42a9      	cmp	r1, r5
 8007cde:	d905      	bls.n	8007cec <_malloc_r+0x28>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dc0 <_malloc_r+0xfc>
 8007cf0:	f000 f868 	bl	8007dc4 <__malloc_lock>
 8007cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	bb5c      	cbnz	r4, 8007d54 <_malloc_r+0x90>
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f7ff ffc0 	bl	8007c84 <sbrk_aligned>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	4604      	mov	r4, r0
 8007d08:	d155      	bne.n	8007db6 <_malloc_r+0xf2>
 8007d0a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d0e:	4626      	mov	r6, r4
 8007d10:	2e00      	cmp	r6, #0
 8007d12:	d145      	bne.n	8007da0 <_malloc_r+0xdc>
 8007d14:	2c00      	cmp	r4, #0
 8007d16:	d048      	beq.n	8007daa <_malloc_r+0xe6>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	eb04 0903 	add.w	r9, r4, r3
 8007d22:	f000 fdf7 	bl	8008914 <_sbrk_r>
 8007d26:	4581      	cmp	r9, r0
 8007d28:	d13f      	bne.n	8007daa <_malloc_r+0xe6>
 8007d2a:	6821      	ldr	r1, [r4, #0]
 8007d2c:	1a6d      	subs	r5, r5, r1
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ffa7 	bl	8007c84 <sbrk_aligned>
 8007d36:	3001      	adds	r0, #1
 8007d38:	d037      	beq.n	8007daa <_malloc_r+0xe6>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	442b      	add	r3, r5
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	f8d8 3000 	ldr.w	r3, [r8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d038      	beq.n	8007dba <_malloc_r+0xf6>
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	42a2      	cmp	r2, r4
 8007d4c:	d12b      	bne.n	8007da6 <_malloc_r+0xe2>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	e00f      	b.n	8007d74 <_malloc_r+0xb0>
 8007d54:	6822      	ldr	r2, [r4, #0]
 8007d56:	1b52      	subs	r2, r2, r5
 8007d58:	d41f      	bmi.n	8007d9a <_malloc_r+0xd6>
 8007d5a:	2a0b      	cmp	r2, #11
 8007d5c:	d917      	bls.n	8007d8e <_malloc_r+0xca>
 8007d5e:	1961      	adds	r1, r4, r5
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	6025      	str	r5, [r4, #0]
 8007d64:	bf18      	it	ne
 8007d66:	6059      	strne	r1, [r3, #4]
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	bf08      	it	eq
 8007d6c:	f8c8 1000 	streq.w	r1, [r8]
 8007d70:	5162      	str	r2, [r4, r5]
 8007d72:	604b      	str	r3, [r1, #4]
 8007d74:	4638      	mov	r0, r7
 8007d76:	f104 060b 	add.w	r6, r4, #11
 8007d7a:	f000 f829 	bl	8007dd0 <__malloc_unlock>
 8007d7e:	f026 0607 	bic.w	r6, r6, #7
 8007d82:	1d23      	adds	r3, r4, #4
 8007d84:	1af2      	subs	r2, r6, r3
 8007d86:	d0ae      	beq.n	8007ce6 <_malloc_r+0x22>
 8007d88:	1b9b      	subs	r3, r3, r6
 8007d8a:	50a3      	str	r3, [r4, r2]
 8007d8c:	e7ab      	b.n	8007ce6 <_malloc_r+0x22>
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	6862      	ldr	r2, [r4, #4]
 8007d92:	d1dd      	bne.n	8007d50 <_malloc_r+0x8c>
 8007d94:	f8c8 2000 	str.w	r2, [r8]
 8007d98:	e7ec      	b.n	8007d74 <_malloc_r+0xb0>
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	6864      	ldr	r4, [r4, #4]
 8007d9e:	e7ac      	b.n	8007cfa <_malloc_r+0x36>
 8007da0:	4634      	mov	r4, r6
 8007da2:	6876      	ldr	r6, [r6, #4]
 8007da4:	e7b4      	b.n	8007d10 <_malloc_r+0x4c>
 8007da6:	4613      	mov	r3, r2
 8007da8:	e7cc      	b.n	8007d44 <_malloc_r+0x80>
 8007daa:	230c      	movs	r3, #12
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	4638      	mov	r0, r7
 8007db0:	f000 f80e 	bl	8007dd0 <__malloc_unlock>
 8007db4:	e797      	b.n	8007ce6 <_malloc_r+0x22>
 8007db6:	6025      	str	r5, [r4, #0]
 8007db8:	e7dc      	b.n	8007d74 <_malloc_r+0xb0>
 8007dba:	605b      	str	r3, [r3, #4]
 8007dbc:	deff      	udf	#255	; 0xff
 8007dbe:	bf00      	nop
 8007dc0:	20000698 	.word	0x20000698

08007dc4 <__malloc_lock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__malloc_lock+0x8>)
 8007dc6:	f7ff b87e 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20000694 	.word	0x20000694

08007dd0 <__malloc_unlock>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	; (8007dd8 <__malloc_unlock+0x8>)
 8007dd2:	f7ff b879 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20000694 	.word	0x20000694

08007ddc <_Balloc>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	69c6      	ldr	r6, [r0, #28]
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	b976      	cbnz	r6, 8007e04 <_Balloc+0x28>
 8007de6:	2010      	movs	r0, #16
 8007de8:	f7ff ff44 	bl	8007c74 <malloc>
 8007dec:	4602      	mov	r2, r0
 8007dee:	61e0      	str	r0, [r4, #28]
 8007df0:	b920      	cbnz	r0, 8007dfc <_Balloc+0x20>
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <_Balloc+0x78>)
 8007df4:	4818      	ldr	r0, [pc, #96]	; (8007e58 <_Balloc+0x7c>)
 8007df6:	216b      	movs	r1, #107	; 0x6b
 8007df8:	f000 fd9c 	bl	8008934 <__assert_func>
 8007dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e00:	6006      	str	r6, [r0, #0]
 8007e02:	60c6      	str	r6, [r0, #12]
 8007e04:	69e6      	ldr	r6, [r4, #28]
 8007e06:	68f3      	ldr	r3, [r6, #12]
 8007e08:	b183      	cbz	r3, 8007e2c <_Balloc+0x50>
 8007e0a:	69e3      	ldr	r3, [r4, #28]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e12:	b9b8      	cbnz	r0, 8007e44 <_Balloc+0x68>
 8007e14:	2101      	movs	r1, #1
 8007e16:	fa01 f605 	lsl.w	r6, r1, r5
 8007e1a:	1d72      	adds	r2, r6, #5
 8007e1c:	0092      	lsls	r2, r2, #2
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 fda6 	bl	8008970 <_calloc_r>
 8007e24:	b160      	cbz	r0, 8007e40 <_Balloc+0x64>
 8007e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e2a:	e00e      	b.n	8007e4a <_Balloc+0x6e>
 8007e2c:	2221      	movs	r2, #33	; 0x21
 8007e2e:	2104      	movs	r1, #4
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fd9d 	bl	8008970 <_calloc_r>
 8007e36:	69e3      	ldr	r3, [r4, #28]
 8007e38:	60f0      	str	r0, [r6, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e4      	bne.n	8007e0a <_Balloc+0x2e>
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	6802      	ldr	r2, [r0, #0]
 8007e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e50:	e7f7      	b.n	8007e42 <_Balloc+0x66>
 8007e52:	bf00      	nop
 8007e54:	080093e9 	.word	0x080093e9
 8007e58:	08009469 	.word	0x08009469

08007e5c <_Bfree>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	69c6      	ldr	r6, [r0, #28]
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b976      	cbnz	r6, 8007e84 <_Bfree+0x28>
 8007e66:	2010      	movs	r0, #16
 8007e68:	f7ff ff04 	bl	8007c74 <malloc>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	61e8      	str	r0, [r5, #28]
 8007e70:	b920      	cbnz	r0, 8007e7c <_Bfree+0x20>
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <_Bfree+0x3c>)
 8007e74:	4809      	ldr	r0, [pc, #36]	; (8007e9c <_Bfree+0x40>)
 8007e76:	218f      	movs	r1, #143	; 0x8f
 8007e78:	f000 fd5c 	bl	8008934 <__assert_func>
 8007e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e80:	6006      	str	r6, [r0, #0]
 8007e82:	60c6      	str	r6, [r0, #12]
 8007e84:	b13c      	cbz	r4, 8007e96 <_Bfree+0x3a>
 8007e86:	69eb      	ldr	r3, [r5, #28]
 8007e88:	6862      	ldr	r2, [r4, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e90:	6021      	str	r1, [r4, #0]
 8007e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	080093e9 	.word	0x080093e9
 8007e9c:	08009469 	.word	0x08009469

08007ea0 <__multadd>:
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	690d      	ldr	r5, [r1, #16]
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	461e      	mov	r6, r3
 8007eac:	f101 0c14 	add.w	ip, r1, #20
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8007eb6:	b299      	uxth	r1, r3
 8007eb8:	fb02 6101 	mla	r1, r2, r1, r6
 8007ebc:	0c1e      	lsrs	r6, r3, #16
 8007ebe:	0c0b      	lsrs	r3, r1, #16
 8007ec0:	fb02 3306 	mla	r3, r2, r6, r3
 8007ec4:	b289      	uxth	r1, r1
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ecc:	4285      	cmp	r5, r0
 8007ece:	f84c 1b04 	str.w	r1, [ip], #4
 8007ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ed6:	dcec      	bgt.n	8007eb2 <__multadd+0x12>
 8007ed8:	b30e      	cbz	r6, 8007f1e <__multadd+0x7e>
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	42ab      	cmp	r3, r5
 8007ede:	dc19      	bgt.n	8007f14 <__multadd+0x74>
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	3101      	adds	r1, #1
 8007ee6:	f7ff ff79 	bl	8007ddc <_Balloc>
 8007eea:	4680      	mov	r8, r0
 8007eec:	b928      	cbnz	r0, 8007efa <__multadd+0x5a>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <__multadd+0x84>)
 8007ef2:	480d      	ldr	r0, [pc, #52]	; (8007f28 <__multadd+0x88>)
 8007ef4:	21ba      	movs	r1, #186	; 0xba
 8007ef6:	f000 fd1d 	bl	8008934 <__assert_func>
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	3202      	adds	r2, #2
 8007efe:	f104 010c 	add.w	r1, r4, #12
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	300c      	adds	r0, #12
 8007f06:	f7fe ffe0 	bl	8006eca <memcpy>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff ffa5 	bl	8007e5c <_Bfree>
 8007f12:	4644      	mov	r4, r8
 8007f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f18:	3501      	adds	r5, #1
 8007f1a:	615e      	str	r6, [r3, #20]
 8007f1c:	6125      	str	r5, [r4, #16]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f24:	08009458 	.word	0x08009458
 8007f28:	08009469 	.word	0x08009469

08007f2c <__hi0bits>:
 8007f2c:	0c03      	lsrs	r3, r0, #16
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	b9d3      	cbnz	r3, 8007f68 <__hi0bits+0x3c>
 8007f32:	0400      	lsls	r0, r0, #16
 8007f34:	2310      	movs	r3, #16
 8007f36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f3a:	bf04      	itt	eq
 8007f3c:	0200      	lsleq	r0, r0, #8
 8007f3e:	3308      	addeq	r3, #8
 8007f40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f44:	bf04      	itt	eq
 8007f46:	0100      	lsleq	r0, r0, #4
 8007f48:	3304      	addeq	r3, #4
 8007f4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f4e:	bf04      	itt	eq
 8007f50:	0080      	lsleq	r0, r0, #2
 8007f52:	3302      	addeq	r3, #2
 8007f54:	2800      	cmp	r0, #0
 8007f56:	db05      	blt.n	8007f64 <__hi0bits+0x38>
 8007f58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f5c:	f103 0301 	add.w	r3, r3, #1
 8007f60:	bf08      	it	eq
 8007f62:	2320      	moveq	r3, #32
 8007f64:	4618      	mov	r0, r3
 8007f66:	4770      	bx	lr
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e7e4      	b.n	8007f36 <__hi0bits+0xa>

08007f6c <__lo0bits>:
 8007f6c:	6803      	ldr	r3, [r0, #0]
 8007f6e:	f013 0207 	ands.w	r2, r3, #7
 8007f72:	d00c      	beq.n	8007f8e <__lo0bits+0x22>
 8007f74:	07d9      	lsls	r1, r3, #31
 8007f76:	d422      	bmi.n	8007fbe <__lo0bits+0x52>
 8007f78:	079a      	lsls	r2, r3, #30
 8007f7a:	bf49      	itett	mi
 8007f7c:	085b      	lsrmi	r3, r3, #1
 8007f7e:	089b      	lsrpl	r3, r3, #2
 8007f80:	6003      	strmi	r3, [r0, #0]
 8007f82:	2201      	movmi	r2, #1
 8007f84:	bf5c      	itt	pl
 8007f86:	6003      	strpl	r3, [r0, #0]
 8007f88:	2202      	movpl	r2, #2
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4770      	bx	lr
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	b909      	cbnz	r1, 8007f96 <__lo0bits+0x2a>
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	2210      	movs	r2, #16
 8007f96:	b2d9      	uxtb	r1, r3
 8007f98:	b909      	cbnz	r1, 8007f9e <__lo0bits+0x32>
 8007f9a:	3208      	adds	r2, #8
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	0719      	lsls	r1, r3, #28
 8007fa0:	bf04      	itt	eq
 8007fa2:	091b      	lsreq	r3, r3, #4
 8007fa4:	3204      	addeq	r2, #4
 8007fa6:	0799      	lsls	r1, r3, #30
 8007fa8:	bf04      	itt	eq
 8007faa:	089b      	lsreq	r3, r3, #2
 8007fac:	3202      	addeq	r2, #2
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d403      	bmi.n	8007fba <__lo0bits+0x4e>
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	f102 0201 	add.w	r2, r2, #1
 8007fb8:	d003      	beq.n	8007fc2 <__lo0bits+0x56>
 8007fba:	6003      	str	r3, [r0, #0]
 8007fbc:	e7e5      	b.n	8007f8a <__lo0bits+0x1e>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e7e3      	b.n	8007f8a <__lo0bits+0x1e>
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	e7e1      	b.n	8007f8a <__lo0bits+0x1e>
	...

08007fc8 <__i2b>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	2101      	movs	r1, #1
 8007fce:	f7ff ff05 	bl	8007ddc <_Balloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	b928      	cbnz	r0, 8007fe2 <__i2b+0x1a>
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <__i2b+0x24>)
 8007fd8:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <__i2b+0x28>)
 8007fda:	f240 1145 	movw	r1, #325	; 0x145
 8007fde:	f000 fca9 	bl	8008934 <__assert_func>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6144      	str	r4, [r0, #20]
 8007fe6:	6103      	str	r3, [r0, #16]
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08009458 	.word	0x08009458
 8007ff0:	08009469 	.word	0x08009469

08007ff4 <__multiply>:
 8007ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	4691      	mov	r9, r2
 8007ffa:	690a      	ldr	r2, [r1, #16]
 8007ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008000:	429a      	cmp	r2, r3
 8008002:	bfb8      	it	lt
 8008004:	460b      	movlt	r3, r1
 8008006:	460c      	mov	r4, r1
 8008008:	bfbc      	itt	lt
 800800a:	464c      	movlt	r4, r9
 800800c:	4699      	movlt	r9, r3
 800800e:	6927      	ldr	r7, [r4, #16]
 8008010:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	6861      	ldr	r1, [r4, #4]
 8008018:	eb07 060a 	add.w	r6, r7, sl
 800801c:	42b3      	cmp	r3, r6
 800801e:	b085      	sub	sp, #20
 8008020:	bfb8      	it	lt
 8008022:	3101      	addlt	r1, #1
 8008024:	f7ff feda 	bl	8007ddc <_Balloc>
 8008028:	b930      	cbnz	r0, 8008038 <__multiply+0x44>
 800802a:	4602      	mov	r2, r0
 800802c:	4b44      	ldr	r3, [pc, #272]	; (8008140 <__multiply+0x14c>)
 800802e:	4845      	ldr	r0, [pc, #276]	; (8008144 <__multiply+0x150>)
 8008030:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008034:	f000 fc7e 	bl	8008934 <__assert_func>
 8008038:	f100 0514 	add.w	r5, r0, #20
 800803c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008040:	462b      	mov	r3, r5
 8008042:	2200      	movs	r2, #0
 8008044:	4543      	cmp	r3, r8
 8008046:	d321      	bcc.n	800808c <__multiply+0x98>
 8008048:	f104 0314 	add.w	r3, r4, #20
 800804c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008050:	f109 0314 	add.w	r3, r9, #20
 8008054:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008058:	9202      	str	r2, [sp, #8]
 800805a:	1b3a      	subs	r2, r7, r4
 800805c:	3a15      	subs	r2, #21
 800805e:	f022 0203 	bic.w	r2, r2, #3
 8008062:	3204      	adds	r2, #4
 8008064:	f104 0115 	add.w	r1, r4, #21
 8008068:	428f      	cmp	r7, r1
 800806a:	bf38      	it	cc
 800806c:	2204      	movcc	r2, #4
 800806e:	9201      	str	r2, [sp, #4]
 8008070:	9a02      	ldr	r2, [sp, #8]
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	429a      	cmp	r2, r3
 8008076:	d80c      	bhi.n	8008092 <__multiply+0x9e>
 8008078:	2e00      	cmp	r6, #0
 800807a:	dd03      	ble.n	8008084 <__multiply+0x90>
 800807c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008080:	2b00      	cmp	r3, #0
 8008082:	d05b      	beq.n	800813c <__multiply+0x148>
 8008084:	6106      	str	r6, [r0, #16]
 8008086:	b005      	add	sp, #20
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808c:	f843 2b04 	str.w	r2, [r3], #4
 8008090:	e7d8      	b.n	8008044 <__multiply+0x50>
 8008092:	f8b3 a000 	ldrh.w	sl, [r3]
 8008096:	f1ba 0f00 	cmp.w	sl, #0
 800809a:	d024      	beq.n	80080e6 <__multiply+0xf2>
 800809c:	f104 0e14 	add.w	lr, r4, #20
 80080a0:	46a9      	mov	r9, r5
 80080a2:	f04f 0c00 	mov.w	ip, #0
 80080a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080aa:	f8d9 1000 	ldr.w	r1, [r9]
 80080ae:	fa1f fb82 	uxth.w	fp, r2
 80080b2:	b289      	uxth	r1, r1
 80080b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80080b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080bc:	f8d9 2000 	ldr.w	r2, [r9]
 80080c0:	4461      	add	r1, ip
 80080c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80080ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080ce:	b289      	uxth	r1, r1
 80080d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080d4:	4577      	cmp	r7, lr
 80080d6:	f849 1b04 	str.w	r1, [r9], #4
 80080da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080de:	d8e2      	bhi.n	80080a6 <__multiply+0xb2>
 80080e0:	9a01      	ldr	r2, [sp, #4]
 80080e2:	f845 c002 	str.w	ip, [r5, r2]
 80080e6:	9a03      	ldr	r2, [sp, #12]
 80080e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ec:	3304      	adds	r3, #4
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d021      	beq.n	8008138 <__multiply+0x144>
 80080f4:	6829      	ldr	r1, [r5, #0]
 80080f6:	f104 0c14 	add.w	ip, r4, #20
 80080fa:	46ae      	mov	lr, r5
 80080fc:	f04f 0a00 	mov.w	sl, #0
 8008100:	f8bc b000 	ldrh.w	fp, [ip]
 8008104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008108:	fb09 220b 	mla	r2, r9, fp, r2
 800810c:	4452      	add	r2, sl
 800810e:	b289      	uxth	r1, r1
 8008110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008114:	f84e 1b04 	str.w	r1, [lr], #4
 8008118:	f85c 1b04 	ldr.w	r1, [ip], #4
 800811c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008120:	f8be 1000 	ldrh.w	r1, [lr]
 8008124:	fb09 110a 	mla	r1, r9, sl, r1
 8008128:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800812c:	4567      	cmp	r7, ip
 800812e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008132:	d8e5      	bhi.n	8008100 <__multiply+0x10c>
 8008134:	9a01      	ldr	r2, [sp, #4]
 8008136:	50a9      	str	r1, [r5, r2]
 8008138:	3504      	adds	r5, #4
 800813a:	e799      	b.n	8008070 <__multiply+0x7c>
 800813c:	3e01      	subs	r6, #1
 800813e:	e79b      	b.n	8008078 <__multiply+0x84>
 8008140:	08009458 	.word	0x08009458
 8008144:	08009469 	.word	0x08009469

08008148 <__pow5mult>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	4615      	mov	r5, r2
 800814e:	f012 0203 	ands.w	r2, r2, #3
 8008152:	4606      	mov	r6, r0
 8008154:	460f      	mov	r7, r1
 8008156:	d007      	beq.n	8008168 <__pow5mult+0x20>
 8008158:	4c25      	ldr	r4, [pc, #148]	; (80081f0 <__pow5mult+0xa8>)
 800815a:	3a01      	subs	r2, #1
 800815c:	2300      	movs	r3, #0
 800815e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008162:	f7ff fe9d 	bl	8007ea0 <__multadd>
 8008166:	4607      	mov	r7, r0
 8008168:	10ad      	asrs	r5, r5, #2
 800816a:	d03d      	beq.n	80081e8 <__pow5mult+0xa0>
 800816c:	69f4      	ldr	r4, [r6, #28]
 800816e:	b97c      	cbnz	r4, 8008190 <__pow5mult+0x48>
 8008170:	2010      	movs	r0, #16
 8008172:	f7ff fd7f 	bl	8007c74 <malloc>
 8008176:	4602      	mov	r2, r0
 8008178:	61f0      	str	r0, [r6, #28]
 800817a:	b928      	cbnz	r0, 8008188 <__pow5mult+0x40>
 800817c:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <__pow5mult+0xac>)
 800817e:	481e      	ldr	r0, [pc, #120]	; (80081f8 <__pow5mult+0xb0>)
 8008180:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008184:	f000 fbd6 	bl	8008934 <__assert_func>
 8008188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800818c:	6004      	str	r4, [r0, #0]
 800818e:	60c4      	str	r4, [r0, #12]
 8008190:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008198:	b94c      	cbnz	r4, 80081ae <__pow5mult+0x66>
 800819a:	f240 2171 	movw	r1, #625	; 0x271
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ff12 	bl	8007fc8 <__i2b>
 80081a4:	2300      	movs	r3, #0
 80081a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80081aa:	4604      	mov	r4, r0
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	07eb      	lsls	r3, r5, #31
 80081b4:	d50a      	bpl.n	80081cc <__pow5mult+0x84>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4622      	mov	r2, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ff1a 	bl	8007ff4 <__multiply>
 80081c0:	4639      	mov	r1, r7
 80081c2:	4680      	mov	r8, r0
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff fe49 	bl	8007e5c <_Bfree>
 80081ca:	4647      	mov	r7, r8
 80081cc:	106d      	asrs	r5, r5, #1
 80081ce:	d00b      	beq.n	80081e8 <__pow5mult+0xa0>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	b938      	cbnz	r0, 80081e4 <__pow5mult+0x9c>
 80081d4:	4622      	mov	r2, r4
 80081d6:	4621      	mov	r1, r4
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff ff0b 	bl	8007ff4 <__multiply>
 80081de:	6020      	str	r0, [r4, #0]
 80081e0:	f8c0 9000 	str.w	r9, [r0]
 80081e4:	4604      	mov	r4, r0
 80081e6:	e7e4      	b.n	80081b2 <__pow5mult+0x6a>
 80081e8:	4638      	mov	r0, r7
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ee:	bf00      	nop
 80081f0:	080095b8 	.word	0x080095b8
 80081f4:	080093e9 	.word	0x080093e9
 80081f8:	08009469 	.word	0x08009469

080081fc <__lshift>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	6849      	ldr	r1, [r1, #4]
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	4607      	mov	r7, r0
 800820e:	4691      	mov	r9, r2
 8008210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008214:	f108 0601 	add.w	r6, r8, #1
 8008218:	42b3      	cmp	r3, r6
 800821a:	db0b      	blt.n	8008234 <__lshift+0x38>
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff fddd 	bl	8007ddc <_Balloc>
 8008222:	4605      	mov	r5, r0
 8008224:	b948      	cbnz	r0, 800823a <__lshift+0x3e>
 8008226:	4602      	mov	r2, r0
 8008228:	4b28      	ldr	r3, [pc, #160]	; (80082cc <__lshift+0xd0>)
 800822a:	4829      	ldr	r0, [pc, #164]	; (80082d0 <__lshift+0xd4>)
 800822c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008230:	f000 fb80 	bl	8008934 <__assert_func>
 8008234:	3101      	adds	r1, #1
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	e7ee      	b.n	8008218 <__lshift+0x1c>
 800823a:	2300      	movs	r3, #0
 800823c:	f100 0114 	add.w	r1, r0, #20
 8008240:	f100 0210 	add.w	r2, r0, #16
 8008244:	4618      	mov	r0, r3
 8008246:	4553      	cmp	r3, sl
 8008248:	db33      	blt.n	80082b2 <__lshift+0xb6>
 800824a:	6920      	ldr	r0, [r4, #16]
 800824c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008250:	f104 0314 	add.w	r3, r4, #20
 8008254:	f019 091f 	ands.w	r9, r9, #31
 8008258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800825c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008260:	d02b      	beq.n	80082ba <__lshift+0xbe>
 8008262:	f1c9 0e20 	rsb	lr, r9, #32
 8008266:	468a      	mov	sl, r1
 8008268:	2200      	movs	r2, #0
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	fa00 f009 	lsl.w	r0, r0, r9
 8008270:	4310      	orrs	r0, r2
 8008272:	f84a 0b04 	str.w	r0, [sl], #4
 8008276:	f853 2b04 	ldr.w	r2, [r3], #4
 800827a:	459c      	cmp	ip, r3
 800827c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008280:	d8f3      	bhi.n	800826a <__lshift+0x6e>
 8008282:	ebac 0304 	sub.w	r3, ip, r4
 8008286:	3b15      	subs	r3, #21
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	3304      	adds	r3, #4
 800828e:	f104 0015 	add.w	r0, r4, #21
 8008292:	4584      	cmp	ip, r0
 8008294:	bf38      	it	cc
 8008296:	2304      	movcc	r3, #4
 8008298:	50ca      	str	r2, [r1, r3]
 800829a:	b10a      	cbz	r2, 80082a0 <__lshift+0xa4>
 800829c:	f108 0602 	add.w	r6, r8, #2
 80082a0:	3e01      	subs	r6, #1
 80082a2:	4638      	mov	r0, r7
 80082a4:	612e      	str	r6, [r5, #16]
 80082a6:	4621      	mov	r1, r4
 80082a8:	f7ff fdd8 	bl	8007e5c <_Bfree>
 80082ac:	4628      	mov	r0, r5
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082b6:	3301      	adds	r3, #1
 80082b8:	e7c5      	b.n	8008246 <__lshift+0x4a>
 80082ba:	3904      	subs	r1, #4
 80082bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082c4:	459c      	cmp	ip, r3
 80082c6:	d8f9      	bhi.n	80082bc <__lshift+0xc0>
 80082c8:	e7ea      	b.n	80082a0 <__lshift+0xa4>
 80082ca:	bf00      	nop
 80082cc:	08009458 	.word	0x08009458
 80082d0:	08009469 	.word	0x08009469

080082d4 <__mcmp>:
 80082d4:	b530      	push	{r4, r5, lr}
 80082d6:	6902      	ldr	r2, [r0, #16]
 80082d8:	690c      	ldr	r4, [r1, #16]
 80082da:	1b12      	subs	r2, r2, r4
 80082dc:	d10e      	bne.n	80082fc <__mcmp+0x28>
 80082de:	f100 0314 	add.w	r3, r0, #20
 80082e2:	3114      	adds	r1, #20
 80082e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082f4:	42a5      	cmp	r5, r4
 80082f6:	d003      	beq.n	8008300 <__mcmp+0x2c>
 80082f8:	d305      	bcc.n	8008306 <__mcmp+0x32>
 80082fa:	2201      	movs	r2, #1
 80082fc:	4610      	mov	r0, r2
 80082fe:	bd30      	pop	{r4, r5, pc}
 8008300:	4283      	cmp	r3, r0
 8008302:	d3f3      	bcc.n	80082ec <__mcmp+0x18>
 8008304:	e7fa      	b.n	80082fc <__mcmp+0x28>
 8008306:	f04f 32ff 	mov.w	r2, #4294967295
 800830a:	e7f7      	b.n	80082fc <__mcmp+0x28>

0800830c <__mdiff>:
 800830c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	4606      	mov	r6, r0
 8008314:	4611      	mov	r1, r2
 8008316:	4620      	mov	r0, r4
 8008318:	4690      	mov	r8, r2
 800831a:	f7ff ffdb 	bl	80082d4 <__mcmp>
 800831e:	1e05      	subs	r5, r0, #0
 8008320:	d110      	bne.n	8008344 <__mdiff+0x38>
 8008322:	4629      	mov	r1, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fd59 	bl	8007ddc <_Balloc>
 800832a:	b930      	cbnz	r0, 800833a <__mdiff+0x2e>
 800832c:	4b3a      	ldr	r3, [pc, #232]	; (8008418 <__mdiff+0x10c>)
 800832e:	4602      	mov	r2, r0
 8008330:	f240 2137 	movw	r1, #567	; 0x237
 8008334:	4839      	ldr	r0, [pc, #228]	; (800841c <__mdiff+0x110>)
 8008336:	f000 fafd 	bl	8008934 <__assert_func>
 800833a:	2301      	movs	r3, #1
 800833c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	bfa4      	itt	ge
 8008346:	4643      	movge	r3, r8
 8008348:	46a0      	movge	r8, r4
 800834a:	4630      	mov	r0, r6
 800834c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008350:	bfa6      	itte	ge
 8008352:	461c      	movge	r4, r3
 8008354:	2500      	movge	r5, #0
 8008356:	2501      	movlt	r5, #1
 8008358:	f7ff fd40 	bl	8007ddc <_Balloc>
 800835c:	b920      	cbnz	r0, 8008368 <__mdiff+0x5c>
 800835e:	4b2e      	ldr	r3, [pc, #184]	; (8008418 <__mdiff+0x10c>)
 8008360:	4602      	mov	r2, r0
 8008362:	f240 2145 	movw	r1, #581	; 0x245
 8008366:	e7e5      	b.n	8008334 <__mdiff+0x28>
 8008368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800836c:	6926      	ldr	r6, [r4, #16]
 800836e:	60c5      	str	r5, [r0, #12]
 8008370:	f104 0914 	add.w	r9, r4, #20
 8008374:	f108 0514 	add.w	r5, r8, #20
 8008378:	f100 0e14 	add.w	lr, r0, #20
 800837c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008384:	f108 0210 	add.w	r2, r8, #16
 8008388:	46f2      	mov	sl, lr
 800838a:	2100      	movs	r1, #0
 800838c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008394:	fa11 f88b 	uxtah	r8, r1, fp
 8008398:	b299      	uxth	r1, r3
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	eba8 0801 	sub.w	r8, r8, r1
 80083a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083a8:	fa1f f888 	uxth.w	r8, r8
 80083ac:	1419      	asrs	r1, r3, #16
 80083ae:	454e      	cmp	r6, r9
 80083b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083b4:	f84a 3b04 	str.w	r3, [sl], #4
 80083b8:	d8e8      	bhi.n	800838c <__mdiff+0x80>
 80083ba:	1b33      	subs	r3, r6, r4
 80083bc:	3b15      	subs	r3, #21
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	3304      	adds	r3, #4
 80083c4:	3415      	adds	r4, #21
 80083c6:	42a6      	cmp	r6, r4
 80083c8:	bf38      	it	cc
 80083ca:	2304      	movcc	r3, #4
 80083cc:	441d      	add	r5, r3
 80083ce:	4473      	add	r3, lr
 80083d0:	469e      	mov	lr, r3
 80083d2:	462e      	mov	r6, r5
 80083d4:	4566      	cmp	r6, ip
 80083d6:	d30e      	bcc.n	80083f6 <__mdiff+0xea>
 80083d8:	f10c 0203 	add.w	r2, ip, #3
 80083dc:	1b52      	subs	r2, r2, r5
 80083de:	f022 0203 	bic.w	r2, r2, #3
 80083e2:	3d03      	subs	r5, #3
 80083e4:	45ac      	cmp	ip, r5
 80083e6:	bf38      	it	cc
 80083e8:	2200      	movcc	r2, #0
 80083ea:	4413      	add	r3, r2
 80083ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80083f0:	b17a      	cbz	r2, 8008412 <__mdiff+0x106>
 80083f2:	6107      	str	r7, [r0, #16]
 80083f4:	e7a4      	b.n	8008340 <__mdiff+0x34>
 80083f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80083fa:	fa11 f288 	uxtah	r2, r1, r8
 80083fe:	1414      	asrs	r4, r2, #16
 8008400:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008404:	b292      	uxth	r2, r2
 8008406:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800840a:	f84e 2b04 	str.w	r2, [lr], #4
 800840e:	1421      	asrs	r1, r4, #16
 8008410:	e7e0      	b.n	80083d4 <__mdiff+0xc8>
 8008412:	3f01      	subs	r7, #1
 8008414:	e7ea      	b.n	80083ec <__mdiff+0xe0>
 8008416:	bf00      	nop
 8008418:	08009458 	.word	0x08009458
 800841c:	08009469 	.word	0x08009469

08008420 <__d2b>:
 8008420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008424:	460f      	mov	r7, r1
 8008426:	2101      	movs	r1, #1
 8008428:	ec59 8b10 	vmov	r8, r9, d0
 800842c:	4616      	mov	r6, r2
 800842e:	f7ff fcd5 	bl	8007ddc <_Balloc>
 8008432:	4604      	mov	r4, r0
 8008434:	b930      	cbnz	r0, 8008444 <__d2b+0x24>
 8008436:	4602      	mov	r2, r0
 8008438:	4b24      	ldr	r3, [pc, #144]	; (80084cc <__d2b+0xac>)
 800843a:	4825      	ldr	r0, [pc, #148]	; (80084d0 <__d2b+0xb0>)
 800843c:	f240 310f 	movw	r1, #783	; 0x30f
 8008440:	f000 fa78 	bl	8008934 <__assert_func>
 8008444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800844c:	bb2d      	cbnz	r5, 800849a <__d2b+0x7a>
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	f1b8 0300 	subs.w	r3, r8, #0
 8008454:	d026      	beq.n	80084a4 <__d2b+0x84>
 8008456:	4668      	mov	r0, sp
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	f7ff fd87 	bl	8007f6c <__lo0bits>
 800845e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008462:	b1e8      	cbz	r0, 80084a0 <__d2b+0x80>
 8008464:	f1c0 0320 	rsb	r3, r0, #32
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	430b      	orrs	r3, r1
 800846e:	40c2      	lsrs	r2, r0
 8008470:	6163      	str	r3, [r4, #20]
 8008472:	9201      	str	r2, [sp, #4]
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	61a3      	str	r3, [r4, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf14      	ite	ne
 800847c:	2202      	movne	r2, #2
 800847e:	2201      	moveq	r2, #1
 8008480:	6122      	str	r2, [r4, #16]
 8008482:	b1bd      	cbz	r5, 80084b4 <__d2b+0x94>
 8008484:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008488:	4405      	add	r5, r0
 800848a:	603d      	str	r5, [r7, #0]
 800848c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008490:	6030      	str	r0, [r6, #0]
 8008492:	4620      	mov	r0, r4
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800849a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800849e:	e7d6      	b.n	800844e <__d2b+0x2e>
 80084a0:	6161      	str	r1, [r4, #20]
 80084a2:	e7e7      	b.n	8008474 <__d2b+0x54>
 80084a4:	a801      	add	r0, sp, #4
 80084a6:	f7ff fd61 	bl	8007f6c <__lo0bits>
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	6163      	str	r3, [r4, #20]
 80084ae:	3020      	adds	r0, #32
 80084b0:	2201      	movs	r2, #1
 80084b2:	e7e5      	b.n	8008480 <__d2b+0x60>
 80084b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084bc:	6038      	str	r0, [r7, #0]
 80084be:	6918      	ldr	r0, [r3, #16]
 80084c0:	f7ff fd34 	bl	8007f2c <__hi0bits>
 80084c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084c8:	e7e2      	b.n	8008490 <__d2b+0x70>
 80084ca:	bf00      	nop
 80084cc:	08009458 	.word	0x08009458
 80084d0:	08009469 	.word	0x08009469

080084d4 <__ssputs_r>:
 80084d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d8:	688e      	ldr	r6, [r1, #8]
 80084da:	461f      	mov	r7, r3
 80084dc:	42be      	cmp	r6, r7
 80084de:	680b      	ldr	r3, [r1, #0]
 80084e0:	4682      	mov	sl, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4690      	mov	r8, r2
 80084e6:	d82c      	bhi.n	8008542 <__ssputs_r+0x6e>
 80084e8:	898a      	ldrh	r2, [r1, #12]
 80084ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084ee:	d026      	beq.n	800853e <__ssputs_r+0x6a>
 80084f0:	6965      	ldr	r5, [r4, #20]
 80084f2:	6909      	ldr	r1, [r1, #16]
 80084f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f8:	eba3 0901 	sub.w	r9, r3, r1
 80084fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008500:	1c7b      	adds	r3, r7, #1
 8008502:	444b      	add	r3, r9
 8008504:	106d      	asrs	r5, r5, #1
 8008506:	429d      	cmp	r5, r3
 8008508:	bf38      	it	cc
 800850a:	461d      	movcc	r5, r3
 800850c:	0553      	lsls	r3, r2, #21
 800850e:	d527      	bpl.n	8008560 <__ssputs_r+0x8c>
 8008510:	4629      	mov	r1, r5
 8008512:	f7ff fbd7 	bl	8007cc4 <_malloc_r>
 8008516:	4606      	mov	r6, r0
 8008518:	b360      	cbz	r0, 8008574 <__ssputs_r+0xa0>
 800851a:	6921      	ldr	r1, [r4, #16]
 800851c:	464a      	mov	r2, r9
 800851e:	f7fe fcd4 	bl	8006eca <memcpy>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	6126      	str	r6, [r4, #16]
 8008530:	6165      	str	r5, [r4, #20]
 8008532:	444e      	add	r6, r9
 8008534:	eba5 0509 	sub.w	r5, r5, r9
 8008538:	6026      	str	r6, [r4, #0]
 800853a:	60a5      	str	r5, [r4, #8]
 800853c:	463e      	mov	r6, r7
 800853e:	42be      	cmp	r6, r7
 8008540:	d900      	bls.n	8008544 <__ssputs_r+0x70>
 8008542:	463e      	mov	r6, r7
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	4632      	mov	r2, r6
 8008548:	4641      	mov	r1, r8
 800854a:	f000 f9c9 	bl	80088e0 <memmove>
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	1b9b      	subs	r3, r3, r6
 8008552:	60a3      	str	r3, [r4, #8]
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	4433      	add	r3, r6
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	2000      	movs	r0, #0
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008560:	462a      	mov	r2, r5
 8008562:	f000 fa2d 	bl	80089c0 <_realloc_r>
 8008566:	4606      	mov	r6, r0
 8008568:	2800      	cmp	r0, #0
 800856a:	d1e0      	bne.n	800852e <__ssputs_r+0x5a>
 800856c:	6921      	ldr	r1, [r4, #16]
 800856e:	4650      	mov	r0, sl
 8008570:	f7ff fb34 	bl	8007bdc <_free_r>
 8008574:	230c      	movs	r3, #12
 8008576:	f8ca 3000 	str.w	r3, [sl]
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	f04f 30ff 	mov.w	r0, #4294967295
 8008586:	e7e9      	b.n	800855c <__ssputs_r+0x88>

08008588 <_svfiprintf_r>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	4698      	mov	r8, r3
 800858e:	898b      	ldrh	r3, [r1, #12]
 8008590:	061b      	lsls	r3, r3, #24
 8008592:	b09d      	sub	sp, #116	; 0x74
 8008594:	4607      	mov	r7, r0
 8008596:	460d      	mov	r5, r1
 8008598:	4614      	mov	r4, r2
 800859a:	d50e      	bpl.n	80085ba <_svfiprintf_r+0x32>
 800859c:	690b      	ldr	r3, [r1, #16]
 800859e:	b963      	cbnz	r3, 80085ba <_svfiprintf_r+0x32>
 80085a0:	2140      	movs	r1, #64	; 0x40
 80085a2:	f7ff fb8f 	bl	8007cc4 <_malloc_r>
 80085a6:	6028      	str	r0, [r5, #0]
 80085a8:	6128      	str	r0, [r5, #16]
 80085aa:	b920      	cbnz	r0, 80085b6 <_svfiprintf_r+0x2e>
 80085ac:	230c      	movs	r3, #12
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295
 80085b4:	e0d0      	b.n	8008758 <_svfiprintf_r+0x1d0>
 80085b6:	2340      	movs	r3, #64	; 0x40
 80085b8:	616b      	str	r3, [r5, #20]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	2320      	movs	r3, #32
 80085c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c8:	2330      	movs	r3, #48	; 0x30
 80085ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008770 <_svfiprintf_r+0x1e8>
 80085ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d2:	f04f 0901 	mov.w	r9, #1
 80085d6:	4623      	mov	r3, r4
 80085d8:	469a      	mov	sl, r3
 80085da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085de:	b10a      	cbz	r2, 80085e4 <_svfiprintf_r+0x5c>
 80085e0:	2a25      	cmp	r2, #37	; 0x25
 80085e2:	d1f9      	bne.n	80085d8 <_svfiprintf_r+0x50>
 80085e4:	ebba 0b04 	subs.w	fp, sl, r4
 80085e8:	d00b      	beq.n	8008602 <_svfiprintf_r+0x7a>
 80085ea:	465b      	mov	r3, fp
 80085ec:	4622      	mov	r2, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ff6f 	bl	80084d4 <__ssputs_r>
 80085f6:	3001      	adds	r0, #1
 80085f8:	f000 80a9 	beq.w	800874e <_svfiprintf_r+0x1c6>
 80085fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085fe:	445a      	add	r2, fp
 8008600:	9209      	str	r2, [sp, #36]	; 0x24
 8008602:	f89a 3000 	ldrb.w	r3, [sl]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80a1 	beq.w	800874e <_svfiprintf_r+0x1c6>
 800860c:	2300      	movs	r3, #0
 800860e:	f04f 32ff 	mov.w	r2, #4294967295
 8008612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008616:	f10a 0a01 	add.w	sl, sl, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	9307      	str	r3, [sp, #28]
 800861e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008622:	931a      	str	r3, [sp, #104]	; 0x68
 8008624:	4654      	mov	r4, sl
 8008626:	2205      	movs	r2, #5
 8008628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862c:	4850      	ldr	r0, [pc, #320]	; (8008770 <_svfiprintf_r+0x1e8>)
 800862e:	f7f7 fdcf 	bl	80001d0 <memchr>
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	b9d8      	cbnz	r0, 800866e <_svfiprintf_r+0xe6>
 8008636:	06d0      	lsls	r0, r2, #27
 8008638:	bf44      	itt	mi
 800863a:	2320      	movmi	r3, #32
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008640:	0711      	lsls	r1, r2, #28
 8008642:	bf44      	itt	mi
 8008644:	232b      	movmi	r3, #43	; 0x2b
 8008646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800864a:	f89a 3000 	ldrb.w	r3, [sl]
 800864e:	2b2a      	cmp	r3, #42	; 0x2a
 8008650:	d015      	beq.n	800867e <_svfiprintf_r+0xf6>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	4654      	mov	r4, sl
 8008656:	2000      	movs	r0, #0
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	4621      	mov	r1, r4
 800865e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008662:	3b30      	subs	r3, #48	; 0x30
 8008664:	2b09      	cmp	r3, #9
 8008666:	d94d      	bls.n	8008704 <_svfiprintf_r+0x17c>
 8008668:	b1b0      	cbz	r0, 8008698 <_svfiprintf_r+0x110>
 800866a:	9207      	str	r2, [sp, #28]
 800866c:	e014      	b.n	8008698 <_svfiprintf_r+0x110>
 800866e:	eba0 0308 	sub.w	r3, r0, r8
 8008672:	fa09 f303 	lsl.w	r3, r9, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	46a2      	mov	sl, r4
 800867c:	e7d2      	b.n	8008624 <_svfiprintf_r+0x9c>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9103      	str	r1, [sp, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfbb      	ittet	lt
 800868a:	425b      	neglt	r3, r3
 800868c:	f042 0202 	orrlt.w	r2, r2, #2
 8008690:	9307      	strge	r3, [sp, #28]
 8008692:	9307      	strlt	r3, [sp, #28]
 8008694:	bfb8      	it	lt
 8008696:	9204      	strlt	r2, [sp, #16]
 8008698:	7823      	ldrb	r3, [r4, #0]
 800869a:	2b2e      	cmp	r3, #46	; 0x2e
 800869c:	d10c      	bne.n	80086b8 <_svfiprintf_r+0x130>
 800869e:	7863      	ldrb	r3, [r4, #1]
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	d134      	bne.n	800870e <_svfiprintf_r+0x186>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	9203      	str	r2, [sp, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bfb8      	it	lt
 80086b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b4:	3402      	adds	r4, #2
 80086b6:	9305      	str	r3, [sp, #20]
 80086b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008780 <_svfiprintf_r+0x1f8>
 80086bc:	7821      	ldrb	r1, [r4, #0]
 80086be:	2203      	movs	r2, #3
 80086c0:	4650      	mov	r0, sl
 80086c2:	f7f7 fd85 	bl	80001d0 <memchr>
 80086c6:	b138      	cbz	r0, 80086d8 <_svfiprintf_r+0x150>
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	eba0 000a 	sub.w	r0, r0, sl
 80086ce:	2240      	movs	r2, #64	; 0x40
 80086d0:	4082      	lsls	r2, r0
 80086d2:	4313      	orrs	r3, r2
 80086d4:	3401      	adds	r4, #1
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086dc:	4825      	ldr	r0, [pc, #148]	; (8008774 <_svfiprintf_r+0x1ec>)
 80086de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e2:	2206      	movs	r2, #6
 80086e4:	f7f7 fd74 	bl	80001d0 <memchr>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d038      	beq.n	800875e <_svfiprintf_r+0x1d6>
 80086ec:	4b22      	ldr	r3, [pc, #136]	; (8008778 <_svfiprintf_r+0x1f0>)
 80086ee:	bb1b      	cbnz	r3, 8008738 <_svfiprintf_r+0x1b0>
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	3307      	adds	r3, #7
 80086f4:	f023 0307 	bic.w	r3, r3, #7
 80086f8:	3308      	adds	r3, #8
 80086fa:	9303      	str	r3, [sp, #12]
 80086fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fe:	4433      	add	r3, r6
 8008700:	9309      	str	r3, [sp, #36]	; 0x24
 8008702:	e768      	b.n	80085d6 <_svfiprintf_r+0x4e>
 8008704:	fb0c 3202 	mla	r2, ip, r2, r3
 8008708:	460c      	mov	r4, r1
 800870a:	2001      	movs	r0, #1
 800870c:	e7a6      	b.n	800865c <_svfiprintf_r+0xd4>
 800870e:	2300      	movs	r3, #0
 8008710:	3401      	adds	r4, #1
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	4619      	mov	r1, r3
 8008716:	f04f 0c0a 	mov.w	ip, #10
 800871a:	4620      	mov	r0, r4
 800871c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008720:	3a30      	subs	r2, #48	; 0x30
 8008722:	2a09      	cmp	r2, #9
 8008724:	d903      	bls.n	800872e <_svfiprintf_r+0x1a6>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0c6      	beq.n	80086b8 <_svfiprintf_r+0x130>
 800872a:	9105      	str	r1, [sp, #20]
 800872c:	e7c4      	b.n	80086b8 <_svfiprintf_r+0x130>
 800872e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008732:	4604      	mov	r4, r0
 8008734:	2301      	movs	r3, #1
 8008736:	e7f0      	b.n	800871a <_svfiprintf_r+0x192>
 8008738:	ab03      	add	r3, sp, #12
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	462a      	mov	r2, r5
 800873e:	4b0f      	ldr	r3, [pc, #60]	; (800877c <_svfiprintf_r+0x1f4>)
 8008740:	a904      	add	r1, sp, #16
 8008742:	4638      	mov	r0, r7
 8008744:	f7fd fe56 	bl	80063f4 <_printf_float>
 8008748:	1c42      	adds	r2, r0, #1
 800874a:	4606      	mov	r6, r0
 800874c:	d1d6      	bne.n	80086fc <_svfiprintf_r+0x174>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	065b      	lsls	r3, r3, #25
 8008752:	f53f af2d 	bmi.w	80085b0 <_svfiprintf_r+0x28>
 8008756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008758:	b01d      	add	sp, #116	; 0x74
 800875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <_svfiprintf_r+0x1f4>)
 8008766:	a904      	add	r1, sp, #16
 8008768:	4638      	mov	r0, r7
 800876a:	f7fe f8e7 	bl	800693c <_printf_i>
 800876e:	e7eb      	b.n	8008748 <_svfiprintf_r+0x1c0>
 8008770:	080095c4 	.word	0x080095c4
 8008774:	080095ce 	.word	0x080095ce
 8008778:	080063f5 	.word	0x080063f5
 800877c:	080084d5 	.word	0x080084d5
 8008780:	080095ca 	.word	0x080095ca

08008784 <__sflush_r>:
 8008784:	898a      	ldrh	r2, [r1, #12]
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	4605      	mov	r5, r0
 800878c:	0710      	lsls	r0, r2, #28
 800878e:	460c      	mov	r4, r1
 8008790:	d458      	bmi.n	8008844 <__sflush_r+0xc0>
 8008792:	684b      	ldr	r3, [r1, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dc05      	bgt.n	80087a4 <__sflush_r+0x20>
 8008798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	dc02      	bgt.n	80087a4 <__sflush_r+0x20>
 800879e:	2000      	movs	r0, #0
 80087a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	d0f9      	beq.n	800879e <__sflush_r+0x1a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087b0:	682f      	ldr	r7, [r5, #0]
 80087b2:	6a21      	ldr	r1, [r4, #32]
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	d032      	beq.n	800881e <__sflush_r+0x9a>
 80087b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	075a      	lsls	r2, r3, #29
 80087be:	d505      	bpl.n	80087cc <__sflush_r+0x48>
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	1ac0      	subs	r0, r0, r3
 80087c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087c6:	b10b      	cbz	r3, 80087cc <__sflush_r+0x48>
 80087c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087ca:	1ac0      	subs	r0, r0, r3
 80087cc:	2300      	movs	r3, #0
 80087ce:	4602      	mov	r2, r0
 80087d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d2:	6a21      	ldr	r1, [r4, #32]
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b0      	blx	r6
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	d106      	bne.n	80087ec <__sflush_r+0x68>
 80087de:	6829      	ldr	r1, [r5, #0]
 80087e0:	291d      	cmp	r1, #29
 80087e2:	d82b      	bhi.n	800883c <__sflush_r+0xb8>
 80087e4:	4a29      	ldr	r2, [pc, #164]	; (800888c <__sflush_r+0x108>)
 80087e6:	410a      	asrs	r2, r1
 80087e8:	07d6      	lsls	r6, r2, #31
 80087ea:	d427      	bmi.n	800883c <__sflush_r+0xb8>
 80087ec:	2200      	movs	r2, #0
 80087ee:	6062      	str	r2, [r4, #4]
 80087f0:	04d9      	lsls	r1, r3, #19
 80087f2:	6922      	ldr	r2, [r4, #16]
 80087f4:	6022      	str	r2, [r4, #0]
 80087f6:	d504      	bpl.n	8008802 <__sflush_r+0x7e>
 80087f8:	1c42      	adds	r2, r0, #1
 80087fa:	d101      	bne.n	8008800 <__sflush_r+0x7c>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b903      	cbnz	r3, 8008802 <__sflush_r+0x7e>
 8008800:	6560      	str	r0, [r4, #84]	; 0x54
 8008802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008804:	602f      	str	r7, [r5, #0]
 8008806:	2900      	cmp	r1, #0
 8008808:	d0c9      	beq.n	800879e <__sflush_r+0x1a>
 800880a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800880e:	4299      	cmp	r1, r3
 8008810:	d002      	beq.n	8008818 <__sflush_r+0x94>
 8008812:	4628      	mov	r0, r5
 8008814:	f7ff f9e2 	bl	8007bdc <_free_r>
 8008818:	2000      	movs	r0, #0
 800881a:	6360      	str	r0, [r4, #52]	; 0x34
 800881c:	e7c0      	b.n	80087a0 <__sflush_r+0x1c>
 800881e:	2301      	movs	r3, #1
 8008820:	4628      	mov	r0, r5
 8008822:	47b0      	blx	r6
 8008824:	1c41      	adds	r1, r0, #1
 8008826:	d1c8      	bne.n	80087ba <__sflush_r+0x36>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0c5      	beq.n	80087ba <__sflush_r+0x36>
 800882e:	2b1d      	cmp	r3, #29
 8008830:	d001      	beq.n	8008836 <__sflush_r+0xb2>
 8008832:	2b16      	cmp	r3, #22
 8008834:	d101      	bne.n	800883a <__sflush_r+0xb6>
 8008836:	602f      	str	r7, [r5, #0]
 8008838:	e7b1      	b.n	800879e <__sflush_r+0x1a>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	e7ad      	b.n	80087a0 <__sflush_r+0x1c>
 8008844:	690f      	ldr	r7, [r1, #16]
 8008846:	2f00      	cmp	r7, #0
 8008848:	d0a9      	beq.n	800879e <__sflush_r+0x1a>
 800884a:	0793      	lsls	r3, r2, #30
 800884c:	680e      	ldr	r6, [r1, #0]
 800884e:	bf08      	it	eq
 8008850:	694b      	ldreq	r3, [r1, #20]
 8008852:	600f      	str	r7, [r1, #0]
 8008854:	bf18      	it	ne
 8008856:	2300      	movne	r3, #0
 8008858:	eba6 0807 	sub.w	r8, r6, r7
 800885c:	608b      	str	r3, [r1, #8]
 800885e:	f1b8 0f00 	cmp.w	r8, #0
 8008862:	dd9c      	ble.n	800879e <__sflush_r+0x1a>
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008868:	4643      	mov	r3, r8
 800886a:	463a      	mov	r2, r7
 800886c:	4628      	mov	r0, r5
 800886e:	47b0      	blx	r6
 8008870:	2800      	cmp	r0, #0
 8008872:	dc06      	bgt.n	8008882 <__sflush_r+0xfe>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	e78e      	b.n	80087a0 <__sflush_r+0x1c>
 8008882:	4407      	add	r7, r0
 8008884:	eba8 0800 	sub.w	r8, r8, r0
 8008888:	e7e9      	b.n	800885e <__sflush_r+0xda>
 800888a:	bf00      	nop
 800888c:	dfbffffe 	.word	0xdfbffffe

08008890 <_fflush_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	690b      	ldr	r3, [r1, #16]
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	b913      	cbnz	r3, 80088a0 <_fflush_r+0x10>
 800889a:	2500      	movs	r5, #0
 800889c:	4628      	mov	r0, r5
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	b118      	cbz	r0, 80088aa <_fflush_r+0x1a>
 80088a2:	6a03      	ldr	r3, [r0, #32]
 80088a4:	b90b      	cbnz	r3, 80088aa <_fflush_r+0x1a>
 80088a6:	f7fe f9f7 	bl	8006c98 <__sinit>
 80088aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f3      	beq.n	800889a <_fflush_r+0xa>
 80088b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088b4:	07d0      	lsls	r0, r2, #31
 80088b6:	d404      	bmi.n	80088c2 <_fflush_r+0x32>
 80088b8:	0599      	lsls	r1, r3, #22
 80088ba:	d402      	bmi.n	80088c2 <_fflush_r+0x32>
 80088bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088be:	f7fe fb02 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 80088c2:	4628      	mov	r0, r5
 80088c4:	4621      	mov	r1, r4
 80088c6:	f7ff ff5d 	bl	8008784 <__sflush_r>
 80088ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088cc:	07da      	lsls	r2, r3, #31
 80088ce:	4605      	mov	r5, r0
 80088d0:	d4e4      	bmi.n	800889c <_fflush_r+0xc>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	059b      	lsls	r3, r3, #22
 80088d6:	d4e1      	bmi.n	800889c <_fflush_r+0xc>
 80088d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088da:	f7fe faf5 	bl	8006ec8 <__retarget_lock_release_recursive>
 80088de:	e7dd      	b.n	800889c <_fflush_r+0xc>

080088e0 <memmove>:
 80088e0:	4288      	cmp	r0, r1
 80088e2:	b510      	push	{r4, lr}
 80088e4:	eb01 0402 	add.w	r4, r1, r2
 80088e8:	d902      	bls.n	80088f0 <memmove+0x10>
 80088ea:	4284      	cmp	r4, r0
 80088ec:	4623      	mov	r3, r4
 80088ee:	d807      	bhi.n	8008900 <memmove+0x20>
 80088f0:	1e43      	subs	r3, r0, #1
 80088f2:	42a1      	cmp	r1, r4
 80088f4:	d008      	beq.n	8008908 <memmove+0x28>
 80088f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088fe:	e7f8      	b.n	80088f2 <memmove+0x12>
 8008900:	4402      	add	r2, r0
 8008902:	4601      	mov	r1, r0
 8008904:	428a      	cmp	r2, r1
 8008906:	d100      	bne.n	800890a <memmove+0x2a>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800890e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008912:	e7f7      	b.n	8008904 <memmove+0x24>

08008914 <_sbrk_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d06      	ldr	r5, [pc, #24]	; (8008930 <_sbrk_r+0x1c>)
 8008918:	2300      	movs	r3, #0
 800891a:	4604      	mov	r4, r0
 800891c:	4608      	mov	r0, r1
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	f7f9 f860 	bl	80019e4 <_sbrk>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_sbrk_r+0x1a>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_sbrk_r+0x1a>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20000690 	.word	0x20000690

08008934 <__assert_func>:
 8008934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008936:	4614      	mov	r4, r2
 8008938:	461a      	mov	r2, r3
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <__assert_func+0x2c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4605      	mov	r5, r0
 8008940:	68d8      	ldr	r0, [r3, #12]
 8008942:	b14c      	cbz	r4, 8008958 <__assert_func+0x24>
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <__assert_func+0x30>)
 8008946:	9100      	str	r1, [sp, #0]
 8008948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800894c:	4906      	ldr	r1, [pc, #24]	; (8008968 <__assert_func+0x34>)
 800894e:	462b      	mov	r3, r5
 8008950:	f000 f872 	bl	8008a38 <fiprintf>
 8008954:	f000 f882 	bl	8008a5c <abort>
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <__assert_func+0x38>)
 800895a:	461c      	mov	r4, r3
 800895c:	e7f3      	b.n	8008946 <__assert_func+0x12>
 800895e:	bf00      	nop
 8008960:	20000078 	.word	0x20000078
 8008964:	080095df 	.word	0x080095df
 8008968:	080095ec 	.word	0x080095ec
 800896c:	0800961a 	.word	0x0800961a

08008970 <_calloc_r>:
 8008970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008972:	fba1 2402 	umull	r2, r4, r1, r2
 8008976:	b94c      	cbnz	r4, 800898c <_calloc_r+0x1c>
 8008978:	4611      	mov	r1, r2
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	f7ff f9a2 	bl	8007cc4 <_malloc_r>
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	4605      	mov	r5, r0
 8008984:	b930      	cbnz	r0, 8008994 <_calloc_r+0x24>
 8008986:	4628      	mov	r0, r5
 8008988:	b003      	add	sp, #12
 800898a:	bd30      	pop	{r4, r5, pc}
 800898c:	220c      	movs	r2, #12
 800898e:	6002      	str	r2, [r0, #0]
 8008990:	2500      	movs	r5, #0
 8008992:	e7f8      	b.n	8008986 <_calloc_r+0x16>
 8008994:	4621      	mov	r1, r4
 8008996:	f7fe fa18 	bl	8006dca <memset>
 800899a:	e7f4      	b.n	8008986 <_calloc_r+0x16>

0800899c <__ascii_mbtowc>:
 800899c:	b082      	sub	sp, #8
 800899e:	b901      	cbnz	r1, 80089a2 <__ascii_mbtowc+0x6>
 80089a0:	a901      	add	r1, sp, #4
 80089a2:	b142      	cbz	r2, 80089b6 <__ascii_mbtowc+0x1a>
 80089a4:	b14b      	cbz	r3, 80089ba <__ascii_mbtowc+0x1e>
 80089a6:	7813      	ldrb	r3, [r2, #0]
 80089a8:	600b      	str	r3, [r1, #0]
 80089aa:	7812      	ldrb	r2, [r2, #0]
 80089ac:	1e10      	subs	r0, r2, #0
 80089ae:	bf18      	it	ne
 80089b0:	2001      	movne	r0, #1
 80089b2:	b002      	add	sp, #8
 80089b4:	4770      	bx	lr
 80089b6:	4610      	mov	r0, r2
 80089b8:	e7fb      	b.n	80089b2 <__ascii_mbtowc+0x16>
 80089ba:	f06f 0001 	mvn.w	r0, #1
 80089be:	e7f8      	b.n	80089b2 <__ascii_mbtowc+0x16>

080089c0 <_realloc_r>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	4680      	mov	r8, r0
 80089c6:	4614      	mov	r4, r2
 80089c8:	460e      	mov	r6, r1
 80089ca:	b921      	cbnz	r1, 80089d6 <_realloc_r+0x16>
 80089cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	4611      	mov	r1, r2
 80089d2:	f7ff b977 	b.w	8007cc4 <_malloc_r>
 80089d6:	b92a      	cbnz	r2, 80089e4 <_realloc_r+0x24>
 80089d8:	f7ff f900 	bl	8007bdc <_free_r>
 80089dc:	4625      	mov	r5, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	f000 f841 	bl	8008a6a <_malloc_usable_size_r>
 80089e8:	4284      	cmp	r4, r0
 80089ea:	4607      	mov	r7, r0
 80089ec:	d802      	bhi.n	80089f4 <_realloc_r+0x34>
 80089ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089f2:	d812      	bhi.n	8008a1a <_realloc_r+0x5a>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4640      	mov	r0, r8
 80089f8:	f7ff f964 	bl	8007cc4 <_malloc_r>
 80089fc:	4605      	mov	r5, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0ed      	beq.n	80089de <_realloc_r+0x1e>
 8008a02:	42bc      	cmp	r4, r7
 8008a04:	4622      	mov	r2, r4
 8008a06:	4631      	mov	r1, r6
 8008a08:	bf28      	it	cs
 8008a0a:	463a      	movcs	r2, r7
 8008a0c:	f7fe fa5d 	bl	8006eca <memcpy>
 8008a10:	4631      	mov	r1, r6
 8008a12:	4640      	mov	r0, r8
 8008a14:	f7ff f8e2 	bl	8007bdc <_free_r>
 8008a18:	e7e1      	b.n	80089de <_realloc_r+0x1e>
 8008a1a:	4635      	mov	r5, r6
 8008a1c:	e7df      	b.n	80089de <_realloc_r+0x1e>

08008a1e <__ascii_wctomb>:
 8008a1e:	b149      	cbz	r1, 8008a34 <__ascii_wctomb+0x16>
 8008a20:	2aff      	cmp	r2, #255	; 0xff
 8008a22:	bf85      	ittet	hi
 8008a24:	238a      	movhi	r3, #138	; 0x8a
 8008a26:	6003      	strhi	r3, [r0, #0]
 8008a28:	700a      	strbls	r2, [r1, #0]
 8008a2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a2e:	bf98      	it	ls
 8008a30:	2001      	movls	r0, #1
 8008a32:	4770      	bx	lr
 8008a34:	4608      	mov	r0, r1
 8008a36:	4770      	bx	lr

08008a38 <fiprintf>:
 8008a38:	b40e      	push	{r1, r2, r3}
 8008a3a:	b503      	push	{r0, r1, lr}
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	4805      	ldr	r0, [pc, #20]	; (8008a58 <fiprintf+0x20>)
 8008a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	f000 f83f 	bl	8008acc <_vfiprintf_r>
 8008a4e:	b002      	add	sp, #8
 8008a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a54:	b003      	add	sp, #12
 8008a56:	4770      	bx	lr
 8008a58:	20000078 	.word	0x20000078

08008a5c <abort>:
 8008a5c:	b508      	push	{r3, lr}
 8008a5e:	2006      	movs	r0, #6
 8008a60:	f000 fa0c 	bl	8008e7c <raise>
 8008a64:	2001      	movs	r0, #1
 8008a66:	f7f8 ff45 	bl	80018f4 <_exit>

08008a6a <_malloc_usable_size_r>:
 8008a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6e:	1f18      	subs	r0, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfbc      	itt	lt
 8008a74:	580b      	ldrlt	r3, [r1, r0]
 8008a76:	18c0      	addlt	r0, r0, r3
 8008a78:	4770      	bx	lr

08008a7a <__sfputc_r>:
 8008a7a:	6893      	ldr	r3, [r2, #8]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	b410      	push	{r4}
 8008a82:	6093      	str	r3, [r2, #8]
 8008a84:	da08      	bge.n	8008a98 <__sfputc_r+0x1e>
 8008a86:	6994      	ldr	r4, [r2, #24]
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	db01      	blt.n	8008a90 <__sfputc_r+0x16>
 8008a8c:	290a      	cmp	r1, #10
 8008a8e:	d103      	bne.n	8008a98 <__sfputc_r+0x1e>
 8008a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a94:	f000 b934 	b.w	8008d00 <__swbuf_r>
 8008a98:	6813      	ldr	r3, [r2, #0]
 8008a9a:	1c58      	adds	r0, r3, #1
 8008a9c:	6010      	str	r0, [r2, #0]
 8008a9e:	7019      	strb	r1, [r3, #0]
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <__sfputs_r>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	4614      	mov	r4, r2
 8008ab0:	18d5      	adds	r5, r2, r3
 8008ab2:	42ac      	cmp	r4, r5
 8008ab4:	d101      	bne.n	8008aba <__sfputs_r+0x12>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e007      	b.n	8008aca <__sfputs_r+0x22>
 8008aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abe:	463a      	mov	r2, r7
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff ffda 	bl	8008a7a <__sfputc_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d1f3      	bne.n	8008ab2 <__sfputs_r+0xa>
 8008aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008acc <_vfiprintf_r>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	b09d      	sub	sp, #116	; 0x74
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	4698      	mov	r8, r3
 8008ad8:	4606      	mov	r6, r0
 8008ada:	b118      	cbz	r0, 8008ae4 <_vfiprintf_r+0x18>
 8008adc:	6a03      	ldr	r3, [r0, #32]
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x18>
 8008ae0:	f7fe f8da 	bl	8006c98 <__sinit>
 8008ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae6:	07d9      	lsls	r1, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	059a      	lsls	r2, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af2:	f7fe f9e8 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 8008af6:	89ab      	ldrh	r3, [r5, #12]
 8008af8:	071b      	lsls	r3, r3, #28
 8008afa:	d501      	bpl.n	8008b00 <_vfiprintf_r+0x34>
 8008afc:	692b      	ldr	r3, [r5, #16]
 8008afe:	b99b      	cbnz	r3, 8008b28 <_vfiprintf_r+0x5c>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f93a 	bl	8008d7c <__swsetup_r>
 8008b08:	b170      	cbz	r0, 8008b28 <_vfiprintf_r+0x5c>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0c:	07dc      	lsls	r4, r3, #31
 8008b0e:	d504      	bpl.n	8008b1a <_vfiprintf_r+0x4e>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	b01d      	add	sp, #116	; 0x74
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	0598      	lsls	r0, r3, #22
 8008b1e:	d4f7      	bmi.n	8008b10 <_vfiprintf_r+0x44>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f7fe f9d1 	bl	8006ec8 <__retarget_lock_release_recursive>
 8008b26:	e7f3      	b.n	8008b10 <_vfiprintf_r+0x44>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008cec <_vfiprintf_r+0x220>
 8008b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b40:	f04f 0901 	mov.w	r9, #1
 8008b44:	4623      	mov	r3, r4
 8008b46:	469a      	mov	sl, r3
 8008b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_vfiprintf_r+0x86>
 8008b4e:	2a25      	cmp	r2, #37	; 0x25
 8008b50:	d1f9      	bne.n	8008b46 <_vfiprintf_r+0x7a>
 8008b52:	ebba 0b04 	subs.w	fp, sl, r4
 8008b56:	d00b      	beq.n	8008b70 <_vfiprintf_r+0xa4>
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ffa2 	bl	8008aa8 <__sfputs_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f000 80a9 	beq.w	8008cbc <_vfiprintf_r+0x1f0>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6c:	445a      	add	r2, fp
 8008b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80a1 	beq.w	8008cbc <_vfiprintf_r+0x1f0>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b90:	931a      	str	r3, [sp, #104]	; 0x68
 8008b92:	4654      	mov	r4, sl
 8008b94:	2205      	movs	r2, #5
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4854      	ldr	r0, [pc, #336]	; (8008cec <_vfiprintf_r+0x220>)
 8008b9c:	f7f7 fb18 	bl	80001d0 <memchr>
 8008ba0:	9a04      	ldr	r2, [sp, #16]
 8008ba2:	b9d8      	cbnz	r0, 8008bdc <_vfiprintf_r+0x110>
 8008ba4:	06d1      	lsls	r1, r2, #27
 8008ba6:	bf44      	itt	mi
 8008ba8:	2320      	movmi	r3, #32
 8008baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bae:	0713      	lsls	r3, r2, #28
 8008bb0:	bf44      	itt	mi
 8008bb2:	232b      	movmi	r3, #43	; 0x2b
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbe:	d015      	beq.n	8008bec <_vfiprintf_r+0x120>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	4654      	mov	r4, sl
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f04f 0c0a 	mov.w	ip, #10
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd0:	3b30      	subs	r3, #48	; 0x30
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d94d      	bls.n	8008c72 <_vfiprintf_r+0x1a6>
 8008bd6:	b1b0      	cbz	r0, 8008c06 <_vfiprintf_r+0x13a>
 8008bd8:	9207      	str	r2, [sp, #28]
 8008bda:	e014      	b.n	8008c06 <_vfiprintf_r+0x13a>
 8008bdc:	eba0 0308 	sub.w	r3, r0, r8
 8008be0:	fa09 f303 	lsl.w	r3, r9, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	46a2      	mov	sl, r4
 8008bea:	e7d2      	b.n	8008b92 <_vfiprintf_r+0xc6>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d19      	adds	r1, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9103      	str	r1, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	425b      	neglt	r3, r3
 8008bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfe:	9307      	strge	r3, [sp, #28]
 8008c00:	9307      	strlt	r3, [sp, #28]
 8008c02:	bfb8      	it	lt
 8008c04:	9204      	strlt	r2, [sp, #16]
 8008c06:	7823      	ldrb	r3, [r4, #0]
 8008c08:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0a:	d10c      	bne.n	8008c26 <_vfiprintf_r+0x15a>
 8008c0c:	7863      	ldrb	r3, [r4, #1]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d134      	bne.n	8008c7c <_vfiprintf_r+0x1b0>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c22:	3402      	adds	r4, #2
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cfc <_vfiprintf_r+0x230>
 8008c2a:	7821      	ldrb	r1, [r4, #0]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f7f7 face 	bl	80001d0 <memchr>
 8008c34:	b138      	cbz	r0, 8008c46 <_vfiprintf_r+0x17a>
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	eba0 000a 	sub.w	r0, r0, sl
 8008c3c:	2240      	movs	r2, #64	; 0x40
 8008c3e:	4082      	lsls	r2, r0
 8008c40:	4313      	orrs	r3, r2
 8008c42:	3401      	adds	r4, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4829      	ldr	r0, [pc, #164]	; (8008cf0 <_vfiprintf_r+0x224>)
 8008c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c50:	2206      	movs	r2, #6
 8008c52:	f7f7 fabd 	bl	80001d0 <memchr>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d03f      	beq.n	8008cda <_vfiprintf_r+0x20e>
 8008c5a:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <_vfiprintf_r+0x228>)
 8008c5c:	bb1b      	cbnz	r3, 8008ca6 <_vfiprintf_r+0x1da>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	3308      	adds	r3, #8
 8008c68:	9303      	str	r3, [sp, #12]
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	443b      	add	r3, r7
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	e768      	b.n	8008b44 <_vfiprintf_r+0x78>
 8008c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c76:	460c      	mov	r4, r1
 8008c78:	2001      	movs	r0, #1
 8008c7a:	e7a6      	b.n	8008bca <_vfiprintf_r+0xfe>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4619      	mov	r1, r3
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8e:	3a30      	subs	r2, #48	; 0x30
 8008c90:	2a09      	cmp	r2, #9
 8008c92:	d903      	bls.n	8008c9c <_vfiprintf_r+0x1d0>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0c6      	beq.n	8008c26 <_vfiprintf_r+0x15a>
 8008c98:	9105      	str	r1, [sp, #20]
 8008c9a:	e7c4      	b.n	8008c26 <_vfiprintf_r+0x15a>
 8008c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7f0      	b.n	8008c88 <_vfiprintf_r+0x1bc>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <_vfiprintf_r+0x22c>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7fd fb9f 	bl	80063f4 <_printf_float>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	1c78      	adds	r0, r7, #1
 8008cba:	d1d6      	bne.n	8008c6a <_vfiprintf_r+0x19e>
 8008cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cbe:	07d9      	lsls	r1, r3, #31
 8008cc0:	d405      	bmi.n	8008cce <_vfiprintf_r+0x202>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d402      	bmi.n	8008cce <_vfiprintf_r+0x202>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cca:	f7fe f8fd 	bl	8006ec8 <__retarget_lock_release_recursive>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	065b      	lsls	r3, r3, #25
 8008cd2:	f53f af1d 	bmi.w	8008b10 <_vfiprintf_r+0x44>
 8008cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd8:	e71c      	b.n	8008b14 <_vfiprintf_r+0x48>
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <_vfiprintf_r+0x22c>)
 8008ce2:	a904      	add	r1, sp, #16
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7fd fe29 	bl	800693c <_printf_i>
 8008cea:	e7e4      	b.n	8008cb6 <_vfiprintf_r+0x1ea>
 8008cec:	080095c4 	.word	0x080095c4
 8008cf0:	080095ce 	.word	0x080095ce
 8008cf4:	080063f5 	.word	0x080063f5
 8008cf8:	08008aa9 	.word	0x08008aa9
 8008cfc:	080095ca 	.word	0x080095ca

08008d00 <__swbuf_r>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	460e      	mov	r6, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	4605      	mov	r5, r0
 8008d08:	b118      	cbz	r0, 8008d12 <__swbuf_r+0x12>
 8008d0a:	6a03      	ldr	r3, [r0, #32]
 8008d0c:	b90b      	cbnz	r3, 8008d12 <__swbuf_r+0x12>
 8008d0e:	f7fd ffc3 	bl	8006c98 <__sinit>
 8008d12:	69a3      	ldr	r3, [r4, #24]
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	071a      	lsls	r2, r3, #28
 8008d1a:	d525      	bpl.n	8008d68 <__swbuf_r+0x68>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	b31b      	cbz	r3, 8008d68 <__swbuf_r+0x68>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	6922      	ldr	r2, [r4, #16]
 8008d24:	1a98      	subs	r0, r3, r2
 8008d26:	6963      	ldr	r3, [r4, #20]
 8008d28:	b2f6      	uxtb	r6, r6
 8008d2a:	4283      	cmp	r3, r0
 8008d2c:	4637      	mov	r7, r6
 8008d2e:	dc04      	bgt.n	8008d3a <__swbuf_r+0x3a>
 8008d30:	4621      	mov	r1, r4
 8008d32:	4628      	mov	r0, r5
 8008d34:	f7ff fdac 	bl	8008890 <_fflush_r>
 8008d38:	b9e0      	cbnz	r0, 8008d74 <__swbuf_r+0x74>
 8008d3a:	68a3      	ldr	r3, [r4, #8]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	60a3      	str	r3, [r4, #8]
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	701e      	strb	r6, [r3, #0]
 8008d48:	6962      	ldr	r2, [r4, #20]
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d004      	beq.n	8008d5a <__swbuf_r+0x5a>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	07db      	lsls	r3, r3, #31
 8008d54:	d506      	bpl.n	8008d64 <__swbuf_r+0x64>
 8008d56:	2e0a      	cmp	r6, #10
 8008d58:	d104      	bne.n	8008d64 <__swbuf_r+0x64>
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f7ff fd97 	bl	8008890 <_fflush_r>
 8008d62:	b938      	cbnz	r0, 8008d74 <__swbuf_r+0x74>
 8008d64:	4638      	mov	r0, r7
 8008d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f806 	bl	8008d7c <__swsetup_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0d5      	beq.n	8008d20 <__swbuf_r+0x20>
 8008d74:	f04f 37ff 	mov.w	r7, #4294967295
 8008d78:	e7f4      	b.n	8008d64 <__swbuf_r+0x64>
	...

08008d7c <__swsetup_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4b2a      	ldr	r3, [pc, #168]	; (8008e28 <__swsetup_r+0xac>)
 8008d80:	4605      	mov	r5, r0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	460c      	mov	r4, r1
 8008d86:	b118      	cbz	r0, 8008d90 <__swsetup_r+0x14>
 8008d88:	6a03      	ldr	r3, [r0, #32]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <__swsetup_r+0x14>
 8008d8c:	f7fd ff84 	bl	8006c98 <__sinit>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d96:	0718      	lsls	r0, r3, #28
 8008d98:	d422      	bmi.n	8008de0 <__swsetup_r+0x64>
 8008d9a:	06d9      	lsls	r1, r3, #27
 8008d9c:	d407      	bmi.n	8008dae <__swsetup_r+0x32>
 8008d9e:	2309      	movs	r3, #9
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	e034      	b.n	8008e18 <__swsetup_r+0x9c>
 8008dae:	0758      	lsls	r0, r3, #29
 8008db0:	d512      	bpl.n	8008dd8 <__swsetup_r+0x5c>
 8008db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db4:	b141      	cbz	r1, 8008dc8 <__swsetup_r+0x4c>
 8008db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	d002      	beq.n	8008dc4 <__swsetup_r+0x48>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7fe ff0c 	bl	8007bdc <_free_r>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	6063      	str	r3, [r4, #4]
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f043 0308 	orr.w	r3, r3, #8
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	b94b      	cbnz	r3, 8008df8 <__swsetup_r+0x7c>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	d003      	beq.n	8008df8 <__swsetup_r+0x7c>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 f884 	bl	8008f00 <__smakebuf_r>
 8008df8:	89a0      	ldrh	r0, [r4, #12]
 8008dfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dfe:	f010 0301 	ands.w	r3, r0, #1
 8008e02:	d00a      	beq.n	8008e1a <__swsetup_r+0x9e>
 8008e04:	2300      	movs	r3, #0
 8008e06:	60a3      	str	r3, [r4, #8]
 8008e08:	6963      	ldr	r3, [r4, #20]
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	61a3      	str	r3, [r4, #24]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	b943      	cbnz	r3, 8008e24 <__swsetup_r+0xa8>
 8008e12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e16:	d1c4      	bne.n	8008da2 <__swsetup_r+0x26>
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	0781      	lsls	r1, r0, #30
 8008e1c:	bf58      	it	pl
 8008e1e:	6963      	ldrpl	r3, [r4, #20]
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	e7f4      	b.n	8008e0e <__swsetup_r+0x92>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7f7      	b.n	8008e18 <__swsetup_r+0x9c>
 8008e28:	20000078 	.word	0x20000078

08008e2c <_raise_r>:
 8008e2c:	291f      	cmp	r1, #31
 8008e2e:	b538      	push	{r3, r4, r5, lr}
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	d904      	bls.n	8008e40 <_raise_r+0x14>
 8008e36:	2316      	movs	r3, #22
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e42:	b112      	cbz	r2, 8008e4a <_raise_r+0x1e>
 8008e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e48:	b94b      	cbnz	r3, 8008e5e <_raise_r+0x32>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f830 	bl	8008eb0 <_getpid_r>
 8008e50:	462a      	mov	r2, r5
 8008e52:	4601      	mov	r1, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e5a:	f000 b817 	b.w	8008e8c <_kill_r>
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d00a      	beq.n	8008e78 <_raise_r+0x4c>
 8008e62:	1c59      	adds	r1, r3, #1
 8008e64:	d103      	bne.n	8008e6e <_raise_r+0x42>
 8008e66:	2316      	movs	r3, #22
 8008e68:	6003      	str	r3, [r0, #0]
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	e7e7      	b.n	8008e3e <_raise_r+0x12>
 8008e6e:	2400      	movs	r4, #0
 8008e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e74:	4628      	mov	r0, r5
 8008e76:	4798      	blx	r3
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7e0      	b.n	8008e3e <_raise_r+0x12>

08008e7c <raise>:
 8008e7c:	4b02      	ldr	r3, [pc, #8]	; (8008e88 <raise+0xc>)
 8008e7e:	4601      	mov	r1, r0
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	f7ff bfd3 	b.w	8008e2c <_raise_r>
 8008e86:	bf00      	nop
 8008e88:	20000078 	.word	0x20000078

08008e8c <_kill_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_kill_r+0x20>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f7f8 fd1b 	bl	80018d4 <_kill>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d102      	bne.n	8008ea8 <_kill_r+0x1c>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	b103      	cbz	r3, 8008ea8 <_kill_r+0x1c>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000690 	.word	0x20000690

08008eb0 <_getpid_r>:
 8008eb0:	f7f8 bd08 	b.w	80018c4 <_getpid>

08008eb4 <__swhatbuf_r>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	b096      	sub	sp, #88	; 0x58
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	461e      	mov	r6, r3
 8008ec4:	da0d      	bge.n	8008ee2 <__swhatbuf_r+0x2e>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ecc:	f04f 0100 	mov.w	r1, #0
 8008ed0:	bf0c      	ite	eq
 8008ed2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ed6:	2340      	movne	r3, #64	; 0x40
 8008ed8:	2000      	movs	r0, #0
 8008eda:	6031      	str	r1, [r6, #0]
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	b016      	add	sp, #88	; 0x58
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	466a      	mov	r2, sp
 8008ee4:	f000 f848 	bl	8008f78 <_fstat_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dbec      	blt.n	8008ec6 <__swhatbuf_r+0x12>
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ef2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ef6:	4259      	negs	r1, r3
 8008ef8:	4159      	adcs	r1, r3
 8008efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efe:	e7eb      	b.n	8008ed8 <__swhatbuf_r+0x24>

08008f00 <__smakebuf_r>:
 8008f00:	898b      	ldrh	r3, [r1, #12]
 8008f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f04:	079d      	lsls	r5, r3, #30
 8008f06:	4606      	mov	r6, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	d507      	bpl.n	8008f1c <__smakebuf_r+0x1c>
 8008f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	2301      	movs	r3, #1
 8008f16:	6163      	str	r3, [r4, #20]
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	ab01      	add	r3, sp, #4
 8008f1e:	466a      	mov	r2, sp
 8008f20:	f7ff ffc8 	bl	8008eb4 <__swhatbuf_r>
 8008f24:	9900      	ldr	r1, [sp, #0]
 8008f26:	4605      	mov	r5, r0
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7fe fecb 	bl	8007cc4 <_malloc_r>
 8008f2e:	b948      	cbnz	r0, 8008f44 <__smakebuf_r+0x44>
 8008f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d4ef      	bmi.n	8008f18 <__smakebuf_r+0x18>
 8008f38:	f023 0303 	bic.w	r3, r3, #3
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e7e3      	b.n	8008f0c <__smakebuf_r+0xc>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	6020      	str	r0, [r4, #0]
 8008f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	6163      	str	r3, [r4, #20]
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	6120      	str	r0, [r4, #16]
 8008f56:	b15b      	cbz	r3, 8008f70 <__smakebuf_r+0x70>
 8008f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f000 f81d 	bl	8008f9c <_isatty_r>
 8008f62:	b128      	cbz	r0, 8008f70 <__smakebuf_r+0x70>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	431d      	orrs	r5, r3
 8008f74:	81a5      	strh	r5, [r4, #12]
 8008f76:	e7cf      	b.n	8008f18 <__smakebuf_r+0x18>

08008f78 <_fstat_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	; (8008f98 <_fstat_r+0x20>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	f7f8 fd04 	bl	8001992 <_fstat>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d102      	bne.n	8008f94 <_fstat_r+0x1c>
 8008f8e:	682b      	ldr	r3, [r5, #0]
 8008f90:	b103      	cbz	r3, 8008f94 <_fstat_r+0x1c>
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	20000690 	.word	0x20000690

08008f9c <_isatty_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d06      	ldr	r5, [pc, #24]	; (8008fb8 <_isatty_r+0x1c>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7f8 fd03 	bl	80019b2 <_isatty>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_isatty_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_isatty_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000690 	.word	0x20000690

08008fbc <expf>:
 8008fbc:	b508      	push	{r3, lr}
 8008fbe:	ed2d 8b02 	vpush	{d8}
 8008fc2:	eef0 8a40 	vmov.f32	s17, s0
 8008fc6:	f000 f8bf 	bl	8009148 <__ieee754_expf>
 8008fca:	eeb0 8a40 	vmov.f32	s16, s0
 8008fce:	eeb0 0a68 	vmov.f32	s0, s17
 8008fd2:	f000 f829 	bl	8009028 <finitef>
 8008fd6:	b160      	cbz	r0, 8008ff2 <expf+0x36>
 8008fd8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009018 <expf+0x5c>
 8008fdc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe4:	dd0a      	ble.n	8008ffc <expf+0x40>
 8008fe6:	f7fd ff43 	bl	8006e70 <__errno>
 8008fea:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800901c <expf+0x60>
 8008fee:	2322      	movs	r3, #34	; 0x22
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ff6:	ecbd 8b02 	vpop	{d8}
 8008ffa:	bd08      	pop	{r3, pc}
 8008ffc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009020 <expf+0x64>
 8009000:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009008:	d5f3      	bpl.n	8008ff2 <expf+0x36>
 800900a:	f7fd ff31 	bl	8006e70 <__errno>
 800900e:	2322      	movs	r3, #34	; 0x22
 8009010:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009024 <expf+0x68>
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	e7ec      	b.n	8008ff2 <expf+0x36>
 8009018:	42b17217 	.word	0x42b17217
 800901c:	7f800000 	.word	0x7f800000
 8009020:	c2cff1b5 	.word	0xc2cff1b5
 8009024:	00000000 	.word	0x00000000

08009028 <finitef>:
 8009028:	b082      	sub	sp, #8
 800902a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800902e:	9801      	ldr	r0, [sp, #4]
 8009030:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009034:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009038:	bfac      	ite	ge
 800903a:	2000      	movge	r0, #0
 800903c:	2001      	movlt	r0, #1
 800903e:	b002      	add	sp, #8
 8009040:	4770      	bx	lr
 8009042:	0000      	movs	r0, r0
 8009044:	0000      	movs	r0, r0
	...

08009048 <floor>:
 8009048:	ec51 0b10 	vmov	r0, r1, d0
 800904c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009058:	2e13      	cmp	r6, #19
 800905a:	ee10 5a10 	vmov	r5, s0
 800905e:	ee10 8a10 	vmov	r8, s0
 8009062:	460c      	mov	r4, r1
 8009064:	dc31      	bgt.n	80090ca <floor+0x82>
 8009066:	2e00      	cmp	r6, #0
 8009068:	da14      	bge.n	8009094 <floor+0x4c>
 800906a:	a333      	add	r3, pc, #204	; (adr r3, 8009138 <floor+0xf0>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 f90c 	bl	800028c <__adddf3>
 8009074:	2200      	movs	r2, #0
 8009076:	2300      	movs	r3, #0
 8009078:	f7f7 fd4e 	bl	8000b18 <__aeabi_dcmpgt>
 800907c:	b138      	cbz	r0, 800908e <floor+0x46>
 800907e:	2c00      	cmp	r4, #0
 8009080:	da53      	bge.n	800912a <floor+0xe2>
 8009082:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009086:	4325      	orrs	r5, r4
 8009088:	d052      	beq.n	8009130 <floor+0xe8>
 800908a:	4c2d      	ldr	r4, [pc, #180]	; (8009140 <floor+0xf8>)
 800908c:	2500      	movs	r5, #0
 800908e:	4621      	mov	r1, r4
 8009090:	4628      	mov	r0, r5
 8009092:	e024      	b.n	80090de <floor+0x96>
 8009094:	4f2b      	ldr	r7, [pc, #172]	; (8009144 <floor+0xfc>)
 8009096:	4137      	asrs	r7, r6
 8009098:	ea01 0307 	and.w	r3, r1, r7
 800909c:	4303      	orrs	r3, r0
 800909e:	d01e      	beq.n	80090de <floor+0x96>
 80090a0:	a325      	add	r3, pc, #148	; (adr r3, 8009138 <floor+0xf0>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f8f1 	bl	800028c <__adddf3>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	f7f7 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d0eb      	beq.n	800908e <floor+0x46>
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	bfbe      	ittt	lt
 80090ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80090be:	4133      	asrlt	r3, r6
 80090c0:	18e4      	addlt	r4, r4, r3
 80090c2:	ea24 0407 	bic.w	r4, r4, r7
 80090c6:	2500      	movs	r5, #0
 80090c8:	e7e1      	b.n	800908e <floor+0x46>
 80090ca:	2e33      	cmp	r6, #51	; 0x33
 80090cc:	dd0b      	ble.n	80090e6 <floor+0x9e>
 80090ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80090d2:	d104      	bne.n	80090de <floor+0x96>
 80090d4:	ee10 2a10 	vmov	r2, s0
 80090d8:	460b      	mov	r3, r1
 80090da:	f7f7 f8d7 	bl	800028c <__adddf3>
 80090de:	ec41 0b10 	vmov	d0, r0, r1
 80090e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80090ea:	f04f 37ff 	mov.w	r7, #4294967295
 80090ee:	40df      	lsrs	r7, r3
 80090f0:	4238      	tst	r0, r7
 80090f2:	d0f4      	beq.n	80090de <floor+0x96>
 80090f4:	a310      	add	r3, pc, #64	; (adr r3, 8009138 <floor+0xf0>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f8c7 	bl	800028c <__adddf3>
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	f7f7 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d0c1      	beq.n	800908e <floor+0x46>
 800910a:	2c00      	cmp	r4, #0
 800910c:	da0a      	bge.n	8009124 <floor+0xdc>
 800910e:	2e14      	cmp	r6, #20
 8009110:	d101      	bne.n	8009116 <floor+0xce>
 8009112:	3401      	adds	r4, #1
 8009114:	e006      	b.n	8009124 <floor+0xdc>
 8009116:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800911a:	2301      	movs	r3, #1
 800911c:	40b3      	lsls	r3, r6
 800911e:	441d      	add	r5, r3
 8009120:	45a8      	cmp	r8, r5
 8009122:	d8f6      	bhi.n	8009112 <floor+0xca>
 8009124:	ea25 0507 	bic.w	r5, r5, r7
 8009128:	e7b1      	b.n	800908e <floor+0x46>
 800912a:	2500      	movs	r5, #0
 800912c:	462c      	mov	r4, r5
 800912e:	e7ae      	b.n	800908e <floor+0x46>
 8009130:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009134:	e7ab      	b.n	800908e <floor+0x46>
 8009136:	bf00      	nop
 8009138:	8800759c 	.word	0x8800759c
 800913c:	7e37e43c 	.word	0x7e37e43c
 8009140:	bff00000 	.word	0xbff00000
 8009144:	000fffff 	.word	0x000fffff

08009148 <__ieee754_expf>:
 8009148:	ee10 2a10 	vmov	r2, s0
 800914c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009150:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009154:	d902      	bls.n	800915c <__ieee754_expf+0x14>
 8009156:	ee30 0a00 	vadd.f32	s0, s0, s0
 800915a:	4770      	bx	lr
 800915c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009160:	d106      	bne.n	8009170 <__ieee754_expf+0x28>
 8009162:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800929c <__ieee754_expf+0x154>
 8009166:	2900      	cmp	r1, #0
 8009168:	bf18      	it	ne
 800916a:	eeb0 0a67 	vmovne.f32	s0, s15
 800916e:	4770      	bx	lr
 8009170:	484b      	ldr	r0, [pc, #300]	; (80092a0 <__ieee754_expf+0x158>)
 8009172:	4282      	cmp	r2, r0
 8009174:	dd02      	ble.n	800917c <__ieee754_expf+0x34>
 8009176:	2000      	movs	r0, #0
 8009178:	f000 b8d0 	b.w	800931c <__math_oflowf>
 800917c:	2a00      	cmp	r2, #0
 800917e:	da05      	bge.n	800918c <__ieee754_expf+0x44>
 8009180:	4a48      	ldr	r2, [pc, #288]	; (80092a4 <__ieee754_expf+0x15c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d902      	bls.n	800918c <__ieee754_expf+0x44>
 8009186:	2000      	movs	r0, #0
 8009188:	f000 b8c2 	b.w	8009310 <__math_uflowf>
 800918c:	4a46      	ldr	r2, [pc, #280]	; (80092a8 <__ieee754_expf+0x160>)
 800918e:	4293      	cmp	r3, r2
 8009190:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009194:	d952      	bls.n	800923c <__ieee754_expf+0xf4>
 8009196:	4a45      	ldr	r2, [pc, #276]	; (80092ac <__ieee754_expf+0x164>)
 8009198:	4293      	cmp	r3, r2
 800919a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800919e:	d834      	bhi.n	800920a <__ieee754_expf+0xc2>
 80091a0:	4b43      	ldr	r3, [pc, #268]	; (80092b0 <__ieee754_expf+0x168>)
 80091a2:	4413      	add	r3, r2
 80091a4:	ed93 7a00 	vldr	s14, [r3]
 80091a8:	4b42      	ldr	r3, [pc, #264]	; (80092b4 <__ieee754_expf+0x16c>)
 80091aa:	4413      	add	r3, r2
 80091ac:	ee30 7a47 	vsub.f32	s14, s0, s14
 80091b0:	f1c1 0201 	rsb	r2, r1, #1
 80091b4:	edd3 7a00 	vldr	s15, [r3]
 80091b8:	1a52      	subs	r2, r2, r1
 80091ba:	ee37 0a67 	vsub.f32	s0, s14, s15
 80091be:	ee20 6a00 	vmul.f32	s12, s0, s0
 80091c2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80092b8 <__ieee754_expf+0x170>
 80091c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092bc <__ieee754_expf+0x174>
 80091ca:	eee6 6a05 	vfma.f32	s13, s12, s10
 80091ce:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80092c0 <__ieee754_expf+0x178>
 80091d2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80091d6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80092c4 <__ieee754_expf+0x17c>
 80091da:	eee5 6a06 	vfma.f32	s13, s10, s12
 80091de:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80092c8 <__ieee754_expf+0x180>
 80091e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80091e6:	eef0 6a40 	vmov.f32	s13, s0
 80091ea:	eee5 6a46 	vfms.f32	s13, s10, s12
 80091ee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80091f2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80091f6:	bb92      	cbnz	r2, 800925e <__ieee754_expf+0x116>
 80091f8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80091fc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009200:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009204:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009208:	4770      	bx	lr
 800920a:	4b30      	ldr	r3, [pc, #192]	; (80092cc <__ieee754_expf+0x184>)
 800920c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80092d0 <__ieee754_expf+0x188>
 8009210:	eddf 6a30 	vldr	s13, [pc, #192]	; 80092d4 <__ieee754_expf+0x18c>
 8009214:	4413      	add	r3, r2
 8009216:	edd3 7a00 	vldr	s15, [r3]
 800921a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800921e:	eeb0 7a40 	vmov.f32	s14, s0
 8009222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009226:	ee17 2a90 	vmov	r2, s15
 800922a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800922e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009232:	eddf 6a29 	vldr	s13, [pc, #164]	; 80092d8 <__ieee754_expf+0x190>
 8009236:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800923a:	e7be      	b.n	80091ba <__ieee754_expf+0x72>
 800923c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009240:	d20b      	bcs.n	800925a <__ieee754_expf+0x112>
 8009242:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092dc <__ieee754_expf+0x194>
 8009246:	ee70 6a26 	vadd.f32	s13, s0, s13
 800924a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800924e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009252:	dd02      	ble.n	800925a <__ieee754_expf+0x112>
 8009254:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009258:	4770      	bx	lr
 800925a:	2200      	movs	r2, #0
 800925c:	e7af      	b.n	80091be <__ieee754_expf+0x76>
 800925e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009262:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009266:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800926a:	bfb8      	it	lt
 800926c:	3264      	addlt	r2, #100	; 0x64
 800926e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009276:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800927a:	ee17 3a90 	vmov	r3, s15
 800927e:	bfab      	itete	ge
 8009280:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009284:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009288:	ee00 3a10 	vmovge	s0, r3
 800928c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80092e0 <__ieee754_expf+0x198>
 8009290:	bfbc      	itt	lt
 8009292:	ee00 3a10 	vmovlt	s0, r3
 8009296:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800929a:	4770      	bx	lr
 800929c:	00000000 	.word	0x00000000
 80092a0:	42b17217 	.word	0x42b17217
 80092a4:	42cff1b5 	.word	0x42cff1b5
 80092a8:	3eb17218 	.word	0x3eb17218
 80092ac:	3f851591 	.word	0x3f851591
 80092b0:	08009724 	.word	0x08009724
 80092b4:	0800972c 	.word	0x0800972c
 80092b8:	3331bb4c 	.word	0x3331bb4c
 80092bc:	b5ddea0e 	.word	0xb5ddea0e
 80092c0:	388ab355 	.word	0x388ab355
 80092c4:	bb360b61 	.word	0xbb360b61
 80092c8:	3e2aaaab 	.word	0x3e2aaaab
 80092cc:	0800971c 	.word	0x0800971c
 80092d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80092d4:	3f317180 	.word	0x3f317180
 80092d8:	3717f7d1 	.word	0x3717f7d1
 80092dc:	7149f2ca 	.word	0x7149f2ca
 80092e0:	0d800000 	.word	0x0d800000

080092e4 <with_errnof>:
 80092e4:	b513      	push	{r0, r1, r4, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80092ec:	f7fd fdc0 	bl	8006e70 <__errno>
 80092f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80092f4:	6004      	str	r4, [r0, #0]
 80092f6:	b002      	add	sp, #8
 80092f8:	bd10      	pop	{r4, pc}

080092fa <xflowf>:
 80092fa:	b130      	cbz	r0, 800930a <xflowf+0x10>
 80092fc:	eef1 7a40 	vneg.f32	s15, s0
 8009300:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009304:	2022      	movs	r0, #34	; 0x22
 8009306:	f7ff bfed 	b.w	80092e4 <with_errnof>
 800930a:	eef0 7a40 	vmov.f32	s15, s0
 800930e:	e7f7      	b.n	8009300 <xflowf+0x6>

08009310 <__math_uflowf>:
 8009310:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009318 <__math_uflowf+0x8>
 8009314:	f7ff bff1 	b.w	80092fa <xflowf>
 8009318:	10000000 	.word	0x10000000

0800931c <__math_oflowf>:
 800931c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009324 <__math_oflowf+0x8>
 8009320:	f7ff bfeb 	b.w	80092fa <xflowf>
 8009324:	70000000 	.word	0x70000000

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
