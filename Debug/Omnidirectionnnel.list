
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009e00  08009e00  00019e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a234  0800a234  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a23c  0800a23c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a23c  0800a23c  0001a23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a240  0800a240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001e8  0800a42c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800a42c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129eb  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e5  00000000  00000000  00032c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfa  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028543  00000000  00000000  000373e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014be4  00000000  00000000  0005f925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f9d  00000000  00000000  00074509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005898  00000000  00000000  001694a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0016ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009de8 	.word	0x08009de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009de8 	.word	0x08009de8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee8:	b0b7      	sub	sp, #220	; 0xdc
 8000eea:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f001 fbe2 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f8f6 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 fafc 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef8:	f000 fad4 	bl	80014a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 fa72 	bl	80013e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f00:	f000 fa3c 	bl	800137c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 fa9e 	bl	8001444 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f08:	f000 f93c 	bl	8001184 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000f0c:	f000 f9e6 	bl	80012dc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 8000f10:	4965      	ldr	r1, [pc, #404]	; (80010a8 <main+0x1c4>)
 8000f12:	4866      	ldr	r0, [pc, #408]	; (80010ac <main+0x1c8>)
 8000f14:	f000 fe8f 	bl	8001c36 <IBUS_Init>
  Sabertooth_Init(&saber, &huart3, motor ,address);
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <main+0x1cc>)
 8000f1a:	4a66      	ldr	r2, [pc, #408]	; (80010b4 <main+0x1d0>)
 8000f1c:	4966      	ldr	r1, [pc, #408]	; (80010b8 <main+0x1d4>)
 8000f1e:	4867      	ldr	r0, [pc, #412]	; (80010bc <main+0x1d8>)
 8000f20:	f001 f87c 	bl	800201c <Sabertooth_Init>
  channel = IBUS_GetChannels(&Ibus);
 8000f24:	4861      	ldr	r0, [pc, #388]	; (80010ac <main+0x1c8>)
 8000f26:	f000 ff24 	bl	8001d72 <IBUS_GetChannels>
 8000f2a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

  char msg[150] = {0};
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2292      	movs	r2, #146	; 0x92
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fca3 	bl	8007886 <memset>
  IBUS_Update(&Ibus);
 8000f40:	485a      	ldr	r0, [pc, #360]	; (80010ac <main+0x1c8>)
 8000f42:	f000 fe9c 	bl	8001c7e <IBUS_Update>
  tm1637_init(&Display, CLK_GPIO_Port, CLK_Pin, DIO_GPIO_Port, DIO_Pin);
 8000f46:	2304      	movs	r3, #4
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <main+0x1dc>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	495c      	ldr	r1, [pc, #368]	; (80010c0 <main+0x1dc>)
 8000f50:	485c      	ldr	r0, [pc, #368]	; (80010c4 <main+0x1e0>)
 8000f52:	f001 fa9b 	bl	800248c <tm1637_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Receiving
	  IBUS_Update(&Ibus);
 8000f56:	4855      	ldr	r0, [pc, #340]	; (80010ac <main+0x1c8>)
 8000f58:	f000 fe91 	bl	8001c7e <IBUS_Update>

	//Processing
	  uint16_t swap = channel[0];
 8000f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	  channel[0] = channel[2];
 8000f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f6a:	889a      	ldrh	r2, [r3, #4]
 8000f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f70:	801a      	strh	r2, [r3, #0]
	  channel[1] = swap;
 8000f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f76:	3302      	adds	r3, #2
 8000f78:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8000f7c:	801a      	strh	r2, [r3, #0]
	  channel[2] = channel[3];
 8000f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f82:	3304      	adds	r3, #4
 8000f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000f88:	88d2      	ldrh	r2, [r2, #6]
 8000f8a:	801a      	strh	r2, [r3, #0]

	  Transform_Omni(channel, command);
 8000f8c:	494e      	ldr	r1, [pc, #312]	; (80010c8 <main+0x1e4>)
 8000f8e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000f92:	f000 ff45 	bl	8001e20 <Transform_Omni>
	  int32_t Estimated_score = floor((channel[8]-1000)/50);
 8000f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000fa2:	4a4a      	ldr	r2, [pc, #296]	; (80010cc <main+0x1e8>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	1112      	asrs	r2, r2, #4
 8000faa:	17db      	asrs	r3, r3, #31
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fab8 	bl	8000524 <__aeabi_i2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fdcc 	bl	8000b58 <__aeabi_d2iz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	  tm1637_write_int(&Display, Estimated_score, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000fcc:	483d      	ldr	r0, [pc, #244]	; (80010c4 <main+0x1e0>)
 8000fce:	f001 fb0f 	bl	80025f0 <tm1637_write_int>


	//Controlling
	  if (channel[8]<1500) {
 8000fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd6:	3310      	adds	r3, #16
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	f240 52db 	movw	r2, #1499	; 0x5db
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d810      	bhi.n	8001004 <main+0x120>
		  Sabertooth_Drive(&saber,Stop);
 8000fe2:	493b      	ldr	r1, [pc, #236]	; (80010d0 <main+0x1ec>)
 8000fe4:	4835      	ldr	r0, [pc, #212]	; (80010bc <main+0x1d8>)
 8000fe6:	f001 f8d1 	bl	800218c <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f002 f8cb 	bl	800318c <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, "-", 1, 5);
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <main+0x1f0>)
 8000ffc:	4836      	ldr	r0, [pc, #216]	; (80010d8 <main+0x1f4>)
 8000ffe:	f004 fe19 	bl	8005c34 <HAL_UART_Transmit>
 8001002:	e009      	b.n	8001018 <main+0x134>
	  }
	  else {
		  Sabertooth_Drive(&saber,command);
 8001004:	4930      	ldr	r1, [pc, #192]	; (80010c8 <main+0x1e4>)
 8001006:	482d      	ldr	r0, [pc, #180]	; (80010bc <main+0x1d8>)
 8001008:	f001 f8c0 	bl	800218c <Sabertooth_Drive>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2120      	movs	r1, #32
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f002 f8ba 	bl	800318c <HAL_GPIO_WritePin>
	  }
	  sprintf(msg,"%i;%i;%i; ==> %f;%f;%f;%f\r\n",channel[0],channel[1],channel[2],command[0],command[1],command[2],command[3]);
 8001018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001024:	3302      	adds	r3, #2
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800102e:	3304      	adds	r3, #4
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461e      	mov	r6, r3
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <main+0x1e4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa85 	bl	8000548 <__aeabi_f2d>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <main+0x1e4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_f2d>
 800104c:	4680      	mov	r8, r0
 800104e:	4689      	mov	r9, r1
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <main+0x1e4>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	4682      	mov	sl, r0
 800105c:	468b      	mov	fp, r1
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <main+0x1e4>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa70 	bl	8000548 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	f107 000c 	add.w	r0, r7, #12
 8001070:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001074:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001078:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800107c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001080:	9600      	str	r6, [sp, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4915      	ldr	r1, [pc, #84]	; (80010dc <main+0x1f8>)
 8001088:	f006 fb9a 	bl	80077c0 <siprintf>
	  //HAL_UART_Transmit(&huart2, "-", 1, 5);


	  //sprintf(msg,"%i,%f;\r\n",channel[0],command[0]);
	  //sprintf(msg,"%i;%i;%i;%i;%i;%i;%i;%i;%i;%i\r\n",channel[0],channel[1],channel[2],channel[3],channel[4],channel[5],channel[6],channel[7],channel[8],channel[9]);
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f8ed 	bl	8000270 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0x1f4>)
 80010a2:	f004 fdc7 	bl	8005c34 <HAL_UART_Transmit>
  {
 80010a6:	e756      	b.n	8000f56 <main+0x72>
 80010a8:	2000029c 	.word	0x2000029c
 80010ac:	200004c4 	.word	0x200004c4
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000000 	.word	0x20000000
 80010b8:	200003ac 	.word	0x200003ac
 80010bc:	2000055c 	.word	0x2000055c
 80010c0:	48000400 	.word	0x48000400
 80010c4:	20000574 	.word	0x20000574
 80010c8:	20000594 	.word	0x20000594
 80010cc:	51eb851f 	.word	0x51eb851f
 80010d0:	20000584 	.word	0x20000584
 80010d4:	08009e00 	.word	0x08009e00
 80010d8:	20000324 	.word	0x20000324
 80010dc:	08009e04 	.word	0x08009e04

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 fbc9 	bl	8007886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001106:	f002 f867 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001110:	f000 fa6a 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800112e:	230a      	movs	r3, #10
 8001130:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001132:	2307      	movs	r3, #7
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f89e 	bl	8003284 <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800114e:	f000 fa4b 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2303      	movs	r3, #3
 8001158:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2104      	movs	r1, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fc66 	bl	8003a3c <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 fa37 	bl	80015e8 <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	; 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09a      	sub	sp, #104	; 0x68
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	222c      	movs	r2, #44	; 0x2c
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fb61 	bl	8007886 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c4:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011c6:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <MX_TIM1_Init+0x154>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ca:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f0:	4838      	ldr	r0, [pc, #224]	; (80012d4 <MX_TIM1_Init+0x150>)
 80011f2:	f003 fb03 	bl	80047fc <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f000 f9f4 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800120a:	4619      	mov	r1, r3
 800120c:	4831      	ldr	r0, [pc, #196]	; (80012d4 <MX_TIM1_Init+0x150>)
 800120e:	f003 fdc3 	bl	8004d98 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001218:	f000 f9e6 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121c:	482d      	ldr	r0, [pc, #180]	; (80012d4 <MX_TIM1_Init+0x150>)
 800121e:	f003 fb44 	bl	80048aa <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001228:	f000 f9de 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001238:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800123c:	4619      	mov	r1, r3
 800123e:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_TIM1_Init+0x150>)
 8001240:	f004 fb86 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800124a:	f000 f9cd 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4818      	ldr	r0, [pc, #96]	; (80012d4 <MX_TIM1_Init+0x150>)
 8001274:	f003 fc7c 	bl	8004b70 <HAL_TIM_PWM_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800127e:	f000 f9b3 	bl	80015e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_TIM1_Init+0x150>)
 80012b8:	f004 fbd2 	bl	8005a60 <HAL_TIMEx_ConfigBreakDeadTime>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012c2:	f000 f991 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM1_Init+0x150>)
 80012c8:	f000 f9f2 	bl	80016b0 <HAL_TIM_MspPostInit>

}
 80012cc:	bf00      	nop
 80012ce:	3768      	adds	r7, #104	; 0x68
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000204 	.word	0x20000204
 80012d8:	40012c00 	.word	0x40012c00

080012dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM5_Init+0x98>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <MX_TIM5_Init+0x9c>)
 8001300:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM5_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM5_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM5_Init+0x98>)
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_TIM5_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM5_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM5_Init+0x98>)
 8001324:	f003 fa6a 	bl	80047fc <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800132e:	f000 f95b 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001332:	2306      	movs	r3, #6
 8001334:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_TIM5_Init+0x98>)
 8001342:	f003 fdf2 	bl	8004f2a <HAL_TIM_SlaveConfigSynchro>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800134c:	f000 f94c 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM5_Init+0x98>)
 800135e:	f004 faf7 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001368:	f000 f93e 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000250 	.word	0x20000250
 8001378:	40000c00 	.word	0x40000c00

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART1_UART_Init+0x60>)
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <MX_USART1_UART_Init+0x64>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_USART1_UART_Init+0x60>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART1_UART_Init+0x60>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x60>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013a2:	2204      	movs	r2, #4
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x60>)
 80013c8:	f004 fbe6 	bl	8005b98 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f000 f909 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000029c 	.word	0x2000029c
 80013e0:	40013800 	.word	0x40013800

080013e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_USART2_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_USART2_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x58>)
 8001428:	f004 fbb6 	bl	8005b98 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 f8d9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000324 	.word	0x20000324
 8001440:	40004400 	.word	0x40004400

08001444 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USART3_UART_Init+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <MX_USART3_UART_Init+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001450:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001454:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_USART3_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART3_UART_Init+0x58>)
 800146a:	2208      	movs	r2, #8
 800146c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART3_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART3_UART_Init+0x58>)
 8001488:	f004 fb86 	bl	8005b98 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f8a9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200003ac 	.word	0x200003ac
 80014a0:	40004800 	.word	0x40004800

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_DMA_Init+0x48>)
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <MX_DMA_Init+0x48>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6493      	str	r3, [r2, #72]	; 0x48
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_DMA_Init+0x48>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	200c      	movs	r0, #12
 80014c8:	f001 fa6f 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f001 fa88 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	200f      	movs	r0, #15
 80014d8:	f001 fa67 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014dc:	200f      	movs	r0, #15
 80014de:	f001 fa80 	bl	80029e2 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <MX_GPIO_Init+0xec>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <MX_GPIO_Init+0xec>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <MX_GPIO_Init+0xec>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <MX_GPIO_Init+0xec>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a2e      	ldr	r2, [pc, #184]	; (80015dc <MX_GPIO_Init+0xec>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <MX_GPIO_Init+0xec>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_GPIO_Init+0xec>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <MX_GPIO_Init+0xec>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_GPIO_Init+0xec>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_GPIO_Init+0xec>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <MX_GPIO_Init+0xec>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_GPIO_Init+0xec>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f001 fe0d 	bl	800318c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIO_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2106      	movs	r1, #6
 8001576:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_GPIO_Init+0xf0>)
 8001578:	f001 fe08 	bl	800318c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001582:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <MX_GPIO_Init+0xf4>)
 8001594:	f001 fc38 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001598:	2320      	movs	r3, #32
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f001 fc29 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DIO_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIO_Pin;
 80015b6:	2306      	movs	r3, #6
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_GPIO_Init+0xf0>)
 80015ce:	f001 fc1b 	bl	8002e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400
 80015e4:	48000800 	.word	0x48000800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_MspInit+0x44>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_MspInit+0x44>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_MspInit+0x44>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x44>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x44>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6593      	str	r3, [r2, #88]	; 0x58
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x44>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_TIM_Base_MspInit+0x68>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d114      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201a      	movs	r0, #26
 800166c:	f001 f99d 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001670:	201a      	movs	r0, #26
 8001672:	f001 f9b6 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001676:	e010      	b.n	800169a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_TIM_Base_MspInit+0x70>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10b      	bne.n	800169a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40000c00 	.word	0x40000c00

080016b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <HAL_TIM_MspPostInit+0x68>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d11d      	bne.n	800170e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f001 fb7d 	bl	8002e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0b0      	sub	sp, #192	; 0xc0
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	2288      	movs	r2, #136	; 0x88
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f006 f8a0 	bl	8007886 <memset>
  if(huart->Instance==USART1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a8d      	ldr	r2, [pc, #564]	; (8001980 <HAL_UART_MspInit+0x260>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d167      	bne.n	8001820 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001754:	2300      	movs	r3, #0
 8001756:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fb91 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001768:	f7ff ff3e 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800176c:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_UART_MspInit+0x264>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001770:	4a84      	ldr	r2, [pc, #528]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001776:	6613      	str	r3, [r2, #96]	; 0x60
 8001778:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_UART_MspInit+0x264>)
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001780:	623b      	str	r3, [r7, #32]
 8001782:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_UART_MspInit+0x264>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800179c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b6:	2307      	movs	r3, #7
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f001 fb1f 	bl	8002e08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017cc:	4a6f      	ldr	r2, [pc, #444]	; (800198c <HAL_UART_MspInit+0x26c>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b69      	ldr	r3, [pc, #420]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e8:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ee:	4b66      	ldr	r3, [pc, #408]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017f6:	2220      	movs	r2, #32
 80017f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_UART_MspInit+0x268>)
 80017fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001800:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001802:	4861      	ldr	r0, [pc, #388]	; (8001988 <HAL_UART_MspInit+0x268>)
 8001804:	f001 f908 	bl	8002a18 <HAL_DMA_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800180e:	f7ff feeb 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a5c      	ldr	r2, [pc, #368]	; (8001988 <HAL_UART_MspInit+0x268>)
 8001816:	675a      	str	r2, [r3, #116]	; 0x74
 8001818:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_UART_MspInit+0x268>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800181e:	e0aa      	b.n	8001976 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_UART_MspInit+0x270>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d13c      	bne.n	80018a4 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800182a:	2302      	movs	r3, #2
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800182e:	2300      	movs	r3, #0
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fb24 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001842:	f7ff fed1 	bl	80015e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001846:	4b4f      	ldr	r3, [pc, #316]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <HAL_UART_MspInit+0x264>)
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_UART_MspInit+0x264>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_UART_MspInit+0x264>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001876:	230c      	movs	r3, #12
 8001878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188e:	2307      	movs	r3, #7
 8001890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f001 fab3 	bl	8002e08 <HAL_GPIO_Init>
}
 80018a2:	e068      	b.n	8001976 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_UART_MspInit+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d163      	bne.n	8001976 <HAL_UART_MspInit+0x256>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018ae:	2304      	movs	r3, #4
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fae2 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80018c6:	f7ff fe8f 	bl	80015e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a27      	ldr	r2, [pc, #156]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_UART_MspInit+0x264>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018fa:	2330      	movs	r3, #48	; 0x30
 80018fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001912:	2307      	movs	r3, #7
 8001914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001918:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800191c:	4619      	mov	r1, r3
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <HAL_UART_MspInit+0x278>)
 8001920:	f001 fa72 	bl	8002e08 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_UART_MspInit+0x280>)
 8001928:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_UART_MspInit+0x27c>)
 800192c:	2202      	movs	r2, #2
 800192e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001932:	2210      	movs	r2, #16
 8001934:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_UART_MspInit+0x27c>)
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x27c>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <HAL_UART_MspInit+0x27c>)
 800195c:	f001 f85c 	bl	8002a18 <HAL_DMA_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001966:	f7ff fe3f 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_UART_MspInit+0x27c>)
 800196e:	671a      	str	r2, [r3, #112]	; 0x70
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_UART_MspInit+0x27c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001976:	bf00      	nop
 8001978:	37c0      	adds	r7, #192	; 0xc0
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800
 8001984:	40021000 	.word	0x40021000
 8001988:	20000434 	.word	0x20000434
 800198c:	40020058 	.word	0x40020058
 8001990:	40004400 	.word	0x40004400
 8001994:	40004800 	.word	0x40004800
 8001998:	48000800 	.word	0x48000800
 800199c:	2000047c 	.word	0x2000047c
 80019a0:	4002001c 	.word	0x4002001c

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 febc 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA1_Channel2_IRQHandler+0x10>)
 80019fe:	f001 f923 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000047c 	.word	0x2000047c

08001a0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Channel5_IRQHandler+0x10>)
 8001a12:	f001 f919 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000434 	.word	0x20000434

08001a20 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001a26:	f002 ffa1 	bl	800496c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000204 	.word	0x20000204

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f005 ff6d 	bl	800792c <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	e7fe      	b.n	8001a76 <_exit+0x12>

08001a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4601      	mov	r1, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf0      	blt.n	8001a8a <_read+0x12>
  }

  return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e009      	b.n	8001ad8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf1      	blt.n	8001ac4 <_write+0x12>
  }
  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_close>:

int _close(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b12:	605a      	str	r2, [r3, #4]
  return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_isatty>:

int _isatty(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f005 fed2 	bl	800792c <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20018000 	.word	0x20018000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	200005a4 	.word	0x200005a4
 8001bbc:	20000700 	.word	0x20000700

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be8:	f7ff ffea 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <LoopForever+0xe>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	; (8001c30 <LoopForever+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c12:	f005 fe91 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c16:	f7ff f965 	bl	8000ee4 <main>

08001c1a <LoopForever>:

LoopForever:
    b LoopForever
 8001c1a:	e7fe      	b.n	8001c1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c28:	0800a244 	.word	0x0800a244
  ldr r2, =_sbss
 8001c2c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c30:	200006fc 	.word	0x200006fc

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>

08001c36 <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel, 1500, 6 * sizeof(uint16_t));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3304      	adds	r3, #4
 8001c44:	220c      	movs	r2, #12
 8001c46:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fe1b 	bl	8007886 <memset>
	Ibus->handle = handle;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer, 0, 128);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3318      	adds	r3, #24
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 fe11 	bl	8007886 <memset>
	return HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f004 f8e6 	bl	8005e40 <HAL_UART_Receive_DMA>
 8001c74:	4603      	mov	r3, r0

}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b094      	sub	sp, #80	; 0x50
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 64);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	4619      	mov	r1, r3
 8001c92:	f004 f8d5 	bl	8005e40 <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = { 0 };
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	223c      	movs	r2, #60	; 0x3c
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 fdef 	bl	8007886 <memset>
	uint16_t packetStart = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001cb4:	e018      	b.n	8001ce8 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i + 1] == 0x40) {
 8001cb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d10c      	bne.n	8001cde <IBUS_Update+0x60>
 8001cc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cc8:	3301      	adds	r3, #1
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	d104      	bne.n	8001cde <IBUS_Update+0x60>
			packetStart = i;
 8001cd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			break;
 8001cdc:	e008      	b.n	8001cf0 <IBUS_Update+0x72>
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001cde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001ce8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cec:	2b3e      	cmp	r3, #62	; 0x3e
 8001cee:	d9e2      	bls.n	8001cb6 <IBUS_Update+0x38>
		}
	}
	if (packetStart >= 64) {
 8001cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cf4:	2b3f      	cmp	r3, #63	; 0x3f
 8001cf6:	d901      	bls.n	8001cfc <IBUS_Update+0x7e>
		return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e036      	b.n	8001d6a <IBUS_Update+0xec>
	}
	memcpy(Packet, Ibus->UARTBuffer + packetStart + 2, 32);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f103 0218 	add.w	r2, r3, #24
 8001d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d06:	3302      	adds	r3, #2
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	2220      	movs	r2, #32
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 fe38 	bl	8007986 <memcpy>



	for (uint16_t i = 0; i < 10	; i++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001d1c:	e020      	b.n	8001d60 <IBUS_Update+0xe2>
		Ibus->channel[i] = (Packet[2 * i + 1] << 8) | Packet[2 * i];
 8001d1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	3301      	adds	r3, #1
 8001d26:	3350      	adds	r3, #80	; 0x50
 8001d28:	443b      	add	r3, r7
 8001d2a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	443b      	add	r3, r7
 8001d3c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d4a:	b291      	uxth	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	460a      	mov	r2, r1
 8001d54:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < 10	; i++) {
 8001d56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001d60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d9da      	bls.n	8001d1e <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3750      	adds	r7, #80	; 0x50
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <CurveInput>:
#include "Omnidirection.h"
float exponent[3] = {2,2,2};


void CurveInput(float input[3]) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	ed2d 8b02 	vpush	{d8}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	for (int i =0;i<3;i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e034      	b.n	8001e08 <CurveInput+0x7c>
		input[i] =expf( fabsf(input[i]) * exponent[i] )*input[i]/expf(exponent[i]);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	eeb0 7ae7 	vabs.f32	s14, s15
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <CurveInput+0x90>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	f007 fe5b 	bl	8009a7c <expf>
 8001dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <CurveInput+0x90>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	f007 fe47 	bl	8009a7c <expf>
 8001dee:	eeb0 7a40 	vmov.f32	s14, s0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
	for (int i =0;i<3;i++) {
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	ddc7      	ble.n	8001d9e <CurveInput+0x12>
	}
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	ecbd 8b02 	vpop	{d8}
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000000c 	.word	0x2000000c

08001e20 <Transform_Omni>:
HAL_StatusTypeDef Transform_Omni(uint16_t Channel[3], float output[4]) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	float input[3] = { 0 };
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
	int8_t forward[4] = { 1, 1, 1, 1 };
 8001e36:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8001e3a:	613b      	str	r3, [r7, #16]
	int8_t right[4] = { 1, -1, -1, 1 };
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <Transform_Omni+0x174>)
 8001e3e:	60fb      	str	r3, [r7, #12]
	int8_t rotate_c[4] = { 1, 1, -1, -1 };
 8001e40:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <Transform_Omni+0x178>)
 8001e42:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	e032      	b.n	8001eb0 <Transform_Omni+0x90>
		input[i] = ((float) Channel[i] - 1500) / 500;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001f9c <Transform_Omni+0x17c>
 8001e60:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001fa0 <Transform_Omni+0x180>
 8001e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3328      	adds	r3, #40	; 0x28
 8001e72:	443b      	add	r3, r7
 8001e74:	3b14      	subs	r3, #20
 8001e76:	edc3 7a00 	vstr	s15, [r3]
		if (Channel[i] <500 || Channel[i] >2000) {
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e88:	d307      	bcc.n	8001e9a <Transform_Omni+0x7a>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e98:	d907      	bls.n	8001eaa <Transform_Omni+0x8a>
			input[i]=0;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3328      	adds	r3, #40	; 0x28
 8001ea0:	443b      	add	r3, r7
 8001ea2:	3b14      	subs	r3, #20
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	ddc9      	ble.n	8001e4a <Transform_Omni+0x2a>
		}

	}
	CurveInput(input);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff66 	bl	8001d8c <CurveInput>
	for (int i = 0; i < 4; i++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	e05e      	b.n	8001f84 <Transform_Omni+0x164>
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001ec6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eca:	f107 0210 	add.w	r2, r7, #16
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee2:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	4413      	add	r3, r2
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ input[2] * rotate_c[i];
 8001f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f06:	f107 0208 	add.w	r2, r7, #8
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	4413      	add	r3, r2
						+ input[2] * rotate_c[i];
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
				if (output[i]>1) {
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd07      	ble.n	8001f58 <Transform_Omni+0x138>
					output[i]=1;
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e012      	b.n	8001f7e <Transform_Omni+0x15e>
				}
				else if (output[i]<-1) {
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d505      	bpl.n	8001f7e <Transform_Omni+0x15e>
					output[i]=-1;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <Transform_Omni+0x184>)
 8001f7c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	3301      	adds	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	dd9d      	ble.n	8001ec6 <Transform_Omni+0xa6>
			}
	/*float norme = sqrtf(
			output[0] * output[0] + output[1] * output[1] + output[2] * output[2]+output[3] * output[3]);*/


	return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	01ffff01 	.word	0x01ffff01
 8001f98:	ffff0101 	.word	0xffff0101
 8001f9c:	44bb8000 	.word	0x44bb8000
 8001fa0:	43fa0000 	.word	0x43fa0000
 8001fa4:	bf800000 	.word	0xbf800000

08001fa8 <HAL_UART_RxCpltCallback>:
 */

#include "Sabertooth.h"
static Sabertooth *sabertooth_ptr;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	if (huart != sabertooth_ptr->handle) {
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d129      	bne.n	8002010 <HAL_UART_RxCpltCallback+0x68>
		return;
	}
	if (sabertooth_ptr->Queue.NumberOfPacket <= 0) {
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	89db      	ldrh	r3, [r3, #14]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <HAL_UART_RxCpltCallback+0x28>
		sabertooth_ptr->Queue.CurrentlySending = 0;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	731a      	strb	r2, [r3, #12]
 8001fce:	e020      	b.n	8002012 <HAL_UART_RxCpltCallback+0x6a>
	} else {
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	6819      	ldr	r1, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->length);
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f003 feb0 	bl	8005d48 <HAL_UART_Transmit_DMA>
		sabertooth_ptr->Queue.FirstPacket =
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
		sabertooth_ptr->Queue.FirstPacket =
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 8001ff2:	6892      	ldr	r2, [r2, #8]
		sabertooth_ptr->Queue.FirstPacket =
 8001ff4:	611a      	str	r2, [r3, #16]
		sabertooth_ptr->Queue.NumberOfPacket -= 1;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	89da      	ldrh	r2, [r3, #14]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3a01      	subs	r2, #1
 8002002:	b292      	uxth	r2, r2
 8002004:	81da      	strh	r2, [r3, #14]
		sabertooth_ptr->Queue.CurrentlySending = 1;
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_UART_RxCpltCallback+0x70>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	731a      	strb	r2, [r3, #12]
 800200e:	e000      	b.n	8002012 <HAL_UART_RxCpltCallback+0x6a>
		return;
 8002010:	bf00      	nop
	}
}
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200005a8 	.word	0x200005a8

0800201c <Sabertooth_Init>:
HAL_StatusTypeDef Sabertooth_Init(Sabertooth *saber, UART_HandleTypeDef *handle,
		uint8_t motor[4], uint8_t adress[4]) {
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
	sabertooth_ptr = saber;
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <Sabertooth_Init+0x64>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e016      	b.n	8002064 <Sabertooth_Init+0x48>
		saber->adress[i] = adress[i];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	7819      	ldrb	r1, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	460a      	mov	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
		saber->motor[i] = motor[i];
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	7819      	ldrb	r1, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4413      	add	r3, r2
 8002058:	3308      	adds	r3, #8
 800205a:	460a      	mov	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b03      	cmp	r3, #3
 8002068:	dde5      	ble.n	8002036 <Sabertooth_Init+0x1a>
	}
	saber->handle = handle;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	601a      	str	r2, [r3, #0]
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200005a8 	.word	0x200005a8

08002084 <Sabertooth_Send>:
HAL_StatusTypeDef Sabertooth_Send(Sabertooth *saber, uint8_t address,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8002084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002088:	b08b      	sub	sp, #44	; 0x2c
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	72fb      	strb	r3, [r7, #11]
 8002094:	4613      	mov	r3, r2
 8002096:	72bb      	strb	r3, [r7, #10]
 8002098:	466b      	mov	r3, sp
 800209a:	461e      	mov	r6, r3
	uint8_t Packet[3 + data_length];
 800209c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020a0:	1cd9      	adds	r1, r3, #3
 80020a2:	1e4b      	subs	r3, r1, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	460a      	mov	r2, r1
 80020a8:	2300      	movs	r3, #0
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c2:	460a      	mov	r2, r1
 80020c4:	2300      	movs	r3, #0
 80020c6:	4614      	mov	r4, r2
 80020c8:	461d      	mov	r5, r3
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	00eb      	lsls	r3, r5, #3
 80020d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d8:	00e2      	lsls	r2, r4, #3
 80020da:	460b      	mov	r3, r1
 80020dc:	3307      	adds	r3, #7
 80020de:	08db      	lsrs	r3, r3, #3
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	ebad 0d03 	sub.w	sp, sp, r3
 80020e6:	466b      	mov	r3, sp
 80020e8:	3300      	adds	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
	Packet[0] = address;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	7afa      	ldrb	r2, [r7, #11]
 80020f0:	701a      	strb	r2, [r3, #0]
	Packet[1] = command;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	7aba      	ldrb	r2, [r7, #10]
 80020f6:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e00a      	b.n	8002114 <Sabertooth_Send+0x90>
		Packet[i + 2] = data[i];
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	441a      	add	r2, r3
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3302      	adds	r3, #2
 8002108:	7811      	ldrb	r1, [r2, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < data_length; i++) {
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	429a      	cmp	r2, r3
 800211c:	dbef      	blt.n	80020fe <Sabertooth_Send+0x7a>
	}
	uint8_t Checksum = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e00b      	b.n	8002142 <Sabertooth_Send+0xbe>
		Checksum += Packet[i];
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002136:	4413      	add	r3, r2
 8002138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3301      	adds	r3, #1
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002146:	3301      	adds	r3, #1
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	429a      	cmp	r2, r3
 800214c:	dded      	ble.n	800212a <Sabertooth_Send+0xa6>
	}
	Checksum = Checksum & 0x7F;
 800214e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Packet[2 + data_length] = Checksum;
 800215a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800215e:	3302      	adds	r3, #2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002166:	54d1      	strb	r1, [r2, r3]
	//return HAL_UART_Transmit_DMA(saber->handle, Packet, 3 + data_length);
	return HAL_UART_Transmit(saber->handle, Packet, 3+data_length,10);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002170:	3303      	adds	r3, #3
 8002172:	b29a      	uxth	r2, r3
 8002174:	230a      	movs	r3, #10
 8002176:	6979      	ldr	r1, [r7, #20]
 8002178:	f003 fd5c 	bl	8005c34 <HAL_UART_Transmit>
 800217c:	4603      	mov	r3, r0
 800217e:	46b5      	mov	sp, r6
		saber->Queue.FirstPacket = &PacketToSend;
		saber->Queue.lastPacket = &PacketToSend;
		saber->Queue.NumberOfPacket = 1;
	}*/
	return HAL_OK;
}
 8002180:	4618      	mov	r0, r3
 8002182:	372c      	adds	r7, #44	; 0x2c
 8002184:	46bd      	mov	sp, r7
 8002186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800218c <Sabertooth_Drive>:

HAL_StatusTypeDef Sabertooth_Drive(Sabertooth *saber, float command[4]) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e072      	b.n	8002282 <Sabertooth_Drive+0xf6>
		if (command[i] >= 0) {
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	db30      	blt.n	8002214 <Sabertooth_Drive+0x88>
			uint8_t data = floor(command[i] * 127);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002294 <Sabertooth_Drive+0x108>
 80021c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c6:	ee17 0a90 	vmov	r0, s15
 80021ca:	f7fe f9bd 	bl	8000548 <__aeabi_f2d>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	ec43 2b10 	vmov	d0, r2, r3
 80021d6:	f007 fc97 	bl	8009b08 <floor>
 80021da:	ec53 2b10 	vmov	r2, r3, d0
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fce1 	bl	8000ba8 <__aeabi_d2uiz>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	72fb      	strb	r3, [r7, #11]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i], &data,
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	7819      	ldrb	r1, [r3, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	3308      	adds	r3, #8
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	b2da      	uxtb	r2, r3
 8002204:	f107 030b 	add.w	r3, r7, #11
 8002208:	2001      	movs	r0, #1
 800220a:	9000      	str	r0, [sp, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff39 	bl	8002084 <Sabertooth_Send>
 8002212:	e033      	b.n	800227c <Sabertooth_Drive+0xf0>
					1);

		} else {
			uint8_t data = floor(-command[i] * 127);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eef1 7a67 	vneg.f32	s15, s15
 8002224:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002294 <Sabertooth_Drive+0x108>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	ee17 0a90 	vmov	r0, s15
 8002230:	f7fe f98a 	bl	8000548 <__aeabi_f2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	ec43 2b10 	vmov	d0, r2, r3
 800223c:	f007 fc64 	bl	8009b08 <floor>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fcae 	bl	8000ba8 <__aeabi_d2uiz>
 800224c:	4603      	mov	r3, r0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	72bb      	strb	r3, [r7, #10]
			Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i] + 1,
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	7819      	ldrb	r1, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	3308      	adds	r3, #8
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	f107 030a 	add.w	r3, r7, #10
 8002272:	2001      	movs	r0, #1
 8002274:	9000      	str	r0, [sp, #0]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff04 	bl	8002084 <Sabertooth_Send>
	for (int i = 0; i < 4; i++) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b03      	cmp	r3, #3
 8002286:	dd89      	ble.n	800219c <Sabertooth_Drive+0x10>
					&data, 1);
		}
	}

	return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	42fe0000 	.word	0x42fe0000

08002298 <tm1637_delay_us>:
const uint8_t fill_off[4] = {0x00, 0x00, 0x00, 0x00};
const uint8_t _tm1637_minus = 0x40;
const uint8_t _tm1637_dot = 0x80;  
//#######################################################################################################################
void tm1637_delay_us(uint8_t delay)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  while (delay > 0)
 80022a2:	e006      	b.n	80022b2 <tm1637_delay_us+0x1a>
  {
    delay--;
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	71fb      	strb	r3, [r7, #7]
    asm("NOP");asm("NOP");asm("NOP");asm("NOP");
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
  while (delay > 0)
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f5      	bne.n	80022a4 <tm1637_delay_us+0xc>
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <tm1637_start>:
//#######################################################################################################################
void tm1637_start(tm1637_t *tm1637)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6898      	ldr	r0, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	89db      	ldrh	r3, [r3, #14]
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	f000 ff57 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80022de:	2014      	movs	r0, #20
 80022e0:	f7ff ffda 	bl	8002298 <tm1637_delay_us>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <tm1637_stop>:
//#######################################################################################################################
void tm1637_stop(tm1637_t *tm1637)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6898      	ldr	r0, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	89db      	ldrh	r3, [r3, #14]
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	f000 ff44 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002304:	2014      	movs	r0, #20
 8002306:	f7ff ffc7 	bl	8002298 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6858      	ldr	r0, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	899b      	ldrh	r3, [r3, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	4619      	mov	r1, r3
 8002316:	f000 ff39 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800231a:	2014      	movs	r0, #20
 800231c:	f7ff ffbc 	bl	8002298 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	89db      	ldrh	r3, [r3, #14]
 8002328:	2201      	movs	r2, #1
 800232a:	4619      	mov	r1, r3
 800232c:	f000 ff2e 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002330:	2014      	movs	r0, #20
 8002332:	f7ff ffb1 	bl	8002298 <tm1637_delay_us>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <tm1637_write_byte>:
//#######################################################################################################################
uint8_t tm1637_write_byte(tm1637_t *tm1637, uint8_t data)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
  //  write 8 bit data
  for (uint8_t i = 0; i < 8; i++)
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e034      	b.n	80023ba <tm1637_write_byte+0x7c>
  {
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6858      	ldr	r0, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	899b      	ldrh	r3, [r3, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	4619      	mov	r1, r3
 800235c:	f000 ff16 	bl	800318c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 8002360:	2014      	movs	r0, #20
 8002362:	f7ff ff99 	bl	8002298 <tm1637_delay_us>
    if (data & 0x01)
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <tm1637_write_byte+0x44>
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6898      	ldr	r0, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	89db      	ldrh	r3, [r3, #14]
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	f000 ff06 	bl	800318c <HAL_GPIO_WritePin>
 8002380:	e007      	b.n	8002392 <tm1637_write_byte+0x54>
    else
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6898      	ldr	r0, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	89db      	ldrh	r3, [r3, #14]
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	f000 fefd 	bl	800318c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 8002392:	2014      	movs	r0, #20
 8002394:	f7ff ff80 	bl	8002298 <tm1637_delay_us>
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6858      	ldr	r0, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	899b      	ldrh	r3, [r3, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4619      	mov	r1, r3
 80023a4:	f000 fef2 	bl	800318c <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 80023a8:	2014      	movs	r0, #20
 80023aa:	f7ff ff75 	bl	8002298 <tm1637_delay_us>
    data = data >> 1;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < 8; i++)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b07      	cmp	r3, #7
 80023be:	d9c7      	bls.n	8002350 <tm1637_write_byte+0x12>
  }
  // wait for acknowledge
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6858      	ldr	r0, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	899b      	ldrh	r3, [r3, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	f000 fede 	bl	800318c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6898      	ldr	r0, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	89db      	ldrh	r3, [r3, #14]
 80023d8:	2201      	movs	r2, #1
 80023da:	4619      	mov	r1, r3
 80023dc:	f000 fed6 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80023e0:	2014      	movs	r0, #20
 80023e2:	f7ff ff59 	bl	8002298 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6858      	ldr	r0, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	899b      	ldrh	r3, [r3, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4619      	mov	r1, r3
 80023f2:	f000 fecb 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80023f6:	2014      	movs	r0, #20
 80023f8:	f7ff ff4e 	bl	8002298 <tm1637_delay_us>
  uint8_t ack = HAL_GPIO_ReadPin(tm1637->gpio_dat, tm1637->pin_dat);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	89db      	ldrh	r3, [r3, #14]
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 fea8 	bl	800315c <HAL_GPIO_ReadPin>
 800240c:	4603      	mov	r3, r0
 800240e:	73bb      	strb	r3, [r7, #14]
  if (ack == 0)
 8002410:	7bbb      	ldrb	r3, [r7, #14]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <tm1637_write_byte+0xe8>
    HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6898      	ldr	r0, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	89db      	ldrh	r3, [r3, #14]
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	f000 feb3 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002426:	2014      	movs	r0, #20
 8002428:	f7ff ff36 	bl	8002298 <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6858      	ldr	r0, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	899b      	ldrh	r3, [r3, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	f000 fea8 	bl	800318c <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800243c:	2014      	movs	r0, #20
 800243e:	f7ff ff2b 	bl	8002298 <tm1637_delay_us>
  return ack;
 8002442:	7bbb      	ldrb	r3, [r7, #14]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <tm1637_lock>:
//#######################################################################################################################
void tm1637_lock(tm1637_t *tm1637)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  while (tm1637->lock == 1)
 8002454:	e002      	b.n	800245c <tm1637_lock+0x10>
    tm1637_delay_ms(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f000 f9a8 	bl	80027ac <HAL_Delay>
  while (tm1637->lock == 1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d0f8      	beq.n	8002456 <tm1637_lock+0xa>
  tm1637->lock = 1;  
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <tm1637_unlock>:
//#######################################################################################################################
void tm1637_unlock(tm1637_t *tm1637)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  tm1637->lock = 0;  
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <tm1637_init>:
//#######################################################################################################################
void tm1637_init(tm1637_t *tm1637, GPIO_TypeDef *gpio_clk, uint16_t pin_clk, GPIO_TypeDef *gpio_dat, uint16_t pin_dat)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  memset(tm1637, 0, sizeof(tm1637_t)); 
 800249c:	2210      	movs	r2, #16
 800249e:	2100      	movs	r1, #0
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f005 f9f0 	bl	8007886 <memset>
  //  set max brightess
  tm1637_brightness(tm1637, 7);  
 80024a6:	2107      	movs	r1, #7
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f834 	bl	8002516 <tm1637_brightness>
  tm1637_lock(tm1637);
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff ffcc 	bl	800244c <tm1637_lock>
  //  init gpio
  tm1637->gpio_clk = gpio_clk;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	605a      	str	r2, [r3, #4]
  tm1637->pin_clk = pin_clk;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	819a      	strh	r2, [r3, #12]
  tm1637->gpio_dat = gpio_dat;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	609a      	str	r2, [r3, #8]
  tm1637->pin_dat = pin_dat;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80024ca:	81da      	strh	r2, [r3, #14]
  GPIO_InitTypeDef g = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  g.Mode = GPIO_MODE_OUTPUT_OD;
 80024dc:	2311      	movs	r3, #17
 80024de:	61bb      	str	r3, [r7, #24]
  g.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  g.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
  g.Pin = pin_clk;
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_clk, &g);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	68b8      	ldr	r0, [r7, #8]
 80024f4:	f000 fc88 	bl	8002e08 <HAL_GPIO_Init>
  g.Pin = pin_dat;
 80024f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_dat, &g);    
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	6838      	ldr	r0, [r7, #0]
 8002504:	f000 fc80 	bl	8002e08 <HAL_GPIO_Init>
  tm1637_unlock(tm1637);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ffb2 	bl	8002472 <tm1637_unlock>
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <tm1637_brightness>:
//#######################################################################################################################
void tm1637_brightness(tm1637_t *tm1637, uint8_t brightness_0_to_7)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  tm1637_lock(tm1637);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff92 	bl	800244c <tm1637_lock>
  tm1637->brightness = (brightness_0_to_7 & 0x7) | 0x08;
 8002528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f043 0308 	orr.w	r3, r3, #8
 8002536:	b25b      	sxtb	r3, r3
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	705a      	strb	r2, [r3, #1]
  tm1637_unlock(tm1637);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff97 	bl	8002472 <tm1637_unlock>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <tm1637_write_raw>:
//#######################################################################################################################
void tm1637_write_raw(tm1637_t *tm1637, const uint8_t *raw, uint8_t length, uint8_t pos)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	4613      	mov	r3, r2
 8002560:	71bb      	strb	r3, [r7, #6]
  if (pos > 5)
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d83f      	bhi.n	80025e8 <tm1637_write_raw+0x9c>
    return;
  if (length > 6)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b06      	cmp	r3, #6
 800256c:	d901      	bls.n	8002572 <tm1637_write_raw+0x26>
    length = 6;
 800256e:	2306      	movs	r3, #6
 8002570:	71fb      	strb	r3, [r7, #7]
  // write COMM1
  tm1637_start(tm1637);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fea7 	bl	80022c6 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM1);
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff fedf 	bl	800233e <tm1637_write_byte>
  tm1637_stop(tm1637);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff feb3 	bl	80022ec <tm1637_stop>
  // write COMM2 + first digit address
  tm1637_start(tm1637);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff fe9d 	bl	80022c6 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM2 + (pos & 0x03));
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b40      	subs	r3, #64	; 0x40
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fecf 	bl	800233e <tm1637_write_byte>
  // write the data bytes
  for (uint8_t k=0; k < length; k++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
 80025a4:	e00a      	b.n	80025bc <tm1637_write_raw+0x70>
    tm1637_write_byte(tm1637, raw[k]);
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	4413      	add	r3, r2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fec4 	bl	800233e <tm1637_write_byte>
  for (uint8_t k=0; k < length; k++)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	3301      	adds	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
 80025bc:	7dfa      	ldrb	r2, [r7, #23]
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3f0      	bcc.n	80025a6 <tm1637_write_raw+0x5a>
  tm1637_stop(tm1637);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fe91 	bl	80022ec <tm1637_stop>
  // write COMM3 + brightness
  tm1637_start(tm1637);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fe7b 	bl	80022c6 <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM3 + tm1637->brightness);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	3b80      	subs	r3, #128	; 0x80
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff feaf 	bl	800233e <tm1637_write_byte>
  tm1637_stop(tm1637);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff fe83 	bl	80022ec <tm1637_stop>
 80025e6:	e000      	b.n	80025ea <tm1637_write_raw+0x9e>
    return;
 80025e8:	bf00      	nop
}
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <tm1637_write_int>:
  tm1637_write_raw(tm1637, segments, length, pos);
  tm1637_unlock(tm1637);  
}
//#######################################################################################################################
void tm1637_write_int(tm1637_t *tm1637, int32_t digit, uint8_t pos)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
  tm1637_lock(tm1637);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff ff24 	bl	800244c <tm1637_lock>
  char str[7];
  uint8_t buffer[6] = {0};
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	2300      	movs	r3, #0
 800260a:	82bb      	strh	r3, [r7, #20]
  snprintf(str, sizeof(str) , "%d", digit);
 800260c:	f107 0018 	add.w	r0, r7, #24
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <tm1637_write_int+0xbc>)
 8002614:	2107      	movs	r1, #7
 8002616:	f005 f89f 	bl	8007758 <sniprintf>
  for (uint8_t i=0; i < 6; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	77fb      	strb	r3, [r7, #31]
 800261e:	e034      	b.n	800268a <tm1637_write_int+0x9a>
  {
    if (str[i] == '-')
 8002620:	7ffb      	ldrb	r3, [r7, #31]
 8002622:	3320      	adds	r3, #32
 8002624:	443b      	add	r3, r7
 8002626:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800262a:	2b2d      	cmp	r3, #45	; 0x2d
 800262c:	d106      	bne.n	800263c <tm1637_write_int+0x4c>
      buffer[i] = _tm1637_minus;
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	3320      	adds	r3, #32
 8002634:	443b      	add	r3, r7
 8002636:	f803 2c10 	strb.w	r2, [r3, #-16]
 800263a:	e023      	b.n	8002684 <tm1637_write_int+0x94>
    else if((str[i] >= '0') && (str[i] <= '9'))
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	3320      	adds	r3, #32
 8002640:	443b      	add	r3, r7
 8002642:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002646:	2b2f      	cmp	r3, #47	; 0x2f
 8002648:	d915      	bls.n	8002676 <tm1637_write_int+0x86>
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	3320      	adds	r3, #32
 800264e:	443b      	add	r3, r7
 8002650:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002654:	2b39      	cmp	r3, #57	; 0x39
 8002656:	d80e      	bhi.n	8002676 <tm1637_write_int+0x86>
      buffer[i] = _tm1637_digit[str[i] - 48];
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	3320      	adds	r3, #32
 800265c:	443b      	add	r3, r7
 800265e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002662:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	4911      	ldr	r1, [pc, #68]	; (80026b0 <tm1637_write_int+0xc0>)
 800266a:	5c8a      	ldrb	r2, [r1, r2]
 800266c:	3320      	adds	r3, #32
 800266e:	443b      	add	r3, r7
 8002670:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002674:	e006      	b.n	8002684 <tm1637_write_int+0x94>
    else
    {
      buffer[i] = 0;
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	3320      	adds	r3, #32
 800267a:	443b      	add	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	f803 2c10 	strb.w	r2, [r3, #-16]
      break;
 8002682:	e005      	b.n	8002690 <tm1637_write_int+0xa0>
  for (uint8_t i=0; i < 6; i++)
 8002684:	7ffb      	ldrb	r3, [r7, #31]
 8002686:	3301      	adds	r3, #1
 8002688:	77fb      	strb	r3, [r7, #31]
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d9c7      	bls.n	8002620 <tm1637_write_int+0x30>
    }
  }
  tm1637_write_raw(tm1637, buffer, 6, pos);              
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f107 0110 	add.w	r1, r7, #16
 8002696:	2206      	movs	r2, #6
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff57 	bl	800254c <tm1637_write_raw>
  tm1637_unlock(tm1637);  
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fee7 	bl	8002472 <tm1637_unlock>
}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	08009e20 	.word	0x08009e20
 80026b0:	08009ea4 	.word	0x08009ea4

080026b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_Init+0x3c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_Init+0x3c>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ca:	2003      	movs	r0, #3
 80026cc:	f000 f962 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026d0:	2000      	movs	r0, #0
 80026d2:	f000 f80f 	bl	80026f4 <HAL_InitTick>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	e001      	b.n	80026e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e2:	f7fe ff87 	bl	80015f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026e6:	79fb      	ldrb	r3, [r7, #7]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_InitTick+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_InitTick+0x70>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_InitTick+0x6c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f96d 	bl	80029fe <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d809      	bhi.n	8002744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f000 f937 	bl	80029aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_InitTick+0x74>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e007      	b.n	8002754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e004      	b.n	8002754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e001      	b.n	8002754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000001c 	.word	0x2000001c
 8002764:	20000008 	.word	0x20000008
 8002768:	20000018 	.word	0x20000018

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	2000001c 	.word	0x2000001c
 8002790:	200005ac 	.word	0x200005ac

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200005ac 	.word	0x200005ac

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_Delay+0x44>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000001c 	.word	0x2000001c

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e098      	b.n	8002b5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_DMA_Init+0x150>)
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d80f      	bhi.n	8002a56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_DMA_Init+0x154>)
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <HAL_DMA_Init+0x158>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	009a      	lsls	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a48      	ldr	r2, [pc, #288]	; (8002b74 <HAL_DMA_Init+0x15c>)
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
 8002a54:	e00e      	b.n	8002a74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_DMA_Init+0x160>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <HAL_DMA_Init+0x158>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	009a      	lsls	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <HAL_DMA_Init+0x164>)
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d039      	beq.n	8002b44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_DMA_Init+0x15c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11a      	bne.n	8002b10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_DMA_Init+0x168>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f003 031c 	and.w	r3, r3, #28
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4924      	ldr	r1, [pc, #144]	; (8002b80 <HAL_DMA_Init+0x168>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_DMA_Init+0x168>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f003 031c 	and.w	r3, r3, #28
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	491d      	ldr	r1, [pc, #116]	; (8002b80 <HAL_DMA_Init+0x168>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	e019      	b.n	8002b44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_DMA_Init+0x16c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f003 031c 	and.w	r3, r3, #28
 8002b1c:	210f      	movs	r1, #15
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	4917      	ldr	r1, [pc, #92]	; (8002b84 <HAL_DMA_Init+0x16c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_DMA_Init+0x16c>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f003 031c 	and.w	r3, r3, #28
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	4911      	ldr	r1, [pc, #68]	; (8002b84 <HAL_DMA_Init+0x16c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40020407 	.word	0x40020407
 8002b6c:	bffdfff8 	.word	0xbffdfff8
 8002b70:	cccccccd 	.word	0xcccccccd
 8002b74:	40020000 	.word	0x40020000
 8002b78:	bffdfbf8 	.word	0xbffdfbf8
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	400200a8 	.word	0x400200a8
 8002b84:	400204a8 	.word	0x400204a8

08002b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Start_IT+0x20>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e04b      	b.n	8002c40 <HAL_DMA_Start_IT+0xb8>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d13a      	bne.n	8002c32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f8e0 	bl	8002da6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 020e 	orr.w	r2, r2, #14
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e00f      	b.n	8002c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 020a 	orr.w	r2, r2, #10
 8002c1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e005      	b.n	8002c3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f003 031c 	and.w	r3, r3, #28
 8002c68:	2204      	movs	r2, #4
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d026      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x7a>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d021      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f003 021c 	and.w	r2, r3, #28
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2104      	movs	r1, #4
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d071      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cc0:	e06c      	b.n	8002d9c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f003 031c 	and.w	r3, r3, #28
 8002cca:	2202      	movs	r2, #2
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02e      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xec>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d029      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020a 	bic.w	r2, r2, #10
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f003 021c 	and.w	r2, r3, #28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2102      	movs	r1, #2
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d038      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d32:	e033      	b.n	8002d9c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 031c 	and.w	r3, r3, #28
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02a      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x156>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d025      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020e 	bic.w	r2, r2, #14
 8002d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f003 021c 	and.w	r2, r3, #28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f202 	lsl.w	r2, r1, r2
 8002d74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
}
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f003 021c 	and.w	r2, r3, #28
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d108      	bne.n	8002dea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002de8:	e007      	b.n	8002dfa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	60da      	str	r2, [r3, #12]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e17f      	b.n	8003118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8171 	beq.w	8003112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d005      	beq.n	8002e48 <HAL_GPIO_Init+0x40>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d118      	bne.n	8002ee8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d017      	beq.n	8002f24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d123      	bne.n	8002f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	6939      	ldr	r1, [r7, #16]
 8002f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0203 	and.w	r2, r3, #3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80ac 	beq.w	8003112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	4a5e      	ldr	r2, [pc, #376]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_GPIO_Init+0x330>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fd2:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_GPIO_Init+0x334>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x242>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x338>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x23e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4e      	ldr	r2, [pc, #312]	; (8003144 <HAL_GPIO_Init+0x33c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x23a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <HAL_GPIO_Init+0x340>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x236>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x344>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x232>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_GPIO_Init+0x348>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x22e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x34c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x22a>
 800302e:	2306      	movs	r3, #6
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003032:	2307      	movs	r3, #7
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x244>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x244>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x244>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x244>
 800304a:	2300      	movs	r3, #0
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800305c:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_GPIO_Init+0x334>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_GPIO_Init+0x350>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800308e:	4a32      	ldr	r2, [pc, #200]	; (8003158 <HAL_GPIO_Init+0x350>)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_GPIO_Init+0x350>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_GPIO_Init+0x350>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_GPIO_Init+0x350>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f ae78 	bne.w	8002e18 <HAL_GPIO_Init+0x10>
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	48000400 	.word	0x48000400
 8003144:	48000800 	.word	0x48000800
 8003148:	48000c00 	.word	0x48000c00
 800314c:	48001000 	.word	0x48001000
 8003150:	48001400 	.word	0x48001400
 8003154:	48001800 	.word	0x48001800
 8003158:	40010400 	.word	0x40010400

0800315c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e001      	b.n	800317e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
 8003198:	4613      	mov	r3, r2
 800319a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800319c:	787b      	ldrb	r3, [r7, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e6:	d130      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f4:	d038      	beq.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2232      	movs	r2, #50	; 0x32
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0c9b      	lsrs	r3, r3, #18
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321c:	e002      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d102      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f2      	bne.n	800321e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d110      	bne.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e00f      	b.n	800326a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d007      	beq.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000
 800327c:	20000008 	.word	0x20000008
 8003280:	431bde83 	.word	0x431bde83

08003284 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3ca      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003296:	4b97      	ldr	r3, [pc, #604]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a0:	4b94      	ldr	r3, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80e4 	beq.w	8003480 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_RCC_OscConfig+0x4a>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	f040 808b 	bne.w	80033dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 8087 	bne.w	80033dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e3a2      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_RCC_OscConfig+0x7c>
 80032f6:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fe:	e005      	b.n	800330c <HAL_RCC_OscConfig+0x88>
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800330c:	4293      	cmp	r3, r2
 800330e:	d223      	bcs.n	8003358 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fd55 	bl	8003dc4 <RCC_SetFlashLatencyFromMSIRange>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e383      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003324:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	496d      	ldr	r1, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4968      	ldr	r1, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
 8003356:	e025      	b.n	80033a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4960      	ldr	r1, [pc, #384]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	495b      	ldr	r1, [pc, #364]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd15 	bl	8003dc4 <RCC_SetFlashLatencyFromMSIRange>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e343      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a4:	f000 fc4a 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	4950      	ldr	r1, [pc, #320]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_RCC_OscConfig+0x278>)
 80033c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033c4:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f993 	bl	80026f4 <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d052      	beq.n	800347e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	e327      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d032      	beq.n	800344a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a42      	ldr	r2, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f0:	f7ff f9d0 	bl	8002794 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f8:	f7ff f9cc 	bl	8002794 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e310      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340a:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a36      	ldr	r2, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4931      	ldr	r1, [pc, #196]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003434:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	492c      	ldr	r1, [pc, #176]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	e01a      	b.n	8003480 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003456:	f7ff f99d 	bl	8002794 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800345e:	f7ff f999 	bl	8002794 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e2dd      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x1da>
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800347e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d074      	beq.n	8003576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x21a>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d10e      	bne.n	80034b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d064      	beq.n	8003574 <HAL_RCC_OscConfig+0x2f0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d160      	bne.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e2ba      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x24a>
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e026      	b.n	800351c <HAL_RCC_OscConfig+0x298>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d6:	d115      	bne.n	8003504 <HAL_RCC_OscConfig+0x280>
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a02      	ldr	r2, [pc, #8]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e014      	b.n	800351c <HAL_RCC_OscConfig+0x298>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08009e5c 	.word	0x08009e5c
 80034fc:	20000008 	.word	0x20000008
 8003500:	20000018 	.word	0x20000018
 8003504:	4ba0      	ldr	r3, [pc, #640]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a9f      	ldr	r2, [pc, #636]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b9d      	ldr	r3, [pc, #628]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a9c      	ldr	r2, [pc, #624]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7ff f936 	bl	8002794 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff f932 	bl	8002794 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e276      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x2a8>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7ff f922 	bl	8002794 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7ff f91e 	bl	8002794 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e262      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x2d0>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d060      	beq.n	8003644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x310>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d116      	bne.n	80035c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	4b7c      	ldr	r3, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x328>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e23f      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4973      	ldr	r1, [pc, #460]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c0:	e040      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7ff f8dd 	bl	8002794 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7ff f8d9 	bl	8002794 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e21d      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f0:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b62      	ldr	r3, [pc, #392]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	495f      	ldr	r1, [pc, #380]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5c      	ldr	r2, [pc, #368]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7ff f8b9 	bl	8002794 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003626:	f7ff f8b5 	bl	8002794 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1f9      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03c      	beq.n	80036ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01c      	beq.n	8003692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7ff f894 	bl	8002794 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7ff f890 	bl	8002794 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1d4      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCC_OscConfig+0x3ec>
 8003690:	e01b      	b.n	80036ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a2:	f7ff f877 	bl	8002794 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7ff f873 	bl	8002794 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1b7      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a6 	beq.w	8003824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <HAL_RCC_OscConfig+0x508>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d118      	bne.n	8003742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_OscConfig+0x508>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_RCC_OscConfig+0x508>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371c:	f7ff f83a 	bl	8002794 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7ff f836 	bl	8002794 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e17a      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_RCC_OscConfig+0x508>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x4d8>
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	4a0d      	ldr	r2, [pc, #52]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375a:	e029      	b.n	80037b0 <HAL_RCC_OscConfig+0x52c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d115      	bne.n	8003790 <HAL_RCC_OscConfig+0x50c>
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	4a03      	ldr	r2, [pc, #12]	; (8003788 <HAL_RCC_OscConfig+0x504>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x52c>
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	40007000 	.word	0x40007000
 8003790:	4b9c      	ldr	r3, [pc, #624]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	4a9b      	ldr	r2, [pc, #620]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a0:	4b98      	ldr	r3, [pc, #608]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a97      	ldr	r2, [pc, #604]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d016      	beq.n	80037e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fe ffec 	bl	8002794 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fe ffe8 	bl	8002794 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e12a      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d6:	4b8b      	ldr	r3, [pc, #556]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ed      	beq.n	80037c0 <HAL_RCC_OscConfig+0x53c>
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fe ffd5 	bl	8002794 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fe ffd1 	bl	8002794 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e113      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003804:	4b7f      	ldr	r3, [pc, #508]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ed      	bne.n	80037ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b7a      	ldr	r3, [pc, #488]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a79      	ldr	r2, [pc, #484]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80fe 	beq.w	8003a2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2b02      	cmp	r3, #2
 8003834:	f040 80d0 	bne.w	80039d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003838:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d130      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	3b01      	subs	r3, #1
 8003858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d127      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d11f      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003878:	2a07      	cmp	r2, #7
 800387a:	bf14      	ite	ne
 800387c:	2201      	movne	r2, #1
 800387e:	2200      	moveq	r2, #0
 8003880:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003882:	4293      	cmp	r3, r2
 8003884:	d113      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d109      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	3b01      	subs	r3, #1
 80038a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d06e      	beq.n	800398c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d069      	beq.n	8003988 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038c0:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0ad      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038dc:	f7fe ff5a 	bl	8002794 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe ff56 	bl	8002794 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e09a      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f6:	4b43      	ldr	r3, [pc, #268]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <HAL_RCC_OscConfig+0x784>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003912:	3a01      	subs	r2, #1
 8003914:	0112      	lsls	r2, r2, #4
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391c:	0212      	lsls	r2, r2, #8
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0552      	lsls	r2, r2, #21
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003930:	0852      	lsrs	r2, r2, #1
 8003932:	3a01      	subs	r2, #1
 8003934:	0652      	lsls	r2, r2, #25
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800393c:	0912      	lsrs	r2, r2, #4
 800393e:	0452      	lsls	r2, r2, #17
 8003940:	430a      	orrs	r2, r1
 8003942:	4930      	ldr	r1, [pc, #192]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003944:	4313      	orrs	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003960:	f7fe ff18 	bl	8002794 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe ff14 	bl	8002794 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e058      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003986:	e050      	b.n	8003a2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04f      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d148      	bne.n	8003a2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b0:	f7fe fef0 	bl	8002794 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe feec 	bl	8002794 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e030      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x734>
 80039d6:	e028      	b.n	8003a2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d023      	beq.n	8003a26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCC_OscConfig+0x780>)
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe fed3 	bl	8002794 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f0:	e00c      	b.n	8003a0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fe fecf 	bl	8002794 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d905      	bls.n	8003a0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e013      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
 8003a04:	40021000 	.word	0x40021000
 8003a08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_OscConfig+0x7b0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ec      	bne.n	80039f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x7b0>)
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	4905      	ldr	r1, [pc, #20]	; (8003a34 <HAL_RCC_OscConfig+0x7b0>)
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x7b4>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
 8003a24:	e001      	b.n	8003a2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	feeefffc 	.word	0xfeeefffc

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0e7      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	4970      	ldr	r1, [pc, #448]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b6e      	ldr	r3, [pc, #440]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0cf      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4960      	ldr	r1, [pc, #384]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04c      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d121      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0a6      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e09a      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e08e      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b02:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e086      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4943      	ldr	r1, [pc, #268]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fe fe36 	bl	8002794 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fe fe32 	bl	8002794 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e06e      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d208      	bcs.n	8003b82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	492b      	ldr	r1, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d210      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 0207 	bic.w	r2, r3, #7
 8003b98:	4923      	ldr	r1, [pc, #140]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e036      	b.n	8003c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4918      	ldr	r1, [pc, #96]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4910      	ldr	r1, [pc, #64]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf0:	f000 f824 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	490b      	ldr	r1, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x1f4>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1f8>)
 8003c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1fc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fd6d 	bl	80026f4 <HAL_InitTick>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40022000 	.word	0x40022000
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	08009e5c 	.word	0x08009e5c
 8003c34:	20000008 	.word	0x20000008
 8003c38:	20000018 	.word	0x20000018

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d121      	bne.n	8003cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d11e      	bne.n	8003cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c7c:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e004      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cc0:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d134      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ce0:	e005      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ce4:	617b      	str	r3, [r7, #20]
      break;
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cea:	617b      	str	r3, [r7, #20]
      break;
 8003cec:	e002      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	617b      	str	r3, [r7, #20]
      break;
 8003cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	3301      	adds	r3, #1
 8003d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	fb03 f202 	mul.w	r2, r3, r2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	0e5b      	lsrs	r3, r3, #25
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	3301      	adds	r3, #1
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d34:	69bb      	ldr	r3, [r7, #24]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08009e74 	.word	0x08009e74
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	007a1200 	.word	0x007a1200

08003d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000008 	.word	0x20000008

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4904      	ldr	r1, [pc, #16]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08009e6c 	.word	0x08009e6c

08003d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d9c:	f7ff ffda 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0adb      	lsrs	r3, r3, #11
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08009e6c 	.word	0x08009e6c

08003dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ddc:	f7ff f9ee 	bl	80031bc <HAL_PWREx_GetVoltageRange>
 8003de0:	6178      	str	r0, [r7, #20]
 8003de2:	e014      	b.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	6593      	str	r3, [r2, #88]	; 0x58
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dfc:	f7ff f9de 	bl	80031bc <HAL_PWREx_GetVoltageRange>
 8003e00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e14:	d10b      	bne.n	8003e2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d919      	bls.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e20:	d902      	bls.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e22:	2302      	movs	r3, #2
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	e013      	b.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e28:	2301      	movs	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e010      	b.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d902      	bls.n	8003e3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e34:	2303      	movs	r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	e00a      	b.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b80      	cmp	r3, #128	; 0x80
 8003e3e:	d102      	bne.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e40:	2302      	movs	r3, #2
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e004      	b.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b70      	cmp	r3, #112	; 0x70
 8003e4a:	d101      	bne.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 0207 	bic.w	r2, r3, #7
 8003e58:	4909      	ldr	r1, [pc, #36]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d001      	beq.n	8003e72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40022000 	.word	0x40022000

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e90:	2300      	movs	r3, #0
 8003e92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d041      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ea8:	d02a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eae:	d824      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eb4:	d008      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eba:	d81e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ec6:	e018      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ec8:	4b86      	ldr	r3, [pc, #536]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a85      	ldr	r2, [pc, #532]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed4:	e015      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fabb 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee6:	e00c      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3320      	adds	r3, #32
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fba6 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	74fb      	strb	r3, [r7, #19]
      break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f08:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	4973      	ldr	r1, [pc, #460]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d041      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f38:	d02a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f3e:	d824      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f44:	d008      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4a:	d81e      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f56:	e018      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f58:	4b62      	ldr	r3, [pc, #392]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a61      	ldr	r2, [pc, #388]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f64:	e015      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fa73 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f76:	e00c      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3320      	adds	r3, #32
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fb5e 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f98:	4b52      	ldr	r3, [pc, #328]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa6:	494f      	ldr	r1, [pc, #316]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fae:	e001      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a0 	beq.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004004:	f7fe fbc6 	bl	8002794 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800400a:	e009      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400c:	f7fe fbc2 	bl	8002794 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d902      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	74fb      	strb	r3, [r7, #19]
        break;
 800401e:	e005      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ef      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d15c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004032:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01f      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	d019      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800405c:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe fb81 	bl	8002794 <HAL_GetTick>
 8004092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004094:	e00b      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe fb7d 	bl	8002794 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d902      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	74fb      	strb	r3, [r7, #19]
            break;
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ec      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	4904      	ldr	r1, [pc, #16]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	74bb      	strb	r3, [r7, #18]
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f0:	7c7b      	ldrb	r3, [r7, #17]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f6:	4b9e      	ldr	r3, [pc, #632]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	4a9d      	ldr	r2, [pc, #628]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410e:	4b98      	ldr	r3, [pc, #608]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f023 0203 	bic.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	4994      	ldr	r1, [pc, #592]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004130:	4b8f      	ldr	r3, [pc, #572]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 020c 	bic.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	498c      	ldr	r1, [pc, #560]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004152:	4b87      	ldr	r3, [pc, #540]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	4983      	ldr	r1, [pc, #524]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004174:	4b7e      	ldr	r3, [pc, #504]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	497b      	ldr	r1, [pc, #492]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	4972      	ldr	r1, [pc, #456]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b8:	4b6d      	ldr	r3, [pc, #436]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	496a      	ldr	r1, [pc, #424]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	4961      	ldr	r1, [pc, #388]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041fc:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	4959      	ldr	r1, [pc, #356]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421e:	4b54      	ldr	r3, [pc, #336]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422c:	4950      	ldr	r1, [pc, #320]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	4948      	ldr	r1, [pc, #288]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004262:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	493f      	ldr	r1, [pc, #252]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d028      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004284:	4b3a      	ldr	r3, [pc, #232]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004292:	4937      	ldr	r1, [pc, #220]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b32      	ldr	r3, [pc, #200]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e011      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f8c8 	bl	8004458 <RCCEx_PLLSAI1_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d028      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	491f      	ldr	r1, [pc, #124]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a1a      	ldr	r2, [pc, #104]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430c:	60d3      	str	r3, [r2, #12]
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004318:	d10c      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f899 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d02b      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435e:	d109      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a02      	ldr	r2, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436a:	60d3      	str	r3, [r2, #12]
 800436c:	e014      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437c:	d10c      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f867 	bl	8004458 <RCCEx_PLLSAI1_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02f      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b2:	4928      	ldr	r1, [pc, #160]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f844 	bl	8004458 <RCCEx_PLLSAI1_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3320      	adds	r3, #32
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f925 	bl	8004640 <RCCEx_PLLSAI2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441e:	490d      	ldr	r1, [pc, #52]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004442:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800444a:	7cbb      	ldrb	r3, [r7, #18]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000

08004458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004466:	4b75      	ldr	r3, [pc, #468]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d018      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004472:	4b72      	ldr	r3, [pc, #456]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d10d      	bne.n	800449e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
       ||
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800448a:	4b6c      	ldr	r3, [pc, #432]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
       ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d047      	beq.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e044      	b.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d018      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x86>
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d825      	bhi.n	80044fc <RCCEx_PLLSAI1_Config+0xa4>
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d002      	beq.n	80044ba <RCCEx_PLLSAI1_Config+0x62>
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d009      	beq.n	80044cc <RCCEx_PLLSAI1_Config+0x74>
 80044b8:	e020      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ba:	4b60      	ldr	r3, [pc, #384]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11d      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ca:	e01a      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044cc:	4b5b      	ldr	r3, [pc, #364]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d116      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044dc:	e013      	b.n	8004506 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044de:	4b57      	ldr	r3, [pc, #348]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ea:	4b54      	ldr	r3, [pc, #336]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044fa:	e006      	b.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e004      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800450a:	bf00      	nop
    }

    if(status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	430b      	orrs	r3, r1
 8004528:	4944      	ldr	r1, [pc, #272]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d17d      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a40      	ldr	r2, [pc, #256]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fe f928 	bl	8002794 <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004546:	e009      	b.n	800455c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004548:	f7fe f924 	bl	8002794 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d902      	bls.n	800455c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	73fb      	strb	r3, [r7, #15]
        break;
 800455a:	e005      	b.n	8004568 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ef      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d160      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d111      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
 8004584:	0211      	lsls	r1, r2, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68d2      	ldr	r2, [r2, #12]
 800458a:	0912      	lsrs	r2, r2, #4
 800458c:	0452      	lsls	r2, r2, #17
 800458e:	430a      	orrs	r2, r1
 8004590:	492a      	ldr	r1, [pc, #168]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]
 8004596:	e027      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d112      	bne.n	80045c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	0211      	lsls	r1, r2, #8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6912      	ldr	r2, [r2, #16]
 80045b4:	0852      	lsrs	r2, r2, #1
 80045b6:	3a01      	subs	r2, #1
 80045b8:	0552      	lsls	r2, r2, #21
 80045ba:	430a      	orrs	r2, r1
 80045bc:	491f      	ldr	r1, [pc, #124]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
 80045c2:	e011      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6952      	ldr	r2, [r2, #20]
 80045da:	0852      	lsrs	r2, r2, #1
 80045dc:	3a01      	subs	r2, #1
 80045de:	0652      	lsls	r2, r2, #25
 80045e0:	430a      	orrs	r2, r1
 80045e2:	4916      	ldr	r1, [pc, #88]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe f8ce 	bl	8002794 <HAL_GetTick>
 80045f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045fa:	e009      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fc:	f7fe f8ca 	bl	8002794 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d902      	bls.n	8004610 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	73fb      	strb	r3, [r7, #15]
          break;
 800460e:	e005      	b.n	800461c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	4904      	ldr	r1, [pc, #16]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000

08004640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800464e:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d018      	beq.n	800468c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800465a:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0203 	and.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d10d      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
       ||
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004672:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
       ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d047      	beq.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e044      	b.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d018      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0x86>
 8004694:	2b03      	cmp	r3, #3
 8004696:	d825      	bhi.n	80046e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004698:	2b01      	cmp	r3, #1
 800469a:	d002      	beq.n	80046a2 <RCCEx_PLLSAI2_Config+0x62>
 800469c:	2b02      	cmp	r3, #2
 800469e:	d009      	beq.n	80046b4 <RCCEx_PLLSAI2_Config+0x74>
 80046a0:	e020      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d11d      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b2:	e01a      	b.n	80046ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c4:	e013      	b.n	80046ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d2:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e2:	e006      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e004      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ea:	bf00      	nop
 80046ec:	e002      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	430b      	orrs	r3, r1
 8004710:	4939      	ldr	r1, [pc, #228]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d167      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a35      	ldr	r2, [pc, #212]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004728:	f7fe f834 	bl	8002794 <HAL_GetTick>
 800472c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800472e:	e009      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004730:	f7fe f830 	bl	8002794 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d902      	bls.n	8004744 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	73fb      	strb	r3, [r7, #15]
        break;
 8004742:	e005      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ef      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d14a      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d111      	bne.n	8004780 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	0211      	lsls	r1, r2, #8
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	0912      	lsrs	r2, r2, #4
 8004774:	0452      	lsls	r2, r2, #17
 8004776:	430a      	orrs	r2, r1
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	614b      	str	r3, [r1, #20]
 800477e:	e011      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6912      	ldr	r2, [r2, #16]
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	3a01      	subs	r2, #1
 800479a:	0652      	lsls	r2, r2, #25
 800479c:	430a      	orrs	r2, r1
 800479e:	4916      	ldr	r1, [pc, #88]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fd fff0 	bl	8002794 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b8:	f7fd ffec 	bl	8002794 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e049      	b.n	80048a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc ff0a 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fbea 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e049      	b.n	8004950 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f841 	bl	8004958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f000 fb93 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0202 	mvn.w	r2, #2
 80049a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fb0d 	bl	8004fd6 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 faff 	bl	8004fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fb10 	bl	8004fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0204 	mvn.w	r2, #4
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fae7 	bl	8004fd6 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fad9 	bl	8004fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 faea 	bl	8004fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d020      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0208 	mvn.w	r2, #8
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fac1 	bl	8004fd6 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fab3 	bl	8004fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fac4 	bl	8004fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0210 	mvn.w	r2, #16
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa9b 	bl	8004fd6 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa8d 	bl	8004fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa9e 	bl	8004fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0201 	mvn.w	r2, #1
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa6b 	bl	8004fae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f83a 	bl	8005b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 f832 	bl	8005b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa5d 	bl	8004ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0220 	mvn.w	r2, #32
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fffa 	bl	8005b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0ff      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b14      	cmp	r3, #20
 8004b9a:	f200 80f0 	bhi.w	8004d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004d7f 	.word	0x08004d7f
 8004bac:	08004d7f 	.word	0x08004d7f
 8004bb0:	08004d7f 	.word	0x08004d7f
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004d7f 	.word	0x08004d7f
 8004bbc:	08004d7f 	.word	0x08004d7f
 8004bc0:	08004d7f 	.word	0x08004d7f
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004d7f 	.word	0x08004d7f
 8004bcc:	08004d7f 	.word	0x08004d7f
 8004bd0:	08004d7f 	.word	0x08004d7f
 8004bd4:	08004cbb 	.word	0x08004cbb
 8004bd8:	08004d7f 	.word	0x08004d7f
 8004bdc:	08004d7f 	.word	0x08004d7f
 8004be0:	08004d7f 	.word	0x08004d7f
 8004be4:	08004cfd 	.word	0x08004cfd
 8004be8:	08004d7f 	.word	0x08004d7f
 8004bec:	08004d7f 	.word	0x08004d7f
 8004bf0:	08004d7f 	.word	0x08004d7f
 8004bf4:	08004d3d 	.word	0x08004d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 faa2 	bl	8005148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0204 	bic.w	r2, r2, #4
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	619a      	str	r2, [r3, #24]
      break;
 8004c36:	e0a5      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb12 	bl	8005268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
      break;
 8004c78:	e084      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fb7b 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0204 	bic.w	r2, r2, #4
 8004ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
      break;
 8004cb8:	e064      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fbe3 	bl	800548c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	021a      	lsls	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
      break;
 8004cfa:	e043      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fc2c 	bl	8005560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d3a:	e023      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fc70 	bl	8005628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d7c:	e002      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
      break;
 8004d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b6      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x18a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d03e      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xd8>
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	f200 8087 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	f000 8086 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x176>
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	d87f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d01a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0xaa>
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d87b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d050      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x11e>
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d877      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d03c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xfe>
 8004e1c:	2b50      	cmp	r3, #80	; 0x50
 8004e1e:	d873      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d058      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x13e>
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d86f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d064      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d86b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d060      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d867      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d05a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e40:	e062      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	f000 fd5c 	bl	800590e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	609a      	str	r2, [r3, #8]
      break;
 8004e6e:	e04f      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	f000 fd45 	bl	800590e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e92:	609a      	str	r2, [r3, #8]
      break;
 8004e94:	e03c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 fcb9 	bl	800581a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2150      	movs	r1, #80	; 0x50
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fd12 	bl	80058d8 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e02c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 fcd8 	bl	8005878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2160      	movs	r1, #96	; 0x60
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fd02 	bl	80058d8 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e01c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 fc99 	bl	800581a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fcf2 	bl	80058d8 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 fce9 	bl	80058d8 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e003      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e031      	b.n	8004fa6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fbcd 	bl	80056f4 <TIM_SlaveTimer_SetConfig>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e018      	b.n	8004fa6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f82:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f92:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d00f      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3d      	ldr	r2, [pc, #244]	; (800512c <TIM_Base_SetConfig+0x118>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <TIM_Base_SetConfig+0x120>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <TIM_Base_SetConfig+0x114>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01f      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d01b      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	; (800512c <TIM_Base_SetConfig+0x118>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d017      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_Base_SetConfig+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00f      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00b      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <TIM_Base_SetConfig+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d007      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <TIM_Base_SetConfig+0x12c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a26      	ldr	r2, [pc, #152]	; (8005144 <TIM_Base_SetConfig+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <TIM_Base_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00f      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a12      	ldr	r2, [pc, #72]	; (8005138 <TIM_Base_SetConfig+0x124>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <TIM_Base_SetConfig+0x128>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <TIM_Base_SetConfig+0x12c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <TIM_Base_SetConfig+0x130>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d103      	bne.n	8005114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	615a      	str	r2, [r3, #20]
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40013400 	.word	0x40013400
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800

08005148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f023 0201 	bic.w	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 0302 	bic.w	r3, r3, #2
 8005194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <TIM_OC1_SetConfig+0x10c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00f      	beq.n	80051c8 <TIM_OC1_SetConfig+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <TIM_OC1_SetConfig+0x110>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <TIM_OC1_SetConfig+0x80>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <TIM_OC1_SetConfig+0x114>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d007      	beq.n	80051c8 <TIM_OC1_SetConfig+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a29      	ldr	r2, [pc, #164]	; (8005260 <TIM_OC1_SetConfig+0x118>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC1_SetConfig+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a28      	ldr	r2, [pc, #160]	; (8005264 <TIM_OC1_SetConfig+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10c      	bne.n	80051e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0308 	bic.w	r3, r3, #8
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <TIM_OC1_SetConfig+0x10c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_OC1_SetConfig+0xc2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <TIM_OC1_SetConfig+0x110>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC1_SetConfig+0xc2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <TIM_OC1_SetConfig+0x114>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC1_SetConfig+0xc2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <TIM_OC1_SetConfig+0x118>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC1_SetConfig+0xc2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a17      	ldr	r2, [pc, #92]	; (8005264 <TIM_OC1_SetConfig+0x11c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d111      	bne.n	800522e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0210 	bic.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0320 	bic.w	r3, r3, #32
 80052b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a28      	ldr	r2, [pc, #160]	; (8005368 <TIM_OC2_SetConfig+0x100>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC2_SetConfig+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a27      	ldr	r2, [pc, #156]	; (800536c <TIM_OC2_SetConfig+0x104>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10d      	bne.n	80052f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <TIM_OC2_SetConfig+0x100>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00f      	beq.n	8005318 <TIM_OC2_SetConfig+0xb0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <TIM_OC2_SetConfig+0x104>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00b      	beq.n	8005318 <TIM_OC2_SetConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_OC2_SetConfig+0x108>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_OC2_SetConfig+0xb0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_OC2_SetConfig+0x10c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC2_SetConfig+0xb0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_OC2_SetConfig+0x110>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d113      	bne.n	8005340 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800531e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <TIM_OC3_SetConfig+0xfc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0x6a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <TIM_OC3_SetConfig+0x100>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <TIM_OC3_SetConfig+0xfc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_OC3_SetConfig+0xae>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1b      	ldr	r2, [pc, #108]	; (800547c <TIM_OC3_SetConfig+0x100>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_OC3_SetConfig+0xae>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <TIM_OC3_SetConfig+0x104>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_OC3_SetConfig+0xae>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <TIM_OC3_SetConfig+0x108>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC3_SetConfig+0xae>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <TIM_OC3_SetConfig+0x10c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d113      	bne.n	8005452 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	031b      	lsls	r3, r3, #12
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a18      	ldr	r2, [pc, #96]	; (800554c <TIM_OC4_SetConfig+0xc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00f      	beq.n	8005510 <TIM_OC4_SetConfig+0x84>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <TIM_OC4_SetConfig+0xc4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_OC4_SetConfig+0x84>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <TIM_OC4_SetConfig+0xc8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_OC4_SetConfig+0x84>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <TIM_OC4_SetConfig+0xcc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC4_SetConfig+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a14      	ldr	r2, [pc, #80]	; (800555c <TIM_OC4_SetConfig+0xd0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d109      	bne.n	8005524 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <TIM_OC5_SetConfig+0xb4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_OC5_SetConfig+0x7a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <TIM_OC5_SetConfig+0xb8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_OC5_SetConfig+0x7a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <TIM_OC5_SetConfig+0xbc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_OC5_SetConfig+0x7a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC5_SetConfig+0xc0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_OC5_SetConfig+0x7a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a13      	ldr	r2, [pc, #76]	; (8005624 <TIM_OC5_SetConfig+0xc4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d109      	bne.n	80055ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	051b      	lsls	r3, r3, #20
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <TIM_OC6_SetConfig+0xb8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_OC6_SetConfig+0x7c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <TIM_OC6_SetConfig+0xbc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_OC6_SetConfig+0x7c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <TIM_OC6_SetConfig+0xc0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_OC6_SetConfig+0x7c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <TIM_OC6_SetConfig+0xc4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC6_SetConfig+0x7c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <TIM_OC6_SetConfig+0xc8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b70      	cmp	r3, #112	; 0x70
 8005740:	d01a      	beq.n	8005778 <TIM_SlaveTimer_SetConfig+0x84>
 8005742:	2b70      	cmp	r3, #112	; 0x70
 8005744:	d860      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 8005746:	2b60      	cmp	r3, #96	; 0x60
 8005748:	d054      	beq.n	80057f4 <TIM_SlaveTimer_SetConfig+0x100>
 800574a:	2b60      	cmp	r3, #96	; 0x60
 800574c:	d85c      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 800574e:	2b50      	cmp	r3, #80	; 0x50
 8005750:	d046      	beq.n	80057e0 <TIM_SlaveTimer_SetConfig+0xec>
 8005752:	2b50      	cmp	r3, #80	; 0x50
 8005754:	d858      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d019      	beq.n	800578e <TIM_SlaveTimer_SetConfig+0x9a>
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d854      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d055      	beq.n	800580e <TIM_SlaveTimer_SetConfig+0x11a>
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d850      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d051      	beq.n	800580e <TIM_SlaveTimer_SetConfig+0x11a>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d84c      	bhi.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04d      	beq.n	800580e <TIM_SlaveTimer_SetConfig+0x11a>
 8005772:	2b10      	cmp	r3, #16
 8005774:	d04b      	beq.n	800580e <TIM_SlaveTimer_SetConfig+0x11a>
 8005776:	e047      	b.n	8005808 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	f000 f8c1 	bl	800590e <TIM_ETR_SetConfig>
      break;
 800578c:	e040      	b.n	8005810 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b05      	cmp	r3, #5
 8005794:	d101      	bne.n	800579a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e03b      	b.n	8005812 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
      break;
 80057de:	e017      	b.n	8005810 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ec:	461a      	mov	r2, r3
 80057ee:	f000 f814 	bl	800581a <TIM_TI1_ConfigInputStage>
      break;
 80057f2:	e00d      	b.n	8005810 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005800:	461a      	mov	r2, r3
 8005802:	f000 f839 	bl	8005878 <TIM_TI2_ConfigInputStage>
      break;
 8005806:	e003      	b.n	8005810 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
      break;
 800580c:	e000      	b.n	8005810 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800580e:	bf00      	nop
  }

  return status;
 8005810:	7dfb      	ldrb	r3, [r7, #23]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0201 	bic.w	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 030a 	bic.w	r3, r3, #10
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f023 0210 	bic.w	r2, r3, #16
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	031b      	lsls	r3, r3, #12
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f043 0307 	orr.w	r3, r3, #7
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	609a      	str	r2, [r3, #8]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800590e:	b480      	push	{r7}
 8005910:	b087      	sub	sp, #28
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005928:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	431a      	orrs	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4313      	orrs	r3, r2
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	609a      	str	r2, [r3, #8]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e068      	b.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d018      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10c      	bne.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000

08005a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e065      	b.n	8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d115      	bne.n	8005b36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40013400 	.word	0x40013400

08005b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e040      	b.n	8005c2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb fdb0 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2224      	movs	r2, #36	; 0x24
 8005bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc66 	bl	80064b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f9ab 	bl	8005f40 <UART_SetConfig>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e01b      	b.n	8005c2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fce5 	bl	80065f4 <UART_CheckIdleState>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d178      	bne.n	8005d3e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Transmit+0x24>
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e071      	b.n	8005d40 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2221      	movs	r2, #33	; 0x21
 8005c68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6a:	f7fc fd93 	bl	8002794 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d108      	bne.n	8005c9c <HAL_UART_Transmit+0x68>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e003      	b.n	8005ca4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ca4:	e030      	b.n	8005d08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fd47 	bl	8006744 <UART_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e03c      	b.n	8005d40 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e008      	b.n	8005cf6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	b292      	uxth	r2, r2
 8005cee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1c8      	bne.n	8005ca6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fd10 	bl	8006744 <UART_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e005      	b.n	8005d40 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e000      	b.n	8005d40 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
  }
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d165      	bne.n	8005e2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_UART_Transmit_DMA+0x22>
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e05e      	b.n	8005e2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2221      	movs	r2, #33	; 0x21
 8005d90:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d027      	beq.n	8005dea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <HAL_UART_Transmit_DMA+0xec>)
 8005da0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <HAL_UART_Transmit_DMA+0xf0>)
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a23      	ldr	r2, [pc, #140]	; (8005e3c <HAL_UART_Transmit_DMA+0xf4>)
 8005db0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	2200      	movs	r2, #0
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3328      	adds	r3, #40	; 0x28
 8005dca:	461a      	mov	r2, r3
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	f7fc fedb 	bl	8002b88 <HAL_DMA_Start_IT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2210      	movs	r2, #16
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e020      	b.n	8005e2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	613b      	str	r3, [r7, #16]
   return(result);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	623a      	str	r2, [r7, #32]
 8005e14:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	69f9      	ldr	r1, [r7, #28]
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e000      	b.n	8005e2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
  }
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	; 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08006a69 	.word	0x08006a69
 8005e38:	08006b03 	.word	0x08006b03
 8005e3c:	08006c89 	.word	0x08006c89

08005e40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d137      	bne.n	8005ec8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_UART_Receive_DMA+0x24>
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e030      	b.n	8005eca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <HAL_UART_Receive_DMA+0x94>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d01f      	beq.n	8005eb8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d018      	beq.n	8005eb8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	613b      	str	r3, [r7, #16]
   return(result);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e6      	bne.n	8005e86 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fca8 	bl	8006814 <UART_Start_Receive_DMA>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	e000      	b.n	8005eca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3728      	adds	r7, #40	; 0x28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40008000 	.word	0x40008000

08005ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f44:	b08a      	sub	sp, #40	; 0x28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4ba4      	ldr	r3, [pc, #656]	; (8006200 <UART_SetConfig+0x2c0>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a99      	ldr	r2, [pc, #612]	; (8006204 <UART_SetConfig+0x2c4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a90      	ldr	r2, [pc, #576]	; (8006208 <UART_SetConfig+0x2c8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d126      	bne.n	8006018 <UART_SetConfig+0xd8>
 8005fca:	4b90      	ldr	r3, [pc, #576]	; (800620c <UART_SetConfig+0x2cc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d81b      	bhi.n	8006010 <UART_SetConfig+0xd0>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0xa0>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08006001 	.word	0x08006001
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006009 	.word	0x08006009
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e116      	b.n	8006226 <UART_SetConfig+0x2e6>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e112      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006000:	2304      	movs	r3, #4
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e10e      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006008:	2308      	movs	r3, #8
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e10a      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006010:	2310      	movs	r3, #16
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e106      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a7c      	ldr	r2, [pc, #496]	; (8006210 <UART_SetConfig+0x2d0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d138      	bne.n	8006094 <UART_SetConfig+0x154>
 8006022:	4b7a      	ldr	r3, [pc, #488]	; (800620c <UART_SetConfig+0x2cc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f003 030c 	and.w	r3, r3, #12
 800602c:	2b0c      	cmp	r3, #12
 800602e:	d82d      	bhi.n	800608c <UART_SetConfig+0x14c>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0xf8>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	0800606d 	.word	0x0800606d
 800603c:	0800608d 	.word	0x0800608d
 8006040:	0800608d 	.word	0x0800608d
 8006044:	0800608d 	.word	0x0800608d
 8006048:	0800607d 	.word	0x0800607d
 800604c:	0800608d 	.word	0x0800608d
 8006050:	0800608d 	.word	0x0800608d
 8006054:	0800608d 	.word	0x0800608d
 8006058:	08006075 	.word	0x08006075
 800605c:	0800608d 	.word	0x0800608d
 8006060:	0800608d 	.word	0x0800608d
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006085 	.word	0x08006085
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e0d8      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006074:	2302      	movs	r3, #2
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e0d4      	b.n	8006226 <UART_SetConfig+0x2e6>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e0d0      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e0cc      	b.n	8006226 <UART_SetConfig+0x2e6>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006092:	e0c8      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5e      	ldr	r2, [pc, #376]	; (8006214 <UART_SetConfig+0x2d4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d125      	bne.n	80060ea <UART_SetConfig+0x1aa>
 800609e:	4b5b      	ldr	r3, [pc, #364]	; (800620c <UART_SetConfig+0x2cc>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060a8:	2b30      	cmp	r3, #48	; 0x30
 80060aa:	d016      	beq.n	80060da <UART_SetConfig+0x19a>
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d818      	bhi.n	80060e2 <UART_SetConfig+0x1a2>
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d00a      	beq.n	80060ca <UART_SetConfig+0x18a>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d814      	bhi.n	80060e2 <UART_SetConfig+0x1a2>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <UART_SetConfig+0x182>
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d008      	beq.n	80060d2 <UART_SetConfig+0x192>
 80060c0:	e00f      	b.n	80060e2 <UART_SetConfig+0x1a2>
 80060c2:	2300      	movs	r3, #0
 80060c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c8:	e0ad      	b.n	8006226 <UART_SetConfig+0x2e6>
 80060ca:	2302      	movs	r3, #2
 80060cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d0:	e0a9      	b.n	8006226 <UART_SetConfig+0x2e6>
 80060d2:	2304      	movs	r3, #4
 80060d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d8:	e0a5      	b.n	8006226 <UART_SetConfig+0x2e6>
 80060da:	2308      	movs	r3, #8
 80060dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e0:	e0a1      	b.n	8006226 <UART_SetConfig+0x2e6>
 80060e2:	2310      	movs	r3, #16
 80060e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e8:	e09d      	b.n	8006226 <UART_SetConfig+0x2e6>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4a      	ldr	r2, [pc, #296]	; (8006218 <UART_SetConfig+0x2d8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d125      	bne.n	8006140 <UART_SetConfig+0x200>
 80060f4:	4b45      	ldr	r3, [pc, #276]	; (800620c <UART_SetConfig+0x2cc>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006100:	d016      	beq.n	8006130 <UART_SetConfig+0x1f0>
 8006102:	2bc0      	cmp	r3, #192	; 0xc0
 8006104:	d818      	bhi.n	8006138 <UART_SetConfig+0x1f8>
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d00a      	beq.n	8006120 <UART_SetConfig+0x1e0>
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d814      	bhi.n	8006138 <UART_SetConfig+0x1f8>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <UART_SetConfig+0x1d8>
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d008      	beq.n	8006128 <UART_SetConfig+0x1e8>
 8006116:	e00f      	b.n	8006138 <UART_SetConfig+0x1f8>
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611e:	e082      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006120:	2302      	movs	r3, #2
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006126:	e07e      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612e:	e07a      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006136:	e076      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613e:	e072      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a35      	ldr	r2, [pc, #212]	; (800621c <UART_SetConfig+0x2dc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d12a      	bne.n	80061a0 <UART_SetConfig+0x260>
 800614a:	4b30      	ldr	r3, [pc, #192]	; (800620c <UART_SetConfig+0x2cc>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006158:	d01a      	beq.n	8006190 <UART_SetConfig+0x250>
 800615a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615e:	d81b      	bhi.n	8006198 <UART_SetConfig+0x258>
 8006160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006164:	d00c      	beq.n	8006180 <UART_SetConfig+0x240>
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d815      	bhi.n	8006198 <UART_SetConfig+0x258>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <UART_SetConfig+0x238>
 8006170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006174:	d008      	beq.n	8006188 <UART_SetConfig+0x248>
 8006176:	e00f      	b.n	8006198 <UART_SetConfig+0x258>
 8006178:	2300      	movs	r3, #0
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e052      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006180:	2302      	movs	r3, #2
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e04e      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006188:	2304      	movs	r3, #4
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618e:	e04a      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006190:	2308      	movs	r3, #8
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006196:	e046      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006198:	2310      	movs	r3, #16
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619e:	e042      	b.n	8006226 <UART_SetConfig+0x2e6>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a17      	ldr	r2, [pc, #92]	; (8006204 <UART_SetConfig+0x2c4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d13a      	bne.n	8006220 <UART_SetConfig+0x2e0>
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <UART_SetConfig+0x2cc>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b8:	d01a      	beq.n	80061f0 <UART_SetConfig+0x2b0>
 80061ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061be:	d81b      	bhi.n	80061f8 <UART_SetConfig+0x2b8>
 80061c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c4:	d00c      	beq.n	80061e0 <UART_SetConfig+0x2a0>
 80061c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ca:	d815      	bhi.n	80061f8 <UART_SetConfig+0x2b8>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <UART_SetConfig+0x298>
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d008      	beq.n	80061e8 <UART_SetConfig+0x2a8>
 80061d6:	e00f      	b.n	80061f8 <UART_SetConfig+0x2b8>
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061de:	e022      	b.n	8006226 <UART_SetConfig+0x2e6>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e6:	e01e      	b.n	8006226 <UART_SetConfig+0x2e6>
 80061e8:	2304      	movs	r3, #4
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ee:	e01a      	b.n	8006226 <UART_SetConfig+0x2e6>
 80061f0:	2308      	movs	r3, #8
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e016      	b.n	8006226 <UART_SetConfig+0x2e6>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e012      	b.n	8006226 <UART_SetConfig+0x2e6>
 8006200:	efff69f3 	.word	0xefff69f3
 8006204:	40008000 	.word	0x40008000
 8006208:	40013800 	.word	0x40013800
 800620c:	40021000 	.word	0x40021000
 8006210:	40004400 	.word	0x40004400
 8006214:	40004800 	.word	0x40004800
 8006218:	40004c00 	.word	0x40004c00
 800621c:	40005000 	.word	0x40005000
 8006220:	2310      	movs	r3, #16
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a9f      	ldr	r2, [pc, #636]	; (80064a8 <UART_SetConfig+0x568>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d17a      	bne.n	8006326 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006234:	2b08      	cmp	r3, #8
 8006236:	d824      	bhi.n	8006282 <UART_SetConfig+0x342>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x300>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006265 	.word	0x08006265
 8006244:	08006283 	.word	0x08006283
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006283 	.word	0x08006283
 8006250:	08006273 	.word	0x08006273
 8006254:	08006283 	.word	0x08006283
 8006258:	08006283 	.word	0x08006283
 800625c:	08006283 	.word	0x08006283
 8006260:	0800627b 	.word	0x0800627b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fd fd82 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8006268:	61f8      	str	r0, [r7, #28]
        break;
 800626a:	e010      	b.n	800628e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b8f      	ldr	r3, [pc, #572]	; (80064ac <UART_SetConfig+0x56c>)
 800626e:	61fb      	str	r3, [r7, #28]
        break;
 8006270:	e00d      	b.n	800628e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fd fce3 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8006276:	61f8      	str	r0, [r7, #28]
        break;
 8006278:	e009      	b.n	800628e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	61fb      	str	r3, [r7, #28]
        break;
 8006280:	e005      	b.n	800628e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800628c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80fb 	beq.w	800648c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d305      	bcc.n	80062b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d903      	bls.n	80062ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062b8:	e0e8      	b.n	800648c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2200      	movs	r2, #0
 80062be:	461c      	mov	r4, r3
 80062c0:	4615      	mov	r5, r2
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	022b      	lsls	r3, r5, #8
 80062cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062d0:	0222      	lsls	r2, r4, #8
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	6849      	ldr	r1, [r1, #4]
 80062d6:	0849      	lsrs	r1, r1, #1
 80062d8:	2000      	movs	r0, #0
 80062da:	4688      	mov	r8, r1
 80062dc:	4681      	mov	r9, r0
 80062de:	eb12 0a08 	adds.w	sl, r2, r8
 80062e2:	eb43 0b09 	adc.w	fp, r3, r9
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	4650      	mov	r0, sl
 80062f6:	4659      	mov	r1, fp
 80062f8:	f7fa fc76 	bl	8000be8 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630a:	d308      	bcc.n	800631e <UART_SetConfig+0x3de>
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d204      	bcs.n	800631e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e0b6      	b.n	800648c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006324:	e0b2      	b.n	800648c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632e:	d15e      	bne.n	80063ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006334:	2b08      	cmp	r3, #8
 8006336:	d828      	bhi.n	800638a <UART_SetConfig+0x44a>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x400>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd fd02 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8006368:	61f8      	str	r0, [r7, #28]
        break;
 800636a:	e014      	b.n	8006396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd fd14 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8006370:	61f8      	str	r0, [r7, #28]
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b4d      	ldr	r3, [pc, #308]	; (80064ac <UART_SetConfig+0x56c>)
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd fc5f 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 800637e:	61f8      	str	r0, [r7, #28]
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d077      	beq.n	800648c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005a      	lsls	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	441a      	add	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d916      	bls.n	80063e6 <UART_SetConfig+0x4a6>
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d212      	bcs.n	80063e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	8afb      	ldrh	r3, [r7, #22]
 80063d8:	4313      	orrs	r3, r2
 80063da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	8afa      	ldrh	r2, [r7, #22]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e052      	b.n	800648c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063ec:	e04e      	b.n	800648c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d827      	bhi.n	8006446 <UART_SetConfig+0x506>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <UART_SetConfig+0x4bc>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006429 	.word	0x08006429
 8006404:	08006431 	.word	0x08006431
 8006408:	08006447 	.word	0x08006447
 800640c:	08006437 	.word	0x08006437
 8006410:	08006447 	.word	0x08006447
 8006414:	08006447 	.word	0x08006447
 8006418:	08006447 	.word	0x08006447
 800641c:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fd fca4 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8006424:	61f8      	str	r0, [r7, #28]
        break;
 8006426:	e014      	b.n	8006452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006428:	f7fd fcb6 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 800642c:	61f8      	str	r0, [r7, #28]
        break;
 800642e:	e010      	b.n	8006452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006430:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <UART_SetConfig+0x56c>)
 8006432:	61fb      	str	r3, [r7, #28]
        break;
 8006434:	e00d      	b.n	8006452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006436:	f7fd fc01 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 800643a:	61f8      	str	r0, [r7, #28]
        break;
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006442:	61fb      	str	r3, [r7, #28]
        break;
 8006444:	e005      	b.n	8006452 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006450:	bf00      	nop
    }

    if (pclk != 0U)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d019      	beq.n	800648c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	085a      	lsrs	r2, r3, #1
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	441a      	add	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b0f      	cmp	r3, #15
 8006470:	d909      	bls.n	8006486 <UART_SetConfig+0x546>
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d205      	bcs.n	8006486 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	e002      	b.n	800648c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	40008000 	.word	0x40008000
 80064ac:	00f42400 	.word	0x00f42400

080064b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ae:	d10a      	bne.n	80065c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b098      	sub	sp, #96	; 0x60
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006604:	f7fc f8c6 	bl	8002794 <HAL_GetTick>
 8006608:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d12e      	bne.n	8006676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f88c 	bl	8006744 <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d021      	beq.n	8006676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006646:	653b      	str	r3, [r7, #80]	; 0x50
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
 8006652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e062      	b.n	800673c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d149      	bne.n	8006718 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f856 	bl	8006744 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03c      	beq.n	8006718 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	623b      	str	r3, [r7, #32]
   return(result);
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066bc:	633b      	str	r3, [r7, #48]	; 0x30
 80066be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e6      	bne.n	800669e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3308      	adds	r3, #8
 80066ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f0:	61fa      	str	r2, [r7, #28]
 80066f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	69b9      	ldr	r1, [r7, #24]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	617b      	str	r3, [r7, #20]
   return(result);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e5      	bne.n	80066d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e011      	b.n	800673c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3758      	adds	r7, #88	; 0x58
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006754:	e049      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d045      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fc f819 	bl	8002794 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <UART_WaitOnFlagUntilTimeout+0x30>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e048      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d031      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d110      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2208      	movs	r2, #8
 800679a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f8ff 	bl	80069a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2208      	movs	r2, #8
 80067a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e029      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c4:	d111      	bne.n	80067ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f8e5 	bl	80069a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e00f      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	429a      	cmp	r2, r3
 8006806:	d0a6      	beq.n	8006756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b096      	sub	sp, #88	; 0x58
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2222      	movs	r2, #34	; 0x22
 800683c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006844:	2b00      	cmp	r3, #0
 8006846:	d028      	beq.n	800689a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684c:	4a3e      	ldr	r2, [pc, #248]	; (8006948 <UART_Start_Receive_DMA+0x134>)
 800684e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	4a3d      	ldr	r2, [pc, #244]	; (800694c <UART_Start_Receive_DMA+0x138>)
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685c:	4a3c      	ldr	r2, [pc, #240]	; (8006950 <UART_Start_Receive_DMA+0x13c>)
 800685e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006864:	2200      	movs	r2, #0
 8006866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3324      	adds	r3, #36	; 0x24
 8006872:	4619      	mov	r1, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006878:	461a      	mov	r2, r3
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	f7fc f984 	bl	8002b88 <HAL_DMA_Start_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2210      	movs	r2, #16
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e051      	b.n	800693e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b6:	657b      	str	r3, [r7, #84]	; 0x54
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	653b      	str	r3, [r7, #80]	; 0x50
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068f4:	637a      	str	r2, [r7, #52]	; 0x34
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	613b      	str	r3, [r7, #16]
   return(result);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006928:	623a      	str	r2, [r7, #32]
 800692a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	69f9      	ldr	r1, [r7, #28]
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	61bb      	str	r3, [r7, #24]
   return(result);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3758      	adds	r7, #88	; 0x58
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	08006b1f 	.word	0x08006b1f
 800694c:	08006c4b 	.word	0x08006c4b
 8006950:	08006c89 	.word	0x08006c89

08006954 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	60bb      	str	r3, [r7, #8]
   return(result);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6979      	ldr	r1, [r7, #20]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	613b      	str	r3, [r7, #16]
   return(result);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006994:	bf00      	nop
 8006996:	3724      	adds	r7, #36	; 0x24
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b095      	sub	sp, #84	; 0x54
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	643b      	str	r3, [r7, #64]	; 0x40
 80069c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e6      	bne.n	80069a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d118      	bne.n	8006a48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f023 0310 	bic.w	r3, r3, #16
 8006a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	613b      	str	r3, [r7, #16]
   return(result);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a5c:	bf00      	nop
 8006a5e:	3754      	adds	r7, #84	; 0x54
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d137      	bne.n	8006af4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aac:	633a      	str	r2, [r7, #48]	; 0x30
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	69b9      	ldr	r1, [r7, #24]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	617b      	str	r3, [r7, #20]
   return(result);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e6      	bne.n	8006ac0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006af2:	e002      	b.n	8006afa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006af4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006af6:	f7ff f9ef 	bl	8005ed8 <HAL_UART_TxCpltCallback>
}
 8006afa:	bf00      	nop
 8006afc:	3740      	adds	r7, #64	; 0x40
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff f9eb 	bl	8005eec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b09c      	sub	sp, #112	; 0x70
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d171      	bne.n	8006c1e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b60:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b94:	647a      	str	r2, [r7, #68]	; 0x44
 8006b96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d118      	bne.n	8006c1e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	69b9      	ldr	r1, [r7, #24]
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	617b      	str	r3, [r7, #20]
   return(result);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	2200      	movs	r2, #0
 8006c22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c32:	4619      	mov	r1, r3
 8006c34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c36:	f7ff f977 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c3a:	e002      	b.n	8006c42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c3e:	f7fb f9b3 	bl	8001fa8 <HAL_UART_RxCpltCallback>
}
 8006c42:	bf00      	nop
 8006c44:	3770      	adds	r7, #112	; 0x70
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d109      	bne.n	8006c7a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff f958 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c78:	e002      	b.n	8006c80 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff f940 	bl	8005f00 <HAL_UART_RxHalfCpltCallback>
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d109      	bne.n	8006cc6 <UART_DMAError+0x3e>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b21      	cmp	r3, #33	; 0x21
 8006cb6:	d106      	bne.n	8006cc6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f7ff fe47 	bl	8006954 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d109      	bne.n	8006ce8 <UART_DMAError+0x60>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b22      	cmp	r3, #34	; 0x22
 8006cd8:	d106      	bne.n	8006ce8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff fe5c 	bl	80069a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cee:	f043 0210 	orr.w	r2, r3, #16
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf8:	6978      	ldr	r0, [r7, #20]
 8006cfa:	f7ff f90b 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <__cvt>:
 8006d06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0a:	ec55 4b10 	vmov	r4, r5, d0
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	460e      	mov	r6, r1
 8006d12:	4619      	mov	r1, r3
 8006d14:	462b      	mov	r3, r5
 8006d16:	bfbb      	ittet	lt
 8006d18:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d1c:	461d      	movlt	r5, r3
 8006d1e:	2300      	movge	r3, #0
 8006d20:	232d      	movlt	r3, #45	; 0x2d
 8006d22:	700b      	strb	r3, [r1, #0]
 8006d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d2a:	4691      	mov	r9, r2
 8006d2c:	f023 0820 	bic.w	r8, r3, #32
 8006d30:	bfbc      	itt	lt
 8006d32:	4622      	movlt	r2, r4
 8006d34:	4614      	movlt	r4, r2
 8006d36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d3a:	d005      	beq.n	8006d48 <__cvt+0x42>
 8006d3c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d40:	d100      	bne.n	8006d44 <__cvt+0x3e>
 8006d42:	3601      	adds	r6, #1
 8006d44:	2102      	movs	r1, #2
 8006d46:	e000      	b.n	8006d4a <__cvt+0x44>
 8006d48:	2103      	movs	r1, #3
 8006d4a:	ab03      	add	r3, sp, #12
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	ab02      	add	r3, sp, #8
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	ec45 4b10 	vmov	d0, r4, r5
 8006d56:	4653      	mov	r3, sl
 8006d58:	4632      	mov	r2, r6
 8006d5a:	f000 fead 	bl	8007ab8 <_dtoa_r>
 8006d5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d62:	4607      	mov	r7, r0
 8006d64:	d102      	bne.n	8006d6c <__cvt+0x66>
 8006d66:	f019 0f01 	tst.w	r9, #1
 8006d6a:	d022      	beq.n	8006db2 <__cvt+0xac>
 8006d6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d70:	eb07 0906 	add.w	r9, r7, r6
 8006d74:	d110      	bne.n	8006d98 <__cvt+0x92>
 8006d76:	783b      	ldrb	r3, [r7, #0]
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d10a      	bne.n	8006d92 <__cvt+0x8c>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	f7f9 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d88:	b918      	cbnz	r0, 8006d92 <__cvt+0x8c>
 8006d8a:	f1c6 0601 	rsb	r6, r6, #1
 8006d8e:	f8ca 6000 	str.w	r6, [sl]
 8006d92:	f8da 3000 	ldr.w	r3, [sl]
 8006d96:	4499      	add	r9, r3
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da4:	b108      	cbz	r0, 8006daa <__cvt+0xa4>
 8006da6:	f8cd 900c 	str.w	r9, [sp, #12]
 8006daa:	2230      	movs	r2, #48	; 0x30
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	454b      	cmp	r3, r9
 8006db0:	d307      	bcc.n	8006dc2 <__cvt+0xbc>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db6:	1bdb      	subs	r3, r3, r7
 8006db8:	4638      	mov	r0, r7
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	b004      	add	sp, #16
 8006dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	9103      	str	r1, [sp, #12]
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e7f0      	b.n	8006dac <__cvt+0xa6>

08006dca <__exponent>:
 8006dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2900      	cmp	r1, #0
 8006dd0:	bfb8      	it	lt
 8006dd2:	4249      	neglt	r1, r1
 8006dd4:	f803 2b02 	strb.w	r2, [r3], #2
 8006dd8:	bfb4      	ite	lt
 8006dda:	222d      	movlt	r2, #45	; 0x2d
 8006ddc:	222b      	movge	r2, #43	; 0x2b
 8006dde:	2909      	cmp	r1, #9
 8006de0:	7042      	strb	r2, [r0, #1]
 8006de2:	dd2a      	ble.n	8006e3a <__exponent+0x70>
 8006de4:	f10d 0207 	add.w	r2, sp, #7
 8006de8:	4617      	mov	r7, r2
 8006dea:	260a      	movs	r6, #10
 8006dec:	4694      	mov	ip, r2
 8006dee:	fb91 f5f6 	sdiv	r5, r1, r6
 8006df2:	fb06 1415 	mls	r4, r6, r5, r1
 8006df6:	3430      	adds	r4, #48	; 0x30
 8006df8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	2c63      	cmp	r4, #99	; 0x63
 8006e00:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e04:	4629      	mov	r1, r5
 8006e06:	dcf1      	bgt.n	8006dec <__exponent+0x22>
 8006e08:	3130      	adds	r1, #48	; 0x30
 8006e0a:	f1ac 0402 	sub.w	r4, ip, #2
 8006e0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e12:	1c41      	adds	r1, r0, #1
 8006e14:	4622      	mov	r2, r4
 8006e16:	42ba      	cmp	r2, r7
 8006e18:	d30a      	bcc.n	8006e30 <__exponent+0x66>
 8006e1a:	f10d 0209 	add.w	r2, sp, #9
 8006e1e:	eba2 020c 	sub.w	r2, r2, ip
 8006e22:	42bc      	cmp	r4, r7
 8006e24:	bf88      	it	hi
 8006e26:	2200      	movhi	r2, #0
 8006e28:	4413      	add	r3, r2
 8006e2a:	1a18      	subs	r0, r3, r0
 8006e2c:	b003      	add	sp, #12
 8006e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e34:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e38:	e7ed      	b.n	8006e16 <__exponent+0x4c>
 8006e3a:	2330      	movs	r3, #48	; 0x30
 8006e3c:	3130      	adds	r1, #48	; 0x30
 8006e3e:	7083      	strb	r3, [r0, #2]
 8006e40:	70c1      	strb	r1, [r0, #3]
 8006e42:	1d03      	adds	r3, r0, #4
 8006e44:	e7f1      	b.n	8006e2a <__exponent+0x60>
	...

08006e48 <_printf_float>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	ed2d 8b02 	vpush	{d8}
 8006e50:	b08d      	sub	sp, #52	; 0x34
 8006e52:	460c      	mov	r4, r1
 8006e54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e58:	4616      	mov	r6, r2
 8006e5a:	461f      	mov	r7, r3
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	f000 fd1b 	bl	8007898 <_localeconv_r>
 8006e62:	f8d0 a000 	ldr.w	sl, [r0]
 8006e66:	4650      	mov	r0, sl
 8006e68:	f7f9 fa02 	bl	8000270 <strlen>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	9305      	str	r3, [sp, #20]
 8006e74:	f8d8 3000 	ldr.w	r3, [r8]
 8006e78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e7c:	3307      	adds	r3, #7
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	f103 0208 	add.w	r2, r3, #8
 8006e86:	f8c8 2000 	str.w	r2, [r8]
 8006e8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e98:	ee08 0a10 	vmov	s16, r0
 8006e9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea4:	4b9e      	ldr	r3, [pc, #632]	; (8007120 <_printf_float+0x2d8>)
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	f7f9 fe3f 	bl	8000b2c <__aeabi_dcmpun>
 8006eae:	bb88      	cbnz	r0, 8006f14 <_printf_float+0xcc>
 8006eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb4:	4b9a      	ldr	r3, [pc, #616]	; (8007120 <_printf_float+0x2d8>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	f7f9 fe19 	bl	8000af0 <__aeabi_dcmple>
 8006ebe:	bb48      	cbnz	r0, 8006f14 <_printf_float+0xcc>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 fe08 	bl	8000adc <__aeabi_dcmplt>
 8006ecc:	b110      	cbz	r0, 8006ed4 <_printf_float+0x8c>
 8006ece:	232d      	movs	r3, #45	; 0x2d
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	4a93      	ldr	r2, [pc, #588]	; (8007124 <_printf_float+0x2dc>)
 8006ed6:	4b94      	ldr	r3, [pc, #592]	; (8007128 <_printf_float+0x2e0>)
 8006ed8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006edc:	bf94      	ite	ls
 8006ede:	4690      	movls	r8, r2
 8006ee0:	4698      	movhi	r8, r3
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	9b05      	ldr	r3, [sp, #20]
 8006ee8:	f023 0304 	bic.w	r3, r3, #4
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	f04f 0900 	mov.w	r9, #0
 8006ef2:	9700      	str	r7, [sp, #0]
 8006ef4:	4633      	mov	r3, r6
 8006ef6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 f9da 	bl	80072b4 <_printf_common>
 8006f00:	3001      	adds	r0, #1
 8006f02:	f040 8090 	bne.w	8007026 <_printf_float+0x1de>
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	b00d      	add	sp, #52	; 0x34
 8006f0c:	ecbd 8b02 	vpop	{d8}
 8006f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8006f20:	b140      	cbz	r0, 8006f34 <_printf_float+0xec>
 8006f22:	464b      	mov	r3, r9
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfbc      	itt	lt
 8006f28:	232d      	movlt	r3, #45	; 0x2d
 8006f2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f2e:	4a7f      	ldr	r2, [pc, #508]	; (800712c <_printf_float+0x2e4>)
 8006f30:	4b7f      	ldr	r3, [pc, #508]	; (8007130 <_printf_float+0x2e8>)
 8006f32:	e7d1      	b.n	8006ed8 <_printf_float+0x90>
 8006f34:	6863      	ldr	r3, [r4, #4]
 8006f36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f3a:	9206      	str	r2, [sp, #24]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	d13f      	bne.n	8006fc0 <_printf_float+0x178>
 8006f40:	2306      	movs	r3, #6
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	9b05      	ldr	r3, [sp, #20]
 8006f46:	6861      	ldr	r1, [r4, #4]
 8006f48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	ab0a      	add	r3, sp, #40	; 0x28
 8006f52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f56:	ab09      	add	r3, sp, #36	; 0x24
 8006f58:	ec49 8b10 	vmov	d0, r8, r9
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f64:	4628      	mov	r0, r5
 8006f66:	f7ff fece 	bl	8006d06 <__cvt>
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f6e:	2b47      	cmp	r3, #71	; 0x47
 8006f70:	4680      	mov	r8, r0
 8006f72:	d108      	bne.n	8006f86 <_printf_float+0x13e>
 8006f74:	1cc8      	adds	r0, r1, #3
 8006f76:	db02      	blt.n	8006f7e <_printf_float+0x136>
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	dd41      	ble.n	8007002 <_printf_float+0x1ba>
 8006f7e:	f1ab 0302 	sub.w	r3, fp, #2
 8006f82:	fa5f fb83 	uxtb.w	fp, r3
 8006f86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f8a:	d820      	bhi.n	8006fce <_printf_float+0x186>
 8006f8c:	3901      	subs	r1, #1
 8006f8e:	465a      	mov	r2, fp
 8006f90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f94:	9109      	str	r1, [sp, #36]	; 0x24
 8006f96:	f7ff ff18 	bl	8006dca <__exponent>
 8006f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9c:	1813      	adds	r3, r2, r0
 8006f9e:	2a01      	cmp	r2, #1
 8006fa0:	4681      	mov	r9, r0
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	dc02      	bgt.n	8006fac <_printf_float+0x164>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	07d2      	lsls	r2, r2, #31
 8006faa:	d501      	bpl.n	8006fb0 <_printf_float+0x168>
 8006fac:	3301      	adds	r3, #1
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d09c      	beq.n	8006ef2 <_printf_float+0xaa>
 8006fb8:	232d      	movs	r3, #45	; 0x2d
 8006fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fbe:	e798      	b.n	8006ef2 <_printf_float+0xaa>
 8006fc0:	9a06      	ldr	r2, [sp, #24]
 8006fc2:	2a47      	cmp	r2, #71	; 0x47
 8006fc4:	d1be      	bne.n	8006f44 <_printf_float+0xfc>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1bc      	bne.n	8006f44 <_printf_float+0xfc>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7b9      	b.n	8006f42 <_printf_float+0xfa>
 8006fce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fd2:	d118      	bne.n	8007006 <_printf_float+0x1be>
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	dd0b      	ble.n	8006ff2 <_printf_float+0x1aa>
 8006fda:	6121      	str	r1, [r4, #16]
 8006fdc:	b913      	cbnz	r3, 8006fe4 <_printf_float+0x19c>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	07d0      	lsls	r0, r2, #31
 8006fe2:	d502      	bpl.n	8006fea <_printf_float+0x1a2>
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	440b      	add	r3, r1
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fec:	f04f 0900 	mov.w	r9, #0
 8006ff0:	e7de      	b.n	8006fb0 <_printf_float+0x168>
 8006ff2:	b913      	cbnz	r3, 8006ffa <_printf_float+0x1b2>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	07d2      	lsls	r2, r2, #31
 8006ff8:	d501      	bpl.n	8006ffe <_printf_float+0x1b6>
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	e7f4      	b.n	8006fe8 <_printf_float+0x1a0>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7f2      	b.n	8006fe8 <_printf_float+0x1a0>
 8007002:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	4299      	cmp	r1, r3
 800700a:	db05      	blt.n	8007018 <_printf_float+0x1d0>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	6121      	str	r1, [r4, #16]
 8007010:	07d8      	lsls	r0, r3, #31
 8007012:	d5ea      	bpl.n	8006fea <_printf_float+0x1a2>
 8007014:	1c4b      	adds	r3, r1, #1
 8007016:	e7e7      	b.n	8006fe8 <_printf_float+0x1a0>
 8007018:	2900      	cmp	r1, #0
 800701a:	bfd4      	ite	le
 800701c:	f1c1 0202 	rsble	r2, r1, #2
 8007020:	2201      	movgt	r2, #1
 8007022:	4413      	add	r3, r2
 8007024:	e7e0      	b.n	8006fe8 <_printf_float+0x1a0>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	055a      	lsls	r2, r3, #21
 800702a:	d407      	bmi.n	800703c <_printf_float+0x1f4>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	4642      	mov	r2, r8
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	d12c      	bne.n	8007094 <_printf_float+0x24c>
 800703a:	e764      	b.n	8006f06 <_printf_float+0xbe>
 800703c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007040:	f240 80e0 	bls.w	8007204 <_printf_float+0x3bc>
 8007044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007048:	2200      	movs	r2, #0
 800704a:	2300      	movs	r3, #0
 800704c:	f7f9 fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007050:	2800      	cmp	r0, #0
 8007052:	d034      	beq.n	80070be <_printf_float+0x276>
 8007054:	4a37      	ldr	r2, [pc, #220]	; (8007134 <_printf_float+0x2ec>)
 8007056:	2301      	movs	r3, #1
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f af51 	beq.w	8006f06 <_printf_float+0xbe>
 8007064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007068:	429a      	cmp	r2, r3
 800706a:	db02      	blt.n	8007072 <_printf_float+0x22a>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	07d8      	lsls	r0, r3, #31
 8007070:	d510      	bpl.n	8007094 <_printf_float+0x24c>
 8007072:	ee18 3a10 	vmov	r3, s16
 8007076:	4652      	mov	r2, sl
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af41 	beq.w	8006f06 <_printf_float+0xbe>
 8007084:	f04f 0800 	mov.w	r8, #0
 8007088:	f104 091a 	add.w	r9, r4, #26
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	3b01      	subs	r3, #1
 8007090:	4543      	cmp	r3, r8
 8007092:	dc09      	bgt.n	80070a8 <_printf_float+0x260>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	079b      	lsls	r3, r3, #30
 8007098:	f100 8107 	bmi.w	80072aa <_printf_float+0x462>
 800709c:	68e0      	ldr	r0, [r4, #12]
 800709e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a0:	4298      	cmp	r0, r3
 80070a2:	bfb8      	it	lt
 80070a4:	4618      	movlt	r0, r3
 80070a6:	e730      	b.n	8006f0a <_printf_float+0xc2>
 80070a8:	2301      	movs	r3, #1
 80070aa:	464a      	mov	r2, r9
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f af27 	beq.w	8006f06 <_printf_float+0xbe>
 80070b8:	f108 0801 	add.w	r8, r8, #1
 80070bc:	e7e6      	b.n	800708c <_printf_float+0x244>
 80070be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dc39      	bgt.n	8007138 <_printf_float+0x2f0>
 80070c4:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <_printf_float+0x2ec>)
 80070c6:	2301      	movs	r3, #1
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af19 	beq.w	8006f06 <_printf_float+0xbe>
 80070d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070d8:	4313      	orrs	r3, r2
 80070da:	d102      	bne.n	80070e2 <_printf_float+0x29a>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	07d9      	lsls	r1, r3, #31
 80070e0:	d5d8      	bpl.n	8007094 <_printf_float+0x24c>
 80070e2:	ee18 3a10 	vmov	r3, s16
 80070e6:	4652      	mov	r2, sl
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	f43f af09 	beq.w	8006f06 <_printf_float+0xbe>
 80070f4:	f04f 0900 	mov.w	r9, #0
 80070f8:	f104 0a1a 	add.w	sl, r4, #26
 80070fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fe:	425b      	negs	r3, r3
 8007100:	454b      	cmp	r3, r9
 8007102:	dc01      	bgt.n	8007108 <_printf_float+0x2c0>
 8007104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007106:	e792      	b.n	800702e <_printf_float+0x1e6>
 8007108:	2301      	movs	r3, #1
 800710a:	4652      	mov	r2, sl
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f43f aef7 	beq.w	8006f06 <_printf_float+0xbe>
 8007118:	f109 0901 	add.w	r9, r9, #1
 800711c:	e7ee      	b.n	80070fc <_printf_float+0x2b4>
 800711e:	bf00      	nop
 8007120:	7fefffff 	.word	0x7fefffff
 8007124:	08009eae 	.word	0x08009eae
 8007128:	08009eb2 	.word	0x08009eb2
 800712c:	08009eb6 	.word	0x08009eb6
 8007130:	08009eba 	.word	0x08009eba
 8007134:	08009ebe 	.word	0x08009ebe
 8007138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800713a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800713c:	429a      	cmp	r2, r3
 800713e:	bfa8      	it	ge
 8007140:	461a      	movge	r2, r3
 8007142:	2a00      	cmp	r2, #0
 8007144:	4691      	mov	r9, r2
 8007146:	dc37      	bgt.n	80071b8 <_printf_float+0x370>
 8007148:	f04f 0b00 	mov.w	fp, #0
 800714c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007150:	f104 021a 	add.w	r2, r4, #26
 8007154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	eba3 0309 	sub.w	r3, r3, r9
 800715c:	455b      	cmp	r3, fp
 800715e:	dc33      	bgt.n	80071c8 <_printf_float+0x380>
 8007160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	db3b      	blt.n	80071e0 <_printf_float+0x398>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d438      	bmi.n	80071e0 <_printf_float+0x398>
 800716e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007172:	eba2 0903 	sub.w	r9, r2, r3
 8007176:	9b05      	ldr	r3, [sp, #20]
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	4591      	cmp	r9, r2
 800717c:	bfa8      	it	ge
 800717e:	4691      	movge	r9, r2
 8007180:	f1b9 0f00 	cmp.w	r9, #0
 8007184:	dc35      	bgt.n	80071f2 <_printf_float+0x3aa>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800718e:	f104 0a1a 	add.w	sl, r4, #26
 8007192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	eba3 0309 	sub.w	r3, r3, r9
 800719c:	4543      	cmp	r3, r8
 800719e:	f77f af79 	ble.w	8007094 <_printf_float+0x24c>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f aeaa 	beq.w	8006f06 <_printf_float+0xbe>
 80071b2:	f108 0801 	add.w	r8, r8, #1
 80071b6:	e7ec      	b.n	8007192 <_printf_float+0x34a>
 80071b8:	4613      	mov	r3, r2
 80071ba:	4631      	mov	r1, r6
 80071bc:	4642      	mov	r2, r8
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	d1c0      	bne.n	8007148 <_printf_float+0x300>
 80071c6:	e69e      	b.n	8006f06 <_printf_float+0xbe>
 80071c8:	2301      	movs	r3, #1
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	9205      	str	r2, [sp, #20]
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	f43f ae97 	beq.w	8006f06 <_printf_float+0xbe>
 80071d8:	9a05      	ldr	r2, [sp, #20]
 80071da:	f10b 0b01 	add.w	fp, fp, #1
 80071de:	e7b9      	b.n	8007154 <_printf_float+0x30c>
 80071e0:	ee18 3a10 	vmov	r3, s16
 80071e4:	4652      	mov	r2, sl
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d1be      	bne.n	800716e <_printf_float+0x326>
 80071f0:	e689      	b.n	8006f06 <_printf_float+0xbe>
 80071f2:	9a05      	ldr	r2, [sp, #20]
 80071f4:	464b      	mov	r3, r9
 80071f6:	4442      	add	r2, r8
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	d1c1      	bne.n	8007186 <_printf_float+0x33e>
 8007202:	e680      	b.n	8006f06 <_printf_float+0xbe>
 8007204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007206:	2a01      	cmp	r2, #1
 8007208:	dc01      	bgt.n	800720e <_printf_float+0x3c6>
 800720a:	07db      	lsls	r3, r3, #31
 800720c:	d53a      	bpl.n	8007284 <_printf_float+0x43c>
 800720e:	2301      	movs	r3, #1
 8007210:	4642      	mov	r2, r8
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f ae74 	beq.w	8006f06 <_printf_float+0xbe>
 800721e:	ee18 3a10 	vmov	r3, s16
 8007222:	4652      	mov	r2, sl
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	f43f ae6b 	beq.w	8006f06 <_printf_float+0xbe>
 8007230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007234:	2200      	movs	r2, #0
 8007236:	2300      	movs	r3, #0
 8007238:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800723c:	f7f9 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007240:	b9d8      	cbnz	r0, 800727a <_printf_float+0x432>
 8007242:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007246:	f108 0201 	add.w	r2, r8, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d10e      	bne.n	8007272 <_printf_float+0x42a>
 8007254:	e657      	b.n	8006f06 <_printf_float+0xbe>
 8007256:	2301      	movs	r3, #1
 8007258:	4652      	mov	r2, sl
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f ae50 	beq.w	8006f06 <_printf_float+0xbe>
 8007266:	f108 0801 	add.w	r8, r8, #1
 800726a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726c:	3b01      	subs	r3, #1
 800726e:	4543      	cmp	r3, r8
 8007270:	dcf1      	bgt.n	8007256 <_printf_float+0x40e>
 8007272:	464b      	mov	r3, r9
 8007274:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007278:	e6da      	b.n	8007030 <_printf_float+0x1e8>
 800727a:	f04f 0800 	mov.w	r8, #0
 800727e:	f104 0a1a 	add.w	sl, r4, #26
 8007282:	e7f2      	b.n	800726a <_printf_float+0x422>
 8007284:	2301      	movs	r3, #1
 8007286:	4642      	mov	r2, r8
 8007288:	e7df      	b.n	800724a <_printf_float+0x402>
 800728a:	2301      	movs	r3, #1
 800728c:	464a      	mov	r2, r9
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f ae36 	beq.w	8006f06 <_printf_float+0xbe>
 800729a:	f108 0801 	add.w	r8, r8, #1
 800729e:	68e3      	ldr	r3, [r4, #12]
 80072a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072a2:	1a5b      	subs	r3, r3, r1
 80072a4:	4543      	cmp	r3, r8
 80072a6:	dcf0      	bgt.n	800728a <_printf_float+0x442>
 80072a8:	e6f8      	b.n	800709c <_printf_float+0x254>
 80072aa:	f04f 0800 	mov.w	r8, #0
 80072ae:	f104 0919 	add.w	r9, r4, #25
 80072b2:	e7f4      	b.n	800729e <_printf_float+0x456>

080072b4 <_printf_common>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	4616      	mov	r6, r2
 80072ba:	4699      	mov	r9, r3
 80072bc:	688a      	ldr	r2, [r1, #8]
 80072be:	690b      	ldr	r3, [r1, #16]
 80072c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	bfb8      	it	lt
 80072c8:	4613      	movlt	r3, r2
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d0:	4607      	mov	r7, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b10a      	cbz	r2, 80072da <_printf_common+0x26>
 80072d6:	3301      	adds	r3, #1
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	0699      	lsls	r1, r3, #26
 80072de:	bf42      	ittt	mi
 80072e0:	6833      	ldrmi	r3, [r6, #0]
 80072e2:	3302      	addmi	r3, #2
 80072e4:	6033      	strmi	r3, [r6, #0]
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	f015 0506 	ands.w	r5, r5, #6
 80072ec:	d106      	bne.n	80072fc <_printf_common+0x48>
 80072ee:	f104 0a19 	add.w	sl, r4, #25
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	6832      	ldr	r2, [r6, #0]
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	dc26      	bgt.n	800734a <_printf_common+0x96>
 80072fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007300:	1e13      	subs	r3, r2, #0
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	bf18      	it	ne
 8007306:	2301      	movne	r3, #1
 8007308:	0692      	lsls	r2, r2, #26
 800730a:	d42b      	bmi.n	8007364 <_printf_common+0xb0>
 800730c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d01e      	beq.n	8007358 <_printf_common+0xa4>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	6922      	ldr	r2, [r4, #16]
 800731e:	f003 0306 	and.w	r3, r3, #6
 8007322:	2b04      	cmp	r3, #4
 8007324:	bf02      	ittt	eq
 8007326:	68e5      	ldreq	r5, [r4, #12]
 8007328:	6833      	ldreq	r3, [r6, #0]
 800732a:	1aed      	subeq	r5, r5, r3
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	bf0c      	ite	eq
 8007330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007334:	2500      	movne	r5, #0
 8007336:	4293      	cmp	r3, r2
 8007338:	bfc4      	itt	gt
 800733a:	1a9b      	subgt	r3, r3, r2
 800733c:	18ed      	addgt	r5, r5, r3
 800733e:	2600      	movs	r6, #0
 8007340:	341a      	adds	r4, #26
 8007342:	42b5      	cmp	r5, r6
 8007344:	d11a      	bne.n	800737c <_printf_common+0xc8>
 8007346:	2000      	movs	r0, #0
 8007348:	e008      	b.n	800735c <_printf_common+0xa8>
 800734a:	2301      	movs	r3, #1
 800734c:	4652      	mov	r2, sl
 800734e:	4649      	mov	r1, r9
 8007350:	4638      	mov	r0, r7
 8007352:	47c0      	blx	r8
 8007354:	3001      	adds	r0, #1
 8007356:	d103      	bne.n	8007360 <_printf_common+0xac>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007360:	3501      	adds	r5, #1
 8007362:	e7c6      	b.n	80072f2 <_printf_common+0x3e>
 8007364:	18e1      	adds	r1, r4, r3
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	2030      	movs	r0, #48	; 0x30
 800736a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800736e:	4422      	add	r2, r4
 8007370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007378:	3302      	adds	r3, #2
 800737a:	e7c7      	b.n	800730c <_printf_common+0x58>
 800737c:	2301      	movs	r3, #1
 800737e:	4622      	mov	r2, r4
 8007380:	4649      	mov	r1, r9
 8007382:	4638      	mov	r0, r7
 8007384:	47c0      	blx	r8
 8007386:	3001      	adds	r0, #1
 8007388:	d0e6      	beq.n	8007358 <_printf_common+0xa4>
 800738a:	3601      	adds	r6, #1
 800738c:	e7d9      	b.n	8007342 <_printf_common+0x8e>
	...

08007390 <_printf_i>:
 8007390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	7e0f      	ldrb	r7, [r1, #24]
 8007396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007398:	2f78      	cmp	r7, #120	; 0x78
 800739a:	4691      	mov	r9, r2
 800739c:	4680      	mov	r8, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	469a      	mov	sl, r3
 80073a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073a6:	d807      	bhi.n	80073b8 <_printf_i+0x28>
 80073a8:	2f62      	cmp	r7, #98	; 0x62
 80073aa:	d80a      	bhi.n	80073c2 <_printf_i+0x32>
 80073ac:	2f00      	cmp	r7, #0
 80073ae:	f000 80d4 	beq.w	800755a <_printf_i+0x1ca>
 80073b2:	2f58      	cmp	r7, #88	; 0x58
 80073b4:	f000 80c0 	beq.w	8007538 <_printf_i+0x1a8>
 80073b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c0:	e03a      	b.n	8007438 <_printf_i+0xa8>
 80073c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073c6:	2b15      	cmp	r3, #21
 80073c8:	d8f6      	bhi.n	80073b8 <_printf_i+0x28>
 80073ca:	a101      	add	r1, pc, #4	; (adr r1, 80073d0 <_printf_i+0x40>)
 80073cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073d0:	08007429 	.word	0x08007429
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	080073b9 	.word	0x080073b9
 80073dc:	080073b9 	.word	0x080073b9
 80073e0:	080073b9 	.word	0x080073b9
 80073e4:	080073b9 	.word	0x080073b9
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	080073b9 	.word	0x080073b9
 80073f0:	080073b9 	.word	0x080073b9
 80073f4:	080073b9 	.word	0x080073b9
 80073f8:	080073b9 	.word	0x080073b9
 80073fc:	08007541 	.word	0x08007541
 8007400:	08007469 	.word	0x08007469
 8007404:	080074fb 	.word	0x080074fb
 8007408:	080073b9 	.word	0x080073b9
 800740c:	080073b9 	.word	0x080073b9
 8007410:	08007563 	.word	0x08007563
 8007414:	080073b9 	.word	0x080073b9
 8007418:	08007469 	.word	0x08007469
 800741c:	080073b9 	.word	0x080073b9
 8007420:	080073b9 	.word	0x080073b9
 8007424:	08007503 	.word	0x08007503
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	1d1a      	adds	r2, r3, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	602a      	str	r2, [r5, #0]
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007438:	2301      	movs	r3, #1
 800743a:	e09f      	b.n	800757c <_printf_i+0x1ec>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	0607      	lsls	r7, r0, #24
 8007442:	f103 0104 	add.w	r1, r3, #4
 8007446:	6029      	str	r1, [r5, #0]
 8007448:	d501      	bpl.n	800744e <_printf_i+0xbe>
 800744a:	681e      	ldr	r6, [r3, #0]
 800744c:	e003      	b.n	8007456 <_printf_i+0xc6>
 800744e:	0646      	lsls	r6, r0, #25
 8007450:	d5fb      	bpl.n	800744a <_printf_i+0xba>
 8007452:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007456:	2e00      	cmp	r6, #0
 8007458:	da03      	bge.n	8007462 <_printf_i+0xd2>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	4276      	negs	r6, r6
 800745e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007462:	485a      	ldr	r0, [pc, #360]	; (80075cc <_printf_i+0x23c>)
 8007464:	230a      	movs	r3, #10
 8007466:	e012      	b.n	800748e <_printf_i+0xfe>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	6029      	str	r1, [r5, #0]
 8007470:	0605      	lsls	r5, r0, #24
 8007472:	d501      	bpl.n	8007478 <_printf_i+0xe8>
 8007474:	681e      	ldr	r6, [r3, #0]
 8007476:	e002      	b.n	800747e <_printf_i+0xee>
 8007478:	0641      	lsls	r1, r0, #25
 800747a:	d5fb      	bpl.n	8007474 <_printf_i+0xe4>
 800747c:	881e      	ldrh	r6, [r3, #0]
 800747e:	4853      	ldr	r0, [pc, #332]	; (80075cc <_printf_i+0x23c>)
 8007480:	2f6f      	cmp	r7, #111	; 0x6f
 8007482:	bf0c      	ite	eq
 8007484:	2308      	moveq	r3, #8
 8007486:	230a      	movne	r3, #10
 8007488:	2100      	movs	r1, #0
 800748a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800748e:	6865      	ldr	r5, [r4, #4]
 8007490:	60a5      	str	r5, [r4, #8]
 8007492:	2d00      	cmp	r5, #0
 8007494:	bfa2      	ittt	ge
 8007496:	6821      	ldrge	r1, [r4, #0]
 8007498:	f021 0104 	bicge.w	r1, r1, #4
 800749c:	6021      	strge	r1, [r4, #0]
 800749e:	b90e      	cbnz	r6, 80074a4 <_printf_i+0x114>
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	d04b      	beq.n	800753c <_printf_i+0x1ac>
 80074a4:	4615      	mov	r5, r2
 80074a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80074aa:	fb03 6711 	mls	r7, r3, r1, r6
 80074ae:	5dc7      	ldrb	r7, [r0, r7]
 80074b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074b4:	4637      	mov	r7, r6
 80074b6:	42bb      	cmp	r3, r7
 80074b8:	460e      	mov	r6, r1
 80074ba:	d9f4      	bls.n	80074a6 <_printf_i+0x116>
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d10b      	bne.n	80074d8 <_printf_i+0x148>
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	07de      	lsls	r6, r3, #31
 80074c4:	d508      	bpl.n	80074d8 <_printf_i+0x148>
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6861      	ldr	r1, [r4, #4]
 80074ca:	4299      	cmp	r1, r3
 80074cc:	bfde      	ittt	le
 80074ce:	2330      	movle	r3, #48	; 0x30
 80074d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074d8:	1b52      	subs	r2, r2, r5
 80074da:	6122      	str	r2, [r4, #16]
 80074dc:	f8cd a000 	str.w	sl, [sp]
 80074e0:	464b      	mov	r3, r9
 80074e2:	aa03      	add	r2, sp, #12
 80074e4:	4621      	mov	r1, r4
 80074e6:	4640      	mov	r0, r8
 80074e8:	f7ff fee4 	bl	80072b4 <_printf_common>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d14a      	bne.n	8007586 <_printf_i+0x1f6>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	b004      	add	sp, #16
 80074f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	f043 0320 	orr.w	r3, r3, #32
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	4833      	ldr	r0, [pc, #204]	; (80075d0 <_printf_i+0x240>)
 8007504:	2778      	movs	r7, #120	; 0x78
 8007506:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	6829      	ldr	r1, [r5, #0]
 800750e:	061f      	lsls	r7, r3, #24
 8007510:	f851 6b04 	ldr.w	r6, [r1], #4
 8007514:	d402      	bmi.n	800751c <_printf_i+0x18c>
 8007516:	065f      	lsls	r7, r3, #25
 8007518:	bf48      	it	mi
 800751a:	b2b6      	uxthmi	r6, r6
 800751c:	07df      	lsls	r7, r3, #31
 800751e:	bf48      	it	mi
 8007520:	f043 0320 	orrmi.w	r3, r3, #32
 8007524:	6029      	str	r1, [r5, #0]
 8007526:	bf48      	it	mi
 8007528:	6023      	strmi	r3, [r4, #0]
 800752a:	b91e      	cbnz	r6, 8007534 <_printf_i+0x1a4>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	f023 0320 	bic.w	r3, r3, #32
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	2310      	movs	r3, #16
 8007536:	e7a7      	b.n	8007488 <_printf_i+0xf8>
 8007538:	4824      	ldr	r0, [pc, #144]	; (80075cc <_printf_i+0x23c>)
 800753a:	e7e4      	b.n	8007506 <_printf_i+0x176>
 800753c:	4615      	mov	r5, r2
 800753e:	e7bd      	b.n	80074bc <_printf_i+0x12c>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	6826      	ldr	r6, [r4, #0]
 8007544:	6961      	ldr	r1, [r4, #20]
 8007546:	1d18      	adds	r0, r3, #4
 8007548:	6028      	str	r0, [r5, #0]
 800754a:	0635      	lsls	r5, r6, #24
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	d501      	bpl.n	8007554 <_printf_i+0x1c4>
 8007550:	6019      	str	r1, [r3, #0]
 8007552:	e002      	b.n	800755a <_printf_i+0x1ca>
 8007554:	0670      	lsls	r0, r6, #25
 8007556:	d5fb      	bpl.n	8007550 <_printf_i+0x1c0>
 8007558:	8019      	strh	r1, [r3, #0]
 800755a:	2300      	movs	r3, #0
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	4615      	mov	r5, r2
 8007560:	e7bc      	b.n	80074dc <_printf_i+0x14c>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	681d      	ldr	r5, [r3, #0]
 800756a:	6862      	ldr	r2, [r4, #4]
 800756c:	2100      	movs	r1, #0
 800756e:	4628      	mov	r0, r5
 8007570:	f7f8 fe2e 	bl	80001d0 <memchr>
 8007574:	b108      	cbz	r0, 800757a <_printf_i+0x1ea>
 8007576:	1b40      	subs	r0, r0, r5
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	6863      	ldr	r3, [r4, #4]
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	2300      	movs	r3, #0
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007584:	e7aa      	b.n	80074dc <_printf_i+0x14c>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	462a      	mov	r2, r5
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d0ad      	beq.n	80074f0 <_printf_i+0x160>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	079b      	lsls	r3, r3, #30
 8007598:	d413      	bmi.n	80075c2 <_printf_i+0x232>
 800759a:	68e0      	ldr	r0, [r4, #12]
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	4298      	cmp	r0, r3
 80075a0:	bfb8      	it	lt
 80075a2:	4618      	movlt	r0, r3
 80075a4:	e7a6      	b.n	80074f4 <_printf_i+0x164>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4632      	mov	r2, r6
 80075aa:	4649      	mov	r1, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	47d0      	blx	sl
 80075b0:	3001      	adds	r0, #1
 80075b2:	d09d      	beq.n	80074f0 <_printf_i+0x160>
 80075b4:	3501      	adds	r5, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	9903      	ldr	r1, [sp, #12]
 80075ba:	1a5b      	subs	r3, r3, r1
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dcf2      	bgt.n	80075a6 <_printf_i+0x216>
 80075c0:	e7eb      	b.n	800759a <_printf_i+0x20a>
 80075c2:	2500      	movs	r5, #0
 80075c4:	f104 0619 	add.w	r6, r4, #25
 80075c8:	e7f5      	b.n	80075b6 <_printf_i+0x226>
 80075ca:	bf00      	nop
 80075cc:	08009ec0 	.word	0x08009ec0
 80075d0:	08009ed1 	.word	0x08009ed1

080075d4 <std>:
 80075d4:	2300      	movs	r3, #0
 80075d6:	b510      	push	{r4, lr}
 80075d8:	4604      	mov	r4, r0
 80075da:	e9c0 3300 	strd	r3, r3, [r0]
 80075de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075e2:	6083      	str	r3, [r0, #8]
 80075e4:	8181      	strh	r1, [r0, #12]
 80075e6:	6643      	str	r3, [r0, #100]	; 0x64
 80075e8:	81c2      	strh	r2, [r0, #14]
 80075ea:	6183      	str	r3, [r0, #24]
 80075ec:	4619      	mov	r1, r3
 80075ee:	2208      	movs	r2, #8
 80075f0:	305c      	adds	r0, #92	; 0x5c
 80075f2:	f000 f948 	bl	8007886 <memset>
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <std+0x58>)
 80075f8:	6263      	str	r3, [r4, #36]	; 0x24
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <std+0x5c>)
 80075fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <std+0x60>)
 8007600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <std+0x64>)
 8007604:	6323      	str	r3, [r4, #48]	; 0x30
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <std+0x68>)
 8007608:	6224      	str	r4, [r4, #32]
 800760a:	429c      	cmp	r4, r3
 800760c:	d006      	beq.n	800761c <std+0x48>
 800760e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007612:	4294      	cmp	r4, r2
 8007614:	d002      	beq.n	800761c <std+0x48>
 8007616:	33d0      	adds	r3, #208	; 0xd0
 8007618:	429c      	cmp	r4, r3
 800761a:	d105      	bne.n	8007628 <std+0x54>
 800761c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f000 b9ac 	b.w	8007980 <__retarget_lock_init_recursive>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	08007801 	.word	0x08007801
 8007630:	08007823 	.word	0x08007823
 8007634:	0800785b 	.word	0x0800785b
 8007638:	0800787f 	.word	0x0800787f
 800763c:	200005b0 	.word	0x200005b0

08007640 <stdio_exit_handler>:
 8007640:	4a02      	ldr	r2, [pc, #8]	; (800764c <stdio_exit_handler+0xc>)
 8007642:	4903      	ldr	r1, [pc, #12]	; (8007650 <stdio_exit_handler+0x10>)
 8007644:	4803      	ldr	r0, [pc, #12]	; (8007654 <stdio_exit_handler+0x14>)
 8007646:	f000 b869 	b.w	800771c <_fwalk_sglue>
 800764a:	bf00      	nop
 800764c:	20000020 	.word	0x20000020
 8007650:	08009351 	.word	0x08009351
 8007654:	2000002c 	.word	0x2000002c

08007658 <cleanup_stdio>:
 8007658:	6841      	ldr	r1, [r0, #4]
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <cleanup_stdio+0x34>)
 800765c:	4299      	cmp	r1, r3
 800765e:	b510      	push	{r4, lr}
 8007660:	4604      	mov	r4, r0
 8007662:	d001      	beq.n	8007668 <cleanup_stdio+0x10>
 8007664:	f001 fe74 	bl	8009350 <_fflush_r>
 8007668:	68a1      	ldr	r1, [r4, #8]
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <cleanup_stdio+0x38>)
 800766c:	4299      	cmp	r1, r3
 800766e:	d002      	beq.n	8007676 <cleanup_stdio+0x1e>
 8007670:	4620      	mov	r0, r4
 8007672:	f001 fe6d 	bl	8009350 <_fflush_r>
 8007676:	68e1      	ldr	r1, [r4, #12]
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <cleanup_stdio+0x3c>)
 800767a:	4299      	cmp	r1, r3
 800767c:	d004      	beq.n	8007688 <cleanup_stdio+0x30>
 800767e:	4620      	mov	r0, r4
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f001 be64 	b.w	8009350 <_fflush_r>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	200005b0 	.word	0x200005b0
 8007690:	20000618 	.word	0x20000618
 8007694:	20000680 	.word	0x20000680

08007698 <global_stdio_init.part.0>:
 8007698:	b510      	push	{r4, lr}
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <global_stdio_init.part.0+0x30>)
 800769c:	4c0b      	ldr	r4, [pc, #44]	; (80076cc <global_stdio_init.part.0+0x34>)
 800769e:	4a0c      	ldr	r2, [pc, #48]	; (80076d0 <global_stdio_init.part.0+0x38>)
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	4620      	mov	r0, r4
 80076a4:	2200      	movs	r2, #0
 80076a6:	2104      	movs	r1, #4
 80076a8:	f7ff ff94 	bl	80075d4 <std>
 80076ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076b0:	2201      	movs	r2, #1
 80076b2:	2109      	movs	r1, #9
 80076b4:	f7ff ff8e 	bl	80075d4 <std>
 80076b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076bc:	2202      	movs	r2, #2
 80076be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c2:	2112      	movs	r1, #18
 80076c4:	f7ff bf86 	b.w	80075d4 <std>
 80076c8:	200006e8 	.word	0x200006e8
 80076cc:	200005b0 	.word	0x200005b0
 80076d0:	08007641 	.word	0x08007641

080076d4 <__sfp_lock_acquire>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__sfp_lock_acquire+0x8>)
 80076d6:	f000 b954 	b.w	8007982 <__retarget_lock_acquire_recursive>
 80076da:	bf00      	nop
 80076dc:	200006f1 	.word	0x200006f1

080076e0 <__sfp_lock_release>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__sfp_lock_release+0x8>)
 80076e2:	f000 b94f 	b.w	8007984 <__retarget_lock_release_recursive>
 80076e6:	bf00      	nop
 80076e8:	200006f1 	.word	0x200006f1

080076ec <__sinit>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4604      	mov	r4, r0
 80076f0:	f7ff fff0 	bl	80076d4 <__sfp_lock_acquire>
 80076f4:	6a23      	ldr	r3, [r4, #32]
 80076f6:	b11b      	cbz	r3, 8007700 <__sinit+0x14>
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	f7ff bff0 	b.w	80076e0 <__sfp_lock_release>
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <__sinit+0x28>)
 8007702:	6223      	str	r3, [r4, #32]
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <__sinit+0x2c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f5      	bne.n	80076f8 <__sinit+0xc>
 800770c:	f7ff ffc4 	bl	8007698 <global_stdio_init.part.0>
 8007710:	e7f2      	b.n	80076f8 <__sinit+0xc>
 8007712:	bf00      	nop
 8007714:	08007659 	.word	0x08007659
 8007718:	200006e8 	.word	0x200006e8

0800771c <_fwalk_sglue>:
 800771c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007720:	4607      	mov	r7, r0
 8007722:	4688      	mov	r8, r1
 8007724:	4614      	mov	r4, r2
 8007726:	2600      	movs	r6, #0
 8007728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800772c:	f1b9 0901 	subs.w	r9, r9, #1
 8007730:	d505      	bpl.n	800773e <_fwalk_sglue+0x22>
 8007732:	6824      	ldr	r4, [r4, #0]
 8007734:	2c00      	cmp	r4, #0
 8007736:	d1f7      	bne.n	8007728 <_fwalk_sglue+0xc>
 8007738:	4630      	mov	r0, r6
 800773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d907      	bls.n	8007754 <_fwalk_sglue+0x38>
 8007744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007748:	3301      	adds	r3, #1
 800774a:	d003      	beq.n	8007754 <_fwalk_sglue+0x38>
 800774c:	4629      	mov	r1, r5
 800774e:	4638      	mov	r0, r7
 8007750:	47c0      	blx	r8
 8007752:	4306      	orrs	r6, r0
 8007754:	3568      	adds	r5, #104	; 0x68
 8007756:	e7e9      	b.n	800772c <_fwalk_sglue+0x10>

08007758 <sniprintf>:
 8007758:	b40c      	push	{r2, r3}
 800775a:	b530      	push	{r4, r5, lr}
 800775c:	4b17      	ldr	r3, [pc, #92]	; (80077bc <sniprintf+0x64>)
 800775e:	1e0c      	subs	r4, r1, #0
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	b09d      	sub	sp, #116	; 0x74
 8007764:	da08      	bge.n	8007778 <sniprintf+0x20>
 8007766:	238b      	movs	r3, #139	; 0x8b
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f04f 30ff 	mov.w	r0, #4294967295
 800776e:	b01d      	add	sp, #116	; 0x74
 8007770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007774:	b002      	add	sp, #8
 8007776:	4770      	bx	lr
 8007778:	f44f 7302 	mov.w	r3, #520	; 0x208
 800777c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007780:	bf14      	ite	ne
 8007782:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007786:	4623      	moveq	r3, r4
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	9307      	str	r3, [sp, #28]
 800778c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007790:	9002      	str	r0, [sp, #8]
 8007792:	9006      	str	r0, [sp, #24]
 8007794:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007798:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800779a:	ab21      	add	r3, sp, #132	; 0x84
 800779c:	a902      	add	r1, sp, #8
 800779e:	4628      	mov	r0, r5
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	f001 fc51 	bl	8009048 <_svfiprintf_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	bfbc      	itt	lt
 80077aa:	238b      	movlt	r3, #139	; 0x8b
 80077ac:	602b      	strlt	r3, [r5, #0]
 80077ae:	2c00      	cmp	r4, #0
 80077b0:	d0dd      	beq.n	800776e <sniprintf+0x16>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e7d9      	b.n	800776e <sniprintf+0x16>
 80077ba:	bf00      	nop
 80077bc:	20000078 	.word	0x20000078

080077c0 <siprintf>:
 80077c0:	b40e      	push	{r1, r2, r3}
 80077c2:	b500      	push	{lr}
 80077c4:	b09c      	sub	sp, #112	; 0x70
 80077c6:	ab1d      	add	r3, sp, #116	; 0x74
 80077c8:	9002      	str	r0, [sp, #8]
 80077ca:	9006      	str	r0, [sp, #24]
 80077cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077d0:	4809      	ldr	r0, [pc, #36]	; (80077f8 <siprintf+0x38>)
 80077d2:	9107      	str	r1, [sp, #28]
 80077d4:	9104      	str	r1, [sp, #16]
 80077d6:	4909      	ldr	r1, [pc, #36]	; (80077fc <siprintf+0x3c>)
 80077d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077dc:	9105      	str	r1, [sp, #20]
 80077de:	6800      	ldr	r0, [r0, #0]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	a902      	add	r1, sp, #8
 80077e4:	f001 fc30 	bl	8009048 <_svfiprintf_r>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	b01c      	add	sp, #112	; 0x70
 80077f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f4:	b003      	add	sp, #12
 80077f6:	4770      	bx	lr
 80077f8:	20000078 	.word	0x20000078
 80077fc:	ffff0208 	.word	0xffff0208

08007800 <__sread>:
 8007800:	b510      	push	{r4, lr}
 8007802:	460c      	mov	r4, r1
 8007804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007808:	f000 f86c 	bl	80078e4 <_read_r>
 800780c:	2800      	cmp	r0, #0
 800780e:	bfab      	itete	ge
 8007810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007812:	89a3      	ldrhlt	r3, [r4, #12]
 8007814:	181b      	addge	r3, r3, r0
 8007816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800781a:	bfac      	ite	ge
 800781c:	6563      	strge	r3, [r4, #84]	; 0x54
 800781e:	81a3      	strhlt	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__swrite>:
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	461f      	mov	r7, r3
 8007828:	898b      	ldrh	r3, [r1, #12]
 800782a:	05db      	lsls	r3, r3, #23
 800782c:	4605      	mov	r5, r0
 800782e:	460c      	mov	r4, r1
 8007830:	4616      	mov	r6, r2
 8007832:	d505      	bpl.n	8007840 <__swrite+0x1e>
 8007834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007838:	2302      	movs	r3, #2
 800783a:	2200      	movs	r2, #0
 800783c:	f000 f840 	bl	80078c0 <_lseek_r>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007856:	f000 b857 	b.w	8007908 <_write_r>

0800785a <__sseek>:
 800785a:	b510      	push	{r4, lr}
 800785c:	460c      	mov	r4, r1
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 f82d 	bl	80078c0 <_lseek_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	bf15      	itete	ne
 800786c:	6560      	strne	r0, [r4, #84]	; 0x54
 800786e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strheq	r3, [r4, #12]
 8007878:	bf18      	it	ne
 800787a:	81a3      	strhne	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__sclose>:
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 b80d 	b.w	80078a0 <_close_r>

08007886 <memset>:
 8007886:	4402      	add	r2, r0
 8007888:	4603      	mov	r3, r0
 800788a:	4293      	cmp	r3, r2
 800788c:	d100      	bne.n	8007890 <memset+0xa>
 800788e:	4770      	bx	lr
 8007890:	f803 1b01 	strb.w	r1, [r3], #1
 8007894:	e7f9      	b.n	800788a <memset+0x4>
	...

08007898 <_localeconv_r>:
 8007898:	4800      	ldr	r0, [pc, #0]	; (800789c <_localeconv_r+0x4>)
 800789a:	4770      	bx	lr
 800789c:	2000016c 	.word	0x2000016c

080078a0 <_close_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_close_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa f91d 	bl	8001aea <_close>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_close_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_close_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200006ec 	.word	0x200006ec

080078c0 <_lseek_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_lseek_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7fa f932 	bl	8001b38 <_lseek>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_lseek_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_lseek_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	200006ec 	.word	0x200006ec

080078e4 <_read_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	; (8007904 <_read_r+0x20>)
 80078e8:	4604      	mov	r4, r0
 80078ea:	4608      	mov	r0, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	2200      	movs	r2, #0
 80078f0:	602a      	str	r2, [r5, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7fa f8c0 	bl	8001a78 <_read>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_read_r+0x1e>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_read_r+0x1e>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	200006ec 	.word	0x200006ec

08007908 <_write_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	; (8007928 <_write_r+0x20>)
 800790c:	4604      	mov	r4, r0
 800790e:	4608      	mov	r0, r1
 8007910:	4611      	mov	r1, r2
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7fa f8cb 	bl	8001ab2 <_write>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_write_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_write_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200006ec 	.word	0x200006ec

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000078 	.word	0x20000078

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f002 fa4c 	bl	8009de8 <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	0800a23c 	.word	0x0800a23c
 8007974:	0800a23c 	.word	0x0800a23c
 8007978:	0800a23c 	.word	0x0800a23c
 800797c:	0800a240 	.word	0x0800a240

08007980 <__retarget_lock_init_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_acquire_recursive>:
 8007982:	4770      	bx	lr

08007984 <__retarget_lock_release_recursive>:
 8007984:	4770      	bx	lr

08007986 <memcpy>:
 8007986:	440a      	add	r2, r1
 8007988:	4291      	cmp	r1, r2
 800798a:	f100 33ff 	add.w	r3, r0, #4294967295
 800798e:	d100      	bne.n	8007992 <memcpy+0xc>
 8007990:	4770      	bx	lr
 8007992:	b510      	push	{r4, lr}
 8007994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799c:	4291      	cmp	r1, r2
 800799e:	d1f9      	bne.n	8007994 <memcpy+0xe>
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <quorem>:
 80079a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a6:	6903      	ldr	r3, [r0, #16]
 80079a8:	690c      	ldr	r4, [r1, #16]
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	4607      	mov	r7, r0
 80079ae:	db7e      	blt.n	8007aae <quorem+0x10c>
 80079b0:	3c01      	subs	r4, #1
 80079b2:	f101 0814 	add.w	r8, r1, #20
 80079b6:	f100 0514 	add.w	r5, r0, #20
 80079ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c8:	3301      	adds	r3, #1
 80079ca:	429a      	cmp	r2, r3
 80079cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d8:	d331      	bcc.n	8007a3e <quorem+0x9c>
 80079da:	f04f 0e00 	mov.w	lr, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	46ac      	mov	ip, r5
 80079e2:	46f2      	mov	sl, lr
 80079e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079e8:	b293      	uxth	r3, r2
 80079ea:	fb06 e303 	mla	r3, r6, r3, lr
 80079ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079f2:	0c1a      	lsrs	r2, r3, #16
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	ebaa 0303 	sub.w	r3, sl, r3
 80079fa:	f8dc a000 	ldr.w	sl, [ip]
 80079fe:	fa13 f38a 	uxtah	r3, r3, sl
 8007a02:	fb06 220e 	mla	r2, r6, lr, r2
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a1c:	4581      	cmp	r9, r0
 8007a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a22:	f84c 3b04 	str.w	r3, [ip], #4
 8007a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a2a:	d2db      	bcs.n	80079e4 <quorem+0x42>
 8007a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a30:	b92b      	cbnz	r3, 8007a3e <quorem+0x9c>
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	429d      	cmp	r5, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	d32c      	bcc.n	8007a96 <quorem+0xf4>
 8007a3c:	613c      	str	r4, [r7, #16]
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f001 f9a8 	bl	8008d94 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	db22      	blt.n	8007a8e <quorem+0xec>
 8007a48:	3601      	adds	r6, #1
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a52:	f8d1 c000 	ldr.w	ip, [r1]
 8007a56:	b293      	uxth	r3, r2
 8007a58:	1ac3      	subs	r3, r0, r3
 8007a5a:	0c12      	lsrs	r2, r2, #16
 8007a5c:	fa13 f38c 	uxtah	r3, r3, ip
 8007a60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a6e:	45c1      	cmp	r9, r8
 8007a70:	f841 3b04 	str.w	r3, [r1], #4
 8007a74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a78:	d2e9      	bcs.n	8007a4e <quorem+0xac>
 8007a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a82:	b922      	cbnz	r2, 8007a8e <quorem+0xec>
 8007a84:	3b04      	subs	r3, #4
 8007a86:	429d      	cmp	r5, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	d30a      	bcc.n	8007aa2 <quorem+0x100>
 8007a8c:	613c      	str	r4, [r7, #16]
 8007a8e:	4630      	mov	r0, r6
 8007a90:	b003      	add	sp, #12
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d1ce      	bne.n	8007a3c <quorem+0x9a>
 8007a9e:	3c01      	subs	r4, #1
 8007aa0:	e7c9      	b.n	8007a36 <quorem+0x94>
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d1f0      	bne.n	8007a8c <quorem+0xea>
 8007aaa:	3c01      	subs	r4, #1
 8007aac:	e7eb      	b.n	8007a86 <quorem+0xe4>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	e7ee      	b.n	8007a90 <quorem+0xee>
 8007ab2:	0000      	movs	r0, r0
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <_dtoa_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	ed2d 8b04 	vpush	{d8-d9}
 8007ac0:	69c5      	ldr	r5, [r0, #28]
 8007ac2:	b093      	sub	sp, #76	; 0x4c
 8007ac4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ac8:	ec57 6b10 	vmov	r6, r7, d0
 8007acc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ad0:	9107      	str	r1, [sp, #28]
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad8:	b975      	cbnz	r5, 8007af8 <_dtoa_r+0x40>
 8007ada:	2010      	movs	r0, #16
 8007adc:	f000 fe2a 	bl	8008734 <malloc>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	61e0      	str	r0, [r4, #28]
 8007ae4:	b920      	cbnz	r0, 8007af0 <_dtoa_r+0x38>
 8007ae6:	4bae      	ldr	r3, [pc, #696]	; (8007da0 <_dtoa_r+0x2e8>)
 8007ae8:	21ef      	movs	r1, #239	; 0xef
 8007aea:	48ae      	ldr	r0, [pc, #696]	; (8007da4 <_dtoa_r+0x2ec>)
 8007aec:	f001 fc82 	bl	80093f4 <__assert_func>
 8007af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007af4:	6005      	str	r5, [r0, #0]
 8007af6:	60c5      	str	r5, [r0, #12]
 8007af8:	69e3      	ldr	r3, [r4, #28]
 8007afa:	6819      	ldr	r1, [r3, #0]
 8007afc:	b151      	cbz	r1, 8007b14 <_dtoa_r+0x5c>
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	604a      	str	r2, [r1, #4]
 8007b02:	2301      	movs	r3, #1
 8007b04:	4093      	lsls	r3, r2
 8007b06:	608b      	str	r3, [r1, #8]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 ff07 	bl	800891c <_Bfree>
 8007b0e:	69e3      	ldr	r3, [r4, #28]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	1e3b      	subs	r3, r7, #0
 8007b16:	bfbb      	ittet	lt
 8007b18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b1c:	9303      	strlt	r3, [sp, #12]
 8007b1e:	2300      	movge	r3, #0
 8007b20:	2201      	movlt	r2, #1
 8007b22:	bfac      	ite	ge
 8007b24:	f8c8 3000 	strge.w	r3, [r8]
 8007b28:	f8c8 2000 	strlt.w	r2, [r8]
 8007b2c:	4b9e      	ldr	r3, [pc, #632]	; (8007da8 <_dtoa_r+0x2f0>)
 8007b2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b32:	ea33 0308 	bics.w	r3, r3, r8
 8007b36:	d11b      	bne.n	8007b70 <_dtoa_r+0xb8>
 8007b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b44:	4333      	orrs	r3, r6
 8007b46:	f000 8593 	beq.w	8008670 <_dtoa_r+0xbb8>
 8007b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b4c:	b963      	cbnz	r3, 8007b68 <_dtoa_r+0xb0>
 8007b4e:	4b97      	ldr	r3, [pc, #604]	; (8007dac <_dtoa_r+0x2f4>)
 8007b50:	e027      	b.n	8007ba2 <_dtoa_r+0xea>
 8007b52:	4b97      	ldr	r3, [pc, #604]	; (8007db0 <_dtoa_r+0x2f8>)
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	9800      	ldr	r0, [sp, #0]
 8007b5e:	b013      	add	sp, #76	; 0x4c
 8007b60:	ecbd 8b04 	vpop	{d8-d9}
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	4b90      	ldr	r3, [pc, #576]	; (8007dac <_dtoa_r+0x2f4>)
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	3303      	adds	r3, #3
 8007b6e:	e7f3      	b.n	8007b58 <_dtoa_r+0xa0>
 8007b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	ec51 0b17 	vmov	r0, r1, d7
 8007b7a:	eeb0 8a47 	vmov.f32	s16, s14
 8007b7e:	eef0 8a67 	vmov.f32	s17, s15
 8007b82:	2300      	movs	r3, #0
 8007b84:	f7f8 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b88:	4681      	mov	r9, r0
 8007b8a:	b160      	cbz	r0, 8007ba6 <_dtoa_r+0xee>
 8007b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b8e:	2301      	movs	r3, #1
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8568 	beq.w	800866a <_dtoa_r+0xbb2>
 8007b9a:	4b86      	ldr	r3, [pc, #536]	; (8007db4 <_dtoa_r+0x2fc>)
 8007b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	e7da      	b.n	8007b5c <_dtoa_r+0xa4>
 8007ba6:	aa10      	add	r2, sp, #64	; 0x40
 8007ba8:	a911      	add	r1, sp, #68	; 0x44
 8007baa:	4620      	mov	r0, r4
 8007bac:	eeb0 0a48 	vmov.f32	s0, s16
 8007bb0:	eef0 0a68 	vmov.f32	s1, s17
 8007bb4:	f001 f994 	bl	8008ee0 <__d2b>
 8007bb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	d07f      	beq.n	8007cc2 <_dtoa_r+0x20a>
 8007bc2:	ee18 3a90 	vmov	r3, s17
 8007bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007bce:	ec51 0b18 	vmov	r0, r1, d8
 8007bd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007bde:	4619      	mov	r1, r3
 8007be0:	2200      	movs	r2, #0
 8007be2:	4b75      	ldr	r3, [pc, #468]	; (8007db8 <_dtoa_r+0x300>)
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	a367      	add	r3, pc, #412	; (adr r3, 8007d88 <_dtoa_r+0x2d0>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fd03 	bl	80005f8 <__aeabi_dmul>
 8007bf2:	a367      	add	r3, pc, #412	; (adr r3, 8007d90 <_dtoa_r+0x2d8>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 fb48 	bl	800028c <__adddf3>
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	460f      	mov	r7, r1
 8007c02:	f7f8 fc8f 	bl	8000524 <__aeabi_i2d>
 8007c06:	a364      	add	r3, pc, #400	; (adr r3, 8007d98 <_dtoa_r+0x2e0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 fb38 	bl	800028c <__adddf3>
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	f7f8 ff9a 	bl	8000b58 <__aeabi_d2iz>
 8007c24:	2200      	movs	r2, #0
 8007c26:	4683      	mov	fp, r0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 ff55 	bl	8000adc <__aeabi_dcmplt>
 8007c32:	b148      	cbz	r0, 8007c48 <_dtoa_r+0x190>
 8007c34:	4658      	mov	r0, fp
 8007c36:	f7f8 fc75 	bl	8000524 <__aeabi_i2d>
 8007c3a:	4632      	mov	r2, r6
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	f7f8 ff43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c42:	b908      	cbnz	r0, 8007c48 <_dtoa_r+0x190>
 8007c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c48:	f1bb 0f16 	cmp.w	fp, #22
 8007c4c:	d857      	bhi.n	8007cfe <_dtoa_r+0x246>
 8007c4e:	4b5b      	ldr	r3, [pc, #364]	; (8007dbc <_dtoa_r+0x304>)
 8007c50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	ec51 0b18 	vmov	r0, r1, d8
 8007c5c:	f7f8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d04e      	beq.n	8007d02 <_dtoa_r+0x24a>
 8007c64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c68:	2300      	movs	r3, #0
 8007c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c6e:	1b5b      	subs	r3, r3, r5
 8007c70:	1e5a      	subs	r2, r3, #1
 8007c72:	bf45      	ittet	mi
 8007c74:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c78:	9305      	strmi	r3, [sp, #20]
 8007c7a:	2300      	movpl	r3, #0
 8007c7c:	2300      	movmi	r3, #0
 8007c7e:	9206      	str	r2, [sp, #24]
 8007c80:	bf54      	ite	pl
 8007c82:	9305      	strpl	r3, [sp, #20]
 8007c84:	9306      	strmi	r3, [sp, #24]
 8007c86:	f1bb 0f00 	cmp.w	fp, #0
 8007c8a:	db3c      	blt.n	8007d06 <_dtoa_r+0x24e>
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c92:	445b      	add	r3, fp
 8007c94:	9306      	str	r3, [sp, #24]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	9b07      	ldr	r3, [sp, #28]
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d868      	bhi.n	8007d72 <_dtoa_r+0x2ba>
 8007ca0:	2b05      	cmp	r3, #5
 8007ca2:	bfc4      	itt	gt
 8007ca4:	3b04      	subgt	r3, #4
 8007ca6:	9307      	strgt	r3, [sp, #28]
 8007ca8:	9b07      	ldr	r3, [sp, #28]
 8007caa:	f1a3 0302 	sub.w	r3, r3, #2
 8007cae:	bfcc      	ite	gt
 8007cb0:	2500      	movgt	r5, #0
 8007cb2:	2501      	movle	r5, #1
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	f200 8085 	bhi.w	8007dc4 <_dtoa_r+0x30c>
 8007cba:	e8df f003 	tbb	[pc, r3]
 8007cbe:	3b2e      	.short	0x3b2e
 8007cc0:	5839      	.short	0x5839
 8007cc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007cc6:	441d      	add	r5, r3
 8007cc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	bfc1      	itttt	gt
 8007cd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007cdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ce0:	bfd6      	itet	le
 8007ce2:	f1c3 0320 	rsble	r3, r3, #32
 8007ce6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007cea:	fa06 f003 	lslle.w	r0, r6, r3
 8007cee:	f7f8 fc09 	bl	8000504 <__aeabi_ui2d>
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cf8:	3d01      	subs	r5, #1
 8007cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8007cfc:	e76f      	b.n	8007bde <_dtoa_r+0x126>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e7b3      	b.n	8007c6a <_dtoa_r+0x1b2>
 8007d02:	900c      	str	r0, [sp, #48]	; 0x30
 8007d04:	e7b2      	b.n	8007c6c <_dtoa_r+0x1b4>
 8007d06:	9b05      	ldr	r3, [sp, #20]
 8007d08:	eba3 030b 	sub.w	r3, r3, fp
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	f1cb 0300 	rsb	r3, fp, #0
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	2300      	movs	r3, #0
 8007d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d18:	e7bf      	b.n	8007c9a <_dtoa_r+0x1e2>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	dc52      	bgt.n	8007dca <_dtoa_r+0x312>
 8007d24:	2301      	movs	r3, #1
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d2e:	e00b      	b.n	8007d48 <_dtoa_r+0x290>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e7f3      	b.n	8007d1c <_dtoa_r+0x264>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9309      	str	r3, [sp, #36]	; 0x24
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	445b      	add	r3, fp
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	bfb8      	it	lt
 8007d46:	2301      	movlt	r3, #1
 8007d48:	69e0      	ldr	r0, [r4, #28]
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	f102 0614 	add.w	r6, r2, #20
 8007d52:	429e      	cmp	r6, r3
 8007d54:	d93d      	bls.n	8007dd2 <_dtoa_r+0x31a>
 8007d56:	6041      	str	r1, [r0, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fd9f 	bl	800889c <_Balloc>
 8007d5e:	9000      	str	r0, [sp, #0]
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d139      	bne.n	8007dd8 <_dtoa_r+0x320>
 8007d64:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <_dtoa_r+0x308>)
 8007d66:	4602      	mov	r2, r0
 8007d68:	f240 11af 	movw	r1, #431	; 0x1af
 8007d6c:	e6bd      	b.n	8007aea <_dtoa_r+0x32>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7e1      	b.n	8007d36 <_dtoa_r+0x27e>
 8007d72:	2501      	movs	r5, #1
 8007d74:	2300      	movs	r3, #0
 8007d76:	9307      	str	r3, [sp, #28]
 8007d78:	9509      	str	r5, [sp, #36]	; 0x24
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	2200      	movs	r2, #0
 8007d84:	2312      	movs	r3, #18
 8007d86:	e7d1      	b.n	8007d2c <_dtoa_r+0x274>
 8007d88:	636f4361 	.word	0x636f4361
 8007d8c:	3fd287a7 	.word	0x3fd287a7
 8007d90:	8b60c8b3 	.word	0x8b60c8b3
 8007d94:	3fc68a28 	.word	0x3fc68a28
 8007d98:	509f79fb 	.word	0x509f79fb
 8007d9c:	3fd34413 	.word	0x3fd34413
 8007da0:	08009eef 	.word	0x08009eef
 8007da4:	08009f06 	.word	0x08009f06
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	08009eeb 	.word	0x08009eeb
 8007db0:	08009ee2 	.word	0x08009ee2
 8007db4:	08009ebf 	.word	0x08009ebf
 8007db8:	3ff80000 	.word	0x3ff80000
 8007dbc:	08009ff0 	.word	0x08009ff0
 8007dc0:	08009f5e 	.word	0x08009f5e
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc8:	e7d7      	b.n	8007d7a <_dtoa_r+0x2c2>
 8007dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	e7ba      	b.n	8007d48 <_dtoa_r+0x290>
 8007dd2:	3101      	adds	r1, #1
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	e7ba      	b.n	8007d4e <_dtoa_r+0x296>
 8007dd8:	69e3      	ldr	r3, [r4, #28]
 8007dda:	9a00      	ldr	r2, [sp, #0]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	2b0e      	cmp	r3, #14
 8007de2:	f200 80a8 	bhi.w	8007f36 <_dtoa_r+0x47e>
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f000 80a5 	beq.w	8007f36 <_dtoa_r+0x47e>
 8007dec:	f1bb 0f00 	cmp.w	fp, #0
 8007df0:	dd38      	ble.n	8007e64 <_dtoa_r+0x3ac>
 8007df2:	4bc0      	ldr	r3, [pc, #768]	; (80080f4 <_dtoa_r+0x63c>)
 8007df4:	f00b 020f 	and.w	r2, fp, #15
 8007df8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007e08:	d019      	beq.n	8007e3e <_dtoa_r+0x386>
 8007e0a:	4bbb      	ldr	r3, [pc, #748]	; (80080f8 <_dtoa_r+0x640>)
 8007e0c:	ec51 0b18 	vmov	r0, r1, d8
 8007e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e14:	f7f8 fd1a 	bl	800084c <__aeabi_ddiv>
 8007e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1c:	f008 080f 	and.w	r8, r8, #15
 8007e20:	2503      	movs	r5, #3
 8007e22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080f8 <_dtoa_r+0x640>
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	d10a      	bne.n	8007e42 <_dtoa_r+0x38a>
 8007e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e30:	4632      	mov	r2, r6
 8007e32:	463b      	mov	r3, r7
 8007e34:	f7f8 fd0a 	bl	800084c <__aeabi_ddiv>
 8007e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3c:	e02b      	b.n	8007e96 <_dtoa_r+0x3de>
 8007e3e:	2502      	movs	r5, #2
 8007e40:	e7ef      	b.n	8007e22 <_dtoa_r+0x36a>
 8007e42:	f018 0f01 	tst.w	r8, #1
 8007e46:	d008      	beq.n	8007e5a <_dtoa_r+0x3a2>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	3501      	adds	r5, #1
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e5e:	f109 0908 	add.w	r9, r9, #8
 8007e62:	e7e0      	b.n	8007e26 <_dtoa_r+0x36e>
 8007e64:	f000 809f 	beq.w	8007fa6 <_dtoa_r+0x4ee>
 8007e68:	f1cb 0600 	rsb	r6, fp, #0
 8007e6c:	4ba1      	ldr	r3, [pc, #644]	; (80080f4 <_dtoa_r+0x63c>)
 8007e6e:	4fa2      	ldr	r7, [pc, #648]	; (80080f8 <_dtoa_r+0x640>)
 8007e70:	f006 020f 	and.w	r2, r6, #15
 8007e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	ec51 0b18 	vmov	r0, r1, d8
 8007e80:	f7f8 fbba 	bl	80005f8 <__aeabi_dmul>
 8007e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e88:	1136      	asrs	r6, r6, #4
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2502      	movs	r5, #2
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d17e      	bne.n	8007f90 <_dtoa_r+0x4d8>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d0      	bne.n	8007e38 <_dtoa_r+0x380>
 8007e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8084 	beq.w	8007faa <_dtoa_r+0x4f2>
 8007ea2:	4b96      	ldr	r3, [pc, #600]	; (80080fc <_dtoa_r+0x644>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	f7f8 fe17 	bl	8000adc <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d07b      	beq.n	8007faa <_dtoa_r+0x4f2>
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d078      	beq.n	8007faa <_dtoa_r+0x4f2>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dd39      	ble.n	8007f32 <_dtoa_r+0x47a>
 8007ebe:	4b90      	ldr	r3, [pc, #576]	; (8008100 <_dtoa_r+0x648>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 fb97 	bl	80005f8 <__aeabi_dmul>
 8007eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ece:	9e01      	ldr	r6, [sp, #4]
 8007ed0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007eda:	4628      	mov	r0, r5
 8007edc:	f7f8 fb22 	bl	8000524 <__aeabi_i2d>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	4b86      	ldr	r3, [pc, #536]	; (8008104 <_dtoa_r+0x64c>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	f7f8 f9ce 	bl	800028c <__adddf3>
 8007ef0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d158      	bne.n	8007fb0 <_dtoa_r+0x4f8>
 8007efe:	4b82      	ldr	r3, [pc, #520]	; (8008108 <_dtoa_r+0x650>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	4640      	mov	r0, r8
 8007f04:	4649      	mov	r1, r9
 8007f06:	f7f8 f9bf 	bl	8000288 <__aeabi_dsub>
 8007f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0e:	4680      	mov	r8, r0
 8007f10:	4689      	mov	r9, r1
 8007f12:	f7f8 fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f040 8296 	bne.w	8008448 <_dtoa_r+0x990>
 8007f1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f20:	4640      	mov	r0, r8
 8007f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 8289 	bne.w	8008444 <_dtoa_r+0x98c>
 8007f32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f2c0 814e 	blt.w	80081da <_dtoa_r+0x722>
 8007f3e:	f1bb 0f0e 	cmp.w	fp, #14
 8007f42:	f300 814a 	bgt.w	80081da <_dtoa_r+0x722>
 8007f46:	4b6b      	ldr	r3, [pc, #428]	; (80080f4 <_dtoa_r+0x63c>)
 8007f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f280 80dc 	bge.w	8008110 <_dtoa_r+0x658>
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f300 80d8 	bgt.w	8008110 <_dtoa_r+0x658>
 8007f60:	f040 826f 	bne.w	8008442 <_dtoa_r+0x98a>
 8007f64:	4b68      	ldr	r3, [pc, #416]	; (8008108 <_dtoa_r+0x650>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f74:	f7f8 fdc6 	bl	8000b04 <__aeabi_dcmpge>
 8007f78:	9e04      	ldr	r6, [sp, #16]
 8007f7a:	4637      	mov	r7, r6
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 8245 	bne.w	800840c <_dtoa_r+0x954>
 8007f82:	9d00      	ldr	r5, [sp, #0]
 8007f84:	2331      	movs	r3, #49	; 0x31
 8007f86:	f805 3b01 	strb.w	r3, [r5], #1
 8007f8a:	f10b 0b01 	add.w	fp, fp, #1
 8007f8e:	e241      	b.n	8008414 <_dtoa_r+0x95c>
 8007f90:	07f2      	lsls	r2, r6, #31
 8007f92:	d505      	bpl.n	8007fa0 <_dtoa_r+0x4e8>
 8007f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	1076      	asrs	r6, r6, #1
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	e773      	b.n	8007e8e <_dtoa_r+0x3d6>
 8007fa6:	2502      	movs	r5, #2
 8007fa8:	e775      	b.n	8007e96 <_dtoa_r+0x3de>
 8007faa:	9e04      	ldr	r6, [sp, #16]
 8007fac:	465f      	mov	r7, fp
 8007fae:	e792      	b.n	8007ed6 <_dtoa_r+0x41e>
 8007fb0:	9900      	ldr	r1, [sp, #0]
 8007fb2:	4b50      	ldr	r3, [pc, #320]	; (80080f4 <_dtoa_r+0x63c>)
 8007fb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fb8:	4431      	add	r1, r6
 8007fba:	9102      	str	r1, [sp, #8]
 8007fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fbe:	eeb0 9a47 	vmov.f32	s18, s14
 8007fc2:	eef0 9a67 	vmov.f32	s19, s15
 8007fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	d044      	beq.n	800805c <_dtoa_r+0x5a4>
 8007fd2:	494e      	ldr	r1, [pc, #312]	; (800810c <_dtoa_r+0x654>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f8 fc39 	bl	800084c <__aeabi_ddiv>
 8007fda:	ec53 2b19 	vmov	r2, r3, d9
 8007fde:	f7f8 f953 	bl	8000288 <__aeabi_dsub>
 8007fe2:	9d00      	ldr	r5, [sp, #0]
 8007fe4:	ec41 0b19 	vmov	d9, r0, r1
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7f8 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	f7f8 fa97 	bl	8000524 <__aeabi_i2d>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 f943 	bl	8000288 <__aeabi_dsub>
 8008002:	3630      	adds	r6, #48	; 0x30
 8008004:	f805 6b01 	strb.w	r6, [r5], #1
 8008008:	ec53 2b19 	vmov	r2, r3, d9
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	f7f8 fd64 	bl	8000adc <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d164      	bne.n	80080e2 <_dtoa_r+0x62a>
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	4937      	ldr	r1, [pc, #220]	; (80080fc <_dtoa_r+0x644>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f932 	bl	8000288 <__aeabi_dsub>
 8008024:	ec53 2b19 	vmov	r2, r3, d9
 8008028:	f7f8 fd58 	bl	8000adc <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f040 80b6 	bne.w	800819e <_dtoa_r+0x6e6>
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	429d      	cmp	r5, r3
 8008036:	f43f af7c 	beq.w	8007f32 <_dtoa_r+0x47a>
 800803a:	4b31      	ldr	r3, [pc, #196]	; (8008100 <_dtoa_r+0x648>)
 800803c:	ec51 0b19 	vmov	r0, r1, d9
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 fad9 	bl	80005f8 <__aeabi_dmul>
 8008046:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <_dtoa_r+0x648>)
 8008048:	ec41 0b19 	vmov	d9, r0, r1
 800804c:	2200      	movs	r2, #0
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 fad1 	bl	80005f8 <__aeabi_dmul>
 8008056:	4680      	mov	r8, r0
 8008058:	4689      	mov	r9, r1
 800805a:	e7c5      	b.n	8007fe8 <_dtoa_r+0x530>
 800805c:	ec51 0b17 	vmov	r0, r1, d7
 8008060:	f7f8 faca 	bl	80005f8 <__aeabi_dmul>
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	9d00      	ldr	r5, [sp, #0]
 8008068:	930f      	str	r3, [sp, #60]	; 0x3c
 800806a:	ec41 0b19 	vmov	d9, r0, r1
 800806e:	4649      	mov	r1, r9
 8008070:	4640      	mov	r0, r8
 8008072:	f7f8 fd71 	bl	8000b58 <__aeabi_d2iz>
 8008076:	4606      	mov	r6, r0
 8008078:	f7f8 fa54 	bl	8000524 <__aeabi_i2d>
 800807c:	3630      	adds	r6, #48	; 0x30
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4640      	mov	r0, r8
 8008084:	4649      	mov	r1, r9
 8008086:	f7f8 f8ff 	bl	8000288 <__aeabi_dsub>
 800808a:	f805 6b01 	strb.w	r6, [r5], #1
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	429d      	cmp	r5, r3
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	d124      	bne.n	80080e6 <_dtoa_r+0x62e>
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <_dtoa_r+0x654>)
 800809e:	ec51 0b19 	vmov	r0, r1, d9
 80080a2:	f7f8 f8f3 	bl	800028c <__adddf3>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d173      	bne.n	800819e <_dtoa_r+0x6e6>
 80080b6:	ec53 2b19 	vmov	r2, r3, d9
 80080ba:	4914      	ldr	r1, [pc, #80]	; (800810c <_dtoa_r+0x654>)
 80080bc:	2000      	movs	r0, #0
 80080be:	f7f8 f8e3 	bl	8000288 <__aeabi_dsub>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 fd07 	bl	8000adc <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f af2f 	beq.w	8007f32 <_dtoa_r+0x47a>
 80080d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080d6:	1e6b      	subs	r3, r5, #1
 80080d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80080da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d0f8      	beq.n	80080d4 <_dtoa_r+0x61c>
 80080e2:	46bb      	mov	fp, r7
 80080e4:	e04a      	b.n	800817c <_dtoa_r+0x6c4>
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <_dtoa_r+0x648>)
 80080e8:	f7f8 fa86 	bl	80005f8 <__aeabi_dmul>
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	e7bd      	b.n	800806e <_dtoa_r+0x5b6>
 80080f2:	bf00      	nop
 80080f4:	08009ff0 	.word	0x08009ff0
 80080f8:	08009fc8 	.word	0x08009fc8
 80080fc:	3ff00000 	.word	0x3ff00000
 8008100:	40240000 	.word	0x40240000
 8008104:	401c0000 	.word	0x401c0000
 8008108:	40140000 	.word	0x40140000
 800810c:	3fe00000 	.word	0x3fe00000
 8008110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008114:	9d00      	ldr	r5, [sp, #0]
 8008116:	4642      	mov	r2, r8
 8008118:	464b      	mov	r3, r9
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 fb95 	bl	800084c <__aeabi_ddiv>
 8008122:	f7f8 fd19 	bl	8000b58 <__aeabi_d2iz>
 8008126:	9001      	str	r0, [sp, #4]
 8008128:	f7f8 f9fc 	bl	8000524 <__aeabi_i2d>
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 f8a4 	bl	8000288 <__aeabi_dsub>
 8008140:	9e01      	ldr	r6, [sp, #4]
 8008142:	9f04      	ldr	r7, [sp, #16]
 8008144:	3630      	adds	r6, #48	; 0x30
 8008146:	f805 6b01 	strb.w	r6, [r5], #1
 800814a:	9e00      	ldr	r6, [sp, #0]
 800814c:	1bae      	subs	r6, r5, r6
 800814e:	42b7      	cmp	r7, r6
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	d134      	bne.n	80081c0 <_dtoa_r+0x708>
 8008156:	f7f8 f899 	bl	800028c <__adddf3>
 800815a:	4642      	mov	r2, r8
 800815c:	464b      	mov	r3, r9
 800815e:	4606      	mov	r6, r0
 8008160:	460f      	mov	r7, r1
 8008162:	f7f8 fcd9 	bl	8000b18 <__aeabi_dcmpgt>
 8008166:	b9c8      	cbnz	r0, 800819c <_dtoa_r+0x6e4>
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008174:	b110      	cbz	r0, 800817c <_dtoa_r+0x6c4>
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	07db      	lsls	r3, r3, #31
 800817a:	d40f      	bmi.n	800819c <_dtoa_r+0x6e4>
 800817c:	4651      	mov	r1, sl
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fbcc 	bl	800891c <_Bfree>
 8008184:	2300      	movs	r3, #0
 8008186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008188:	702b      	strb	r3, [r5, #0]
 800818a:	f10b 0301 	add.w	r3, fp, #1
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008192:	2b00      	cmp	r3, #0
 8008194:	f43f ace2 	beq.w	8007b5c <_dtoa_r+0xa4>
 8008198:	601d      	str	r5, [r3, #0]
 800819a:	e4df      	b.n	8007b5c <_dtoa_r+0xa4>
 800819c:	465f      	mov	r7, fp
 800819e:	462b      	mov	r3, r5
 80081a0:	461d      	mov	r5, r3
 80081a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081a6:	2a39      	cmp	r2, #57	; 0x39
 80081a8:	d106      	bne.n	80081b8 <_dtoa_r+0x700>
 80081aa:	9a00      	ldr	r2, [sp, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d1f7      	bne.n	80081a0 <_dtoa_r+0x6e8>
 80081b0:	9900      	ldr	r1, [sp, #0]
 80081b2:	2230      	movs	r2, #48	; 0x30
 80081b4:	3701      	adds	r7, #1
 80081b6:	700a      	strb	r2, [r1, #0]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	3201      	adds	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e790      	b.n	80080e2 <_dtoa_r+0x62a>
 80081c0:	4ba3      	ldr	r3, [pc, #652]	; (8008450 <_dtoa_r+0x998>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	2200      	movs	r2, #0
 80081ca:	2300      	movs	r3, #0
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f7f8 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d09e      	beq.n	8008116 <_dtoa_r+0x65e>
 80081d8:	e7d0      	b.n	800817c <_dtoa_r+0x6c4>
 80081da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081dc:	2a00      	cmp	r2, #0
 80081de:	f000 80ca 	beq.w	8008376 <_dtoa_r+0x8be>
 80081e2:	9a07      	ldr	r2, [sp, #28]
 80081e4:	2a01      	cmp	r2, #1
 80081e6:	f300 80ad 	bgt.w	8008344 <_dtoa_r+0x88c>
 80081ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	f000 80a5 	beq.w	800833c <_dtoa_r+0x884>
 80081f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081f6:	9e08      	ldr	r6, [sp, #32]
 80081f8:	9d05      	ldr	r5, [sp, #20]
 80081fa:	9a05      	ldr	r2, [sp, #20]
 80081fc:	441a      	add	r2, r3
 80081fe:	9205      	str	r2, [sp, #20]
 8008200:	9a06      	ldr	r2, [sp, #24]
 8008202:	2101      	movs	r1, #1
 8008204:	441a      	add	r2, r3
 8008206:	4620      	mov	r0, r4
 8008208:	9206      	str	r2, [sp, #24]
 800820a:	f000 fc3d 	bl	8008a88 <__i2b>
 800820e:	4607      	mov	r7, r0
 8008210:	b165      	cbz	r5, 800822c <_dtoa_r+0x774>
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dd09      	ble.n	800822c <_dtoa_r+0x774>
 8008218:	42ab      	cmp	r3, r5
 800821a:	9a05      	ldr	r2, [sp, #20]
 800821c:	bfa8      	it	ge
 800821e:	462b      	movge	r3, r5
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	9205      	str	r2, [sp, #20]
 8008224:	9a06      	ldr	r2, [sp, #24]
 8008226:	1aed      	subs	r5, r5, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	9306      	str	r3, [sp, #24]
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	b1f3      	cbz	r3, 800826e <_dtoa_r+0x7b6>
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80a3 	beq.w	800837e <_dtoa_r+0x8c6>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd10      	ble.n	800825e <_dtoa_r+0x7a6>
 800823c:	4639      	mov	r1, r7
 800823e:	4632      	mov	r2, r6
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fce1 	bl	8008c08 <__pow5mult>
 8008246:	4652      	mov	r2, sl
 8008248:	4601      	mov	r1, r0
 800824a:	4607      	mov	r7, r0
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fc31 	bl	8008ab4 <__multiply>
 8008252:	4651      	mov	r1, sl
 8008254:	4680      	mov	r8, r0
 8008256:	4620      	mov	r0, r4
 8008258:	f000 fb60 	bl	800891c <_Bfree>
 800825c:	46c2      	mov	sl, r8
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	1b9a      	subs	r2, r3, r6
 8008262:	d004      	beq.n	800826e <_dtoa_r+0x7b6>
 8008264:	4651      	mov	r1, sl
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fcce 	bl	8008c08 <__pow5mult>
 800826c:	4682      	mov	sl, r0
 800826e:	2101      	movs	r1, #1
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fc09 	bl	8008a88 <__i2b>
 8008276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008278:	2b00      	cmp	r3, #0
 800827a:	4606      	mov	r6, r0
 800827c:	f340 8081 	ble.w	8008382 <_dtoa_r+0x8ca>
 8008280:	461a      	mov	r2, r3
 8008282:	4601      	mov	r1, r0
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fcbf 	bl	8008c08 <__pow5mult>
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	2b01      	cmp	r3, #1
 800828e:	4606      	mov	r6, r0
 8008290:	dd7a      	ble.n	8008388 <_dtoa_r+0x8d0>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	6933      	ldr	r3, [r6, #16]
 8008298:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800829c:	6918      	ldr	r0, [r3, #16]
 800829e:	f000 fba5 	bl	80089ec <__hi0bits>
 80082a2:	f1c0 0020 	rsb	r0, r0, #32
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	4418      	add	r0, r3
 80082aa:	f010 001f 	ands.w	r0, r0, #31
 80082ae:	f000 8094 	beq.w	80083da <_dtoa_r+0x922>
 80082b2:	f1c0 0320 	rsb	r3, r0, #32
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	f340 8085 	ble.w	80083c6 <_dtoa_r+0x90e>
 80082bc:	9b05      	ldr	r3, [sp, #20]
 80082be:	f1c0 001c 	rsb	r0, r0, #28
 80082c2:	4403      	add	r3, r0
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	9b06      	ldr	r3, [sp, #24]
 80082c8:	4403      	add	r3, r0
 80082ca:	4405      	add	r5, r0
 80082cc:	9306      	str	r3, [sp, #24]
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dd05      	ble.n	80082e0 <_dtoa_r+0x828>
 80082d4:	4651      	mov	r1, sl
 80082d6:	461a      	mov	r2, r3
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fcef 	bl	8008cbc <__lshift>
 80082de:	4682      	mov	sl, r0
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd05      	ble.n	80082f2 <_dtoa_r+0x83a>
 80082e6:	4631      	mov	r1, r6
 80082e8:	461a      	mov	r2, r3
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fce6 	bl	8008cbc <__lshift>
 80082f0:	4606      	mov	r6, r0
 80082f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d072      	beq.n	80083de <_dtoa_r+0x926>
 80082f8:	4631      	mov	r1, r6
 80082fa:	4650      	mov	r0, sl
 80082fc:	f000 fd4a 	bl	8008d94 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	da6c      	bge.n	80083de <_dtoa_r+0x926>
 8008304:	2300      	movs	r3, #0
 8008306:	4651      	mov	r1, sl
 8008308:	220a      	movs	r2, #10
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fb28 	bl	8008960 <__multadd>
 8008310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008316:	4682      	mov	sl, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 81b0 	beq.w	800867e <_dtoa_r+0xbc6>
 800831e:	2300      	movs	r3, #0
 8008320:	4639      	mov	r1, r7
 8008322:	220a      	movs	r2, #10
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fb1b 	bl	8008960 <__multadd>
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	4607      	mov	r7, r0
 8008330:	f300 8096 	bgt.w	8008460 <_dtoa_r+0x9a8>
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	2b02      	cmp	r3, #2
 8008338:	dc59      	bgt.n	80083ee <_dtoa_r+0x936>
 800833a:	e091      	b.n	8008460 <_dtoa_r+0x9a8>
 800833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800833e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008342:	e758      	b.n	80081f6 <_dtoa_r+0x73e>
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	1e5e      	subs	r6, r3, #1
 8008348:	9b08      	ldr	r3, [sp, #32]
 800834a:	42b3      	cmp	r3, r6
 800834c:	bfbf      	itttt	lt
 800834e:	9b08      	ldrlt	r3, [sp, #32]
 8008350:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008352:	9608      	strlt	r6, [sp, #32]
 8008354:	1af3      	sublt	r3, r6, r3
 8008356:	bfb4      	ite	lt
 8008358:	18d2      	addlt	r2, r2, r3
 800835a:	1b9e      	subge	r6, r3, r6
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	bfbc      	itt	lt
 8008360:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008362:	2600      	movlt	r6, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	bfb7      	itett	lt
 8008368:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800836c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008370:	1a9d      	sublt	r5, r3, r2
 8008372:	2300      	movlt	r3, #0
 8008374:	e741      	b.n	80081fa <_dtoa_r+0x742>
 8008376:	9e08      	ldr	r6, [sp, #32]
 8008378:	9d05      	ldr	r5, [sp, #20]
 800837a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800837c:	e748      	b.n	8008210 <_dtoa_r+0x758>
 800837e:	9a08      	ldr	r2, [sp, #32]
 8008380:	e770      	b.n	8008264 <_dtoa_r+0x7ac>
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	2b01      	cmp	r3, #1
 8008386:	dc19      	bgt.n	80083bc <_dtoa_r+0x904>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	b9bb      	cbnz	r3, 80083bc <_dtoa_r+0x904>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008392:	b99b      	cbnz	r3, 80083bc <_dtoa_r+0x904>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800839a:	0d1b      	lsrs	r3, r3, #20
 800839c:	051b      	lsls	r3, r3, #20
 800839e:	b183      	cbz	r3, 80083c2 <_dtoa_r+0x90a>
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	3301      	adds	r3, #1
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	3301      	adds	r3, #1
 80083aa:	9306      	str	r3, [sp, #24]
 80083ac:	f04f 0801 	mov.w	r8, #1
 80083b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f47f af6f 	bne.w	8008296 <_dtoa_r+0x7de>
 80083b8:	2001      	movs	r0, #1
 80083ba:	e774      	b.n	80082a6 <_dtoa_r+0x7ee>
 80083bc:	f04f 0800 	mov.w	r8, #0
 80083c0:	e7f6      	b.n	80083b0 <_dtoa_r+0x8f8>
 80083c2:	4698      	mov	r8, r3
 80083c4:	e7f4      	b.n	80083b0 <_dtoa_r+0x8f8>
 80083c6:	d082      	beq.n	80082ce <_dtoa_r+0x816>
 80083c8:	9a05      	ldr	r2, [sp, #20]
 80083ca:	331c      	adds	r3, #28
 80083cc:	441a      	add	r2, r3
 80083ce:	9205      	str	r2, [sp, #20]
 80083d0:	9a06      	ldr	r2, [sp, #24]
 80083d2:	441a      	add	r2, r3
 80083d4:	441d      	add	r5, r3
 80083d6:	9206      	str	r2, [sp, #24]
 80083d8:	e779      	b.n	80082ce <_dtoa_r+0x816>
 80083da:	4603      	mov	r3, r0
 80083dc:	e7f4      	b.n	80083c8 <_dtoa_r+0x910>
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc37      	bgt.n	8008454 <_dtoa_r+0x99c>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	dd34      	ble.n	8008454 <_dtoa_r+0x99c>
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	b963      	cbnz	r3, 800840c <_dtoa_r+0x954>
 80083f2:	4631      	mov	r1, r6
 80083f4:	2205      	movs	r2, #5
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 fab2 	bl	8008960 <__multadd>
 80083fc:	4601      	mov	r1, r0
 80083fe:	4606      	mov	r6, r0
 8008400:	4650      	mov	r0, sl
 8008402:	f000 fcc7 	bl	8008d94 <__mcmp>
 8008406:	2800      	cmp	r0, #0
 8008408:	f73f adbb 	bgt.w	8007f82 <_dtoa_r+0x4ca>
 800840c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840e:	9d00      	ldr	r5, [sp, #0]
 8008410:	ea6f 0b03 	mvn.w	fp, r3
 8008414:	f04f 0800 	mov.w	r8, #0
 8008418:	4631      	mov	r1, r6
 800841a:	4620      	mov	r0, r4
 800841c:	f000 fa7e 	bl	800891c <_Bfree>
 8008420:	2f00      	cmp	r7, #0
 8008422:	f43f aeab 	beq.w	800817c <_dtoa_r+0x6c4>
 8008426:	f1b8 0f00 	cmp.w	r8, #0
 800842a:	d005      	beq.n	8008438 <_dtoa_r+0x980>
 800842c:	45b8      	cmp	r8, r7
 800842e:	d003      	beq.n	8008438 <_dtoa_r+0x980>
 8008430:	4641      	mov	r1, r8
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fa72 	bl	800891c <_Bfree>
 8008438:	4639      	mov	r1, r7
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fa6e 	bl	800891c <_Bfree>
 8008440:	e69c      	b.n	800817c <_dtoa_r+0x6c4>
 8008442:	2600      	movs	r6, #0
 8008444:	4637      	mov	r7, r6
 8008446:	e7e1      	b.n	800840c <_dtoa_r+0x954>
 8008448:	46bb      	mov	fp, r7
 800844a:	4637      	mov	r7, r6
 800844c:	e599      	b.n	8007f82 <_dtoa_r+0x4ca>
 800844e:	bf00      	nop
 8008450:	40240000 	.word	0x40240000
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80c8 	beq.w	80085ec <_dtoa_r+0xb34>
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	2d00      	cmp	r5, #0
 8008462:	dd05      	ble.n	8008470 <_dtoa_r+0x9b8>
 8008464:	4639      	mov	r1, r7
 8008466:	462a      	mov	r2, r5
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fc27 	bl	8008cbc <__lshift>
 800846e:	4607      	mov	r7, r0
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	d05b      	beq.n	800852e <_dtoa_r+0xa76>
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fa0f 	bl	800889c <_Balloc>
 800847e:	4605      	mov	r5, r0
 8008480:	b928      	cbnz	r0, 800848e <_dtoa_r+0x9d6>
 8008482:	4b83      	ldr	r3, [pc, #524]	; (8008690 <_dtoa_r+0xbd8>)
 8008484:	4602      	mov	r2, r0
 8008486:	f240 21ef 	movw	r1, #751	; 0x2ef
 800848a:	f7ff bb2e 	b.w	8007aea <_dtoa_r+0x32>
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	3202      	adds	r2, #2
 8008492:	0092      	lsls	r2, r2, #2
 8008494:	f107 010c 	add.w	r1, r7, #12
 8008498:	300c      	adds	r0, #12
 800849a:	f7ff fa74 	bl	8007986 <memcpy>
 800849e:	2201      	movs	r2, #1
 80084a0:	4629      	mov	r1, r5
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fc0a 	bl	8008cbc <__lshift>
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084b2:	4413      	add	r3, r2
 80084b4:	9308      	str	r3, [sp, #32]
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	46b8      	mov	r8, r7
 80084be:	9306      	str	r3, [sp, #24]
 80084c0:	4607      	mov	r7, r0
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4631      	mov	r1, r6
 80084c6:	3b01      	subs	r3, #1
 80084c8:	4650      	mov	r0, sl
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	f7ff fa69 	bl	80079a2 <quorem>
 80084d0:	4641      	mov	r1, r8
 80084d2:	9002      	str	r0, [sp, #8]
 80084d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084d8:	4650      	mov	r0, sl
 80084da:	f000 fc5b 	bl	8008d94 <__mcmp>
 80084de:	463a      	mov	r2, r7
 80084e0:	9005      	str	r0, [sp, #20]
 80084e2:	4631      	mov	r1, r6
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fc71 	bl	8008dcc <__mdiff>
 80084ea:	68c2      	ldr	r2, [r0, #12]
 80084ec:	4605      	mov	r5, r0
 80084ee:	bb02      	cbnz	r2, 8008532 <_dtoa_r+0xa7a>
 80084f0:	4601      	mov	r1, r0
 80084f2:	4650      	mov	r0, sl
 80084f4:	f000 fc4e 	bl	8008d94 <__mcmp>
 80084f8:	4602      	mov	r2, r0
 80084fa:	4629      	mov	r1, r5
 80084fc:	4620      	mov	r0, r4
 80084fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008500:	f000 fa0c 	bl	800891c <_Bfree>
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008508:	9d04      	ldr	r5, [sp, #16]
 800850a:	ea43 0102 	orr.w	r1, r3, r2
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	4319      	orrs	r1, r3
 8008512:	d110      	bne.n	8008536 <_dtoa_r+0xa7e>
 8008514:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008518:	d029      	beq.n	800856e <_dtoa_r+0xab6>
 800851a:	9b05      	ldr	r3, [sp, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd02      	ble.n	8008526 <_dtoa_r+0xa6e>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	f883 9000 	strb.w	r9, [r3]
 800852c:	e774      	b.n	8008418 <_dtoa_r+0x960>
 800852e:	4638      	mov	r0, r7
 8008530:	e7ba      	b.n	80084a8 <_dtoa_r+0x9f0>
 8008532:	2201      	movs	r2, #1
 8008534:	e7e1      	b.n	80084fa <_dtoa_r+0xa42>
 8008536:	9b05      	ldr	r3, [sp, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	db04      	blt.n	8008546 <_dtoa_r+0xa8e>
 800853c:	9907      	ldr	r1, [sp, #28]
 800853e:	430b      	orrs	r3, r1
 8008540:	9906      	ldr	r1, [sp, #24]
 8008542:	430b      	orrs	r3, r1
 8008544:	d120      	bne.n	8008588 <_dtoa_r+0xad0>
 8008546:	2a00      	cmp	r2, #0
 8008548:	dded      	ble.n	8008526 <_dtoa_r+0xa6e>
 800854a:	4651      	mov	r1, sl
 800854c:	2201      	movs	r2, #1
 800854e:	4620      	mov	r0, r4
 8008550:	f000 fbb4 	bl	8008cbc <__lshift>
 8008554:	4631      	mov	r1, r6
 8008556:	4682      	mov	sl, r0
 8008558:	f000 fc1c 	bl	8008d94 <__mcmp>
 800855c:	2800      	cmp	r0, #0
 800855e:	dc03      	bgt.n	8008568 <_dtoa_r+0xab0>
 8008560:	d1e1      	bne.n	8008526 <_dtoa_r+0xa6e>
 8008562:	f019 0f01 	tst.w	r9, #1
 8008566:	d0de      	beq.n	8008526 <_dtoa_r+0xa6e>
 8008568:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800856c:	d1d8      	bne.n	8008520 <_dtoa_r+0xa68>
 800856e:	9a01      	ldr	r2, [sp, #4]
 8008570:	2339      	movs	r3, #57	; 0x39
 8008572:	7013      	strb	r3, [r2, #0]
 8008574:	462b      	mov	r3, r5
 8008576:	461d      	mov	r5, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800857e:	2a39      	cmp	r2, #57	; 0x39
 8008580:	d06c      	beq.n	800865c <_dtoa_r+0xba4>
 8008582:	3201      	adds	r2, #1
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	e747      	b.n	8008418 <_dtoa_r+0x960>
 8008588:	2a00      	cmp	r2, #0
 800858a:	dd07      	ble.n	800859c <_dtoa_r+0xae4>
 800858c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008590:	d0ed      	beq.n	800856e <_dtoa_r+0xab6>
 8008592:	9a01      	ldr	r2, [sp, #4]
 8008594:	f109 0301 	add.w	r3, r9, #1
 8008598:	7013      	strb	r3, [r2, #0]
 800859a:	e73d      	b.n	8008418 <_dtoa_r+0x960>
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	9a08      	ldr	r2, [sp, #32]
 80085a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d043      	beq.n	8008630 <_dtoa_r+0xb78>
 80085a8:	4651      	mov	r1, sl
 80085aa:	2300      	movs	r3, #0
 80085ac:	220a      	movs	r2, #10
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f9d6 	bl	8008960 <__multadd>
 80085b4:	45b8      	cmp	r8, r7
 80085b6:	4682      	mov	sl, r0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	f04f 020a 	mov.w	r2, #10
 80085c0:	4641      	mov	r1, r8
 80085c2:	4620      	mov	r0, r4
 80085c4:	d107      	bne.n	80085d6 <_dtoa_r+0xb1e>
 80085c6:	f000 f9cb 	bl	8008960 <__multadd>
 80085ca:	4680      	mov	r8, r0
 80085cc:	4607      	mov	r7, r0
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	e775      	b.n	80084c2 <_dtoa_r+0xa0a>
 80085d6:	f000 f9c3 	bl	8008960 <__multadd>
 80085da:	4639      	mov	r1, r7
 80085dc:	4680      	mov	r8, r0
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 f9bc 	bl	8008960 <__multadd>
 80085e8:	4607      	mov	r7, r0
 80085ea:	e7f0      	b.n	80085ce <_dtoa_r+0xb16>
 80085ec:	9b04      	ldr	r3, [sp, #16]
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	9d00      	ldr	r5, [sp, #0]
 80085f2:	4631      	mov	r1, r6
 80085f4:	4650      	mov	r0, sl
 80085f6:	f7ff f9d4 	bl	80079a2 <quorem>
 80085fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	f805 9b01 	strb.w	r9, [r5], #1
 8008604:	1aea      	subs	r2, r5, r3
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	4293      	cmp	r3, r2
 800860a:	dd07      	ble.n	800861c <_dtoa_r+0xb64>
 800860c:	4651      	mov	r1, sl
 800860e:	2300      	movs	r3, #0
 8008610:	220a      	movs	r2, #10
 8008612:	4620      	mov	r0, r4
 8008614:	f000 f9a4 	bl	8008960 <__multadd>
 8008618:	4682      	mov	sl, r0
 800861a:	e7ea      	b.n	80085f2 <_dtoa_r+0xb3a>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfc8      	it	gt
 8008622:	461d      	movgt	r5, r3
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	bfd8      	it	le
 8008628:	2501      	movle	r5, #1
 800862a:	441d      	add	r5, r3
 800862c:	f04f 0800 	mov.w	r8, #0
 8008630:	4651      	mov	r1, sl
 8008632:	2201      	movs	r2, #1
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fb41 	bl	8008cbc <__lshift>
 800863a:	4631      	mov	r1, r6
 800863c:	4682      	mov	sl, r0
 800863e:	f000 fba9 	bl	8008d94 <__mcmp>
 8008642:	2800      	cmp	r0, #0
 8008644:	dc96      	bgt.n	8008574 <_dtoa_r+0xabc>
 8008646:	d102      	bne.n	800864e <_dtoa_r+0xb96>
 8008648:	f019 0f01 	tst.w	r9, #1
 800864c:	d192      	bne.n	8008574 <_dtoa_r+0xabc>
 800864e:	462b      	mov	r3, r5
 8008650:	461d      	mov	r5, r3
 8008652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008656:	2a30      	cmp	r2, #48	; 0x30
 8008658:	d0fa      	beq.n	8008650 <_dtoa_r+0xb98>
 800865a:	e6dd      	b.n	8008418 <_dtoa_r+0x960>
 800865c:	9a00      	ldr	r2, [sp, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d189      	bne.n	8008576 <_dtoa_r+0xabe>
 8008662:	f10b 0b01 	add.w	fp, fp, #1
 8008666:	2331      	movs	r3, #49	; 0x31
 8008668:	e796      	b.n	8008598 <_dtoa_r+0xae0>
 800866a:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <_dtoa_r+0xbdc>)
 800866c:	f7ff ba99 	b.w	8007ba2 <_dtoa_r+0xea>
 8008670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008672:	2b00      	cmp	r3, #0
 8008674:	f47f aa6d 	bne.w	8007b52 <_dtoa_r+0x9a>
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <_dtoa_r+0xbe0>)
 800867a:	f7ff ba92 	b.w	8007ba2 <_dtoa_r+0xea>
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	dcb5      	bgt.n	80085f0 <_dtoa_r+0xb38>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b02      	cmp	r3, #2
 8008688:	f73f aeb1 	bgt.w	80083ee <_dtoa_r+0x936>
 800868c:	e7b0      	b.n	80085f0 <_dtoa_r+0xb38>
 800868e:	bf00      	nop
 8008690:	08009f5e 	.word	0x08009f5e
 8008694:	08009ebe 	.word	0x08009ebe
 8008698:	08009ee2 	.word	0x08009ee2

0800869c <_free_r>:
 800869c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800869e:	2900      	cmp	r1, #0
 80086a0:	d044      	beq.n	800872c <_free_r+0x90>
 80086a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a6:	9001      	str	r0, [sp, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f1a1 0404 	sub.w	r4, r1, #4
 80086ae:	bfb8      	it	lt
 80086b0:	18e4      	addlt	r4, r4, r3
 80086b2:	f000 f8e7 	bl	8008884 <__malloc_lock>
 80086b6:	4a1e      	ldr	r2, [pc, #120]	; (8008730 <_free_r+0x94>)
 80086b8:	9801      	ldr	r0, [sp, #4]
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	b933      	cbnz	r3, 80086cc <_free_r+0x30>
 80086be:	6063      	str	r3, [r4, #4]
 80086c0:	6014      	str	r4, [r2, #0]
 80086c2:	b003      	add	sp, #12
 80086c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c8:	f000 b8e2 	b.w	8008890 <__malloc_unlock>
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d908      	bls.n	80086e2 <_free_r+0x46>
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	1961      	adds	r1, r4, r5
 80086d4:	428b      	cmp	r3, r1
 80086d6:	bf01      	itttt	eq
 80086d8:	6819      	ldreq	r1, [r3, #0]
 80086da:	685b      	ldreq	r3, [r3, #4]
 80086dc:	1949      	addeq	r1, r1, r5
 80086de:	6021      	streq	r1, [r4, #0]
 80086e0:	e7ed      	b.n	80086be <_free_r+0x22>
 80086e2:	461a      	mov	r2, r3
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b10b      	cbz	r3, 80086ec <_free_r+0x50>
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	d9fa      	bls.n	80086e2 <_free_r+0x46>
 80086ec:	6811      	ldr	r1, [r2, #0]
 80086ee:	1855      	adds	r5, r2, r1
 80086f0:	42a5      	cmp	r5, r4
 80086f2:	d10b      	bne.n	800870c <_free_r+0x70>
 80086f4:	6824      	ldr	r4, [r4, #0]
 80086f6:	4421      	add	r1, r4
 80086f8:	1854      	adds	r4, r2, r1
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	6011      	str	r1, [r2, #0]
 80086fe:	d1e0      	bne.n	80086c2 <_free_r+0x26>
 8008700:	681c      	ldr	r4, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	6053      	str	r3, [r2, #4]
 8008706:	440c      	add	r4, r1
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	e7da      	b.n	80086c2 <_free_r+0x26>
 800870c:	d902      	bls.n	8008714 <_free_r+0x78>
 800870e:	230c      	movs	r3, #12
 8008710:	6003      	str	r3, [r0, #0]
 8008712:	e7d6      	b.n	80086c2 <_free_r+0x26>
 8008714:	6825      	ldr	r5, [r4, #0]
 8008716:	1961      	adds	r1, r4, r5
 8008718:	428b      	cmp	r3, r1
 800871a:	bf04      	itt	eq
 800871c:	6819      	ldreq	r1, [r3, #0]
 800871e:	685b      	ldreq	r3, [r3, #4]
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	bf04      	itt	eq
 8008724:	1949      	addeq	r1, r1, r5
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	6054      	str	r4, [r2, #4]
 800872a:	e7ca      	b.n	80086c2 <_free_r+0x26>
 800872c:	b003      	add	sp, #12
 800872e:	bd30      	pop	{r4, r5, pc}
 8008730:	200006f4 	.word	0x200006f4

08008734 <malloc>:
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <malloc+0xc>)
 8008736:	4601      	mov	r1, r0
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	f000 b823 	b.w	8008784 <_malloc_r>
 800873e:	bf00      	nop
 8008740:	20000078 	.word	0x20000078

08008744 <sbrk_aligned>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	4e0e      	ldr	r6, [pc, #56]	; (8008780 <sbrk_aligned+0x3c>)
 8008748:	460c      	mov	r4, r1
 800874a:	6831      	ldr	r1, [r6, #0]
 800874c:	4605      	mov	r5, r0
 800874e:	b911      	cbnz	r1, 8008756 <sbrk_aligned+0x12>
 8008750:	f000 fe40 	bl	80093d4 <_sbrk_r>
 8008754:	6030      	str	r0, [r6, #0]
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f000 fe3b 	bl	80093d4 <_sbrk_r>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d00a      	beq.n	8008778 <sbrk_aligned+0x34>
 8008762:	1cc4      	adds	r4, r0, #3
 8008764:	f024 0403 	bic.w	r4, r4, #3
 8008768:	42a0      	cmp	r0, r4
 800876a:	d007      	beq.n	800877c <sbrk_aligned+0x38>
 800876c:	1a21      	subs	r1, r4, r0
 800876e:	4628      	mov	r0, r5
 8008770:	f000 fe30 	bl	80093d4 <_sbrk_r>
 8008774:	3001      	adds	r0, #1
 8008776:	d101      	bne.n	800877c <sbrk_aligned+0x38>
 8008778:	f04f 34ff 	mov.w	r4, #4294967295
 800877c:	4620      	mov	r0, r4
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	200006f8 	.word	0x200006f8

08008784 <_malloc_r>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	1ccd      	adds	r5, r1, #3
 800878a:	f025 0503 	bic.w	r5, r5, #3
 800878e:	3508      	adds	r5, #8
 8008790:	2d0c      	cmp	r5, #12
 8008792:	bf38      	it	cc
 8008794:	250c      	movcc	r5, #12
 8008796:	2d00      	cmp	r5, #0
 8008798:	4607      	mov	r7, r0
 800879a:	db01      	blt.n	80087a0 <_malloc_r+0x1c>
 800879c:	42a9      	cmp	r1, r5
 800879e:	d905      	bls.n	80087ac <_malloc_r+0x28>
 80087a0:	230c      	movs	r3, #12
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	2600      	movs	r6, #0
 80087a6:	4630      	mov	r0, r6
 80087a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008880 <_malloc_r+0xfc>
 80087b0:	f000 f868 	bl	8008884 <__malloc_lock>
 80087b4:	f8d8 3000 	ldr.w	r3, [r8]
 80087b8:	461c      	mov	r4, r3
 80087ba:	bb5c      	cbnz	r4, 8008814 <_malloc_r+0x90>
 80087bc:	4629      	mov	r1, r5
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff ffc0 	bl	8008744 <sbrk_aligned>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	4604      	mov	r4, r0
 80087c8:	d155      	bne.n	8008876 <_malloc_r+0xf2>
 80087ca:	f8d8 4000 	ldr.w	r4, [r8]
 80087ce:	4626      	mov	r6, r4
 80087d0:	2e00      	cmp	r6, #0
 80087d2:	d145      	bne.n	8008860 <_malloc_r+0xdc>
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	d048      	beq.n	800886a <_malloc_r+0xe6>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	4631      	mov	r1, r6
 80087dc:	4638      	mov	r0, r7
 80087de:	eb04 0903 	add.w	r9, r4, r3
 80087e2:	f000 fdf7 	bl	80093d4 <_sbrk_r>
 80087e6:	4581      	cmp	r9, r0
 80087e8:	d13f      	bne.n	800886a <_malloc_r+0xe6>
 80087ea:	6821      	ldr	r1, [r4, #0]
 80087ec:	1a6d      	subs	r5, r5, r1
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ffa7 	bl	8008744 <sbrk_aligned>
 80087f6:	3001      	adds	r0, #1
 80087f8:	d037      	beq.n	800886a <_malloc_r+0xe6>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	442b      	add	r3, r5
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	f8d8 3000 	ldr.w	r3, [r8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d038      	beq.n	800887a <_malloc_r+0xf6>
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	42a2      	cmp	r2, r4
 800880c:	d12b      	bne.n	8008866 <_malloc_r+0xe2>
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	e00f      	b.n	8008834 <_malloc_r+0xb0>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	1b52      	subs	r2, r2, r5
 8008818:	d41f      	bmi.n	800885a <_malloc_r+0xd6>
 800881a:	2a0b      	cmp	r2, #11
 800881c:	d917      	bls.n	800884e <_malloc_r+0xca>
 800881e:	1961      	adds	r1, r4, r5
 8008820:	42a3      	cmp	r3, r4
 8008822:	6025      	str	r5, [r4, #0]
 8008824:	bf18      	it	ne
 8008826:	6059      	strne	r1, [r3, #4]
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	bf08      	it	eq
 800882c:	f8c8 1000 	streq.w	r1, [r8]
 8008830:	5162      	str	r2, [r4, r5]
 8008832:	604b      	str	r3, [r1, #4]
 8008834:	4638      	mov	r0, r7
 8008836:	f104 060b 	add.w	r6, r4, #11
 800883a:	f000 f829 	bl	8008890 <__malloc_unlock>
 800883e:	f026 0607 	bic.w	r6, r6, #7
 8008842:	1d23      	adds	r3, r4, #4
 8008844:	1af2      	subs	r2, r6, r3
 8008846:	d0ae      	beq.n	80087a6 <_malloc_r+0x22>
 8008848:	1b9b      	subs	r3, r3, r6
 800884a:	50a3      	str	r3, [r4, r2]
 800884c:	e7ab      	b.n	80087a6 <_malloc_r+0x22>
 800884e:	42a3      	cmp	r3, r4
 8008850:	6862      	ldr	r2, [r4, #4]
 8008852:	d1dd      	bne.n	8008810 <_malloc_r+0x8c>
 8008854:	f8c8 2000 	str.w	r2, [r8]
 8008858:	e7ec      	b.n	8008834 <_malloc_r+0xb0>
 800885a:	4623      	mov	r3, r4
 800885c:	6864      	ldr	r4, [r4, #4]
 800885e:	e7ac      	b.n	80087ba <_malloc_r+0x36>
 8008860:	4634      	mov	r4, r6
 8008862:	6876      	ldr	r6, [r6, #4]
 8008864:	e7b4      	b.n	80087d0 <_malloc_r+0x4c>
 8008866:	4613      	mov	r3, r2
 8008868:	e7cc      	b.n	8008804 <_malloc_r+0x80>
 800886a:	230c      	movs	r3, #12
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4638      	mov	r0, r7
 8008870:	f000 f80e 	bl	8008890 <__malloc_unlock>
 8008874:	e797      	b.n	80087a6 <_malloc_r+0x22>
 8008876:	6025      	str	r5, [r4, #0]
 8008878:	e7dc      	b.n	8008834 <_malloc_r+0xb0>
 800887a:	605b      	str	r3, [r3, #4]
 800887c:	deff      	udf	#255	; 0xff
 800887e:	bf00      	nop
 8008880:	200006f4 	.word	0x200006f4

08008884 <__malloc_lock>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__malloc_lock+0x8>)
 8008886:	f7ff b87c 	b.w	8007982 <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	200006f0 	.word	0x200006f0

08008890 <__malloc_unlock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_unlock+0x8>)
 8008892:	f7ff b877 	b.w	8007984 <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	200006f0 	.word	0x200006f0

0800889c <_Balloc>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	69c6      	ldr	r6, [r0, #28]
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	b976      	cbnz	r6, 80088c4 <_Balloc+0x28>
 80088a6:	2010      	movs	r0, #16
 80088a8:	f7ff ff44 	bl	8008734 <malloc>
 80088ac:	4602      	mov	r2, r0
 80088ae:	61e0      	str	r0, [r4, #28]
 80088b0:	b920      	cbnz	r0, 80088bc <_Balloc+0x20>
 80088b2:	4b18      	ldr	r3, [pc, #96]	; (8008914 <_Balloc+0x78>)
 80088b4:	4818      	ldr	r0, [pc, #96]	; (8008918 <_Balloc+0x7c>)
 80088b6:	216b      	movs	r1, #107	; 0x6b
 80088b8:	f000 fd9c 	bl	80093f4 <__assert_func>
 80088bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c0:	6006      	str	r6, [r0, #0]
 80088c2:	60c6      	str	r6, [r0, #12]
 80088c4:	69e6      	ldr	r6, [r4, #28]
 80088c6:	68f3      	ldr	r3, [r6, #12]
 80088c8:	b183      	cbz	r3, 80088ec <_Balloc+0x50>
 80088ca:	69e3      	ldr	r3, [r4, #28]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088d2:	b9b8      	cbnz	r0, 8008904 <_Balloc+0x68>
 80088d4:	2101      	movs	r1, #1
 80088d6:	fa01 f605 	lsl.w	r6, r1, r5
 80088da:	1d72      	adds	r2, r6, #5
 80088dc:	0092      	lsls	r2, r2, #2
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fda6 	bl	8009430 <_calloc_r>
 80088e4:	b160      	cbz	r0, 8008900 <_Balloc+0x64>
 80088e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ea:	e00e      	b.n	800890a <_Balloc+0x6e>
 80088ec:	2221      	movs	r2, #33	; 0x21
 80088ee:	2104      	movs	r1, #4
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fd9d 	bl	8009430 <_calloc_r>
 80088f6:	69e3      	ldr	r3, [r4, #28]
 80088f8:	60f0      	str	r0, [r6, #12]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e4      	bne.n	80088ca <_Balloc+0x2e>
 8008900:	2000      	movs	r0, #0
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	6802      	ldr	r2, [r0, #0]
 8008906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800890a:	2300      	movs	r3, #0
 800890c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008910:	e7f7      	b.n	8008902 <_Balloc+0x66>
 8008912:	bf00      	nop
 8008914:	08009eef 	.word	0x08009eef
 8008918:	08009f6f 	.word	0x08009f6f

0800891c <_Bfree>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	69c6      	ldr	r6, [r0, #28]
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b976      	cbnz	r6, 8008944 <_Bfree+0x28>
 8008926:	2010      	movs	r0, #16
 8008928:	f7ff ff04 	bl	8008734 <malloc>
 800892c:	4602      	mov	r2, r0
 800892e:	61e8      	str	r0, [r5, #28]
 8008930:	b920      	cbnz	r0, 800893c <_Bfree+0x20>
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <_Bfree+0x3c>)
 8008934:	4809      	ldr	r0, [pc, #36]	; (800895c <_Bfree+0x40>)
 8008936:	218f      	movs	r1, #143	; 0x8f
 8008938:	f000 fd5c 	bl	80093f4 <__assert_func>
 800893c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008940:	6006      	str	r6, [r0, #0]
 8008942:	60c6      	str	r6, [r0, #12]
 8008944:	b13c      	cbz	r4, 8008956 <_Bfree+0x3a>
 8008946:	69eb      	ldr	r3, [r5, #28]
 8008948:	6862      	ldr	r2, [r4, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008950:	6021      	str	r1, [r4, #0]
 8008952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	08009eef 	.word	0x08009eef
 800895c:	08009f6f 	.word	0x08009f6f

08008960 <__multadd>:
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	690d      	ldr	r5, [r1, #16]
 8008966:	4607      	mov	r7, r0
 8008968:	460c      	mov	r4, r1
 800896a:	461e      	mov	r6, r3
 800896c:	f101 0c14 	add.w	ip, r1, #20
 8008970:	2000      	movs	r0, #0
 8008972:	f8dc 3000 	ldr.w	r3, [ip]
 8008976:	b299      	uxth	r1, r3
 8008978:	fb02 6101 	mla	r1, r2, r1, r6
 800897c:	0c1e      	lsrs	r6, r3, #16
 800897e:	0c0b      	lsrs	r3, r1, #16
 8008980:	fb02 3306 	mla	r3, r2, r6, r3
 8008984:	b289      	uxth	r1, r1
 8008986:	3001      	adds	r0, #1
 8008988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800898c:	4285      	cmp	r5, r0
 800898e:	f84c 1b04 	str.w	r1, [ip], #4
 8008992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008996:	dcec      	bgt.n	8008972 <__multadd+0x12>
 8008998:	b30e      	cbz	r6, 80089de <__multadd+0x7e>
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	42ab      	cmp	r3, r5
 800899e:	dc19      	bgt.n	80089d4 <__multadd+0x74>
 80089a0:	6861      	ldr	r1, [r4, #4]
 80089a2:	4638      	mov	r0, r7
 80089a4:	3101      	adds	r1, #1
 80089a6:	f7ff ff79 	bl	800889c <_Balloc>
 80089aa:	4680      	mov	r8, r0
 80089ac:	b928      	cbnz	r0, 80089ba <__multadd+0x5a>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <__multadd+0x84>)
 80089b2:	480d      	ldr	r0, [pc, #52]	; (80089e8 <__multadd+0x88>)
 80089b4:	21ba      	movs	r1, #186	; 0xba
 80089b6:	f000 fd1d 	bl	80093f4 <__assert_func>
 80089ba:	6922      	ldr	r2, [r4, #16]
 80089bc:	3202      	adds	r2, #2
 80089be:	f104 010c 	add.w	r1, r4, #12
 80089c2:	0092      	lsls	r2, r2, #2
 80089c4:	300c      	adds	r0, #12
 80089c6:	f7fe ffde 	bl	8007986 <memcpy>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff ffa5 	bl	800891c <_Bfree>
 80089d2:	4644      	mov	r4, r8
 80089d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089d8:	3501      	adds	r5, #1
 80089da:	615e      	str	r6, [r3, #20]
 80089dc:	6125      	str	r5, [r4, #16]
 80089de:	4620      	mov	r0, r4
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	08009f5e 	.word	0x08009f5e
 80089e8:	08009f6f 	.word	0x08009f6f

080089ec <__hi0bits>:
 80089ec:	0c03      	lsrs	r3, r0, #16
 80089ee:	041b      	lsls	r3, r3, #16
 80089f0:	b9d3      	cbnz	r3, 8008a28 <__hi0bits+0x3c>
 80089f2:	0400      	lsls	r0, r0, #16
 80089f4:	2310      	movs	r3, #16
 80089f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089fa:	bf04      	itt	eq
 80089fc:	0200      	lsleq	r0, r0, #8
 80089fe:	3308      	addeq	r3, #8
 8008a00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a04:	bf04      	itt	eq
 8008a06:	0100      	lsleq	r0, r0, #4
 8008a08:	3304      	addeq	r3, #4
 8008a0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a0e:	bf04      	itt	eq
 8008a10:	0080      	lsleq	r0, r0, #2
 8008a12:	3302      	addeq	r3, #2
 8008a14:	2800      	cmp	r0, #0
 8008a16:	db05      	blt.n	8008a24 <__hi0bits+0x38>
 8008a18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a1c:	f103 0301 	add.w	r3, r3, #1
 8008a20:	bf08      	it	eq
 8008a22:	2320      	moveq	r3, #32
 8008a24:	4618      	mov	r0, r3
 8008a26:	4770      	bx	lr
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e7e4      	b.n	80089f6 <__hi0bits+0xa>

08008a2c <__lo0bits>:
 8008a2c:	6803      	ldr	r3, [r0, #0]
 8008a2e:	f013 0207 	ands.w	r2, r3, #7
 8008a32:	d00c      	beq.n	8008a4e <__lo0bits+0x22>
 8008a34:	07d9      	lsls	r1, r3, #31
 8008a36:	d422      	bmi.n	8008a7e <__lo0bits+0x52>
 8008a38:	079a      	lsls	r2, r3, #30
 8008a3a:	bf49      	itett	mi
 8008a3c:	085b      	lsrmi	r3, r3, #1
 8008a3e:	089b      	lsrpl	r3, r3, #2
 8008a40:	6003      	strmi	r3, [r0, #0]
 8008a42:	2201      	movmi	r2, #1
 8008a44:	bf5c      	itt	pl
 8008a46:	6003      	strpl	r3, [r0, #0]
 8008a48:	2202      	movpl	r2, #2
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4770      	bx	lr
 8008a4e:	b299      	uxth	r1, r3
 8008a50:	b909      	cbnz	r1, 8008a56 <__lo0bits+0x2a>
 8008a52:	0c1b      	lsrs	r3, r3, #16
 8008a54:	2210      	movs	r2, #16
 8008a56:	b2d9      	uxtb	r1, r3
 8008a58:	b909      	cbnz	r1, 8008a5e <__lo0bits+0x32>
 8008a5a:	3208      	adds	r2, #8
 8008a5c:	0a1b      	lsrs	r3, r3, #8
 8008a5e:	0719      	lsls	r1, r3, #28
 8008a60:	bf04      	itt	eq
 8008a62:	091b      	lsreq	r3, r3, #4
 8008a64:	3204      	addeq	r2, #4
 8008a66:	0799      	lsls	r1, r3, #30
 8008a68:	bf04      	itt	eq
 8008a6a:	089b      	lsreq	r3, r3, #2
 8008a6c:	3202      	addeq	r2, #2
 8008a6e:	07d9      	lsls	r1, r3, #31
 8008a70:	d403      	bmi.n	8008a7a <__lo0bits+0x4e>
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	f102 0201 	add.w	r2, r2, #1
 8008a78:	d003      	beq.n	8008a82 <__lo0bits+0x56>
 8008a7a:	6003      	str	r3, [r0, #0]
 8008a7c:	e7e5      	b.n	8008a4a <__lo0bits+0x1e>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	e7e3      	b.n	8008a4a <__lo0bits+0x1e>
 8008a82:	2220      	movs	r2, #32
 8008a84:	e7e1      	b.n	8008a4a <__lo0bits+0x1e>
	...

08008a88 <__i2b>:
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	f7ff ff05 	bl	800889c <_Balloc>
 8008a92:	4602      	mov	r2, r0
 8008a94:	b928      	cbnz	r0, 8008aa2 <__i2b+0x1a>
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <__i2b+0x24>)
 8008a98:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <__i2b+0x28>)
 8008a9a:	f240 1145 	movw	r1, #325	; 0x145
 8008a9e:	f000 fca9 	bl	80093f4 <__assert_func>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	6144      	str	r4, [r0, #20]
 8008aa6:	6103      	str	r3, [r0, #16]
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	bf00      	nop
 8008aac:	08009f5e 	.word	0x08009f5e
 8008ab0:	08009f6f 	.word	0x08009f6f

08008ab4 <__multiply>:
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	4691      	mov	r9, r2
 8008aba:	690a      	ldr	r2, [r1, #16]
 8008abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	bfb8      	it	lt
 8008ac4:	460b      	movlt	r3, r1
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	bfbc      	itt	lt
 8008aca:	464c      	movlt	r4, r9
 8008acc:	4699      	movlt	r9, r3
 8008ace:	6927      	ldr	r7, [r4, #16]
 8008ad0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	6861      	ldr	r1, [r4, #4]
 8008ad8:	eb07 060a 	add.w	r6, r7, sl
 8008adc:	42b3      	cmp	r3, r6
 8008ade:	b085      	sub	sp, #20
 8008ae0:	bfb8      	it	lt
 8008ae2:	3101      	addlt	r1, #1
 8008ae4:	f7ff feda 	bl	800889c <_Balloc>
 8008ae8:	b930      	cbnz	r0, 8008af8 <__multiply+0x44>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b44      	ldr	r3, [pc, #272]	; (8008c00 <__multiply+0x14c>)
 8008aee:	4845      	ldr	r0, [pc, #276]	; (8008c04 <__multiply+0x150>)
 8008af0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008af4:	f000 fc7e 	bl	80093f4 <__assert_func>
 8008af8:	f100 0514 	add.w	r5, r0, #20
 8008afc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b00:	462b      	mov	r3, r5
 8008b02:	2200      	movs	r2, #0
 8008b04:	4543      	cmp	r3, r8
 8008b06:	d321      	bcc.n	8008b4c <__multiply+0x98>
 8008b08:	f104 0314 	add.w	r3, r4, #20
 8008b0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b10:	f109 0314 	add.w	r3, r9, #20
 8008b14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b18:	9202      	str	r2, [sp, #8]
 8008b1a:	1b3a      	subs	r2, r7, r4
 8008b1c:	3a15      	subs	r2, #21
 8008b1e:	f022 0203 	bic.w	r2, r2, #3
 8008b22:	3204      	adds	r2, #4
 8008b24:	f104 0115 	add.w	r1, r4, #21
 8008b28:	428f      	cmp	r7, r1
 8008b2a:	bf38      	it	cc
 8008b2c:	2204      	movcc	r2, #4
 8008b2e:	9201      	str	r2, [sp, #4]
 8008b30:	9a02      	ldr	r2, [sp, #8]
 8008b32:	9303      	str	r3, [sp, #12]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d80c      	bhi.n	8008b52 <__multiply+0x9e>
 8008b38:	2e00      	cmp	r6, #0
 8008b3a:	dd03      	ble.n	8008b44 <__multiply+0x90>
 8008b3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d05b      	beq.n	8008bfc <__multiply+0x148>
 8008b44:	6106      	str	r6, [r0, #16]
 8008b46:	b005      	add	sp, #20
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	f843 2b04 	str.w	r2, [r3], #4
 8008b50:	e7d8      	b.n	8008b04 <__multiply+0x50>
 8008b52:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b56:	f1ba 0f00 	cmp.w	sl, #0
 8008b5a:	d024      	beq.n	8008ba6 <__multiply+0xf2>
 8008b5c:	f104 0e14 	add.w	lr, r4, #20
 8008b60:	46a9      	mov	r9, r5
 8008b62:	f04f 0c00 	mov.w	ip, #0
 8008b66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b6a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b6e:	fa1f fb82 	uxth.w	fp, r2
 8008b72:	b289      	uxth	r1, r1
 8008b74:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b80:	4461      	add	r1, ip
 8008b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b86:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b8e:	b289      	uxth	r1, r1
 8008b90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b94:	4577      	cmp	r7, lr
 8008b96:	f849 1b04 	str.w	r1, [r9], #4
 8008b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b9e:	d8e2      	bhi.n	8008b66 <__multiply+0xb2>
 8008ba0:	9a01      	ldr	r2, [sp, #4]
 8008ba2:	f845 c002 	str.w	ip, [r5, r2]
 8008ba6:	9a03      	ldr	r2, [sp, #12]
 8008ba8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bac:	3304      	adds	r3, #4
 8008bae:	f1b9 0f00 	cmp.w	r9, #0
 8008bb2:	d021      	beq.n	8008bf8 <__multiply+0x144>
 8008bb4:	6829      	ldr	r1, [r5, #0]
 8008bb6:	f104 0c14 	add.w	ip, r4, #20
 8008bba:	46ae      	mov	lr, r5
 8008bbc:	f04f 0a00 	mov.w	sl, #0
 8008bc0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bc8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bcc:	4452      	add	r2, sl
 8008bce:	b289      	uxth	r1, r1
 8008bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bd4:	f84e 1b04 	str.w	r1, [lr], #4
 8008bd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008be0:	f8be 1000 	ldrh.w	r1, [lr]
 8008be4:	fb09 110a 	mla	r1, r9, sl, r1
 8008be8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008bec:	4567      	cmp	r7, ip
 8008bee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bf2:	d8e5      	bhi.n	8008bc0 <__multiply+0x10c>
 8008bf4:	9a01      	ldr	r2, [sp, #4]
 8008bf6:	50a9      	str	r1, [r5, r2]
 8008bf8:	3504      	adds	r5, #4
 8008bfa:	e799      	b.n	8008b30 <__multiply+0x7c>
 8008bfc:	3e01      	subs	r6, #1
 8008bfe:	e79b      	b.n	8008b38 <__multiply+0x84>
 8008c00:	08009f5e 	.word	0x08009f5e
 8008c04:	08009f6f 	.word	0x08009f6f

08008c08 <__pow5mult>:
 8008c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c0c:	4615      	mov	r5, r2
 8008c0e:	f012 0203 	ands.w	r2, r2, #3
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	d007      	beq.n	8008c28 <__pow5mult+0x20>
 8008c18:	4c25      	ldr	r4, [pc, #148]	; (8008cb0 <__pow5mult+0xa8>)
 8008c1a:	3a01      	subs	r2, #1
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c22:	f7ff fe9d 	bl	8008960 <__multadd>
 8008c26:	4607      	mov	r7, r0
 8008c28:	10ad      	asrs	r5, r5, #2
 8008c2a:	d03d      	beq.n	8008ca8 <__pow5mult+0xa0>
 8008c2c:	69f4      	ldr	r4, [r6, #28]
 8008c2e:	b97c      	cbnz	r4, 8008c50 <__pow5mult+0x48>
 8008c30:	2010      	movs	r0, #16
 8008c32:	f7ff fd7f 	bl	8008734 <malloc>
 8008c36:	4602      	mov	r2, r0
 8008c38:	61f0      	str	r0, [r6, #28]
 8008c3a:	b928      	cbnz	r0, 8008c48 <__pow5mult+0x40>
 8008c3c:	4b1d      	ldr	r3, [pc, #116]	; (8008cb4 <__pow5mult+0xac>)
 8008c3e:	481e      	ldr	r0, [pc, #120]	; (8008cb8 <__pow5mult+0xb0>)
 8008c40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c44:	f000 fbd6 	bl	80093f4 <__assert_func>
 8008c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c4c:	6004      	str	r4, [r0, #0]
 8008c4e:	60c4      	str	r4, [r0, #12]
 8008c50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c58:	b94c      	cbnz	r4, 8008c6e <__pow5mult+0x66>
 8008c5a:	f240 2171 	movw	r1, #625	; 0x271
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ff12 	bl	8008a88 <__i2b>
 8008c64:	2300      	movs	r3, #0
 8008c66:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	f04f 0900 	mov.w	r9, #0
 8008c72:	07eb      	lsls	r3, r5, #31
 8008c74:	d50a      	bpl.n	8008c8c <__pow5mult+0x84>
 8008c76:	4639      	mov	r1, r7
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ff1a 	bl	8008ab4 <__multiply>
 8008c80:	4639      	mov	r1, r7
 8008c82:	4680      	mov	r8, r0
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fe49 	bl	800891c <_Bfree>
 8008c8a:	4647      	mov	r7, r8
 8008c8c:	106d      	asrs	r5, r5, #1
 8008c8e:	d00b      	beq.n	8008ca8 <__pow5mult+0xa0>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	b938      	cbnz	r0, 8008ca4 <__pow5mult+0x9c>
 8008c94:	4622      	mov	r2, r4
 8008c96:	4621      	mov	r1, r4
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7ff ff0b 	bl	8008ab4 <__multiply>
 8008c9e:	6020      	str	r0, [r4, #0]
 8008ca0:	f8c0 9000 	str.w	r9, [r0]
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	e7e4      	b.n	8008c72 <__pow5mult+0x6a>
 8008ca8:	4638      	mov	r0, r7
 8008caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cae:	bf00      	nop
 8008cb0:	0800a0b8 	.word	0x0800a0b8
 8008cb4:	08009eef 	.word	0x08009eef
 8008cb8:	08009f6f 	.word	0x08009f6f

08008cbc <__lshift>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	6849      	ldr	r1, [r1, #4]
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4691      	mov	r9, r2
 8008cd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cd4:	f108 0601 	add.w	r6, r8, #1
 8008cd8:	42b3      	cmp	r3, r6
 8008cda:	db0b      	blt.n	8008cf4 <__lshift+0x38>
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff fddd 	bl	800889c <_Balloc>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	b948      	cbnz	r0, 8008cfa <__lshift+0x3e>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b28      	ldr	r3, [pc, #160]	; (8008d8c <__lshift+0xd0>)
 8008cea:	4829      	ldr	r0, [pc, #164]	; (8008d90 <__lshift+0xd4>)
 8008cec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cf0:	f000 fb80 	bl	80093f4 <__assert_func>
 8008cf4:	3101      	adds	r1, #1
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__lshift+0x1c>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f100 0114 	add.w	r1, r0, #20
 8008d00:	f100 0210 	add.w	r2, r0, #16
 8008d04:	4618      	mov	r0, r3
 8008d06:	4553      	cmp	r3, sl
 8008d08:	db33      	blt.n	8008d72 <__lshift+0xb6>
 8008d0a:	6920      	ldr	r0, [r4, #16]
 8008d0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d10:	f104 0314 	add.w	r3, r4, #20
 8008d14:	f019 091f 	ands.w	r9, r9, #31
 8008d18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d20:	d02b      	beq.n	8008d7a <__lshift+0xbe>
 8008d22:	f1c9 0e20 	rsb	lr, r9, #32
 8008d26:	468a      	mov	sl, r1
 8008d28:	2200      	movs	r2, #0
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d30:	4310      	orrs	r0, r2
 8008d32:	f84a 0b04 	str.w	r0, [sl], #4
 8008d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3a:	459c      	cmp	ip, r3
 8008d3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d40:	d8f3      	bhi.n	8008d2a <__lshift+0x6e>
 8008d42:	ebac 0304 	sub.w	r3, ip, r4
 8008d46:	3b15      	subs	r3, #21
 8008d48:	f023 0303 	bic.w	r3, r3, #3
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	f104 0015 	add.w	r0, r4, #21
 8008d52:	4584      	cmp	ip, r0
 8008d54:	bf38      	it	cc
 8008d56:	2304      	movcc	r3, #4
 8008d58:	50ca      	str	r2, [r1, r3]
 8008d5a:	b10a      	cbz	r2, 8008d60 <__lshift+0xa4>
 8008d5c:	f108 0602 	add.w	r6, r8, #2
 8008d60:	3e01      	subs	r6, #1
 8008d62:	4638      	mov	r0, r7
 8008d64:	612e      	str	r6, [r5, #16]
 8008d66:	4621      	mov	r1, r4
 8008d68:	f7ff fdd8 	bl	800891c <_Bfree>
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d72:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d76:	3301      	adds	r3, #1
 8008d78:	e7c5      	b.n	8008d06 <__lshift+0x4a>
 8008d7a:	3904      	subs	r1, #4
 8008d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d80:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d84:	459c      	cmp	ip, r3
 8008d86:	d8f9      	bhi.n	8008d7c <__lshift+0xc0>
 8008d88:	e7ea      	b.n	8008d60 <__lshift+0xa4>
 8008d8a:	bf00      	nop
 8008d8c:	08009f5e 	.word	0x08009f5e
 8008d90:	08009f6f 	.word	0x08009f6f

08008d94 <__mcmp>:
 8008d94:	b530      	push	{r4, r5, lr}
 8008d96:	6902      	ldr	r2, [r0, #16]
 8008d98:	690c      	ldr	r4, [r1, #16]
 8008d9a:	1b12      	subs	r2, r2, r4
 8008d9c:	d10e      	bne.n	8008dbc <__mcmp+0x28>
 8008d9e:	f100 0314 	add.w	r3, r0, #20
 8008da2:	3114      	adds	r1, #20
 8008da4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008da8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008dac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008db0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008db4:	42a5      	cmp	r5, r4
 8008db6:	d003      	beq.n	8008dc0 <__mcmp+0x2c>
 8008db8:	d305      	bcc.n	8008dc6 <__mcmp+0x32>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	bd30      	pop	{r4, r5, pc}
 8008dc0:	4283      	cmp	r3, r0
 8008dc2:	d3f3      	bcc.n	8008dac <__mcmp+0x18>
 8008dc4:	e7fa      	b.n	8008dbc <__mcmp+0x28>
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	e7f7      	b.n	8008dbc <__mcmp+0x28>

08008dcc <__mdiff>:
 8008dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4690      	mov	r8, r2
 8008dda:	f7ff ffdb 	bl	8008d94 <__mcmp>
 8008dde:	1e05      	subs	r5, r0, #0
 8008de0:	d110      	bne.n	8008e04 <__mdiff+0x38>
 8008de2:	4629      	mov	r1, r5
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff fd59 	bl	800889c <_Balloc>
 8008dea:	b930      	cbnz	r0, 8008dfa <__mdiff+0x2e>
 8008dec:	4b3a      	ldr	r3, [pc, #232]	; (8008ed8 <__mdiff+0x10c>)
 8008dee:	4602      	mov	r2, r0
 8008df0:	f240 2137 	movw	r1, #567	; 0x237
 8008df4:	4839      	ldr	r0, [pc, #228]	; (8008edc <__mdiff+0x110>)
 8008df6:	f000 fafd 	bl	80093f4 <__assert_func>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	bfa4      	itt	ge
 8008e06:	4643      	movge	r3, r8
 8008e08:	46a0      	movge	r8, r4
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e10:	bfa6      	itte	ge
 8008e12:	461c      	movge	r4, r3
 8008e14:	2500      	movge	r5, #0
 8008e16:	2501      	movlt	r5, #1
 8008e18:	f7ff fd40 	bl	800889c <_Balloc>
 8008e1c:	b920      	cbnz	r0, 8008e28 <__mdiff+0x5c>
 8008e1e:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <__mdiff+0x10c>)
 8008e20:	4602      	mov	r2, r0
 8008e22:	f240 2145 	movw	r1, #581	; 0x245
 8008e26:	e7e5      	b.n	8008df4 <__mdiff+0x28>
 8008e28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e2c:	6926      	ldr	r6, [r4, #16]
 8008e2e:	60c5      	str	r5, [r0, #12]
 8008e30:	f104 0914 	add.w	r9, r4, #20
 8008e34:	f108 0514 	add.w	r5, r8, #20
 8008e38:	f100 0e14 	add.w	lr, r0, #20
 8008e3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e44:	f108 0210 	add.w	r2, r8, #16
 8008e48:	46f2      	mov	sl, lr
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e54:	fa11 f88b 	uxtah	r8, r1, fp
 8008e58:	b299      	uxth	r1, r3
 8008e5a:	0c1b      	lsrs	r3, r3, #16
 8008e5c:	eba8 0801 	sub.w	r8, r8, r1
 8008e60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e68:	fa1f f888 	uxth.w	r8, r8
 8008e6c:	1419      	asrs	r1, r3, #16
 8008e6e:	454e      	cmp	r6, r9
 8008e70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e74:	f84a 3b04 	str.w	r3, [sl], #4
 8008e78:	d8e8      	bhi.n	8008e4c <__mdiff+0x80>
 8008e7a:	1b33      	subs	r3, r6, r4
 8008e7c:	3b15      	subs	r3, #21
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	3304      	adds	r3, #4
 8008e84:	3415      	adds	r4, #21
 8008e86:	42a6      	cmp	r6, r4
 8008e88:	bf38      	it	cc
 8008e8a:	2304      	movcc	r3, #4
 8008e8c:	441d      	add	r5, r3
 8008e8e:	4473      	add	r3, lr
 8008e90:	469e      	mov	lr, r3
 8008e92:	462e      	mov	r6, r5
 8008e94:	4566      	cmp	r6, ip
 8008e96:	d30e      	bcc.n	8008eb6 <__mdiff+0xea>
 8008e98:	f10c 0203 	add.w	r2, ip, #3
 8008e9c:	1b52      	subs	r2, r2, r5
 8008e9e:	f022 0203 	bic.w	r2, r2, #3
 8008ea2:	3d03      	subs	r5, #3
 8008ea4:	45ac      	cmp	ip, r5
 8008ea6:	bf38      	it	cc
 8008ea8:	2200      	movcc	r2, #0
 8008eaa:	4413      	add	r3, r2
 8008eac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008eb0:	b17a      	cbz	r2, 8008ed2 <__mdiff+0x106>
 8008eb2:	6107      	str	r7, [r0, #16]
 8008eb4:	e7a4      	b.n	8008e00 <__mdiff+0x34>
 8008eb6:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eba:	fa11 f288 	uxtah	r2, r1, r8
 8008ebe:	1414      	asrs	r4, r2, #16
 8008ec0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008eca:	f84e 2b04 	str.w	r2, [lr], #4
 8008ece:	1421      	asrs	r1, r4, #16
 8008ed0:	e7e0      	b.n	8008e94 <__mdiff+0xc8>
 8008ed2:	3f01      	subs	r7, #1
 8008ed4:	e7ea      	b.n	8008eac <__mdiff+0xe0>
 8008ed6:	bf00      	nop
 8008ed8:	08009f5e 	.word	0x08009f5e
 8008edc:	08009f6f 	.word	0x08009f6f

08008ee0 <__d2b>:
 8008ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	ec59 8b10 	vmov	r8, r9, d0
 8008eec:	4616      	mov	r6, r2
 8008eee:	f7ff fcd5 	bl	800889c <_Balloc>
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	b930      	cbnz	r0, 8008f04 <__d2b+0x24>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <__d2b+0xac>)
 8008efa:	4825      	ldr	r0, [pc, #148]	; (8008f90 <__d2b+0xb0>)
 8008efc:	f240 310f 	movw	r1, #783	; 0x30f
 8008f00:	f000 fa78 	bl	80093f4 <__assert_func>
 8008f04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f0c:	bb2d      	cbnz	r5, 8008f5a <__d2b+0x7a>
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	f1b8 0300 	subs.w	r3, r8, #0
 8008f14:	d026      	beq.n	8008f64 <__d2b+0x84>
 8008f16:	4668      	mov	r0, sp
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	f7ff fd87 	bl	8008a2c <__lo0bits>
 8008f1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f22:	b1e8      	cbz	r0, 8008f60 <__d2b+0x80>
 8008f24:	f1c0 0320 	rsb	r3, r0, #32
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	40c2      	lsrs	r2, r0
 8008f30:	6163      	str	r3, [r4, #20]
 8008f32:	9201      	str	r2, [sp, #4]
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	61a3      	str	r3, [r4, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bf14      	ite	ne
 8008f3c:	2202      	movne	r2, #2
 8008f3e:	2201      	moveq	r2, #1
 8008f40:	6122      	str	r2, [r4, #16]
 8008f42:	b1bd      	cbz	r5, 8008f74 <__d2b+0x94>
 8008f44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f48:	4405      	add	r5, r0
 8008f4a:	603d      	str	r5, [r7, #0]
 8008f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f50:	6030      	str	r0, [r6, #0]
 8008f52:	4620      	mov	r0, r4
 8008f54:	b003      	add	sp, #12
 8008f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f5e:	e7d6      	b.n	8008f0e <__d2b+0x2e>
 8008f60:	6161      	str	r1, [r4, #20]
 8008f62:	e7e7      	b.n	8008f34 <__d2b+0x54>
 8008f64:	a801      	add	r0, sp, #4
 8008f66:	f7ff fd61 	bl	8008a2c <__lo0bits>
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	6163      	str	r3, [r4, #20]
 8008f6e:	3020      	adds	r0, #32
 8008f70:	2201      	movs	r2, #1
 8008f72:	e7e5      	b.n	8008f40 <__d2b+0x60>
 8008f74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f7c:	6038      	str	r0, [r7, #0]
 8008f7e:	6918      	ldr	r0, [r3, #16]
 8008f80:	f7ff fd34 	bl	80089ec <__hi0bits>
 8008f84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f88:	e7e2      	b.n	8008f50 <__d2b+0x70>
 8008f8a:	bf00      	nop
 8008f8c:	08009f5e 	.word	0x08009f5e
 8008f90:	08009f6f 	.word	0x08009f6f

08008f94 <__ssputs_r>:
 8008f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	688e      	ldr	r6, [r1, #8]
 8008f9a:	461f      	mov	r7, r3
 8008f9c:	42be      	cmp	r6, r7
 8008f9e:	680b      	ldr	r3, [r1, #0]
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4690      	mov	r8, r2
 8008fa6:	d82c      	bhi.n	8009002 <__ssputs_r+0x6e>
 8008fa8:	898a      	ldrh	r2, [r1, #12]
 8008faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fae:	d026      	beq.n	8008ffe <__ssputs_r+0x6a>
 8008fb0:	6965      	ldr	r5, [r4, #20]
 8008fb2:	6909      	ldr	r1, [r1, #16]
 8008fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb8:	eba3 0901 	sub.w	r9, r3, r1
 8008fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc0:	1c7b      	adds	r3, r7, #1
 8008fc2:	444b      	add	r3, r9
 8008fc4:	106d      	asrs	r5, r5, #1
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	bf38      	it	cc
 8008fca:	461d      	movcc	r5, r3
 8008fcc:	0553      	lsls	r3, r2, #21
 8008fce:	d527      	bpl.n	8009020 <__ssputs_r+0x8c>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	f7ff fbd7 	bl	8008784 <_malloc_r>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	b360      	cbz	r0, 8009034 <__ssputs_r+0xa0>
 8008fda:	6921      	ldr	r1, [r4, #16]
 8008fdc:	464a      	mov	r2, r9
 8008fde:	f7fe fcd2 	bl	8007986 <memcpy>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6126      	str	r6, [r4, #16]
 8008ff0:	6165      	str	r5, [r4, #20]
 8008ff2:	444e      	add	r6, r9
 8008ff4:	eba5 0509 	sub.w	r5, r5, r9
 8008ff8:	6026      	str	r6, [r4, #0]
 8008ffa:	60a5      	str	r5, [r4, #8]
 8008ffc:	463e      	mov	r6, r7
 8008ffe:	42be      	cmp	r6, r7
 8009000:	d900      	bls.n	8009004 <__ssputs_r+0x70>
 8009002:	463e      	mov	r6, r7
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	4632      	mov	r2, r6
 8009008:	4641      	mov	r1, r8
 800900a:	f000 f9c9 	bl	80093a0 <memmove>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	1b9b      	subs	r3, r3, r6
 8009012:	60a3      	str	r3, [r4, #8]
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	4433      	add	r3, r6
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	2000      	movs	r0, #0
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009020:	462a      	mov	r2, r5
 8009022:	f000 fa2d 	bl	8009480 <_realloc_r>
 8009026:	4606      	mov	r6, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	d1e0      	bne.n	8008fee <__ssputs_r+0x5a>
 800902c:	6921      	ldr	r1, [r4, #16]
 800902e:	4650      	mov	r0, sl
 8009030:	f7ff fb34 	bl	800869c <_free_r>
 8009034:	230c      	movs	r3, #12
 8009036:	f8ca 3000 	str.w	r3, [sl]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	e7e9      	b.n	800901c <__ssputs_r+0x88>

08009048 <_svfiprintf_r>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4698      	mov	r8, r3
 800904e:	898b      	ldrh	r3, [r1, #12]
 8009050:	061b      	lsls	r3, r3, #24
 8009052:	b09d      	sub	sp, #116	; 0x74
 8009054:	4607      	mov	r7, r0
 8009056:	460d      	mov	r5, r1
 8009058:	4614      	mov	r4, r2
 800905a:	d50e      	bpl.n	800907a <_svfiprintf_r+0x32>
 800905c:	690b      	ldr	r3, [r1, #16]
 800905e:	b963      	cbnz	r3, 800907a <_svfiprintf_r+0x32>
 8009060:	2140      	movs	r1, #64	; 0x40
 8009062:	f7ff fb8f 	bl	8008784 <_malloc_r>
 8009066:	6028      	str	r0, [r5, #0]
 8009068:	6128      	str	r0, [r5, #16]
 800906a:	b920      	cbnz	r0, 8009076 <_svfiprintf_r+0x2e>
 800906c:	230c      	movs	r3, #12
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	e0d0      	b.n	8009218 <_svfiprintf_r+0x1d0>
 8009076:	2340      	movs	r3, #64	; 0x40
 8009078:	616b      	str	r3, [r5, #20]
 800907a:	2300      	movs	r3, #0
 800907c:	9309      	str	r3, [sp, #36]	; 0x24
 800907e:	2320      	movs	r3, #32
 8009080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009084:	f8cd 800c 	str.w	r8, [sp, #12]
 8009088:	2330      	movs	r3, #48	; 0x30
 800908a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009230 <_svfiprintf_r+0x1e8>
 800908e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009092:	f04f 0901 	mov.w	r9, #1
 8009096:	4623      	mov	r3, r4
 8009098:	469a      	mov	sl, r3
 800909a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800909e:	b10a      	cbz	r2, 80090a4 <_svfiprintf_r+0x5c>
 80090a0:	2a25      	cmp	r2, #37	; 0x25
 80090a2:	d1f9      	bne.n	8009098 <_svfiprintf_r+0x50>
 80090a4:	ebba 0b04 	subs.w	fp, sl, r4
 80090a8:	d00b      	beq.n	80090c2 <_svfiprintf_r+0x7a>
 80090aa:	465b      	mov	r3, fp
 80090ac:	4622      	mov	r2, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ff6f 	bl	8008f94 <__ssputs_r>
 80090b6:	3001      	adds	r0, #1
 80090b8:	f000 80a9 	beq.w	800920e <_svfiprintf_r+0x1c6>
 80090bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090be:	445a      	add	r2, fp
 80090c0:	9209      	str	r2, [sp, #36]	; 0x24
 80090c2:	f89a 3000 	ldrb.w	r3, [sl]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80a1 	beq.w	800920e <_svfiprintf_r+0x1c6>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d6:	f10a 0a01 	add.w	sl, sl, #1
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	9307      	str	r3, [sp, #28]
 80090de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e2:	931a      	str	r3, [sp, #104]	; 0x68
 80090e4:	4654      	mov	r4, sl
 80090e6:	2205      	movs	r2, #5
 80090e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ec:	4850      	ldr	r0, [pc, #320]	; (8009230 <_svfiprintf_r+0x1e8>)
 80090ee:	f7f7 f86f 	bl	80001d0 <memchr>
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	b9d8      	cbnz	r0, 800912e <_svfiprintf_r+0xe6>
 80090f6:	06d0      	lsls	r0, r2, #27
 80090f8:	bf44      	itt	mi
 80090fa:	2320      	movmi	r3, #32
 80090fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009100:	0711      	lsls	r1, r2, #28
 8009102:	bf44      	itt	mi
 8009104:	232b      	movmi	r3, #43	; 0x2b
 8009106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910a:	f89a 3000 	ldrb.w	r3, [sl]
 800910e:	2b2a      	cmp	r3, #42	; 0x2a
 8009110:	d015      	beq.n	800913e <_svfiprintf_r+0xf6>
 8009112:	9a07      	ldr	r2, [sp, #28]
 8009114:	4654      	mov	r4, sl
 8009116:	2000      	movs	r0, #0
 8009118:	f04f 0c0a 	mov.w	ip, #10
 800911c:	4621      	mov	r1, r4
 800911e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009122:	3b30      	subs	r3, #48	; 0x30
 8009124:	2b09      	cmp	r3, #9
 8009126:	d94d      	bls.n	80091c4 <_svfiprintf_r+0x17c>
 8009128:	b1b0      	cbz	r0, 8009158 <_svfiprintf_r+0x110>
 800912a:	9207      	str	r2, [sp, #28]
 800912c:	e014      	b.n	8009158 <_svfiprintf_r+0x110>
 800912e:	eba0 0308 	sub.w	r3, r0, r8
 8009132:	fa09 f303 	lsl.w	r3, r9, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	46a2      	mov	sl, r4
 800913c:	e7d2      	b.n	80090e4 <_svfiprintf_r+0x9c>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	1d19      	adds	r1, r3, #4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	9103      	str	r1, [sp, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	bfbb      	ittet	lt
 800914a:	425b      	neglt	r3, r3
 800914c:	f042 0202 	orrlt.w	r2, r2, #2
 8009150:	9307      	strge	r3, [sp, #28]
 8009152:	9307      	strlt	r3, [sp, #28]
 8009154:	bfb8      	it	lt
 8009156:	9204      	strlt	r2, [sp, #16]
 8009158:	7823      	ldrb	r3, [r4, #0]
 800915a:	2b2e      	cmp	r3, #46	; 0x2e
 800915c:	d10c      	bne.n	8009178 <_svfiprintf_r+0x130>
 800915e:	7863      	ldrb	r3, [r4, #1]
 8009160:	2b2a      	cmp	r3, #42	; 0x2a
 8009162:	d134      	bne.n	80091ce <_svfiprintf_r+0x186>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	1d1a      	adds	r2, r3, #4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	9203      	str	r2, [sp, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	bfb8      	it	lt
 8009170:	f04f 33ff 	movlt.w	r3, #4294967295
 8009174:	3402      	adds	r4, #2
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009240 <_svfiprintf_r+0x1f8>
 800917c:	7821      	ldrb	r1, [r4, #0]
 800917e:	2203      	movs	r2, #3
 8009180:	4650      	mov	r0, sl
 8009182:	f7f7 f825 	bl	80001d0 <memchr>
 8009186:	b138      	cbz	r0, 8009198 <_svfiprintf_r+0x150>
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	eba0 000a 	sub.w	r0, r0, sl
 800918e:	2240      	movs	r2, #64	; 0x40
 8009190:	4082      	lsls	r2, r0
 8009192:	4313      	orrs	r3, r2
 8009194:	3401      	adds	r4, #1
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919c:	4825      	ldr	r0, [pc, #148]	; (8009234 <_svfiprintf_r+0x1ec>)
 800919e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091a2:	2206      	movs	r2, #6
 80091a4:	f7f7 f814 	bl	80001d0 <memchr>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d038      	beq.n	800921e <_svfiprintf_r+0x1d6>
 80091ac:	4b22      	ldr	r3, [pc, #136]	; (8009238 <_svfiprintf_r+0x1f0>)
 80091ae:	bb1b      	cbnz	r3, 80091f8 <_svfiprintf_r+0x1b0>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	3307      	adds	r3, #7
 80091b4:	f023 0307 	bic.w	r3, r3, #7
 80091b8:	3308      	adds	r3, #8
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091be:	4433      	add	r3, r6
 80091c0:	9309      	str	r3, [sp, #36]	; 0x24
 80091c2:	e768      	b.n	8009096 <_svfiprintf_r+0x4e>
 80091c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c8:	460c      	mov	r4, r1
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7a6      	b.n	800911c <_svfiprintf_r+0xd4>
 80091ce:	2300      	movs	r3, #0
 80091d0:	3401      	adds	r4, #1
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f04f 0c0a 	mov.w	ip, #10
 80091da:	4620      	mov	r0, r4
 80091dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e0:	3a30      	subs	r2, #48	; 0x30
 80091e2:	2a09      	cmp	r2, #9
 80091e4:	d903      	bls.n	80091ee <_svfiprintf_r+0x1a6>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0c6      	beq.n	8009178 <_svfiprintf_r+0x130>
 80091ea:	9105      	str	r1, [sp, #20]
 80091ec:	e7c4      	b.n	8009178 <_svfiprintf_r+0x130>
 80091ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f2:	4604      	mov	r4, r0
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7f0      	b.n	80091da <_svfiprintf_r+0x192>
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	462a      	mov	r2, r5
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <_svfiprintf_r+0x1f4>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4638      	mov	r0, r7
 8009204:	f7fd fe20 	bl	8006e48 <_printf_float>
 8009208:	1c42      	adds	r2, r0, #1
 800920a:	4606      	mov	r6, r0
 800920c:	d1d6      	bne.n	80091bc <_svfiprintf_r+0x174>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	065b      	lsls	r3, r3, #25
 8009212:	f53f af2d 	bmi.w	8009070 <_svfiprintf_r+0x28>
 8009216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009218:	b01d      	add	sp, #116	; 0x74
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	462a      	mov	r2, r5
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <_svfiprintf_r+0x1f4>)
 8009226:	a904      	add	r1, sp, #16
 8009228:	4638      	mov	r0, r7
 800922a:	f7fe f8b1 	bl	8007390 <_printf_i>
 800922e:	e7eb      	b.n	8009208 <_svfiprintf_r+0x1c0>
 8009230:	0800a0c4 	.word	0x0800a0c4
 8009234:	0800a0ce 	.word	0x0800a0ce
 8009238:	08006e49 	.word	0x08006e49
 800923c:	08008f95 	.word	0x08008f95
 8009240:	0800a0ca 	.word	0x0800a0ca

08009244 <__sflush_r>:
 8009244:	898a      	ldrh	r2, [r1, #12]
 8009246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924a:	4605      	mov	r5, r0
 800924c:	0710      	lsls	r0, r2, #28
 800924e:	460c      	mov	r4, r1
 8009250:	d458      	bmi.n	8009304 <__sflush_r+0xc0>
 8009252:	684b      	ldr	r3, [r1, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dc05      	bgt.n	8009264 <__sflush_r+0x20>
 8009258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800925a:	2b00      	cmp	r3, #0
 800925c:	dc02      	bgt.n	8009264 <__sflush_r+0x20>
 800925e:	2000      	movs	r0, #0
 8009260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009266:	2e00      	cmp	r6, #0
 8009268:	d0f9      	beq.n	800925e <__sflush_r+0x1a>
 800926a:	2300      	movs	r3, #0
 800926c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009270:	682f      	ldr	r7, [r5, #0]
 8009272:	6a21      	ldr	r1, [r4, #32]
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	d032      	beq.n	80092de <__sflush_r+0x9a>
 8009278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	075a      	lsls	r2, r3, #29
 800927e:	d505      	bpl.n	800928c <__sflush_r+0x48>
 8009280:	6863      	ldr	r3, [r4, #4]
 8009282:	1ac0      	subs	r0, r0, r3
 8009284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009286:	b10b      	cbz	r3, 800928c <__sflush_r+0x48>
 8009288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800928a:	1ac0      	subs	r0, r0, r3
 800928c:	2300      	movs	r3, #0
 800928e:	4602      	mov	r2, r0
 8009290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009292:	6a21      	ldr	r1, [r4, #32]
 8009294:	4628      	mov	r0, r5
 8009296:	47b0      	blx	r6
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	d106      	bne.n	80092ac <__sflush_r+0x68>
 800929e:	6829      	ldr	r1, [r5, #0]
 80092a0:	291d      	cmp	r1, #29
 80092a2:	d82b      	bhi.n	80092fc <__sflush_r+0xb8>
 80092a4:	4a29      	ldr	r2, [pc, #164]	; (800934c <__sflush_r+0x108>)
 80092a6:	410a      	asrs	r2, r1
 80092a8:	07d6      	lsls	r6, r2, #31
 80092aa:	d427      	bmi.n	80092fc <__sflush_r+0xb8>
 80092ac:	2200      	movs	r2, #0
 80092ae:	6062      	str	r2, [r4, #4]
 80092b0:	04d9      	lsls	r1, r3, #19
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	d504      	bpl.n	80092c2 <__sflush_r+0x7e>
 80092b8:	1c42      	adds	r2, r0, #1
 80092ba:	d101      	bne.n	80092c0 <__sflush_r+0x7c>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	b903      	cbnz	r3, 80092c2 <__sflush_r+0x7e>
 80092c0:	6560      	str	r0, [r4, #84]	; 0x54
 80092c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c4:	602f      	str	r7, [r5, #0]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d0c9      	beq.n	800925e <__sflush_r+0x1a>
 80092ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ce:	4299      	cmp	r1, r3
 80092d0:	d002      	beq.n	80092d8 <__sflush_r+0x94>
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff f9e2 	bl	800869c <_free_r>
 80092d8:	2000      	movs	r0, #0
 80092da:	6360      	str	r0, [r4, #52]	; 0x34
 80092dc:	e7c0      	b.n	8009260 <__sflush_r+0x1c>
 80092de:	2301      	movs	r3, #1
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b0      	blx	r6
 80092e4:	1c41      	adds	r1, r0, #1
 80092e6:	d1c8      	bne.n	800927a <__sflush_r+0x36>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0c5      	beq.n	800927a <__sflush_r+0x36>
 80092ee:	2b1d      	cmp	r3, #29
 80092f0:	d001      	beq.n	80092f6 <__sflush_r+0xb2>
 80092f2:	2b16      	cmp	r3, #22
 80092f4:	d101      	bne.n	80092fa <__sflush_r+0xb6>
 80092f6:	602f      	str	r7, [r5, #0]
 80092f8:	e7b1      	b.n	800925e <__sflush_r+0x1a>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	e7ad      	b.n	8009260 <__sflush_r+0x1c>
 8009304:	690f      	ldr	r7, [r1, #16]
 8009306:	2f00      	cmp	r7, #0
 8009308:	d0a9      	beq.n	800925e <__sflush_r+0x1a>
 800930a:	0793      	lsls	r3, r2, #30
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	bf08      	it	eq
 8009310:	694b      	ldreq	r3, [r1, #20]
 8009312:	600f      	str	r7, [r1, #0]
 8009314:	bf18      	it	ne
 8009316:	2300      	movne	r3, #0
 8009318:	eba6 0807 	sub.w	r8, r6, r7
 800931c:	608b      	str	r3, [r1, #8]
 800931e:	f1b8 0f00 	cmp.w	r8, #0
 8009322:	dd9c      	ble.n	800925e <__sflush_r+0x1a>
 8009324:	6a21      	ldr	r1, [r4, #32]
 8009326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009328:	4643      	mov	r3, r8
 800932a:	463a      	mov	r2, r7
 800932c:	4628      	mov	r0, r5
 800932e:	47b0      	blx	r6
 8009330:	2800      	cmp	r0, #0
 8009332:	dc06      	bgt.n	8009342 <__sflush_r+0xfe>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	e78e      	b.n	8009260 <__sflush_r+0x1c>
 8009342:	4407      	add	r7, r0
 8009344:	eba8 0800 	sub.w	r8, r8, r0
 8009348:	e7e9      	b.n	800931e <__sflush_r+0xda>
 800934a:	bf00      	nop
 800934c:	dfbffffe 	.word	0xdfbffffe

08009350 <_fflush_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	690b      	ldr	r3, [r1, #16]
 8009354:	4605      	mov	r5, r0
 8009356:	460c      	mov	r4, r1
 8009358:	b913      	cbnz	r3, 8009360 <_fflush_r+0x10>
 800935a:	2500      	movs	r5, #0
 800935c:	4628      	mov	r0, r5
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	b118      	cbz	r0, 800936a <_fflush_r+0x1a>
 8009362:	6a03      	ldr	r3, [r0, #32]
 8009364:	b90b      	cbnz	r3, 800936a <_fflush_r+0x1a>
 8009366:	f7fe f9c1 	bl	80076ec <__sinit>
 800936a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f3      	beq.n	800935a <_fflush_r+0xa>
 8009372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009374:	07d0      	lsls	r0, r2, #31
 8009376:	d404      	bmi.n	8009382 <_fflush_r+0x32>
 8009378:	0599      	lsls	r1, r3, #22
 800937a:	d402      	bmi.n	8009382 <_fflush_r+0x32>
 800937c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937e:	f7fe fb00 	bl	8007982 <__retarget_lock_acquire_recursive>
 8009382:	4628      	mov	r0, r5
 8009384:	4621      	mov	r1, r4
 8009386:	f7ff ff5d 	bl	8009244 <__sflush_r>
 800938a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800938c:	07da      	lsls	r2, r3, #31
 800938e:	4605      	mov	r5, r0
 8009390:	d4e4      	bmi.n	800935c <_fflush_r+0xc>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	059b      	lsls	r3, r3, #22
 8009396:	d4e1      	bmi.n	800935c <_fflush_r+0xc>
 8009398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800939a:	f7fe faf3 	bl	8007984 <__retarget_lock_release_recursive>
 800939e:	e7dd      	b.n	800935c <_fflush_r+0xc>

080093a0 <memmove>:
 80093a0:	4288      	cmp	r0, r1
 80093a2:	b510      	push	{r4, lr}
 80093a4:	eb01 0402 	add.w	r4, r1, r2
 80093a8:	d902      	bls.n	80093b0 <memmove+0x10>
 80093aa:	4284      	cmp	r4, r0
 80093ac:	4623      	mov	r3, r4
 80093ae:	d807      	bhi.n	80093c0 <memmove+0x20>
 80093b0:	1e43      	subs	r3, r0, #1
 80093b2:	42a1      	cmp	r1, r4
 80093b4:	d008      	beq.n	80093c8 <memmove+0x28>
 80093b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093be:	e7f8      	b.n	80093b2 <memmove+0x12>
 80093c0:	4402      	add	r2, r0
 80093c2:	4601      	mov	r1, r0
 80093c4:	428a      	cmp	r2, r1
 80093c6:	d100      	bne.n	80093ca <memmove+0x2a>
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093d2:	e7f7      	b.n	80093c4 <memmove+0x24>

080093d4 <_sbrk_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	; (80093f0 <_sbrk_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 fbb8 	bl	8001b54 <_sbrk>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_sbrk_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_sbrk_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	200006ec 	.word	0x200006ec

080093f4 <__assert_func>:
 80093f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093f6:	4614      	mov	r4, r2
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <__assert_func+0x2c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4605      	mov	r5, r0
 8009400:	68d8      	ldr	r0, [r3, #12]
 8009402:	b14c      	cbz	r4, 8009418 <__assert_func+0x24>
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <__assert_func+0x30>)
 8009406:	9100      	str	r1, [sp, #0]
 8009408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800940c:	4906      	ldr	r1, [pc, #24]	; (8009428 <__assert_func+0x34>)
 800940e:	462b      	mov	r3, r5
 8009410:	f000 f872 	bl	80094f8 <fiprintf>
 8009414:	f000 f882 	bl	800951c <abort>
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <__assert_func+0x38>)
 800941a:	461c      	mov	r4, r3
 800941c:	e7f3      	b.n	8009406 <__assert_func+0x12>
 800941e:	bf00      	nop
 8009420:	20000078 	.word	0x20000078
 8009424:	0800a0df 	.word	0x0800a0df
 8009428:	0800a0ec 	.word	0x0800a0ec
 800942c:	0800a11a 	.word	0x0800a11a

08009430 <_calloc_r>:
 8009430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009432:	fba1 2402 	umull	r2, r4, r1, r2
 8009436:	b94c      	cbnz	r4, 800944c <_calloc_r+0x1c>
 8009438:	4611      	mov	r1, r2
 800943a:	9201      	str	r2, [sp, #4]
 800943c:	f7ff f9a2 	bl	8008784 <_malloc_r>
 8009440:	9a01      	ldr	r2, [sp, #4]
 8009442:	4605      	mov	r5, r0
 8009444:	b930      	cbnz	r0, 8009454 <_calloc_r+0x24>
 8009446:	4628      	mov	r0, r5
 8009448:	b003      	add	sp, #12
 800944a:	bd30      	pop	{r4, r5, pc}
 800944c:	220c      	movs	r2, #12
 800944e:	6002      	str	r2, [r0, #0]
 8009450:	2500      	movs	r5, #0
 8009452:	e7f8      	b.n	8009446 <_calloc_r+0x16>
 8009454:	4621      	mov	r1, r4
 8009456:	f7fe fa16 	bl	8007886 <memset>
 800945a:	e7f4      	b.n	8009446 <_calloc_r+0x16>

0800945c <__ascii_mbtowc>:
 800945c:	b082      	sub	sp, #8
 800945e:	b901      	cbnz	r1, 8009462 <__ascii_mbtowc+0x6>
 8009460:	a901      	add	r1, sp, #4
 8009462:	b142      	cbz	r2, 8009476 <__ascii_mbtowc+0x1a>
 8009464:	b14b      	cbz	r3, 800947a <__ascii_mbtowc+0x1e>
 8009466:	7813      	ldrb	r3, [r2, #0]
 8009468:	600b      	str	r3, [r1, #0]
 800946a:	7812      	ldrb	r2, [r2, #0]
 800946c:	1e10      	subs	r0, r2, #0
 800946e:	bf18      	it	ne
 8009470:	2001      	movne	r0, #1
 8009472:	b002      	add	sp, #8
 8009474:	4770      	bx	lr
 8009476:	4610      	mov	r0, r2
 8009478:	e7fb      	b.n	8009472 <__ascii_mbtowc+0x16>
 800947a:	f06f 0001 	mvn.w	r0, #1
 800947e:	e7f8      	b.n	8009472 <__ascii_mbtowc+0x16>

08009480 <_realloc_r>:
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	4680      	mov	r8, r0
 8009486:	4614      	mov	r4, r2
 8009488:	460e      	mov	r6, r1
 800948a:	b921      	cbnz	r1, 8009496 <_realloc_r+0x16>
 800948c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	4611      	mov	r1, r2
 8009492:	f7ff b977 	b.w	8008784 <_malloc_r>
 8009496:	b92a      	cbnz	r2, 80094a4 <_realloc_r+0x24>
 8009498:	f7ff f900 	bl	800869c <_free_r>
 800949c:	4625      	mov	r5, r4
 800949e:	4628      	mov	r0, r5
 80094a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a4:	f000 f841 	bl	800952a <_malloc_usable_size_r>
 80094a8:	4284      	cmp	r4, r0
 80094aa:	4607      	mov	r7, r0
 80094ac:	d802      	bhi.n	80094b4 <_realloc_r+0x34>
 80094ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094b2:	d812      	bhi.n	80094da <_realloc_r+0x5a>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7ff f964 	bl	8008784 <_malloc_r>
 80094bc:	4605      	mov	r5, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0ed      	beq.n	800949e <_realloc_r+0x1e>
 80094c2:	42bc      	cmp	r4, r7
 80094c4:	4622      	mov	r2, r4
 80094c6:	4631      	mov	r1, r6
 80094c8:	bf28      	it	cs
 80094ca:	463a      	movcs	r2, r7
 80094cc:	f7fe fa5b 	bl	8007986 <memcpy>
 80094d0:	4631      	mov	r1, r6
 80094d2:	4640      	mov	r0, r8
 80094d4:	f7ff f8e2 	bl	800869c <_free_r>
 80094d8:	e7e1      	b.n	800949e <_realloc_r+0x1e>
 80094da:	4635      	mov	r5, r6
 80094dc:	e7df      	b.n	800949e <_realloc_r+0x1e>

080094de <__ascii_wctomb>:
 80094de:	b149      	cbz	r1, 80094f4 <__ascii_wctomb+0x16>
 80094e0:	2aff      	cmp	r2, #255	; 0xff
 80094e2:	bf85      	ittet	hi
 80094e4:	238a      	movhi	r3, #138	; 0x8a
 80094e6:	6003      	strhi	r3, [r0, #0]
 80094e8:	700a      	strbls	r2, [r1, #0]
 80094ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80094ee:	bf98      	it	ls
 80094f0:	2001      	movls	r0, #1
 80094f2:	4770      	bx	lr
 80094f4:	4608      	mov	r0, r1
 80094f6:	4770      	bx	lr

080094f8 <fiprintf>:
 80094f8:	b40e      	push	{r1, r2, r3}
 80094fa:	b503      	push	{r0, r1, lr}
 80094fc:	4601      	mov	r1, r0
 80094fe:	ab03      	add	r3, sp, #12
 8009500:	4805      	ldr	r0, [pc, #20]	; (8009518 <fiprintf+0x20>)
 8009502:	f853 2b04 	ldr.w	r2, [r3], #4
 8009506:	6800      	ldr	r0, [r0, #0]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	f000 f83f 	bl	800958c <_vfiprintf_r>
 800950e:	b002      	add	sp, #8
 8009510:	f85d eb04 	ldr.w	lr, [sp], #4
 8009514:	b003      	add	sp, #12
 8009516:	4770      	bx	lr
 8009518:	20000078 	.word	0x20000078

0800951c <abort>:
 800951c:	b508      	push	{r3, lr}
 800951e:	2006      	movs	r0, #6
 8009520:	f000 fa0c 	bl	800993c <raise>
 8009524:	2001      	movs	r0, #1
 8009526:	f7f8 fa9d 	bl	8001a64 <_exit>

0800952a <_malloc_usable_size_r>:
 800952a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952e:	1f18      	subs	r0, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	bfbc      	itt	lt
 8009534:	580b      	ldrlt	r3, [r1, r0]
 8009536:	18c0      	addlt	r0, r0, r3
 8009538:	4770      	bx	lr

0800953a <__sfputc_r>:
 800953a:	6893      	ldr	r3, [r2, #8]
 800953c:	3b01      	subs	r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	b410      	push	{r4}
 8009542:	6093      	str	r3, [r2, #8]
 8009544:	da08      	bge.n	8009558 <__sfputc_r+0x1e>
 8009546:	6994      	ldr	r4, [r2, #24]
 8009548:	42a3      	cmp	r3, r4
 800954a:	db01      	blt.n	8009550 <__sfputc_r+0x16>
 800954c:	290a      	cmp	r1, #10
 800954e:	d103      	bne.n	8009558 <__sfputc_r+0x1e>
 8009550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009554:	f000 b934 	b.w	80097c0 <__swbuf_r>
 8009558:	6813      	ldr	r3, [r2, #0]
 800955a:	1c58      	adds	r0, r3, #1
 800955c:	6010      	str	r0, [r2, #0]
 800955e:	7019      	strb	r1, [r3, #0]
 8009560:	4608      	mov	r0, r1
 8009562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009566:	4770      	bx	lr

08009568 <__sfputs_r>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	4606      	mov	r6, r0
 800956c:	460f      	mov	r7, r1
 800956e:	4614      	mov	r4, r2
 8009570:	18d5      	adds	r5, r2, r3
 8009572:	42ac      	cmp	r4, r5
 8009574:	d101      	bne.n	800957a <__sfputs_r+0x12>
 8009576:	2000      	movs	r0, #0
 8009578:	e007      	b.n	800958a <__sfputs_r+0x22>
 800957a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957e:	463a      	mov	r2, r7
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ffda 	bl	800953a <__sfputc_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d1f3      	bne.n	8009572 <__sfputs_r+0xa>
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800958c <_vfiprintf_r>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	460d      	mov	r5, r1
 8009592:	b09d      	sub	sp, #116	; 0x74
 8009594:	4614      	mov	r4, r2
 8009596:	4698      	mov	r8, r3
 8009598:	4606      	mov	r6, r0
 800959a:	b118      	cbz	r0, 80095a4 <_vfiprintf_r+0x18>
 800959c:	6a03      	ldr	r3, [r0, #32]
 800959e:	b90b      	cbnz	r3, 80095a4 <_vfiprintf_r+0x18>
 80095a0:	f7fe f8a4 	bl	80076ec <__sinit>
 80095a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a6:	07d9      	lsls	r1, r3, #31
 80095a8:	d405      	bmi.n	80095b6 <_vfiprintf_r+0x2a>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	059a      	lsls	r2, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_vfiprintf_r+0x2a>
 80095b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b2:	f7fe f9e6 	bl	8007982 <__retarget_lock_acquire_recursive>
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	071b      	lsls	r3, r3, #28
 80095ba:	d501      	bpl.n	80095c0 <_vfiprintf_r+0x34>
 80095bc:	692b      	ldr	r3, [r5, #16]
 80095be:	b99b      	cbnz	r3, 80095e8 <_vfiprintf_r+0x5c>
 80095c0:	4629      	mov	r1, r5
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f93a 	bl	800983c <__swsetup_r>
 80095c8:	b170      	cbz	r0, 80095e8 <_vfiprintf_r+0x5c>
 80095ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095cc:	07dc      	lsls	r4, r3, #31
 80095ce:	d504      	bpl.n	80095da <_vfiprintf_r+0x4e>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	b01d      	add	sp, #116	; 0x74
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095da:	89ab      	ldrh	r3, [r5, #12]
 80095dc:	0598      	lsls	r0, r3, #22
 80095de:	d4f7      	bmi.n	80095d0 <_vfiprintf_r+0x44>
 80095e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095e2:	f7fe f9cf 	bl	8007984 <__retarget_lock_release_recursive>
 80095e6:	e7f3      	b.n	80095d0 <_vfiprintf_r+0x44>
 80095e8:	2300      	movs	r3, #0
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	2320      	movs	r3, #32
 80095ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f6:	2330      	movs	r3, #48	; 0x30
 80095f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80097ac <_vfiprintf_r+0x220>
 80095fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009600:	f04f 0901 	mov.w	r9, #1
 8009604:	4623      	mov	r3, r4
 8009606:	469a      	mov	sl, r3
 8009608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800960c:	b10a      	cbz	r2, 8009612 <_vfiprintf_r+0x86>
 800960e:	2a25      	cmp	r2, #37	; 0x25
 8009610:	d1f9      	bne.n	8009606 <_vfiprintf_r+0x7a>
 8009612:	ebba 0b04 	subs.w	fp, sl, r4
 8009616:	d00b      	beq.n	8009630 <_vfiprintf_r+0xa4>
 8009618:	465b      	mov	r3, fp
 800961a:	4622      	mov	r2, r4
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f7ff ffa2 	bl	8009568 <__sfputs_r>
 8009624:	3001      	adds	r0, #1
 8009626:	f000 80a9 	beq.w	800977c <_vfiprintf_r+0x1f0>
 800962a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962c:	445a      	add	r2, fp
 800962e:	9209      	str	r2, [sp, #36]	; 0x24
 8009630:	f89a 3000 	ldrb.w	r3, [sl]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80a1 	beq.w	800977c <_vfiprintf_r+0x1f0>
 800963a:	2300      	movs	r3, #0
 800963c:	f04f 32ff 	mov.w	r2, #4294967295
 8009640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009644:	f10a 0a01 	add.w	sl, sl, #1
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009650:	931a      	str	r3, [sp, #104]	; 0x68
 8009652:	4654      	mov	r4, sl
 8009654:	2205      	movs	r2, #5
 8009656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965a:	4854      	ldr	r0, [pc, #336]	; (80097ac <_vfiprintf_r+0x220>)
 800965c:	f7f6 fdb8 	bl	80001d0 <memchr>
 8009660:	9a04      	ldr	r2, [sp, #16]
 8009662:	b9d8      	cbnz	r0, 800969c <_vfiprintf_r+0x110>
 8009664:	06d1      	lsls	r1, r2, #27
 8009666:	bf44      	itt	mi
 8009668:	2320      	movmi	r3, #32
 800966a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966e:	0713      	lsls	r3, r2, #28
 8009670:	bf44      	itt	mi
 8009672:	232b      	movmi	r3, #43	; 0x2b
 8009674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009678:	f89a 3000 	ldrb.w	r3, [sl]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d015      	beq.n	80096ac <_vfiprintf_r+0x120>
 8009680:	9a07      	ldr	r2, [sp, #28]
 8009682:	4654      	mov	r4, sl
 8009684:	2000      	movs	r0, #0
 8009686:	f04f 0c0a 	mov.w	ip, #10
 800968a:	4621      	mov	r1, r4
 800968c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009690:	3b30      	subs	r3, #48	; 0x30
 8009692:	2b09      	cmp	r3, #9
 8009694:	d94d      	bls.n	8009732 <_vfiprintf_r+0x1a6>
 8009696:	b1b0      	cbz	r0, 80096c6 <_vfiprintf_r+0x13a>
 8009698:	9207      	str	r2, [sp, #28]
 800969a:	e014      	b.n	80096c6 <_vfiprintf_r+0x13a>
 800969c:	eba0 0308 	sub.w	r3, r0, r8
 80096a0:	fa09 f303 	lsl.w	r3, r9, r3
 80096a4:	4313      	orrs	r3, r2
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	46a2      	mov	sl, r4
 80096aa:	e7d2      	b.n	8009652 <_vfiprintf_r+0xc6>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	1d19      	adds	r1, r3, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	9103      	str	r1, [sp, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfbb      	ittet	lt
 80096b8:	425b      	neglt	r3, r3
 80096ba:	f042 0202 	orrlt.w	r2, r2, #2
 80096be:	9307      	strge	r3, [sp, #28]
 80096c0:	9307      	strlt	r3, [sp, #28]
 80096c2:	bfb8      	it	lt
 80096c4:	9204      	strlt	r2, [sp, #16]
 80096c6:	7823      	ldrb	r3, [r4, #0]
 80096c8:	2b2e      	cmp	r3, #46	; 0x2e
 80096ca:	d10c      	bne.n	80096e6 <_vfiprintf_r+0x15a>
 80096cc:	7863      	ldrb	r3, [r4, #1]
 80096ce:	2b2a      	cmp	r3, #42	; 0x2a
 80096d0:	d134      	bne.n	800973c <_vfiprintf_r+0x1b0>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	9203      	str	r2, [sp, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bfb8      	it	lt
 80096de:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e2:	3402      	adds	r4, #2
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097bc <_vfiprintf_r+0x230>
 80096ea:	7821      	ldrb	r1, [r4, #0]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7f6 fd6e 	bl	80001d0 <memchr>
 80096f4:	b138      	cbz	r0, 8009706 <_vfiprintf_r+0x17a>
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	eba0 000a 	sub.w	r0, r0, sl
 80096fc:	2240      	movs	r2, #64	; 0x40
 80096fe:	4082      	lsls	r2, r0
 8009700:	4313      	orrs	r3, r2
 8009702:	3401      	adds	r4, #1
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4829      	ldr	r0, [pc, #164]	; (80097b0 <_vfiprintf_r+0x224>)
 800970c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009710:	2206      	movs	r2, #6
 8009712:	f7f6 fd5d 	bl	80001d0 <memchr>
 8009716:	2800      	cmp	r0, #0
 8009718:	d03f      	beq.n	800979a <_vfiprintf_r+0x20e>
 800971a:	4b26      	ldr	r3, [pc, #152]	; (80097b4 <_vfiprintf_r+0x228>)
 800971c:	bb1b      	cbnz	r3, 8009766 <_vfiprintf_r+0x1da>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	3307      	adds	r3, #7
 8009722:	f023 0307 	bic.w	r3, r3, #7
 8009726:	3308      	adds	r3, #8
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972c:	443b      	add	r3, r7
 800972e:	9309      	str	r3, [sp, #36]	; 0x24
 8009730:	e768      	b.n	8009604 <_vfiprintf_r+0x78>
 8009732:	fb0c 3202 	mla	r2, ip, r2, r3
 8009736:	460c      	mov	r4, r1
 8009738:	2001      	movs	r0, #1
 800973a:	e7a6      	b.n	800968a <_vfiprintf_r+0xfe>
 800973c:	2300      	movs	r3, #0
 800973e:	3401      	adds	r4, #1
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	4619      	mov	r1, r3
 8009744:	f04f 0c0a 	mov.w	ip, #10
 8009748:	4620      	mov	r0, r4
 800974a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974e:	3a30      	subs	r2, #48	; 0x30
 8009750:	2a09      	cmp	r2, #9
 8009752:	d903      	bls.n	800975c <_vfiprintf_r+0x1d0>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0c6      	beq.n	80096e6 <_vfiprintf_r+0x15a>
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	e7c4      	b.n	80096e6 <_vfiprintf_r+0x15a>
 800975c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009760:	4604      	mov	r4, r0
 8009762:	2301      	movs	r3, #1
 8009764:	e7f0      	b.n	8009748 <_vfiprintf_r+0x1bc>
 8009766:	ab03      	add	r3, sp, #12
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	462a      	mov	r2, r5
 800976c:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <_vfiprintf_r+0x22c>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	4630      	mov	r0, r6
 8009772:	f7fd fb69 	bl	8006e48 <_printf_float>
 8009776:	4607      	mov	r7, r0
 8009778:	1c78      	adds	r0, r7, #1
 800977a:	d1d6      	bne.n	800972a <_vfiprintf_r+0x19e>
 800977c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x202>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x202>
 8009788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978a:	f7fe f8fb 	bl	8007984 <__retarget_lock_release_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	065b      	lsls	r3, r3, #25
 8009792:	f53f af1d 	bmi.w	80095d0 <_vfiprintf_r+0x44>
 8009796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009798:	e71c      	b.n	80095d4 <_vfiprintf_r+0x48>
 800979a:	ab03      	add	r3, sp, #12
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	462a      	mov	r2, r5
 80097a0:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <_vfiprintf_r+0x22c>)
 80097a2:	a904      	add	r1, sp, #16
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7fd fdf3 	bl	8007390 <_printf_i>
 80097aa:	e7e4      	b.n	8009776 <_vfiprintf_r+0x1ea>
 80097ac:	0800a0c4 	.word	0x0800a0c4
 80097b0:	0800a0ce 	.word	0x0800a0ce
 80097b4:	08006e49 	.word	0x08006e49
 80097b8:	08009569 	.word	0x08009569
 80097bc:	0800a0ca 	.word	0x0800a0ca

080097c0 <__swbuf_r>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	460e      	mov	r6, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	4605      	mov	r5, r0
 80097c8:	b118      	cbz	r0, 80097d2 <__swbuf_r+0x12>
 80097ca:	6a03      	ldr	r3, [r0, #32]
 80097cc:	b90b      	cbnz	r3, 80097d2 <__swbuf_r+0x12>
 80097ce:	f7fd ff8d 	bl	80076ec <__sinit>
 80097d2:	69a3      	ldr	r3, [r4, #24]
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	d525      	bpl.n	8009828 <__swbuf_r+0x68>
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	b31b      	cbz	r3, 8009828 <__swbuf_r+0x68>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	6922      	ldr	r2, [r4, #16]
 80097e4:	1a98      	subs	r0, r3, r2
 80097e6:	6963      	ldr	r3, [r4, #20]
 80097e8:	b2f6      	uxtb	r6, r6
 80097ea:	4283      	cmp	r3, r0
 80097ec:	4637      	mov	r7, r6
 80097ee:	dc04      	bgt.n	80097fa <__swbuf_r+0x3a>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f7ff fdac 	bl	8009350 <_fflush_r>
 80097f8:	b9e0      	cbnz	r0, 8009834 <__swbuf_r+0x74>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	60a3      	str	r3, [r4, #8]
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	6022      	str	r2, [r4, #0]
 8009806:	701e      	strb	r6, [r3, #0]
 8009808:	6962      	ldr	r2, [r4, #20]
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	429a      	cmp	r2, r3
 800980e:	d004      	beq.n	800981a <__swbuf_r+0x5a>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	07db      	lsls	r3, r3, #31
 8009814:	d506      	bpl.n	8009824 <__swbuf_r+0x64>
 8009816:	2e0a      	cmp	r6, #10
 8009818:	d104      	bne.n	8009824 <__swbuf_r+0x64>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f7ff fd97 	bl	8009350 <_fflush_r>
 8009822:	b938      	cbnz	r0, 8009834 <__swbuf_r+0x74>
 8009824:	4638      	mov	r0, r7
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	f000 f806 	bl	800983c <__swsetup_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0d5      	beq.n	80097e0 <__swbuf_r+0x20>
 8009834:	f04f 37ff 	mov.w	r7, #4294967295
 8009838:	e7f4      	b.n	8009824 <__swbuf_r+0x64>
	...

0800983c <__swsetup_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4b2a      	ldr	r3, [pc, #168]	; (80098e8 <__swsetup_r+0xac>)
 8009840:	4605      	mov	r5, r0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	460c      	mov	r4, r1
 8009846:	b118      	cbz	r0, 8009850 <__swsetup_r+0x14>
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	b90b      	cbnz	r3, 8009850 <__swsetup_r+0x14>
 800984c:	f7fd ff4e 	bl	80076ec <__sinit>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009856:	0718      	lsls	r0, r3, #28
 8009858:	d422      	bmi.n	80098a0 <__swsetup_r+0x64>
 800985a:	06d9      	lsls	r1, r3, #27
 800985c:	d407      	bmi.n	800986e <__swsetup_r+0x32>
 800985e:	2309      	movs	r3, #9
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e034      	b.n	80098d8 <__swsetup_r+0x9c>
 800986e:	0758      	lsls	r0, r3, #29
 8009870:	d512      	bpl.n	8009898 <__swsetup_r+0x5c>
 8009872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009874:	b141      	cbz	r1, 8009888 <__swsetup_r+0x4c>
 8009876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800987a:	4299      	cmp	r1, r3
 800987c:	d002      	beq.n	8009884 <__swsetup_r+0x48>
 800987e:	4628      	mov	r0, r5
 8009880:	f7fe ff0c 	bl	800869c <_free_r>
 8009884:	2300      	movs	r3, #0
 8009886:	6363      	str	r3, [r4, #52]	; 0x34
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	2300      	movs	r3, #0
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f043 0308 	orr.w	r3, r3, #8
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	b94b      	cbnz	r3, 80098b8 <__swsetup_r+0x7c>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ae:	d003      	beq.n	80098b8 <__swsetup_r+0x7c>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 f884 	bl	80099c0 <__smakebuf_r>
 80098b8:	89a0      	ldrh	r0, [r4, #12]
 80098ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098be:	f010 0301 	ands.w	r3, r0, #1
 80098c2:	d00a      	beq.n	80098da <__swsetup_r+0x9e>
 80098c4:	2300      	movs	r3, #0
 80098c6:	60a3      	str	r3, [r4, #8]
 80098c8:	6963      	ldr	r3, [r4, #20]
 80098ca:	425b      	negs	r3, r3
 80098cc:	61a3      	str	r3, [r4, #24]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	b943      	cbnz	r3, 80098e4 <__swsetup_r+0xa8>
 80098d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098d6:	d1c4      	bne.n	8009862 <__swsetup_r+0x26>
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	0781      	lsls	r1, r0, #30
 80098dc:	bf58      	it	pl
 80098de:	6963      	ldrpl	r3, [r4, #20]
 80098e0:	60a3      	str	r3, [r4, #8]
 80098e2:	e7f4      	b.n	80098ce <__swsetup_r+0x92>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7f7      	b.n	80098d8 <__swsetup_r+0x9c>
 80098e8:	20000078 	.word	0x20000078

080098ec <_raise_r>:
 80098ec:	291f      	cmp	r1, #31
 80098ee:	b538      	push	{r3, r4, r5, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	d904      	bls.n	8009900 <_raise_r+0x14>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009902:	b112      	cbz	r2, 800990a <_raise_r+0x1e>
 8009904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009908:	b94b      	cbnz	r3, 800991e <_raise_r+0x32>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f830 	bl	8009970 <_getpid_r>
 8009910:	462a      	mov	r2, r5
 8009912:	4601      	mov	r1, r0
 8009914:	4620      	mov	r0, r4
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	f000 b817 	b.w	800994c <_kill_r>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d00a      	beq.n	8009938 <_raise_r+0x4c>
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	d103      	bne.n	800992e <_raise_r+0x42>
 8009926:	2316      	movs	r3, #22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	2001      	movs	r0, #1
 800992c:	e7e7      	b.n	80098fe <_raise_r+0x12>
 800992e:	2400      	movs	r4, #0
 8009930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009934:	4628      	mov	r0, r5
 8009936:	4798      	blx	r3
 8009938:	2000      	movs	r0, #0
 800993a:	e7e0      	b.n	80098fe <_raise_r+0x12>

0800993c <raise>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <raise+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f7ff bfd3 	b.w	80098ec <_raise_r>
 8009946:	bf00      	nop
 8009948:	20000078 	.word	0x20000078

0800994c <_kill_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_kill_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f8 f873 	bl	8001a44 <_kill>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_kill_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_kill_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	200006ec 	.word	0x200006ec

08009970 <_getpid_r>:
 8009970:	f7f8 b860 	b.w	8001a34 <_getpid>

08009974 <__swhatbuf_r>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	460c      	mov	r4, r1
 8009978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997c:	2900      	cmp	r1, #0
 800997e:	b096      	sub	sp, #88	; 0x58
 8009980:	4615      	mov	r5, r2
 8009982:	461e      	mov	r6, r3
 8009984:	da0d      	bge.n	80099a2 <__swhatbuf_r+0x2e>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f013 0f80 	tst.w	r3, #128	; 0x80
 800998c:	f04f 0100 	mov.w	r1, #0
 8009990:	bf0c      	ite	eq
 8009992:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009996:	2340      	movne	r3, #64	; 0x40
 8009998:	2000      	movs	r0, #0
 800999a:	6031      	str	r1, [r6, #0]
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	b016      	add	sp, #88	; 0x58
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	466a      	mov	r2, sp
 80099a4:	f000 f848 	bl	8009a38 <_fstat_r>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dbec      	blt.n	8009986 <__swhatbuf_r+0x12>
 80099ac:	9901      	ldr	r1, [sp, #4]
 80099ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099b6:	4259      	negs	r1, r3
 80099b8:	4159      	adcs	r1, r3
 80099ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099be:	e7eb      	b.n	8009998 <__swhatbuf_r+0x24>

080099c0 <__smakebuf_r>:
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c4:	079d      	lsls	r5, r3, #30
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	d507      	bpl.n	80099dc <__smakebuf_r+0x1c>
 80099cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	2301      	movs	r3, #1
 80099d6:	6163      	str	r3, [r4, #20]
 80099d8:	b002      	add	sp, #8
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	ab01      	add	r3, sp, #4
 80099de:	466a      	mov	r2, sp
 80099e0:	f7ff ffc8 	bl	8009974 <__swhatbuf_r>
 80099e4:	9900      	ldr	r1, [sp, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7fe fecb 	bl	8008784 <_malloc_r>
 80099ee:	b948      	cbnz	r0, 8009a04 <__smakebuf_r+0x44>
 80099f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d4ef      	bmi.n	80099d8 <__smakebuf_r+0x18>
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	f043 0302 	orr.w	r3, r3, #2
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7e3      	b.n	80099cc <__smakebuf_r+0xc>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	6020      	str	r0, [r4, #0]
 8009a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	6163      	str	r3, [r4, #20]
 8009a12:	9b01      	ldr	r3, [sp, #4]
 8009a14:	6120      	str	r0, [r4, #16]
 8009a16:	b15b      	cbz	r3, 8009a30 <__smakebuf_r+0x70>
 8009a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f000 f81d 	bl	8009a5c <_isatty_r>
 8009a22:	b128      	cbz	r0, 8009a30 <__smakebuf_r+0x70>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	431d      	orrs	r5, r3
 8009a34:	81a5      	strh	r5, [r4, #12]
 8009a36:	e7cf      	b.n	80099d8 <__smakebuf_r+0x18>

08009a38 <_fstat_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_fstat_r+0x20>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	f7f8 f85c 	bl	8001b02 <_fstat>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	d102      	bne.n	8009a54 <_fstat_r+0x1c>
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	b103      	cbz	r3, 8009a54 <_fstat_r+0x1c>
 8009a52:	6023      	str	r3, [r4, #0]
 8009a54:	bd38      	pop	{r3, r4, r5, pc}
 8009a56:	bf00      	nop
 8009a58:	200006ec 	.word	0x200006ec

08009a5c <_isatty_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d06      	ldr	r5, [pc, #24]	; (8009a78 <_isatty_r+0x1c>)
 8009a60:	2300      	movs	r3, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	602b      	str	r3, [r5, #0]
 8009a68:	f7f8 f85b 	bl	8001b22 <_isatty>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_isatty_r+0x1a>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_isatty_r+0x1a>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	200006ec 	.word	0x200006ec

08009a7c <expf>:
 8009a7c:	b508      	push	{r3, lr}
 8009a7e:	ed2d 8b02 	vpush	{d8}
 8009a82:	eef0 8a40 	vmov.f32	s17, s0
 8009a86:	f000 f8bf 	bl	8009c08 <__ieee754_expf>
 8009a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a8e:	eeb0 0a68 	vmov.f32	s0, s17
 8009a92:	f000 f829 	bl	8009ae8 <finitef>
 8009a96:	b160      	cbz	r0, 8009ab2 <expf+0x36>
 8009a98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009ad8 <expf+0x5c>
 8009a9c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa4:	dd0a      	ble.n	8009abc <expf+0x40>
 8009aa6:	f7fd ff41 	bl	800792c <__errno>
 8009aaa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009adc <expf+0x60>
 8009aae:	2322      	movs	r3, #34	; 0x22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ab6:	ecbd 8b02 	vpop	{d8}
 8009aba:	bd08      	pop	{r3, pc}
 8009abc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009ae0 <expf+0x64>
 8009ac0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac8:	d5f3      	bpl.n	8009ab2 <expf+0x36>
 8009aca:	f7fd ff2f 	bl	800792c <__errno>
 8009ace:	2322      	movs	r3, #34	; 0x22
 8009ad0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009ae4 <expf+0x68>
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	e7ec      	b.n	8009ab2 <expf+0x36>
 8009ad8:	42b17217 	.word	0x42b17217
 8009adc:	7f800000 	.word	0x7f800000
 8009ae0:	c2cff1b5 	.word	0xc2cff1b5
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <finitef>:
 8009ae8:	b082      	sub	sp, #8
 8009aea:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009aee:	9801      	ldr	r0, [sp, #4]
 8009af0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009af4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009af8:	bfac      	ite	ge
 8009afa:	2000      	movge	r0, #0
 8009afc:	2001      	movlt	r0, #1
 8009afe:	b002      	add	sp, #8
 8009b00:	4770      	bx	lr
 8009b02:	0000      	movs	r0, r0
 8009b04:	0000      	movs	r0, r0
	...

08009b08 <floor>:
 8009b08:	ec51 0b10 	vmov	r0, r1, d0
 8009b0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009b18:	2e13      	cmp	r6, #19
 8009b1a:	ee10 5a10 	vmov	r5, s0
 8009b1e:	ee10 8a10 	vmov	r8, s0
 8009b22:	460c      	mov	r4, r1
 8009b24:	dc31      	bgt.n	8009b8a <floor+0x82>
 8009b26:	2e00      	cmp	r6, #0
 8009b28:	da14      	bge.n	8009b54 <floor+0x4c>
 8009b2a:	a333      	add	r3, pc, #204	; (adr r3, 8009bf8 <floor+0xf0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	2200      	movs	r2, #0
 8009b36:	2300      	movs	r3, #0
 8009b38:	f7f6 ffee 	bl	8000b18 <__aeabi_dcmpgt>
 8009b3c:	b138      	cbz	r0, 8009b4e <floor+0x46>
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	da53      	bge.n	8009bea <floor+0xe2>
 8009b42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009b46:	4325      	orrs	r5, r4
 8009b48:	d052      	beq.n	8009bf0 <floor+0xe8>
 8009b4a:	4c2d      	ldr	r4, [pc, #180]	; (8009c00 <floor+0xf8>)
 8009b4c:	2500      	movs	r5, #0
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	e024      	b.n	8009b9e <floor+0x96>
 8009b54:	4f2b      	ldr	r7, [pc, #172]	; (8009c04 <floor+0xfc>)
 8009b56:	4137      	asrs	r7, r6
 8009b58:	ea01 0307 	and.w	r3, r1, r7
 8009b5c:	4303      	orrs	r3, r0
 8009b5e:	d01e      	beq.n	8009b9e <floor+0x96>
 8009b60:	a325      	add	r3, pc, #148	; (adr r3, 8009bf8 <floor+0xf0>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb91 	bl	800028c <__adddf3>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f7f6 ffd3 	bl	8000b18 <__aeabi_dcmpgt>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0eb      	beq.n	8009b4e <floor+0x46>
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	bfbe      	ittt	lt
 8009b7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009b7e:	4133      	asrlt	r3, r6
 8009b80:	18e4      	addlt	r4, r4, r3
 8009b82:	ea24 0407 	bic.w	r4, r4, r7
 8009b86:	2500      	movs	r5, #0
 8009b88:	e7e1      	b.n	8009b4e <floor+0x46>
 8009b8a:	2e33      	cmp	r6, #51	; 0x33
 8009b8c:	dd0b      	ble.n	8009ba6 <floor+0x9e>
 8009b8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b92:	d104      	bne.n	8009b9e <floor+0x96>
 8009b94:	ee10 2a10 	vmov	r2, s0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	f7f6 fb77 	bl	800028c <__adddf3>
 8009b9e:	ec41 0b10 	vmov	d0, r0, r1
 8009ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009baa:	f04f 37ff 	mov.w	r7, #4294967295
 8009bae:	40df      	lsrs	r7, r3
 8009bb0:	4238      	tst	r0, r7
 8009bb2:	d0f4      	beq.n	8009b9e <floor+0x96>
 8009bb4:	a310      	add	r3, pc, #64	; (adr r3, 8009bf8 <floor+0xf0>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fb67 	bl	800028c <__adddf3>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f7f6 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0c1      	beq.n	8009b4e <floor+0x46>
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	da0a      	bge.n	8009be4 <floor+0xdc>
 8009bce:	2e14      	cmp	r6, #20
 8009bd0:	d101      	bne.n	8009bd6 <floor+0xce>
 8009bd2:	3401      	adds	r4, #1
 8009bd4:	e006      	b.n	8009be4 <floor+0xdc>
 8009bd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009bda:	2301      	movs	r3, #1
 8009bdc:	40b3      	lsls	r3, r6
 8009bde:	441d      	add	r5, r3
 8009be0:	45a8      	cmp	r8, r5
 8009be2:	d8f6      	bhi.n	8009bd2 <floor+0xca>
 8009be4:	ea25 0507 	bic.w	r5, r5, r7
 8009be8:	e7b1      	b.n	8009b4e <floor+0x46>
 8009bea:	2500      	movs	r5, #0
 8009bec:	462c      	mov	r4, r5
 8009bee:	e7ae      	b.n	8009b4e <floor+0x46>
 8009bf0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009bf4:	e7ab      	b.n	8009b4e <floor+0x46>
 8009bf6:	bf00      	nop
 8009bf8:	8800759c 	.word	0x8800759c
 8009bfc:	7e37e43c 	.word	0x7e37e43c
 8009c00:	bff00000 	.word	0xbff00000
 8009c04:	000fffff 	.word	0x000fffff

08009c08 <__ieee754_expf>:
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009c10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c14:	d902      	bls.n	8009c1c <__ieee754_expf+0x14>
 8009c16:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c1a:	4770      	bx	lr
 8009c1c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009c20:	d106      	bne.n	8009c30 <__ieee754_expf+0x28>
 8009c22:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009d5c <__ieee754_expf+0x154>
 8009c26:	2900      	cmp	r1, #0
 8009c28:	bf18      	it	ne
 8009c2a:	eeb0 0a67 	vmovne.f32	s0, s15
 8009c2e:	4770      	bx	lr
 8009c30:	484b      	ldr	r0, [pc, #300]	; (8009d60 <__ieee754_expf+0x158>)
 8009c32:	4282      	cmp	r2, r0
 8009c34:	dd02      	ble.n	8009c3c <__ieee754_expf+0x34>
 8009c36:	2000      	movs	r0, #0
 8009c38:	f000 b8d0 	b.w	8009ddc <__math_oflowf>
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	da05      	bge.n	8009c4c <__ieee754_expf+0x44>
 8009c40:	4a48      	ldr	r2, [pc, #288]	; (8009d64 <__ieee754_expf+0x15c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d902      	bls.n	8009c4c <__ieee754_expf+0x44>
 8009c46:	2000      	movs	r0, #0
 8009c48:	f000 b8c2 	b.w	8009dd0 <__math_uflowf>
 8009c4c:	4a46      	ldr	r2, [pc, #280]	; (8009d68 <__ieee754_expf+0x160>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009c54:	d952      	bls.n	8009cfc <__ieee754_expf+0xf4>
 8009c56:	4a45      	ldr	r2, [pc, #276]	; (8009d6c <__ieee754_expf+0x164>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009c5e:	d834      	bhi.n	8009cca <__ieee754_expf+0xc2>
 8009c60:	4b43      	ldr	r3, [pc, #268]	; (8009d70 <__ieee754_expf+0x168>)
 8009c62:	4413      	add	r3, r2
 8009c64:	ed93 7a00 	vldr	s14, [r3]
 8009c68:	4b42      	ldr	r3, [pc, #264]	; (8009d74 <__ieee754_expf+0x16c>)
 8009c6a:	4413      	add	r3, r2
 8009c6c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009c70:	f1c1 0201 	rsb	r2, r1, #1
 8009c74:	edd3 7a00 	vldr	s15, [r3]
 8009c78:	1a52      	subs	r2, r2, r1
 8009c7a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009c7e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009c82:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009d78 <__ieee754_expf+0x170>
 8009c86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d7c <__ieee754_expf+0x174>
 8009c8a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009c8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009d80 <__ieee754_expf+0x178>
 8009c92:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009c96:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009d84 <__ieee754_expf+0x17c>
 8009c9a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009c9e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009d88 <__ieee754_expf+0x180>
 8009ca2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009ca6:	eef0 6a40 	vmov.f32	s13, s0
 8009caa:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009cae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009cb2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009cb6:	bb92      	cbnz	r2, 8009d1e <__ieee754_expf+0x116>
 8009cb8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009cbc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009cc0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009cc4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009cc8:	4770      	bx	lr
 8009cca:	4b30      	ldr	r3, [pc, #192]	; (8009d8c <__ieee754_expf+0x184>)
 8009ccc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009d90 <__ieee754_expf+0x188>
 8009cd0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009d94 <__ieee754_expf+0x18c>
 8009cd4:	4413      	add	r3, r2
 8009cd6:	edd3 7a00 	vldr	s15, [r3]
 8009cda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009cde:	eeb0 7a40 	vmov.f32	s14, s0
 8009ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ce6:	ee17 2a90 	vmov	r2, s15
 8009cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cee:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009cf2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009d98 <__ieee754_expf+0x190>
 8009cf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009cfa:	e7be      	b.n	8009c7a <__ieee754_expf+0x72>
 8009cfc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009d00:	d20b      	bcs.n	8009d1a <__ieee754_expf+0x112>
 8009d02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d9c <__ieee754_expf+0x194>
 8009d06:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009d0a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d12:	dd02      	ble.n	8009d1a <__ieee754_expf+0x112>
 8009d14:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009d18:	4770      	bx	lr
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	e7af      	b.n	8009c7e <__ieee754_expf+0x76>
 8009d1e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009d22:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009d26:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009d2a:	bfb8      	it	lt
 8009d2c:	3264      	addlt	r2, #100	; 0x64
 8009d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d36:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009d3a:	ee17 3a90 	vmov	r3, s15
 8009d3e:	bfab      	itete	ge
 8009d40:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009d44:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009d48:	ee00 3a10 	vmovge	s0, r3
 8009d4c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009da0 <__ieee754_expf+0x198>
 8009d50:	bfbc      	itt	lt
 8009d52:	ee00 3a10 	vmovlt	s0, r3
 8009d56:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009d5a:	4770      	bx	lr
 8009d5c:	00000000 	.word	0x00000000
 8009d60:	42b17217 	.word	0x42b17217
 8009d64:	42cff1b5 	.word	0x42cff1b5
 8009d68:	3eb17218 	.word	0x3eb17218
 8009d6c:	3f851591 	.word	0x3f851591
 8009d70:	0800a224 	.word	0x0800a224
 8009d74:	0800a22c 	.word	0x0800a22c
 8009d78:	3331bb4c 	.word	0x3331bb4c
 8009d7c:	b5ddea0e 	.word	0xb5ddea0e
 8009d80:	388ab355 	.word	0x388ab355
 8009d84:	bb360b61 	.word	0xbb360b61
 8009d88:	3e2aaaab 	.word	0x3e2aaaab
 8009d8c:	0800a21c 	.word	0x0800a21c
 8009d90:	3fb8aa3b 	.word	0x3fb8aa3b
 8009d94:	3f317180 	.word	0x3f317180
 8009d98:	3717f7d1 	.word	0x3717f7d1
 8009d9c:	7149f2ca 	.word	0x7149f2ca
 8009da0:	0d800000 	.word	0x0d800000

08009da4 <with_errnof>:
 8009da4:	b513      	push	{r0, r1, r4, lr}
 8009da6:	4604      	mov	r4, r0
 8009da8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009dac:	f7fd fdbe 	bl	800792c <__errno>
 8009db0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009db4:	6004      	str	r4, [r0, #0]
 8009db6:	b002      	add	sp, #8
 8009db8:	bd10      	pop	{r4, pc}

08009dba <xflowf>:
 8009dba:	b130      	cbz	r0, 8009dca <xflowf+0x10>
 8009dbc:	eef1 7a40 	vneg.f32	s15, s0
 8009dc0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009dc4:	2022      	movs	r0, #34	; 0x22
 8009dc6:	f7ff bfed 	b.w	8009da4 <with_errnof>
 8009dca:	eef0 7a40 	vmov.f32	s15, s0
 8009dce:	e7f7      	b.n	8009dc0 <xflowf+0x6>

08009dd0 <__math_uflowf>:
 8009dd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009dd8 <__math_uflowf+0x8>
 8009dd4:	f7ff bff1 	b.w	8009dba <xflowf>
 8009dd8:	10000000 	.word	0x10000000

08009ddc <__math_oflowf>:
 8009ddc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009de4 <__math_oflowf+0x8>
 8009de0:	f7ff bfeb 	b.w	8009dba <xflowf>
 8009de4:	70000000 	.word	0x70000000

08009de8 <_init>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr

08009df4 <_fini>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr
