
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf8  08003bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000000c  08003c0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003c0c  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bde  00000000  00000000  0002be49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025caf  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9d2  00000000  00000000  0005490f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e796b  00000000  00000000  000602e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147c4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  00147c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b90 	.word	0x08003b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b90 	.word	0x08003b90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]


}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0a8      	sub	sp, #160	; 0xa0
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fb69 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f819 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8eb 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f2:	f000 f8cb 	bl	800068c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f899 	bl	800062c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004fa:	f000 f863 	bl	80005c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 80004fe:	4906      	ldr	r1, [pc, #24]	; (8000518 <main+0x38>)
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x3c>)
 8000502:	f000 fab0 	bl	8000a66 <IBUS_Init>
  channel = IBUS_GetChannels(&Ibus);
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x3c>)
 8000508:	f000 fb4b 	bl	8000ba2 <IBUS_GetChannels>
 800050c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  uint8_t msg[150];
  IBUS_Update(&Ibus);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x3c>)
 8000512:	f000 facc 	bl	8000aae <IBUS_Update>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x36>
 8000518:	20000028 	.word	0x20000028
 800051c:	20000178 	.word	0x20000178

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fb26 	bl	8003b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000546:	f001 f88f 	bl	8001668 <HAL_PWREx_ControlVoltageScaling>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000550:	f000 f920 	bl	8000794 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056e:	230a      	movs	r3, #10
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f8c6 	bl	8001714 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058e:	f000 f901 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fc8e 	bl	8001ecc <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 f8ed 	bl	8000794 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3758      	adds	r7, #88	; 0x58
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <MX_USART1_UART_Init+0x64>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_USART1_UART_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART1_UART_Init+0x60>)
 8000602:	2208      	movs	r2, #8
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_USART1_UART_Init+0x60>)
 8000608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART1_UART_Init+0x60>)
 8000610:	f002 fb3c 	bl	8002c8c <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800061a:	f000 f8bb 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028
 8000628:	40013800 	.word	0x40013800

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART2_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000670:	f002 fb0c 	bl	8002c8c <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f88b 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000ac 	.word	0x200000ac
 8000688:	40004400 	.word	0x40004400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_DMA_Init+0x38>)
 8000694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <MX_DMA_Init+0x38>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6493      	str	r3, [r2, #72]	; 0x48
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_DMA_Init+0x38>)
 80006a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	200f      	movs	r0, #15
 80006b0:	f000 fbdb 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fbf4 	bl	8000ea2 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a2a      	ldr	r2, [pc, #168]	; (800078c <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <MX_GPIO_Init+0xc4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <MX_GPIO_Init+0xc4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f000 ff69 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000750:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000762:	f000 fdb1 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000766:	2320      	movs	r3, #32
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f000 fda2 	bl	80012c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	; 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0ae      	sub	sp, #184	; 0xb8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	2288      	movs	r2, #136	; 0x88
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f9b9 	bl	8003b80 <memset>
  if(huart->Instance==USART1)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a58      	ldr	r2, [pc, #352]	; (8000974 <HAL_UART_MspInit+0x18c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d167      	bne.n	80008e8 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fd75 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000830:	f7ff ffb0 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000834:	4b50      	ldr	r3, [pc, #320]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000838:	4a4f      	ldr	r2, [pc, #316]	; (8000978 <HAL_UART_MspInit+0x190>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6613      	str	r3, [r2, #96]	; 0x60
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <HAL_UART_MspInit+0x190>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	4a49      	ldr	r2, [pc, #292]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000858:	4b47      	ldr	r3, [pc, #284]	; (8000978 <HAL_UART_MspInit+0x190>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000864:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800087e:	2307      	movs	r3, #7
 8000880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000888:	4619      	mov	r1, r3
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f000 fd1b 	bl	80012c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000892:	4b3a      	ldr	r3, [pc, #232]	; (800097c <HAL_UART_MspInit+0x194>)
 8000894:	4a3a      	ldr	r2, [pc, #232]	; (8000980 <HAL_UART_MspInit+0x198>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000898:	4b38      	ldr	r3, [pc, #224]	; (800097c <HAL_UART_MspInit+0x194>)
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <HAL_UART_MspInit+0x194>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <HAL_UART_MspInit+0x194>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <HAL_UART_MspInit+0x194>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <HAL_UART_MspInit+0x194>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <HAL_UART_MspInit+0x194>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <HAL_UART_MspInit+0x194>)
 80008be:	2220      	movs	r2, #32
 80008c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <HAL_UART_MspInit+0x194>)
 80008c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008ca:	482c      	ldr	r0, [pc, #176]	; (800097c <HAL_UART_MspInit+0x194>)
 80008cc:	f000 fb04 	bl	8000ed8 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80008d6:	f7ff ff5d 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a27      	ldr	r2, [pc, #156]	; (800097c <HAL_UART_MspInit+0x194>)
 80008de:	671a      	str	r2, [r3, #112]	; 0x70
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_UART_MspInit+0x194>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	e040      	b.n	800096a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <HAL_UART_MspInit+0x19c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d13b      	bne.n	800096a <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fd08 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0x126>
      Error_Handler();
 800090a:	f7ff ff43 	bl	8000794 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x190>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <HAL_UART_MspInit+0x190>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x190>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fcaf 	bl	80012c8 <HAL_GPIO_Init>
}
 800096a:	bf00      	nop
 800096c:	37b8      	adds	r7, #184	; 0xb8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40013800 	.word	0x40013800
 8000978:	40021000 	.word	0x40021000
 800097c:	20000130 	.word	0x20000130
 8000980:	40020058 	.word	0x40020058
 8000984:	40004400 	.word	0x40004400

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f94e 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA1_Channel5_IRQHandler+0x10>)
 80009e2:	f000 fb91 	bl	8001108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000130 	.word	0x20000130

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f003 f86b 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a46:	f7ff fd4b 	bl	80004e0 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	20000214 	.word	0x20000214

08000a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_2_IRQHandler>

08000a66 <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel,1500,6*sizeof(uint16_t));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3304      	adds	r3, #4
 8000a74:	220c      	movs	r2, #12
 8000a76:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 f880 	bl	8003b80 <memset>
	Ibus->handle = handle;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer,0,128);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3318      	adds	r3, #24
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 f876 	bl	8003b80 <memset>
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3318      	adds	r3, #24
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f002 f942 	bl	8002d28 <HAL_UART_Receive_DMA>
}
 8000aa4:	bf00      	nop
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b094      	sub	sp, #80	; 0x50
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3318      	adds	r3, #24
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f002 f931 	bl	8002d28 <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	223c      	movs	r2, #60	; 0x3c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f854 	bl	8003b80 <memset>
	uint16_t packetStart = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint16_t i = 0;i<127;i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ae4:	e018      	b.n	8000b18 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i+1]==0x40) {
 8000ae6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	7e1b      	ldrb	r3, [r3, #24]
 8000af0:	2b20      	cmp	r3, #32
 8000af2:	d10c      	bne.n	8000b0e <IBUS_Update+0x60>
 8000af4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000af8:	3301      	adds	r3, #1
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	7e1b      	ldrb	r3, [r3, #24]
 8000b00:	2b40      	cmp	r3, #64	; 0x40
 8000b02:	d104      	bne.n	8000b0e <IBUS_Update+0x60>
			packetStart = i;
 8000b04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000b08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			break;
 8000b0c:	e008      	b.n	8000b20 <IBUS_Update+0x72>
	for (uint16_t i = 0;i<127;i++) {
 8000b0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000b12:	3301      	adds	r3, #1
 8000b14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000b18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000b1c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b1e:	d9e2      	bls.n	8000ae6 <IBUS_Update+0x38>
		}
	}
	if (packetStart >=64) {
 8000b20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b24:	2b3f      	cmp	r3, #63	; 0x3f
 8000b26:	d901      	bls.n	8000b2c <IBUS_Update+0x7e>
		return HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e036      	b.n	8000b9a <IBUS_Update+0xec>
	}
	memcpy(Packet,Ibus->UARTBuffer+packetStart+2,30);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f103 0218 	add.w	r2, r3, #24
 8000b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b36:	3302      	adds	r3, #2
 8000b38:	18d1      	adds	r1, r2, r3
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	221e      	movs	r2, #30
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 f80f 	bl	8003b64 <memcpy>
	for (uint16_t i=0;i<6;i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000b4c:	e020      	b.n	8000b90 <IBUS_Update+0xe2>
		Ibus->channel[i] = (((uint16_t)Packet[2*i])<<8) + (uint16_t)Packet[2*i+1];
 8000b4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	3350      	adds	r3, #80	; 0x50
 8000b56:	443b      	add	r3, r7
 8000b58:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	b299      	uxth	r1, r3
 8000b62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	3301      	adds	r3, #1
 8000b6a:	3350      	adds	r3, #80	; 0x50
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b78:	440a      	add	r2, r1
 8000b7a:	b291      	uxth	r1, r2
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	460a      	mov	r2, r1
 8000b84:	809a      	strh	r2, [r3, #4]
	for (uint16_t i=0;i<6;i++) {
 8000b86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	d9da      	bls.n	8000b4e <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3750      	adds	r7, #80	; 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3304      	adds	r3, #4
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_Init+0x3c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_Init+0x3c>)
 8000bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f93e 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f80f 	bl	8000bfc <HAL_InitTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	e001      	b.n	8000bee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bea:	f7ff fdd9 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d023      	beq.n	8000c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_InitTick+0x70>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f949 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10f      	bne.n	8000c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f913 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e001      	b.n	8000c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000210 	.word	0x20000210

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000210 	.word	0x20000210

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e098      	b.n	800101c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <HAL_DMA_Init+0x150>)
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d80f      	bhi.n	8000f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b4b      	ldr	r3, [pc, #300]	; (800102c <HAL_DMA_Init+0x154>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_DMA_Init+0x158>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	009a      	lsls	r2, r3, #2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a48      	ldr	r2, [pc, #288]	; (8001034 <HAL_DMA_Init+0x15c>)
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
 8000f14:	e00e      	b.n	8000f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HAL_DMA_Init+0x160>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a43      	ldr	r2, [pc, #268]	; (8001030 <HAL_DMA_Init+0x158>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	009a      	lsls	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a42      	ldr	r2, [pc, #264]	; (800103c <HAL_DMA_Init+0x164>)
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f8e:	d039      	beq.n	8001004 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_DMA_Init+0x15c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11a      	bne.n	8000fd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_DMA_Init+0x168>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f003 031c 	and.w	r3, r3, #28
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4924      	ldr	r1, [pc, #144]	; (8001040 <HAL_DMA_Init+0x168>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <HAL_DMA_Init+0x168>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f003 031c 	and.w	r3, r3, #28
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	491d      	ldr	r1, [pc, #116]	; (8001040 <HAL_DMA_Init+0x168>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
 8000fce:	e019      	b.n	8001004 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_DMA_Init+0x16c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	f003 031c 	and.w	r3, r3, #28
 8000fdc:	210f      	movs	r1, #15
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4917      	ldr	r1, [pc, #92]	; (8001044 <HAL_DMA_Init+0x16c>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_DMA_Init+0x16c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 031c 	and.w	r3, r3, #28
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	4911      	ldr	r1, [pc, #68]	; (8001044 <HAL_DMA_Init+0x16c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40020407 	.word	0x40020407
 800102c:	bffdfff8 	.word	0xbffdfff8
 8001030:	cccccccd 	.word	0xcccccccd
 8001034:	40020000 	.word	0x40020000
 8001038:	bffdfbf8 	.word	0xbffdfbf8
 800103c:	40020400 	.word	0x40020400
 8001040:	400200a8 	.word	0x400200a8
 8001044:	400204a8 	.word	0x400204a8

08001048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_DMA_Start_IT+0x20>
 8001064:	2302      	movs	r3, #2
 8001066:	e04b      	b.n	8001100 <HAL_DMA_Start_IT+0xb8>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d13a      	bne.n	80010f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 f8e0 	bl	8001266 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 020e 	orr.w	r2, r2, #14
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e00f      	b.n	80010e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 020a 	orr.w	r2, r2, #10
 80010de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e005      	b.n	80010fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
 80010fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 031c 	and.w	r3, r3, #28
 8001128:	2204      	movs	r2, #4
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d026      	beq.n	8001182 <HAL_DMA_IRQHandler+0x7a>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d021      	beq.n	8001182 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f003 021c 	and.w	r2, r3, #28
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2104      	movs	r1, #4
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	2b00      	cmp	r3, #0
 8001176:	d071      	beq.n	800125c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001180:	e06c      	b.n	800125c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 031c 	and.w	r3, r3, #28
 800118a:	2202      	movs	r2, #2
 800118c:	409a      	lsls	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d02e      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xec>
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d029      	beq.n	80011f4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10b      	bne.n	80011c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 020a 	bic.w	r2, r2, #10
 80011bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f003 021c 	and.w	r2, r3, #28
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2102      	movs	r1, #2
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d038      	beq.n	800125c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011f2:	e033      	b.n	800125c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f003 031c 	and.w	r3, r3, #28
 80011fc:	2208      	movs	r2, #8
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d02a      	beq.n	800125e <HAL_DMA_IRQHandler+0x156>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d025      	beq.n	800125e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 020e 	bic.w	r2, r2, #14
 8001220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 021c 	and.w	r2, r3, #28
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800125c:	bf00      	nop
 800125e:	bf00      	nop
}
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f003 021c 	and.w	r2, r3, #28
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b10      	cmp	r3, #16
 8001296:	d108      	bne.n	80012aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012a8:	e007      	b.n	80012ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	60da      	str	r2, [r3, #12]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	e17f      	b.n	80015d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8171 	beq.w	80015d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d005      	beq.n	8001308 <HAL_GPIO_Init+0x40>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d130      	bne.n	800136a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 0201 	and.w	r2, r3, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b03      	cmp	r3, #3
 8001374:	d118      	bne.n	80013a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80ac 	beq.w	80015d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <HAL_GPIO_Init+0x330>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001492:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x242>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <HAL_GPIO_Init+0x338>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x23e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_GPIO_Init+0x33c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x23a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x340>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x236>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_GPIO_Init+0x344>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x232>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <HAL_GPIO_Init+0x348>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x22e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x34c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x22a>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x244>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x244>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x244>
 800150a:	2300      	movs	r3, #0
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151c:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_GPIO_Init+0x334>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_GPIO_Init+0x350>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f47f ae78 	bne.w	80012d8 <HAL_GPIO_Init+0x10>
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000
 8001600:	48000400 	.word	0x48000400
 8001604:	48000800 	.word	0x48000800
 8001608:	48000c00 	.word	0x48000c00
 800160c:	48001000 	.word	0x48001000
 8001610:	48001400 	.word	0x48001400
 8001614:	48001800 	.word	0x48001800
 8001618:	40010400 	.word	0x40010400

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001638:	e002      	b.n	8001640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HAL_PWREx_GetVoltageRange+0x18>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000

08001668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001676:	d130      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001684:	d038      	beq.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2232      	movs	r2, #50	; 0x32
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9b      	lsrs	r3, r3, #18
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ac:	e002      	b.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c0:	d102      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f2      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d4:	d110      	bne.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e00f      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d007      	beq.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40007000 	.word	0x40007000
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e3ca      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b97      	ldr	r3, [pc, #604]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b94      	ldr	r3, [pc, #592]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80e4 	beq.w	8001910 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_RCC_OscConfig+0x4a>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	f040 808b 	bne.w	800186c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b01      	cmp	r3, #1
 800175a:	f040 8087 	bne.w	800186c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x62>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3a2      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <HAL_RCC_OscConfig+0x7c>
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178e:	e005      	b.n	800179c <HAL_RCC_OscConfig+0x88>
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179c:	4293      	cmp	r3, r2
 800179e:	d223      	bcs.n	80017e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fd55 	bl	8002254 <RCC_SetFlashLatencyFromMSIRange>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e383      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b4:	4b73      	ldr	r3, [pc, #460]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a72      	ldr	r2, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	496d      	ldr	r1, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d2:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4968      	ldr	r1, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
 80017e6:	e025      	b.n	8001834 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4960      	ldr	r1, [pc, #384]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	495b      	ldr	r1, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fd15 	bl	8002254 <RCC_SetFlashLatencyFromMSIRange>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e343      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001834:	f000 fc4a 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b52      	ldr	r3, [pc, #328]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4950      	ldr	r1, [pc, #320]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_RCC_OscConfig+0x278>)
 8001852:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f9cf 	bl	8000bfc <HAL_InitTick>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d052      	beq.n	800190e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	e327      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d032      	beq.n	80018da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a42      	ldr	r2, [pc, #264]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa0c 	bl	8000c9c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001888:	f7ff fa08 	bl	8000c9c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e310      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a36      	ldr	r2, [pc, #216]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4931      	ldr	r1, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	492c      	ldr	r1, [pc, #176]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	e01a      	b.n	8001910 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f9d9 	bl	8000c9c <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ee:	f7ff f9d5 	bl	8000c9c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e2dd      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x1da>
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d074      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x21a>
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d10e      	bne.n	8001946 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d10b      	bne.n	8001946 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d064      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d160      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e2ba      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x24a>
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e026      	b.n	80019ac <HAL_RCC_OscConfig+0x298>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001966:	d115      	bne.n	8001994 <HAL_RCC_OscConfig+0x280>
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800196e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a02      	ldr	r2, [pc, #8]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x298>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	08003ba8 	.word	0x08003ba8
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004
 8001994:	4ba0      	ldr	r3, [pc, #640]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a9f      	ldr	r2, [pc, #636]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a9c      	ldr	r2, [pc, #624]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f972 	bl	8000c9c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f96e 	bl	8000c9c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e276      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ce:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x2a8>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f95e 	bl	8000c9c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f95a 	bl	8000c9c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e262      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2d0>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d060      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x310>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d119      	bne.n	8001a52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d116      	bne.n	8001a52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a24:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x328>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e23f      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	4973      	ldr	r1, [pc, #460]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a50:	e040      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d023      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff f919 	bl	8000c9c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f915 	bl	8000c9c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e21d      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a80:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	495f      	ldr	r1, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e018      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f8f5 	bl	8000c9c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f8f1 	bl	8000c9c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1f9      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d03c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f8d0 	bl	8000c9c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f8cc 	bl	8000c9c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1d4      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ef      	beq.n	8001b00 <HAL_RCC_OscConfig+0x3ec>
 8001b20:	e01b      	b.n	8001b5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b28:	4a3b      	ldr	r2, [pc, #236]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff f8b3 	bl	8000c9c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f8af 	bl	8000c9c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1b7      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ef      	bne.n	8001b3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80a6 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10d      	bne.n	8001b94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6593      	str	r3, [r2, #88]	; 0x58
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCC_OscConfig+0x508>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d118      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_RCC_OscConfig+0x508>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_RCC_OscConfig+0x508>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bac:	f7ff f876 	bl	8000c9c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb4:	f7ff f872 	bl	8000c9c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e17a      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x508>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x4d8>
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bea:	e029      	b.n	8001c40 <HAL_RCC_OscConfig+0x52c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d115      	bne.n	8001c20 <HAL_RCC_OscConfig+0x50c>
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x52c>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	4b9c      	ldr	r3, [pc, #624]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a9b      	ldr	r2, [pc, #620]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a97      	ldr	r2, [pc, #604]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d016      	beq.n	8001c76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff f828 	bl	8000c9c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff f824 	bl	8000c9c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e12a      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ed      	beq.n	8001c50 <HAL_RCC_OscConfig+0x53c>
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f811 	bl	8000c9c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff f80d 	bl	8000c9c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e113      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c94:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ed      	bne.n	8001c7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca8:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a79      	ldr	r2, [pc, #484]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80fe 	beq.w	8001eba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	f040 80d0 	bne.w	8001e68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cc8:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d130      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d127      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d11f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d08:	2a07      	cmp	r2, #7
 8001d0a:	bf14      	ite	ne
 8001d0c:	2201      	movne	r2, #1
 8001d0e:	2200      	moveq	r2, #0
 8001d10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d113      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	3b01      	subs	r3, #1
 8001d38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d06e      	beq.n	8001e1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d069      	beq.n	8001e18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0ad      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d60:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d6c:	f7fe ff96 	bl	8000c9c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe ff92 	bl	8000c9c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e09a      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <HAL_RCC_OscConfig+0x784>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001da2:	3a01      	subs	r2, #1
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dac:	0212      	lsls	r2, r2, #8
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0552      	lsls	r2, r2, #21
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc0:	0852      	lsrs	r2, r2, #1
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0652      	lsls	r2, r2, #25
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dcc:	0912      	lsrs	r2, r2, #4
 8001dce:	0452      	lsls	r2, r2, #17
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	4930      	ldr	r1, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7fe ff54 	bl	8000c9c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ff50 	bl	8000c9c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e058      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e16:	e050      	b.n	8001eba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04f      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d148      	bne.n	8001eba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e40:	f7fe ff2c 	bl	8000c9c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ff28 	bl	8000c9c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e030      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x734>
 8001e66:	e028      	b.n	8001eba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d023      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_RCC_OscConfig+0x780>)
 8001e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff0f 	bl	8000c9c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	e00c      	b.n	8001e9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe ff0b 	bl	8000c9c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d905      	bls.n	8001e9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e013      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x7b0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ec      	bne.n	8001e82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x7b0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4905      	ldr	r1, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x7b0>)
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_OscConfig+0x7b4>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e001      	b.n	8001eba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	feeefffc 	.word	0xfeeefffc

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0e7      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b75      	ldr	r3, [pc, #468]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4970      	ldr	r1, [pc, #448]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cf      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d908      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4960      	ldr	r1, [pc, #384]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d04c      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d121      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0a6      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d115      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e09a      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f82:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e08e      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e086      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4943      	ldr	r1, [pc, #268]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fe72 	bl	8000c9c <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7fe fe6e 	bl	8000c9c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e06e      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d208      	bcs.n	8002012 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	492b      	ldr	r1, [pc, #172]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d210      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 0207 	bic.w	r2, r3, #7
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e036      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4918      	ldr	r1, [pc, #96]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4910      	ldr	r1, [pc, #64]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002080:	f000 f824 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	490b      	ldr	r1, [pc, #44]	; (80020c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1fc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fda9 	bl	8000bfc <HAL_InitTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ae:	7afb      	ldrb	r3, [r7, #11]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003ba8 	.word	0x08003ba8
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d121      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11e      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d102      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e004      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d101      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002150:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d134      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0xa6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xac>
 8002170:	e005      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002174:	617b      	str	r3, [r7, #20]
      break;
 8002176:	e005      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800217a:	617b      	str	r3, [r7, #20]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	617b      	str	r3, [r7, #20]
      break;
 8002182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	3301      	adds	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0e5b      	lsrs	r3, r3, #25
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	3301      	adds	r3, #1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c4:	69bb      	ldr	r3, [r7, #24]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003bc0 	.word	0x08003bc0
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	007a1200 	.word	0x007a1200

080021e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08003bb8 	.word	0x08003bb8

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800222c:	f7ff ffda 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08003bb8 	.word	0x08003bb8

08002254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800226c:	f7ff f9ee 	bl	800164c <HAL_PWREx_GetVoltageRange>
 8002270:	6178      	str	r0, [r7, #20]
 8002272:	e014      	b.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	; 0x58
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800228c:	f7ff f9de 	bl	800164c <HAL_PWREx_GetVoltageRange>
 8002290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a1d      	ldr	r2, [pc, #116]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a4:	d10b      	bne.n	80022be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d919      	bls.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2ba0      	cmp	r3, #160	; 0xa0
 80022b0:	d902      	bls.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b2:	2302      	movs	r3, #2
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e013      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b8:	2301      	movs	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e010      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d902      	bls.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022c4:	2303      	movs	r3, #3
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e00a      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d102      	bne.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e004      	b.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b70      	cmp	r3, #112	; 0x70
 80022da:	d101      	bne.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022dc:	2301      	movs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 0207 	bic.w	r2, r3, #7
 80022e8:	4909      	ldr	r1, [pc, #36]	; (8002310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	40022000 	.word	0x40022000

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800231c:	2300      	movs	r3, #0
 800231e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002320:	2300      	movs	r3, #0
 8002322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232c:	2b00      	cmp	r3, #0
 800232e:	d041      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002334:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002338:	d02a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800233a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800233e:	d824      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800234a:	d81e      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002354:	d010      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002356:	e018      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002358:	4b86      	ldr	r3, [pc, #536]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a85      	ldr	r2, [pc, #532]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002364:	e015      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fabb 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002376:	e00c      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3320      	adds	r3, #32
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fba6 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002388:	e003      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	74fb      	strb	r3, [r7, #19]
      break;
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002398:	4b76      	ldr	r3, [pc, #472]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a6:	4973      	ldr	r1, [pc, #460]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ae:	e001      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d041      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023c8:	d02a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ce:	d824      	bhi.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023d4:	d008      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023da:	d81e      	bhi.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d010      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023e6:	e018      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023e8:	4b62      	ldr	r3, [pc, #392]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a61      	ldr	r2, [pc, #388]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f4:	e015      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fa73 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002406:	e00c      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3320      	adds	r3, #32
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fb5e 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002418:	e003      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	74fb      	strb	r3, [r7, #19]
      break;
 800241e:	e000      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002428:	4b52      	ldr	r3, [pc, #328]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002436:	494f      	ldr	r1, [pc, #316]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800243e:	e001      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a0 	beq.w	8002592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a40      	ldr	r2, [pc, #256]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
 8002478:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002484:	2301      	movs	r3, #1
 8002486:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002494:	f7fe fc02 	bl	8000c9c <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800249a:	e009      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe fbfe 	bl	8000c9c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d902      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	74fb      	strb	r3, [r7, #19]
        break;
 80024ae:	e005      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d15c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01f      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d019      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fbbd 	bl	8000c9c <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002524:	e00b      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fbb9 	bl	8000c9c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d902      	bls.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	74fb      	strb	r3, [r7, #19]
            break;
 800253c:	e006      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ec      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002562:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800256a:	e009      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002580:	7c7b      	ldrb	r3, [r7, #17]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b9e      	ldr	r3, [pc, #632]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a9d      	ldr	r2, [pc, #628]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800259e:	4b98      	ldr	r3, [pc, #608]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 0203 	bic.w	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	4994      	ldr	r1, [pc, #592]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 020c 	bic.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	498c      	ldr	r1, [pc, #560]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e2:	4b87      	ldr	r3, [pc, #540]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4983      	ldr	r1, [pc, #524]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002604:	4b7e      	ldr	r3, [pc, #504]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	497b      	ldr	r1, [pc, #492]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002626:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	4972      	ldr	r1, [pc, #456]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002648:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	496a      	ldr	r1, [pc, #424]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	4961      	ldr	r1, [pc, #388]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	4959      	ldr	r1, [pc, #356]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	4950      	ldr	r1, [pc, #320]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	4948      	ldr	r1, [pc, #288]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	493f      	ldr	r1, [pc, #252]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d028      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002714:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002722:	4937      	ldr	r1, [pc, #220]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002732:	d106      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a31      	ldr	r2, [pc, #196]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	e011      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800274a:	d10c      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8c8 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d028      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	491f      	ldr	r1, [pc, #124]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002790:	d106      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279c:	60d3      	str	r3, [r2, #12]
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f899 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02b      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ee:	d109      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a02      	ldr	r2, [pc, #8]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
 80027fc:	e014      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f867 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d02f      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002842:	4928      	ldr	r1, [pc, #160]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002852:	d10d      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	2102      	movs	r1, #2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f844 	bl	80028e8 <RCCEx_PLLSAI1_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d014      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	74bb      	strb	r3, [r7, #18]
 800286e:	e011      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002878:	d10c      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3320      	adds	r3, #32
 800287e:	2102      	movs	r1, #2
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f925 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ae:	490d      	ldr	r1, [pc, #52]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d2:	4904      	ldr	r1, [pc, #16]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028da:	7cbb      	ldrb	r3, [r7, #18]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f6:	4b75      	ldr	r3, [pc, #468]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d018      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002902:	4b72      	ldr	r3, [pc, #456]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d10d      	bne.n	800292e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
       ||
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800291a:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
       ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d047      	beq.n	80029be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d018      	beq.n	800296e <RCCEx_PLLSAI1_Config+0x86>
 800293c:	2b03      	cmp	r3, #3
 800293e:	d825      	bhi.n	800298c <RCCEx_PLLSAI1_Config+0xa4>
 8002940:	2b01      	cmp	r3, #1
 8002942:	d002      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x62>
 8002944:	2b02      	cmp	r3, #2
 8002946:	d009      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x74>
 8002948:	e020      	b.n	800298c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800294a:	4b60      	ldr	r3, [pc, #384]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11d      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295a:	e01a      	b.n	8002992 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800295c:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e013      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800297a:	4b54      	ldr	r3, [pc, #336]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800298a:	e006      	b.n	800299a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      break;
 8002990:	e004      	b.n	800299c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002992:	bf00      	nop
 8002994:	e002      	b.n	800299c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299a:	bf00      	nop
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	430b      	orrs	r3, r1
 80029b8:	4944      	ldr	r1, [pc, #272]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d17d      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a40      	ldr	r2, [pc, #256]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe f964 	bl	8000c9c <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d6:	e009      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d8:	f7fe f960 	bl	8000c9c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ea:	e005      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ef      	bne.n	80029d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d160      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6892      	ldr	r2, [r2, #8]
 8002a14:	0211      	lsls	r1, r2, #8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	0912      	lsrs	r2, r2, #4
 8002a1c:	0452      	lsls	r2, r2, #17
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	492a      	ldr	r1, [pc, #168]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	610b      	str	r3, [r1, #16]
 8002a26:	e027      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d112      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6892      	ldr	r2, [r2, #8]
 8002a3e:	0211      	lsls	r1, r2, #8
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6912      	ldr	r2, [r2, #16]
 8002a44:	0852      	lsrs	r2, r2, #1
 8002a46:	3a01      	subs	r2, #1
 8002a48:	0552      	lsls	r2, r2, #21
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	491f      	ldr	r1, [pc, #124]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
 8002a52:	e011      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	0211      	lsls	r1, r2, #8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6952      	ldr	r2, [r2, #20]
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0652      	lsls	r2, r2, #25
 8002a70:	430a      	orrs	r2, r1
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe f90a 	bl	8000c9c <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a8a:	e009      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8c:	f7fe f906 	bl	8000c9c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a9e:	e005      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d018      	beq.n	8002b1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10d      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
       ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
       ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d047      	beq.n	8002ba6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e044      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d018      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0x86>
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d825      	bhi.n	8002b74 <RCCEx_PLLSAI2_Config+0xa4>
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d002      	beq.n	8002b32 <RCCEx_PLLSAI2_Config+0x62>
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d009      	beq.n	8002b44 <RCCEx_PLLSAI2_Config+0x74>
 8002b30:	e020      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b32:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11d      	bne.n	8002b7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b42:	e01a      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b54:	e013      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b62:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b72:	e006      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      break;
 8002b78:	e004      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10d      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	4939      	ldr	r1, [pc, #228]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d167      	bne.n	8002c7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe f870 	bl	8000c9c <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bbe:	e009      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc0:	f7fe f86c 	bl	8000c9c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bd2:	e005      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ef      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d14a      	bne.n	8002c7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	0211      	lsls	r1, r2, #8
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	0912      	lsrs	r2, r2, #4
 8002c04:	0452      	lsls	r2, r2, #17
 8002c06:	430a      	orrs	r2, r1
 8002c08:	491f      	ldr	r1, [pc, #124]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	614b      	str	r3, [r1, #20]
 8002c0e:	e011      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6912      	ldr	r2, [r2, #16]
 8002c26:	0852      	lsrs	r2, r2, #1
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	0652      	lsls	r2, r2, #25
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	4916      	ldr	r1, [pc, #88]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe f82c 	bl	8000c9c <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c48:	f7fe f828 	bl	8000c9c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
          break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e040      	b.n	8002d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fd fd9a 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8a2 	bl	8002e14 <UART_SetConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e022      	b.n	8002d20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fb4e 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fbd5 	bl	80034c8 <UART_CheckIdleState>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d142      	bne.n	8002dc4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_UART_Receive_DMA+0x22>
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e03b      	b.n	8002dc6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Receive_DMA+0x34>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e034      	b.n	8002dc6 <HAL_UART_Receive_DMA+0x9e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_UART_Receive_DMA+0xa8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01f      	beq.n	8002db4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e6      	bne.n	8002d82 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fc92 	bl	80036e4 <UART_Start_Receive_DMA>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	e000      	b.n	8002dc6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40008000 	.word	0x40008000

08002dd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b08a      	sub	sp, #40	; 0x28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4ba4      	ldr	r3, [pc, #656]	; (80030d4 <UART_SetConfig+0x2c0>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a99      	ldr	r2, [pc, #612]	; (80030d8 <UART_SetConfig+0x2c4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a90      	ldr	r2, [pc, #576]	; (80030dc <UART_SetConfig+0x2c8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d126      	bne.n	8002eec <UART_SetConfig+0xd8>
 8002e9e:	4b90      	ldr	r3, [pc, #576]	; (80030e0 <UART_SetConfig+0x2cc>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d81b      	bhi.n	8002ee4 <UART_SetConfig+0xd0>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0xa0>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ed5 	.word	0x08002ed5
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e116      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e112      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e10e      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002edc:	2308      	movs	r3, #8
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e10a      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e106      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <UART_SetConfig+0x2d0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d138      	bne.n	8002f68 <UART_SetConfig+0x154>
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <UART_SetConfig+0x2cc>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d82d      	bhi.n	8002f60 <UART_SetConfig+0x14c>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0xf8>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002f61 	.word	0x08002f61
 8002f18:	08002f61 	.word	0x08002f61
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f61 	.word	0x08002f61
 8002f24:	08002f61 	.word	0x08002f61
 8002f28:	08002f61 	.word	0x08002f61
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f61 	.word	0x08002f61
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f59 	.word	0x08002f59
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e0d8      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e0d4      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e0d0      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e0cc      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e0c8      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5e      	ldr	r2, [pc, #376]	; (80030e8 <UART_SetConfig+0x2d4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d125      	bne.n	8002fbe <UART_SetConfig+0x1aa>
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <UART_SetConfig+0x2cc>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d016      	beq.n	8002fae <UART_SetConfig+0x19a>
 8002f80:	2b30      	cmp	r3, #48	; 0x30
 8002f82:	d818      	bhi.n	8002fb6 <UART_SetConfig+0x1a2>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d00a      	beq.n	8002f9e <UART_SetConfig+0x18a>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d814      	bhi.n	8002fb6 <UART_SetConfig+0x1a2>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <UART_SetConfig+0x182>
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d008      	beq.n	8002fa6 <UART_SetConfig+0x192>
 8002f94:	e00f      	b.n	8002fb6 <UART_SetConfig+0x1a2>
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9c:	e0ad      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa4:	e0a9      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fac:	e0a5      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb4:	e0a1      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbc:	e09d      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <UART_SetConfig+0x2d8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d125      	bne.n	8003014 <UART_SetConfig+0x200>
 8002fc8:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <UART_SetConfig+0x2cc>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fd4:	d016      	beq.n	8003004 <UART_SetConfig+0x1f0>
 8002fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fd8:	d818      	bhi.n	800300c <UART_SetConfig+0x1f8>
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d00a      	beq.n	8002ff4 <UART_SetConfig+0x1e0>
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d814      	bhi.n	800300c <UART_SetConfig+0x1f8>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <UART_SetConfig+0x1d8>
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d008      	beq.n	8002ffc <UART_SetConfig+0x1e8>
 8002fea:	e00f      	b.n	800300c <UART_SetConfig+0x1f8>
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e082      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e07e      	b.n	80030fa <UART_SetConfig+0x2e6>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e07a      	b.n	80030fa <UART_SetConfig+0x2e6>
 8003004:	2308      	movs	r3, #8
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e076      	b.n	80030fa <UART_SetConfig+0x2e6>
 800300c:	2310      	movs	r3, #16
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e072      	b.n	80030fa <UART_SetConfig+0x2e6>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <UART_SetConfig+0x2dc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12a      	bne.n	8003074 <UART_SetConfig+0x260>
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <UART_SetConfig+0x2cc>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302c:	d01a      	beq.n	8003064 <UART_SetConfig+0x250>
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d81b      	bhi.n	800306c <UART_SetConfig+0x258>
 8003034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003038:	d00c      	beq.n	8003054 <UART_SetConfig+0x240>
 800303a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303e:	d815      	bhi.n	800306c <UART_SetConfig+0x258>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <UART_SetConfig+0x238>
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d008      	beq.n	800305c <UART_SetConfig+0x248>
 800304a:	e00f      	b.n	800306c <UART_SetConfig+0x258>
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e052      	b.n	80030fa <UART_SetConfig+0x2e6>
 8003054:	2302      	movs	r3, #2
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e04e      	b.n	80030fa <UART_SetConfig+0x2e6>
 800305c:	2304      	movs	r3, #4
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e04a      	b.n	80030fa <UART_SetConfig+0x2e6>
 8003064:	2308      	movs	r3, #8
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e046      	b.n	80030fa <UART_SetConfig+0x2e6>
 800306c:	2310      	movs	r3, #16
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e042      	b.n	80030fa <UART_SetConfig+0x2e6>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <UART_SetConfig+0x2c4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d13a      	bne.n	80030f4 <UART_SetConfig+0x2e0>
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <UART_SetConfig+0x2cc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308c:	d01a      	beq.n	80030c4 <UART_SetConfig+0x2b0>
 800308e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003092:	d81b      	bhi.n	80030cc <UART_SetConfig+0x2b8>
 8003094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003098:	d00c      	beq.n	80030b4 <UART_SetConfig+0x2a0>
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d815      	bhi.n	80030cc <UART_SetConfig+0x2b8>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <UART_SetConfig+0x298>
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d008      	beq.n	80030bc <UART_SetConfig+0x2a8>
 80030aa:	e00f      	b.n	80030cc <UART_SetConfig+0x2b8>
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e022      	b.n	80030fa <UART_SetConfig+0x2e6>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e01e      	b.n	80030fa <UART_SetConfig+0x2e6>
 80030bc:	2304      	movs	r3, #4
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e01a      	b.n	80030fa <UART_SetConfig+0x2e6>
 80030c4:	2308      	movs	r3, #8
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e016      	b.n	80030fa <UART_SetConfig+0x2e6>
 80030cc:	2310      	movs	r3, #16
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e012      	b.n	80030fa <UART_SetConfig+0x2e6>
 80030d4:	efff69f3 	.word	0xefff69f3
 80030d8:	40008000 	.word	0x40008000
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40004800 	.word	0x40004800
 80030ec:	40004c00 	.word	0x40004c00
 80030f0:	40005000 	.word	0x40005000
 80030f4:	2310      	movs	r3, #16
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a9f      	ldr	r2, [pc, #636]	; (800337c <UART_SetConfig+0x568>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d17a      	bne.n	80031fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003108:	2b08      	cmp	r3, #8
 800310a:	d824      	bhi.n	8003156 <UART_SetConfig+0x342>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0x300>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003139 	.word	0x08003139
 8003118:	08003157 	.word	0x08003157
 800311c:	08003141 	.word	0x08003141
 8003120:	08003157 	.word	0x08003157
 8003124:	08003147 	.word	0x08003147
 8003128:	08003157 	.word	0x08003157
 800312c:	08003157 	.word	0x08003157
 8003130:	08003157 	.word	0x08003157
 8003134:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7ff f860 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 800313c:	61f8      	str	r0, [r7, #28]
        break;
 800313e:	e010      	b.n	8003162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b8f      	ldr	r3, [pc, #572]	; (8003380 <UART_SetConfig+0x56c>)
 8003142:	61fb      	str	r3, [r7, #28]
        break;
 8003144:	e00d      	b.n	8003162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7fe ffc1 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800314a:	61f8      	str	r0, [r7, #28]
        break;
 800314c:	e009      	b.n	8003162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	61fb      	str	r3, [r7, #28]
        break;
 8003154:	e005      	b.n	8003162 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80fb 	beq.w	8003360 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	d305      	bcc.n	8003186 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	d903      	bls.n	800318e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800318c:	e0e8      	b.n	8003360 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2200      	movs	r2, #0
 8003192:	461c      	mov	r4, r3
 8003194:	4615      	mov	r5, r2
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	022b      	lsls	r3, r5, #8
 80031a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031a4:	0222      	lsls	r2, r4, #8
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6849      	ldr	r1, [r1, #4]
 80031aa:	0849      	lsrs	r1, r1, #1
 80031ac:	2000      	movs	r0, #0
 80031ae:	4688      	mov	r8, r1
 80031b0:	4681      	mov	r9, r0
 80031b2:	eb12 0a08 	adds.w	sl, r2, r8
 80031b6:	eb43 0b09 	adc.w	fp, r3, r9
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031c8:	4650      	mov	r0, sl
 80031ca:	4659      	mov	r1, fp
 80031cc:	f7fc fffc 	bl	80001c8 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031de:	d308      	bcc.n	80031f2 <UART_SetConfig+0x3de>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d204      	bcs.n	80031f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	e0b6      	b.n	8003360 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031f8:	e0b2      	b.n	8003360 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d15e      	bne.n	80032c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003208:	2b08      	cmp	r3, #8
 800320a:	d828      	bhi.n	800325e <UART_SetConfig+0x44a>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0x400>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003239 	.word	0x08003239
 8003218:	08003241 	.word	0x08003241
 800321c:	08003249 	.word	0x08003249
 8003220:	0800325f 	.word	0x0800325f
 8003224:	0800324f 	.word	0x0800324f
 8003228:	0800325f 	.word	0x0800325f
 800322c:	0800325f 	.word	0x0800325f
 8003230:	0800325f 	.word	0x0800325f
 8003234:	08003257 	.word	0x08003257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7fe ffe0 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 800323c:	61f8      	str	r0, [r7, #28]
        break;
 800323e:	e014      	b.n	800326a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7fe fff2 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8003244:	61f8      	str	r0, [r7, #28]
        break;
 8003246:	e010      	b.n	800326a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003248:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <UART_SetConfig+0x56c>)
 800324a:	61fb      	str	r3, [r7, #28]
        break;
 800324c:	e00d      	b.n	800326a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324e:	f7fe ff3d 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8003252:	61f8      	str	r0, [r7, #28]
        break;
 8003254:	e009      	b.n	800326a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325a:	61fb      	str	r3, [r7, #28]
        break;
 800325c:	e005      	b.n	800326a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d077      	beq.n	8003360 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005a      	lsls	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	441a      	add	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d916      	bls.n	80032ba <UART_SetConfig+0x4a6>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d212      	bcs.n	80032ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	8afa      	ldrh	r2, [r7, #22]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e052      	b.n	8003360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032c0:	e04e      	b.n	8003360 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d827      	bhi.n	800331a <UART_SetConfig+0x506>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x4bc>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe ff82 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 80032f8:	61f8      	str	r0, [r7, #28]
        break;
 80032fa:	e014      	b.n	8003326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe ff94 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e010      	b.n	8003326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <UART_SetConfig+0x56c>)
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e00d      	b.n	8003326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fedf 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800330e:	61f8      	str	r0, [r7, #28]
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61fb      	str	r3, [r7, #28]
        break;
 8003318:	e005      	b.n	8003326 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003324:	bf00      	nop
    }

    if (pclk != 0U)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085a      	lsrs	r2, r3, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	441a      	add	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	d909      	bls.n	800335a <UART_SetConfig+0x546>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d205      	bcs.n	800335a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	e002      	b.n	8003360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800336c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003370:	4618      	mov	r0, r3
 8003372:	3728      	adds	r7, #40	; 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40008000 	.word	0x40008000
 8003380:	00f42400 	.word	0x00f42400

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01a      	beq.n	800349a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003482:	d10a      	bne.n	800349a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d8:	f7fd fbe0 	bl	8000c9c <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d10e      	bne.n	800350a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f82d 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e023      	b.n	8003552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d10e      	bne.n	8003536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f817 	bl	800355a <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00d      	b.n	8003552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b09c      	sub	sp, #112	; 0x70
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	e0a5      	b.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	f000 80a1 	beq.w	80036b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fd fb91 	bl	8000c9c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <UART_WaitOnFlagUntilTimeout+0x32>
 8003586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003588:	2b00      	cmp	r3, #0
 800358a:	d13e      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a0:	667b      	str	r3, [r7, #100]	; 0x64
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e6      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	663b      	str	r3, [r7, #96]	; 0x60
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3308      	adds	r3, #8
 80035dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035de:	64ba      	str	r2, [r7, #72]	; 0x48
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e5      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e067      	b.n	80036da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d04f      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003626:	d147      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003630:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
 8003652:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	613b      	str	r3, [r7, #16]
   return(result);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	66bb      	str	r3, [r7, #104]	; 0x68
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003684:	623a      	str	r2, [r7, #32]
 8003686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	69f9      	ldr	r1, [r7, #28]
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	61bb      	str	r3, [r7, #24]
   return(result);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e010      	b.n	80036da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f43f af4a 	beq.w	800356c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3770      	adds	r7, #112	; 0x70
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b096      	sub	sp, #88	; 0x58
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2222      	movs	r2, #34	; 0x22
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02b      	beq.n	800376e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a42      	ldr	r2, [pc, #264]	; (8003824 <UART_Start_Receive_DMA+0x140>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a41      	ldr	r2, [pc, #260]	; (8003828 <UART_Start_Receive_DMA+0x144>)
 8003724:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a40      	ldr	r2, [pc, #256]	; (800382c <UART_Start_Receive_DMA+0x148>)
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	2200      	movs	r2, #0
 8003734:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	4619      	mov	r1, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	461a      	mov	r2, r3
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	f7fd fc7d 	bl	8001048 <HAL_DMA_Start_IT>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2210      	movs	r2, #16
 8003758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e055      	b.n	800381a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	657b      	str	r3, [r7, #84]	; 0x54
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
 800379e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e6      	bne.n	800377e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	653b      	str	r3, [r7, #80]	; 0x50
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037d0:	637a      	str	r2, [r7, #52]	; 0x34
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	613b      	str	r3, [r7, #16]
   return(result);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003804:	623a      	str	r2, [r7, #32]
 8003806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	61bb      	str	r3, [r7, #24]
   return(result);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e5      	bne.n	80037e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3758      	adds	r7, #88	; 0x58
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	08003943 	.word	0x08003943
 8003828:	08003a67 	.word	0x08003a67
 800382c:	08003a9f 	.word	0x08003a9f

08003830 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	60bb      	str	r3, [r7, #8]
   return(result);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6979      	ldr	r1, [r7, #20]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	613b      	str	r3, [r7, #16]
   return(result);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e6      	bne.n	8003838 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003870:	bf00      	nop
 8003872:	3724      	adds	r7, #36	; 0x24
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b095      	sub	sp, #84	; 0x54
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
 80038a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e6      	bne.n	8003884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d118      	bne.n	8003924 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003936:	bf00      	nop
 8003938:	3754      	adds	r7, #84	; 0x54
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b09c      	sub	sp, #112	; 0x70
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d170      	bne.n	8003a40 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	2200      	movs	r2, #0
 8003962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397a:	66bb      	str	r3, [r7, #104]	; 0x68
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
 8003986:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800398a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e6      	bne.n	8003966 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	667b      	str	r3, [r7, #100]	; 0x64
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039b8:	647a      	str	r2, [r7, #68]	; 0x44
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e5      	bne.n	8003998 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	623b      	str	r3, [r7, #32]
   return(result);
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e2:	663b      	str	r3, [r7, #96]	; 0x60
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039ec:	633a      	str	r2, [r7, #48]	; 0x30
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e5      	bne.n	80039cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	2220      	movs	r2, #32
 8003a04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d118      	bne.n	8003a40 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a52:	f7ff f9d3 	bl	8002dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a56:	e002      	b.n	8003a5e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003a58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a5a:	f7fc fd37 	bl	80004cc <HAL_UART_RxCpltCallback>
}
 8003a5e:	bf00      	nop
 8003a60:	3770      	adds	r7, #112	; 0x70
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d109      	bne.n	8003a90 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4619      	mov	r1, r3
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff f9b7 	bl	8002dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8e:	e002      	b.n	8003a96 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff f99f 	bl	8002dd4 <HAL_UART_RxHalfCpltCallback>
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d109      	bne.n	8003ada <UART_DMAError+0x3c>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b21      	cmp	r3, #33	; 0x21
 8003aca:	d106      	bne.n	8003ada <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003ad4:	6978      	ldr	r0, [r7, #20]
 8003ad6:	f7ff feab 	bl	8003830 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d109      	bne.n	8003afc <UART_DMAError+0x5e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b22      	cmp	r3, #34	; 0x22
 8003aec:	d106      	bne.n	8003afc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff fec0 	bl	800387c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f7ff f96b 	bl	8002de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f82e 	bl	8003b90 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003bf8 	.word	0x08003bf8
 8003b58:	08003bf8 	.word	0x08003bf8
 8003b5c:	08003bf8 	.word	0x08003bf8
 8003b60:	08003bfc 	.word	0x08003bfc

08003b64 <memcpy>:
 8003b64:	440a      	add	r2, r1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	4770      	bx	lr
 8003b70:	b510      	push	{r4, lr}
 8003b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	d1f9      	bne.n	8003b72 <memcpy+0xe>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <memset>:
 8003b80:	4402      	add	r2, r0
 8003b82:	4603      	mov	r3, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
