
Omnidirectionnnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a384  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800a518  0800a518  0000b518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a950  0800a950  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a950  0800a950  0000b950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a958  0800a958  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a958  0800a958  0000b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a95c  0800a95c  0000b95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a960  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  200001ec  0800ab4c  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800ab4c  0000c7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001427f  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3c  00000000  00000000  0002049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000233d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc1  00000000  00000000  000245a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc4  00000000  00000000  00025361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eee  00000000  00000000  0004e125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5eaf  00000000  00000000  00065013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015aec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c08  00000000  00000000  0015af08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00160b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4fc 	.word	0x0800a4fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a4fc 	.word	0x0800a4fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ea8:	d115      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x3e>
    {
  	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000eae:	f004 f833 	bl	8004f18 <HAL_TIM_OC_Stop>
  	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eb6:	f004 f8c5 	bl	8005044 <HAL_TIM_OC_Stop_IT>

  	htim1.Instance->CNT = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  	htim2.Instance->CNT = 0;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  	stepper.Pos = 0;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
  	stepper.moving = 0;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	721a      	strb	r2, [r3, #8]
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000022c 	.word	0x2000022c
 8000ee4:	20000278 	.word	0x20000278
 8000ee8:	20000594 	.word	0x20000594

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef0:	b0b7      	sub	sp, #220	@ 0xdc
 8000ef2:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f001 fdaa 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f8f8 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 fb7c 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f00:	f000 fb54 	bl	80015ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f04:	f000 faf2 	bl	80014ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f08:	f000 fabc 	bl	8001484 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f0c:	f000 fb1e 	bl	800154c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f10:	f000 f976 	bl	8001200 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f14:	f000 fa38 	bl	8001388 <MX_TIM2_Init>
  MX_CRC_Init();
 8000f18:	f000 f93a 	bl	8001190 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  uint16_t *channel;
  IBUS_Init(&Ibus, &huart1);
 8000f1c:	4965      	ldr	r1, [pc, #404]	@ (80010b4 <main+0x1c8>)
 8000f1e:	4866      	ldr	r0, [pc, #408]	@ (80010b8 <main+0x1cc>)
 8000f20:	f000 ff61 	bl	8001de6 <IBUS_Init>
#ifndef USE_KANGAROO
  Sabertooth_Init(&saber, &huart3, motor ,address);
#else
  Kangaroo_Init(&saber, &huart3, motor, address);
 8000f24:	4b65      	ldr	r3, [pc, #404]	@ (80010bc <main+0x1d0>)
 8000f26:	4a66      	ldr	r2, [pc, #408]	@ (80010c0 <main+0x1d4>)
 8000f28:	4966      	ldr	r1, [pc, #408]	@ (80010c4 <main+0x1d8>)
 8000f2a:	4867      	ldr	r0, [pc, #412]	@ (80010c8 <main+0x1dc>)
 8000f2c:	f001 f8f2 	bl	8002114 <Kangaroo_Init>
#endif
  channel = IBUS_GetChannels(&Ibus);
 8000f30:	4861      	ldr	r0, [pc, #388]	@ (80010b8 <main+0x1cc>)
 8000f32:	f000 fff6 	bl	8001f22 <IBUS_GetChannels>
 8000f36:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

  char msg[150] = {0};
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	2292      	movs	r2, #146	@ 0x92
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 f8d9 	bl	80080fe <memset>
  IBUS_Update(&Ibus);
 8000f4c:	485a      	ldr	r0, [pc, #360]	@ (80010b8 <main+0x1cc>)
 8000f4e:	f000 ff6e 	bl	8001e2e <IBUS_Update>
  tm1637_init(&Display, CLK_GPIO_Port, CLK_Pin, DIO_GPIO_Port, DIO_Pin);
 8000f52:	2304      	movs	r3, #4
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	4b5d      	ldr	r3, [pc, #372]	@ (80010cc <main+0x1e0>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	495c      	ldr	r1, [pc, #368]	@ (80010cc <main+0x1e0>)
 8000f5c:	485c      	ldr	r0, [pc, #368]	@ (80010d0 <main+0x1e4>)
 8000f5e:	f001 fc60 	bl	8002822 <tm1637_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Receiving
	  IBUS_Update(&Ibus);
 8000f62:	4855      	ldr	r0, [pc, #340]	@ (80010b8 <main+0x1cc>)
 8000f64:	f000 ff63 	bl	8001e2e <IBUS_Update>

	//Processing
	  uint16_t swap = channel[0];
 8000f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	  channel[0] = channel[2];
 8000f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f76:	889a      	ldrh	r2, [r3, #4]
 8000f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f7c:	801a      	strh	r2, [r3, #0]
	  channel[1] = swap;
 8000f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f82:	3302      	adds	r3, #2
 8000f84:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	@ 0xaa
 8000f88:	801a      	strh	r2, [r3, #0]
	  channel[2] = channel[3];
 8000f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000f94:	88d2      	ldrh	r2, [r2, #6]
 8000f96:	801a      	strh	r2, [r3, #0]

	  Transform_Omni(channel, command);
 8000f98:	494e      	ldr	r1, [pc, #312]	@ (80010d4 <main+0x1e8>)
 8000f9a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000f9e:	f001 f9c5 	bl	800232c <Transform_Omni>
	  int32_t Estimated_score = floor((channel[8]-1000)/50);
 8000fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fa6:	3310      	adds	r3, #16
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fae:	4a4a      	ldr	r2, [pc, #296]	@ (80010d8 <main+0x1ec>)
 8000fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb4:	1112      	asrs	r2, r2, #4
 8000fb6:	17db      	asrs	r3, r3, #31
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fab2 	bl	8000524 <__aeabi_i2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fdc6 	bl	8000b58 <__aeabi_d2iz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	  tm1637_write_int(&Display, Estimated_score, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000fd8:	483d      	ldr	r0, [pc, #244]	@ (80010d0 <main+0x1e4>)
 8000fda:	f001 fcd5 	bl	8002988 <tm1637_write_int>


	//Controlling
	  if (channel[8]<1500) {
 8000fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d810      	bhi.n	8001010 <main+0x124>
#ifndef USE_KANGAROO
		  Sabertooth_Drive(&saber,Stop);
#else
		  Kangaroo_drive(&saber, Stop);
 8000fee:	493b      	ldr	r1, [pc, #236]	@ (80010dc <main+0x1f0>)
 8000ff0:	4835      	ldr	r0, [pc, #212]	@ (80010c8 <main+0x1dc>)
 8000ff2:	f001 f8e9 	bl	80021c8 <Kangaroo_drive>
#endif
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f002 fb83 	bl	8003708 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, "-", 1, 5);
 8001002:	2305      	movs	r3, #5
 8001004:	2201      	movs	r2, #1
 8001006:	4936      	ldr	r1, [pc, #216]	@ (80010e0 <main+0x1f4>)
 8001008:	4836      	ldr	r0, [pc, #216]	@ (80010e4 <main+0x1f8>)
 800100a:	f005 fa59 	bl	80064c0 <HAL_UART_Transmit>
 800100e:	e009      	b.n	8001024 <main+0x138>
	  }
	  else {
#ifndef USE_KANGAROO
		  Sabertooth_Drive(&saber,command);
#else
		  Kangaroo_drive(&saber, command);
 8001010:	4930      	ldr	r1, [pc, #192]	@ (80010d4 <main+0x1e8>)
 8001012:	482d      	ldr	r0, [pc, #180]	@ (80010c8 <main+0x1dc>)
 8001014:	f001 f8d8 	bl	80021c8 <Kangaroo_drive>
#endif
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	2120      	movs	r1, #32
 800101c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001020:	f002 fb72 	bl	8003708 <HAL_GPIO_WritePin>
	  }
	  sprintf(msg,"%i;%i;%i; ==> %f;%f;%f;%f\r\n",channel[0],channel[1],channel[2],command[0],command[1],command[2],command[3]);
 8001024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001030:	3302      	adds	r3, #2
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800103a:	3304      	adds	r3, #4
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461e      	mov	r6, r3
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <main+0x1e8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <main+0x1e8>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa78 	bl	8000548 <__aeabi_f2d>
 8001058:	4680      	mov	r8, r0
 800105a:	4689      	mov	r9, r1
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <main+0x1e8>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa71 	bl	8000548 <__aeabi_f2d>
 8001066:	4682      	mov	sl, r0
 8001068:	468b      	mov	fp, r1
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <main+0x1e8>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f107 000c 	add.w	r0, r7, #12
 800107c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001080:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001084:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001088:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800108c:	9600      	str	r6, [sp, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4915      	ldr	r1, [pc, #84]	@ (80010e8 <main+0x1fc>)
 8001094:	f006 ffd0 	bl	8008038 <siprintf>
	  //HAL_UART_Transmit(&huart2, "-", 1, 5);


	  //sprintf(msg,"%i,%f;\r\n",channel[0],command[0]);
	  //sprintf(msg,"%i;%i;%i;%i;%i;%i;%i;%i;%i;%i\r\n",channel[0],channel[1],channel[2],channel[3],channel[4],channel[5],channel[6],channel[7],channel[8],channel[9]);
	  HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f8e7 	bl	8000270 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	2364      	movs	r3, #100	@ 0x64
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <main+0x1f8>)
 80010ae:	f005 fa07 	bl	80064c0 <HAL_UART_Transmit>
  {
 80010b2:	e756      	b.n	8000f62 <main+0x76>
 80010b4:	200002c4 	.word	0x200002c4
 80010b8:	200004ec 	.word	0x200004ec
 80010bc:	20000004 	.word	0x20000004
 80010c0:	20000000 	.word	0x20000000
 80010c4:	200003d4 	.word	0x200003d4
 80010c8:	20000660 	.word	0x20000660
 80010cc:	48000400 	.word	0x48000400
 80010d0:	20000584 	.word	0x20000584
 80010d4:	20000650 	.word	0x20000650
 80010d8:	51eb851f 	.word	0x51eb851f
 80010dc:	20000640 	.word	0x20000640
 80010e0:	0800a518 	.word	0x0800a518
 80010e4:	2000034c 	.word	0x2000034c
 80010e8:	0800a51c 	.word	0x0800a51c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	@ 0x58
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2244      	movs	r2, #68	@ 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 ffff 	bl	80080fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001112:	f002 fb37 	bl	8003784 <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800111c:	f000 fafe 	bl	800171c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001128:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112a:	2310      	movs	r3, #16
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800113a:	230a      	movs	r3, #10
 800113c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800113e:	2307      	movs	r3, #7
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fb6e 	bl	8003830 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800115a:	f000 fadf 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f002 ff36 	bl	8003fe8 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 facb 	bl	800171c <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3758      	adds	r7, #88	@ 0x58
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_CRC_Init+0x68>)
 8001196:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <MX_CRC_Init+0x6c>)
 8001198:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <MX_CRC_Init+0x68>)
 800119c:	2201      	movs	r2, #1
 800119e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 9169;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011a8:	f242 32d1 	movw	r2, #9169	@ 0x23d1
 80011ac:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = 14;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011c8:	f001 fdf2 	bl	8002db0 <HAL_CRC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_CRC_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 faa3 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  	hcrc.Init.GeneratingPolynomial = 8680;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011d8:	f242 12e8 	movw	r2, #8680	@ 0x21e8
 80011dc:	609a      	str	r2, [r3, #8]
    hcrc.Init.CRCLength = 14;
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011e0:	220e      	movs	r2, #14
 80011e2:	60da      	str	r2, [r3, #12]
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_CRC_Init+0x68>)
 80011e6:	f001 fde3 	bl	8002db0 <HAL_CRC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_CRC_Init+0x64>
      {
        Error_Handler();
 80011f0:	f000 fa94 	bl	800171c <Error_Handler>
      }
  /* USER CODE END CRC_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000208 	.word	0x20000208
 80011fc:	40023000 	.word	0x40023000

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b09e      	sub	sp, #120	@ 0x78
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001214:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	222c      	movs	r2, #44	@ 0x2c
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f006 ff57 	bl	80080fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001250:	4b4b      	ldr	r3, [pc, #300]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001252:	4a4c      	ldr	r2, [pc, #304]	@ (8001384 <MX_TIM1_Init+0x184>)
 8001254:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001256:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b48      	ldr	r3, [pc, #288]	@ (8001380 <MX_TIM1_Init+0x180>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001264:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b45      	ldr	r3, [pc, #276]	@ (8001380 <MX_TIM1_Init+0x180>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001270:	4b43      	ldr	r3, [pc, #268]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127c:	4840      	ldr	r0, [pc, #256]	@ (8001380 <MX_TIM1_Init+0x180>)
 800127e:	f003 fd93 	bl	8004da8 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 fa48 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001290:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001296:	4619      	mov	r1, r3
 8001298:	4839      	ldr	r0, [pc, #228]	@ (8001380 <MX_TIM1_Init+0x180>)
 800129a:	f004 f993 	bl	80055c4 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a4:	f000 fa3a 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80012a8:	4835      	ldr	r0, [pc, #212]	@ (8001380 <MX_TIM1_Init+0x180>)
 80012aa:	f003 fdd4 	bl	8004e56 <HAL_TIM_OC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80012b4:	f000 fa32 	bl	800171c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80012b8:	2305      	movs	r3, #5
 80012ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80012bc:	2310      	movs	r3, #16
 80012be:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	@ (8001380 <MX_TIM1_Init+0x180>)
 80012c8:	f004 fa45 	bl	8005756 <HAL_TIM_SlaveConfigSynchro>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012d2:	f000 fa23 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80012d6:	2330      	movs	r3, #48	@ 0x30
 80012d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012e6:	4619      	mov	r1, r3
 80012e8:	4825      	ldr	r0, [pc, #148]	@ (8001380 <MX_TIM1_Init+0x180>)
 80012ea:	f004 ff77 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012f4:	f000 fa12 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80012f8:	2310      	movs	r3, #16
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 12500;
 80012fc:	f243 03d4 	movw	r3, #12500	@ 0x30d4
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001320:	f004 f8d6 	bl	80054d0 <HAL_TIM_OC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800132a:	f000 f9f7 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001342:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001350:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001354:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001364:	f004 ffc2 	bl	80062ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800136e:	f000 f9d5 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <MX_TIM1_Init+0x180>)
 8001374:	f000 fa5c 	bl	8001830 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3778      	adds	r7, #120	@ 0x78
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000022c 	.word	0x2000022c
 8001384:	40012c00 	.word	0x40012c00

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b090      	sub	sp, #64	@ 0x40
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800138e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013cc:	2210      	movs	r2, #16
 80013ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14*3200;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013d2:	f44f 422f 	mov.w	r2, #44800	@ 0xaf00
 80013d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013de:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e4:	4826      	ldr	r0, [pc, #152]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013e6:	f003 fcdf 	bl	8004da8 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80013f0:	f000 f994 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013f4:	4822      	ldr	r0, [pc, #136]	@ (8001480 <MX_TIM2_Init+0xf8>)
 80013f6:	f003 fd2e 	bl	8004e56 <HAL_TIM_OC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001400:	f000 f98c 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001404:	2108      	movs	r1, #8
 8001406:	481e      	ldr	r0, [pc, #120]	@ (8001480 <MX_TIM2_Init+0xf8>)
 8001408:	f003 ff00 	bl	800520c <HAL_TIM_OnePulse_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001412:	f000 f983 	bl	800171c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001416:	2307      	movs	r3, #7
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	4816      	ldr	r0, [pc, #88]	@ (8001480 <MX_TIM2_Init+0xf8>)
 8001426:	f004 f996 	bl	8005756 <HAL_TIM_SlaveConfigSynchro>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001430:	f000 f974 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001434:	2340      	movs	r3, #64	@ 0x40
 8001436:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4619      	mov	r1, r3
 8001442:	480f      	ldr	r0, [pc, #60]	@ (8001480 <MX_TIM2_Init+0xf8>)
 8001444:	f004 feca 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800144e:	f000 f965 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001452:	2310      	movs	r3, #16
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM2_Init+0xf8>)
 800146a:	f004 f831 	bl	80054d0 <HAL_TIM_OC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001474:	f000 f952 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3740      	adds	r7, #64	@ 0x40
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000278 	.word	0x20000278

08001484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <MX_USART1_UART_Init+0x64>)
 800148c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014aa:	2204      	movs	r2, #4
 80014ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_USART1_UART_Init+0x60>)
 80014d0:	f004 ffa8 	bl	8006424 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80014da:	f000 f91f 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002c4 	.word	0x200002c4
 80014e8:	40013800 	.word	0x40013800

080014ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <MX_USART2_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001530:	f004 ff78 	bl	8006424 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 f8ef 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000034c 	.word	0x2000034c
 8001548:	40004400 	.word	0x40004400

0800154c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <MX_USART3_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001558:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800155c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001572:	2208      	movs	r2, #8
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_USART3_UART_Init+0x58>)
 8001590:	f004 ff48 	bl	8006424 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 f8bf 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200003d4 	.word	0x200003d4
 80015a8:	40004800 	.word	0x40004800

080015ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MX_DMA_Init+0x48>)
 80015b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <MX_DMA_Init+0x48>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <MX_DMA_Init+0x48>)
 80015c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	200c      	movs	r0, #12
 80015d0:	f001 fbb7 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015d4:	200c      	movs	r0, #12
 80015d6:	f001 fbd0 	bl	8002d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200f      	movs	r0, #15
 80015e0:	f001 fbaf 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015e4:	200f      	movs	r0, #15
 80015e6:	f001 fbc8 	bl	8002d7a <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a3f      	ldr	r2, [pc, #252]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <MX_GPIO_Init+0x118>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001626:	4b3a      	ldr	r3, [pc, #232]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a39      	ldr	r2, [pc, #228]	@ (8001710 <MX_GPIO_Init+0x118>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a33      	ldr	r2, [pc, #204]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <MX_GPIO_Init+0x118>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <MX_GPIO_Init+0x118>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <MX_GPIO_Init+0x118>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f002 f847 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIO_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2106      	movs	r1, #6
 800167e:	4825      	ldr	r0, [pc, #148]	@ (8001714 <MX_GPIO_Init+0x11c>)
 8001680:	f002 f842 	bl	8003708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	481f      	ldr	r0, [pc, #124]	@ (8001718 <MX_GPIO_Init+0x120>)
 800169c:	f001 fe72 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a0:	2320      	movs	r3, #32
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f001 fe63 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DIO_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIO_Pin;
 80016be:	2306      	movs	r3, #6
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480f      	ldr	r0, [pc, #60]	@ (8001714 <MX_GPIO_Init+0x11c>)
 80016d6:	f001 fe55 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : Endstop_Pin */
  GPIO_InitStruct.Pin = Endstop_Pin;
 80016da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Endstop_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	@ (8001718 <MX_GPIO_Init+0x120>)
 80016f2:	f001 fe47 	bl	8003384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2017      	movs	r0, #23
 80016fc:	f001 fb21 	bl	8002d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001700:	2017      	movs	r0, #23
 8001702:	f001 fb3a 	bl	8002d7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	48000400 	.word	0x48000400
 8001718:	48000800 	.word	0x48000800

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_MspInit+0x44>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6613      	str	r3, [r2, #96]	@ 0x60
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_MspInit+0x44>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_CRC_MspInit+0x38>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10b      	bne.n	800179a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_CRC_MspInit+0x3c>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <HAL_CRC_MspInit+0x3c>)
 8001788:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800178c:	6493      	str	r3, [r2, #72]	@ 0x48
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <HAL_CRC_MspInit+0x3c>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023000 	.word	0x40023000
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001828 <HAL_TIM_Base_MspInit+0x78>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d114      	bne.n	80017ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	4a19      	ldr	r2, [pc, #100]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	201a      	movs	r0, #26
 80017e0:	f001 faaf 	bl	8002d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017e4:	201a      	movs	r0, #26
 80017e6:	f001 fac8 	bl	8002d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ea:	e018      	b.n	800181e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f4:	d113      	bne.n	800181e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6593      	str	r3, [r2, #88]	@ 0x58
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_TIM_Base_MspInit+0x7c>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	201c      	movs	r0, #28
 8001814:	f001 fa95 	bl	8002d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001818:	201c      	movs	r0, #28
 800181a:	f001 faae 	bl	8002d7a <HAL_NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_TIM_MspPostInit+0x68>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11d      	bne.n	800188e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_TIM_MspPostInit+0x6c>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f001 fd7b 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0b0      	sub	sp, #192	@ 0xc0
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018bc:	2288      	movs	r2, #136	@ 0x88
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f006 fc1c 	bl	80080fe <memset>
  if(huart->Instance==USART1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a8d      	ldr	r2, [pc, #564]	@ (8001b00 <HAL_UART_MspInit+0x260>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d167      	bne.n	80019a0 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d4:	2300      	movs	r3, #0
 80018d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fda7 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e8:	f7ff ff18 	bl	800171c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ec:	4b85      	ldr	r3, [pc, #532]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f0:	4a84      	ldr	r2, [pc, #528]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f8:	4b82      	ldr	r3, [pc, #520]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001900:	623b      	str	r3, [r7, #32]
 8001902:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b7f      	ldr	r3, [pc, #508]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a7e      	ldr	r2, [pc, #504]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b7c      	ldr	r3, [pc, #496]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800191c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001936:	2307      	movs	r3, #7
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001946:	f001 fd1d 	bl	8003384 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800194a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 800194c:	4a6f      	ldr	r2, [pc, #444]	@ (8001b0c <HAL_UART_MspInit+0x26c>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001950:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001952:	2202      	movs	r2, #2
 8001954:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001956:	4b6c      	ldr	r3, [pc, #432]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001962:	4b69      	ldr	r3, [pc, #420]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001968:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196e:	4b66      	ldr	r3, [pc, #408]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001974:	4b64      	ldr	r3, [pc, #400]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001976:	2220      	movs	r2, #32
 8001978:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800197a:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 800197c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001980:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001982:	4861      	ldr	r0, [pc, #388]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001984:	f001 fb06 	bl	8002f94 <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800198e:	f7ff fec5 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 8001996:	675a      	str	r2, [r3, #116]	@ 0x74
 8001998:	4a5b      	ldr	r2, [pc, #364]	@ (8001b08 <HAL_UART_MspInit+0x268>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800199e:	e0aa      	b.n	8001af6 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b10 <HAL_UART_MspInit+0x270>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13c      	bne.n	8001a24 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fd3a 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_UART_MspInit+0x126>
      Error_Handler();
 80019c2:	f7ff feab 	bl	800171c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	4a48      	ldr	r2, [pc, #288]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f6:	230c      	movs	r3, #12
 80019f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f001 fcb1 	bl	8003384 <HAL_GPIO_Init>
}
 8001a22:	e068      	b.n	8001af6 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a3a      	ldr	r2, [pc, #232]	@ (8001b14 <HAL_UART_MspInit+0x274>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d163      	bne.n	8001af6 <HAL_UART_MspInit+0x256>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fcf8 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8001a46:	f7ff fe69 	bl	800171c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a27      	ldr	r2, [pc, #156]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_UART_MspInit+0x264>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a7a:	2330      	movs	r3, #48	@ 0x30
 8001a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a92:	2307      	movs	r3, #7
 8001a94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481e      	ldr	r0, [pc, #120]	@ (8001b18 <HAL_UART_MspInit+0x278>)
 8001aa0:	f001 fc70 	bl	8003384 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b20 <HAL_UART_MspInit+0x280>)
 8001aa8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ada:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001adc:	f001 fa5a 	bl	8002f94 <HAL_DMA_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001ae6:	f7ff fe19 	bl	800171c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001aee:	671a      	str	r2, [r3, #112]	@ 0x70
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_UART_MspInit+0x27c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001af6:	bf00      	nop
 8001af8:	37c0      	adds	r7, #192	@ 0xc0
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40021000 	.word	0x40021000
 8001b08:	2000045c 	.word	0x2000045c
 8001b0c:	40020058 	.word	0x40020058
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40004800 	.word	0x40004800
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	200004a4 	.word	0x200004a4
 8001b20:	4002001c 	.word	0x4002001c

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 ffc3 	bl	8002b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8a:	f001 fb1b 	bl	80031c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200004a4 	.word	0x200004a4

08001b98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <DMA1_Channel5_IRQHandler+0x10>)
 8001b9e:	f001 fb11 	bl	80031c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000045c 	.word	0x2000045c

08001bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Endstop_Pin);
 8001bb0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bb4:	f001 fdc0 	bl	8003738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001bc2:	f003 fb7d 	bl	80052c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000022c 	.word	0x2000022c

08001bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <TIM2_IRQHandler+0x10>)
 8001bd6:	f003 fb73 	bl	80052c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000278 	.word	0x20000278

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfe:	f006 fad1 	bl	80081a4 <__errno>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
  return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffe7 	bl	8001bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c26:	bf00      	nop
 8001c28:	e7fd      	b.n	8001c26 <_exit+0x12>

08001c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e00a      	b.n	8001c52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3c:	f3af 8000 	nop.w
 8001c40:	4601      	mov	r1, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	b2ca      	uxtb	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf0      	blt.n	8001c3c <_read+0x12>
  }

  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e009      	b.n	8001c8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbf1      	blt.n	8001c76 <_write+0x12>
  }
  return len;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_close>:

int _close(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_isatty>:

int _isatty(int file)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 fa36 	bl	80081a4 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20018000 	.word	0x20018000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000678 	.word	0x20000678
 8001d6c:	200007d0 	.word	0x200007d0

08001d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d98:	f7ff ffea 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopForever+0xe>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopForever+0x16>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 f9f5 	bl	80081b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc6:	f7ff f891 	bl	8000eec <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001dd8:	0800a960 	.word	0x0800a960
  ldr r2, =_sbss
 8001ddc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001de0:	200007d0 	.word	0x200007d0

08001de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_2_IRQHandler>

08001de6 <IBUS_Init>:
		checksum -= value[i];
	}
	return checksum;
}

HAL_StatusTypeDef IBUS_Init(IBus_struct *Ibus, UART_HandleTypeDef *handle) {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
	memset(Ibus->channel, 1500, 6 * sizeof(uint16_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	220c      	movs	r2, #12
 8001df6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 f97f 	bl	80080fe <memset>
	Ibus->handle = handle;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	601a      	str	r2, [r3, #0]
	memset(Ibus->UARTBuffer, 0, 128);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 f975 	bl	80080fe <memset>
	return HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 128);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f004 fc54 	bl	80066cc <HAL_UART_Receive_DMA>
 8001e24:	4603      	mov	r3, r0

}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <IBUS_Update>:

HAL_StatusTypeDef IBUS_Update(IBus_struct *Ibus) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b094      	sub	sp, #80	@ 0x50
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(Ibus->handle, Ibus->UARTBuffer, 64);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	4619      	mov	r1, r3
 8001e42:	f004 fc43 	bl	80066cc <HAL_UART_Receive_DMA>
	uint8_t Packet[64] = { 0 };
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	223c      	movs	r2, #60	@ 0x3c
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 f953 	bl	80080fe <memset>
	uint16_t packetStart = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001e64:	e018      	b.n	8001e98 <IBUS_Update+0x6a>
		if (Ibus->UARTBuffer[i] == 0x20 && Ibus->UARTBuffer[i + 1] == 0x40) {
 8001e66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d10c      	bne.n	8001e8e <IBUS_Update+0x60>
 8001e74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e78:	3301      	adds	r3, #1
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	7e1b      	ldrb	r3, [r3, #24]
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d104      	bne.n	8001e8e <IBUS_Update+0x60>
			packetStart = i;
 8001e84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			break;
 8001e8c:	e008      	b.n	8001ea0 <IBUS_Update+0x72>
	for (uint16_t i = 0; i < 64 - 1; i++) {
 8001e8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e92:	3301      	adds	r3, #1
 8001e94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001e98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e9e:	d9e2      	bls.n	8001e66 <IBUS_Update+0x38>
		}
	}
	if (packetStart >= 64) {
 8001ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ea4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea6:	d901      	bls.n	8001eac <IBUS_Update+0x7e>
		return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e036      	b.n	8001f1a <IBUS_Update+0xec>
	}
	memcpy(Packet, Ibus->UARTBuffer + packetStart + 2, 32);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 0218 	add.w	r2, r3, #24
 8001eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	18d1      	adds	r1, r2, r3
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f006 f99c 	bl	80081fe <memcpy>



	for (uint16_t i = 0; i < 10	; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001ecc:	e020      	b.n	8001f10 <IBUS_Update+0xe2>
		Ibus->channel[i] = (Packet[2 * i + 1] << 8) | Packet[2 * i];
 8001ece:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	3350      	adds	r3, #80	@ 0x50
 8001ed8:	443b      	add	r3, r7
 8001eda:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	3350      	adds	r3, #80	@ 0x50
 8001eea:	443b      	add	r3, r7
 8001eec:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001efa:	b291      	uxth	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	460a      	mov	r2, r1
 8001f04:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < 10	; i++) {
 8001f06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001f10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d9da      	bls.n	8001ece <IBUS_Update+0xa0>

	}
	return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3750      	adds	r7, #80	@ 0x50
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <IBUS_GetChannels>:
uint16_t* IBUS_GetChannels(IBus_struct *Ibus) {
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	return Ibus->channel;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <bitpackNumber>:
#include "Kangaroo.h"
static uint8_t Packet_number =1;

size_t bitpackNumber(uint8_t* buffer, int32_t number)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
 size_t i = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

 if (number < 0) { number = -number; number <<= 1; number |= 1; }
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da0a      	bge.n	8001f64 <bitpackNumber+0x2a>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	425b      	negs	r3, r3
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	e01d      	b.n	8001fa0 <bitpackNumber+0x66>
 else { number <<= 1; }
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	603b      	str	r3, [r7, #0]

 while (i < 5)
 8001f6a:	e019      	b.n	8001fa0 <bitpackNumber+0x66>
 {
 buffer[i ++] = (number & 0x3f) | (number >= 0x40 ? 0x40 : 0x00);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	2a3f      	cmp	r2, #63	@ 0x3f
 8001f7a:	dd01      	ble.n	8001f80 <bitpackNumber+0x46>
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	e000      	b.n	8001f82 <bitpackNumber+0x48>
 8001f80:	2200      	movs	r2, #0
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b259      	sxtb	r1, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2ca      	uxtb	r2, r1
 8001f92:	701a      	strb	r2, [r3, #0]
 number >>= 6; if (!number) { break; }
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	119b      	asrs	r3, r3, #6
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <bitpackNumber+0x6e>
 while (i < 5)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d9e2      	bls.n	8001f6c <bitpackNumber+0x32>
 8001fa6:	e000      	b.n	8001faa <bitpackNumber+0x70>
 number >>= 6; if (!number) { break; }
 8001fa8:	bf00      	nop
 }

 return i;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <crc14>:

uint16_t crc14(const uint8_t* data, size_t length)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
 uint16_t crc = 0x3fff; size_t i, bit;
 8001fc2:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001fc6:	82fb      	strh	r3, [r7, #22]
 for (i = 0; i < length; i ++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e02a      	b.n	8002024 <crc14+0x6c>
 {
 crc ^= data[i] & 0x7f;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe2:	4053      	eors	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	82fb      	strh	r3, [r7, #22]
 for (bit = 0; bit < 7; bit ++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e014      	b.n	8002018 <crc14+0x60>
 {
 if (crc & 1) { crc >>= 1; crc ^= 0x22f0; }
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <crc14+0x54>
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	82fb      	strh	r3, [r7, #22]
 8001ffe:	8afb      	ldrh	r3, [r7, #22]
 8002000:	f483 530b 	eor.w	r3, r3, #8896	@ 0x22c0
 8002004:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002008:	82fb      	strh	r3, [r7, #22]
 800200a:	e002      	b.n	8002012 <crc14+0x5a>
 else { crc >>= 1; }
 800200c:	8afb      	ldrh	r3, [r7, #22]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	82fb      	strh	r3, [r7, #22]
 for (bit = 0; bit < 7; bit ++)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b06      	cmp	r3, #6
 800201c:	d9e7      	bls.n	8001fee <crc14+0x36>
 for (i = 0; i < length; i ++)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	3301      	adds	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3d0      	bcc.n	8001fce <crc14+0x16>
 }
 }
 return crc ^ 0x3fff;
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	f483 537f 	eor.w	r3, r3, #16320	@ 0x3fc0
 8002032:	f083 033f 	eor.w	r3, r3, #63	@ 0x3f
 8002036:	b29b      	uxth	r3, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <Kangaroo_Send>:


HAL_StatusTypeDef Kangaroo_Send(Sabertooth *saber, uint8_t adress,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b096      	sub	sp, #88	@ 0x58
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	72fb      	strb	r3, [r7, #11]
 8002052:	4613      	mov	r3, r2
 8002054:	72bb      	strb	r3, [r7, #10]
	uint8_t Packet[64] = {0};
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	223c      	movs	r2, #60	@ 0x3c
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f006 f84b 	bl	80080fe <memset>
	uint16_t crc;
	Packet[0] = adress;
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	743b      	strb	r3, [r7, #16]
	Packet[1]= command;
 800206c:	7abb      	ldrb	r3, [r7, #10]
 800206e:	747b      	strb	r3, [r7, #17]
	Packet[2] = data_length;
 8002070:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002074:	b2db      	uxtb	r3, r3
 8002076:	74bb      	strb	r3, [r7, #18]
	for (int i =0;i<data_length;i++) {
 8002078:	2300      	movs	r3, #0
 800207a:	657b      	str	r3, [r7, #84]	@ 0x54
 800207c:	e00c      	b.n	8002098 <Kangaroo_Send+0x54>
		Packet[3+i]=data[i];
 800207e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	441a      	add	r2, r3
 8002084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002086:	3303      	adds	r3, #3
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	3358      	adds	r3, #88	@ 0x58
 800208c:	443b      	add	r3, r7
 800208e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (int i =0;i<data_length;i++) {
 8002092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002094:	3301      	adds	r3, #1
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
 8002098:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800209c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbed      	blt.n	800207e <Kangaroo_Send+0x3a>

	}
	crc = crc14(Packet, 3 + data_length);
 80020a2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80020a6:	3303      	adds	r3, #3
 80020a8:	461a      	mov	r2, r3
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff81 	bl	8001fb8 <crc14>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	//uint32_t out = HAL_CRC_Calculate(saber->crc, Packet, 3+data_length);
	Packet[3+data_length]= crc & 0x7f;
 80020bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80020c6:	3303      	adds	r3, #3
 80020c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	3358      	adds	r3, #88	@ 0x58
 80020d0:	443b      	add	r3, r7
 80020d2:	f803 2c48 	strb.w	r2, [r3, #-72]
	Packet[4+data_length]= (crc >> 7) & 0x7f;
 80020d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80020da:	09db      	lsrs	r3, r3, #7
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80020e4:	3304      	adds	r3, #4
 80020e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	3358      	adds	r3, #88	@ 0x58
 80020ee:	443b      	add	r3, r7
 80020f0:	f803 2c48 	strb.w	r2, [r3, #-72]
	HAL_UART_Transmit(saber->handle,Packet,5+data_length,10);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80020fc:	3305      	adds	r3, #5
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f107 0110 	add.w	r1, r7, #16
 8002104:	230a      	movs	r3, #10
 8002106:	f004 f9db 	bl	80064c0 <HAL_UART_Transmit>

	return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3758      	adds	r7, #88	@ 0x58
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <Kangaroo_Init>:
;
HAL_StatusTypeDef Kangaroo_Init(Sabertooth *saber, UART_HandleTypeDef *handle,
		uint8_t motor[4], uint8_t adress[4]) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
	//sabertooth_ptr = saber;
	for (int i = 0; i < 4; i++) {
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e016      	b.n	8002156 <Kangaroo_Init+0x42>
		saber->adress[i] = adress[i];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	7819      	ldrb	r1, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	460a      	mov	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
		saber->motor[i] = motor[i];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	7819      	ldrb	r1, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	3308      	adds	r3, #8
 800214c:	460a      	mov	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3301      	adds	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b03      	cmp	r3, #3
 800215a:	dde5      	ble.n	8002128 <Kangaroo_Init+0x14>
	}
	saber->handle = handle;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	601a      	str	r2, [r3, #0]
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	for (int i =0;i<4;i++) {
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e024      	b.n	80021b2 <Kangaroo_Init+0x9e>
		uint8_t data[3] = {saber->motor[i]?'1':'2',64,Packet_number};
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4413      	add	r3, r2
 800216e:	3308      	adds	r3, #8
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <Kangaroo_Init+0x66>
 8002176:	2331      	movs	r3, #49	@ 0x31
 8002178:	e000      	b.n	800217c <Kangaroo_Init+0x68>
 800217a:	2332      	movs	r3, #50	@ 0x32
 800217c:	753b      	strb	r3, [r7, #20]
 800217e:	2340      	movs	r3, #64	@ 0x40
 8002180:	757b      	strb	r3, [r7, #21]
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <Kangaroo_Init+0xb0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	75bb      	strb	r3, [r7, #22]
		Packet_number++;
 8002188:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <Kangaroo_Init+0xb0>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <Kangaroo_Init+0xb0>)
 8002192:	701a      	strb	r2, [r3, #0]
		Kangaroo_Send(saber, adress[i], 32, data, 3); //32 --> Start packet
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	7819      	ldrb	r1, [r3, #0]
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2203      	movs	r2, #3
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff4c 	bl	8002044 <Kangaroo_Send>
	for (int i =0;i<4;i++) {
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	ddd7      	ble.n	8002168 <Kangaroo_Init+0x54>

	}


	return HAL_OK;
 80021b8:	2300      	movs	r3, #0




}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <Kangaroo_drive>:
;



HAL_StatusTypeDef Kangaroo_drive(Sabertooth *saber, float command[4]) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	for (int i =0;i<4;i++) {
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d6:	e054      	b.n	8002282 <Kangaroo_drive+0xba>
	uint8_t data[14]; size_t length = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
	 data[length ++] = saber->motor[i]?'1':'2';
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	4413      	add	r3, r2
 80021e2:	3308      	adds	r3, #8
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <Kangaroo_drive+0x26>
 80021ea:	2131      	movs	r1, #49	@ 0x31
 80021ec:	e000      	b.n	80021f0 <Kangaroo_drive+0x28>
 80021ee:	2132      	movs	r1, #50	@ 0x32
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	623a      	str	r2, [r7, #32]
 80021f6:	3328      	adds	r3, #40	@ 0x28
 80021f8:	443b      	add	r3, r7
 80021fa:	460a      	mov	r2, r1
 80021fc:	f803 2c20 	strb.w	r2, [r3, #-32]
	 data[length ++] = 0; // move flags
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	623a      	str	r2, [r7, #32]
 8002206:	3328      	adds	r3, #40	@ 0x28
 8002208:	443b      	add	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	f803 2c20 	strb.w	r2, [r3, #-32]

	 data[length ++] = 2; // Speed
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	623a      	str	r2, [r7, #32]
 8002216:	3328      	adds	r3, #40	@ 0x28
 8002218:	443b      	add	r3, r7
 800221a:	2202      	movs	r2, #2
 800221c:	f803 2c20 	strb.w	r2, [r3, #-32]
	 float speedf = (command[i]*SPEED_CONSTANT);
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4413      	add	r3, r2
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002294 <Kangaroo_drive+0xcc>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	edc7 7a07 	vstr	s15, [r7, #28]
	 int32_t speed = (int32_t) speedf;
 8002238:	edd7 7a07 	vldr	s15, [r7, #28]
 800223c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002240:	ee17 3a90 	vmov	r3, s15
 8002244:	61bb      	str	r3, [r7, #24]
	 length += bitpackNumber(&data[length], speed);
 8002246:	f107 0208 	add.w	r2, r7, #8
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	4413      	add	r3, r2
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe72 	bl	8001f3a <bitpackNumber>
 8002256:	4602      	mov	r2, r0
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	4413      	add	r3, r2
 800225c:	623b      	str	r3, [r7, #32]
	 Sabertooth_Send(saber, saber->adress[i], 36, data, length);
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	2224      	movs	r2, #36	@ 0x24
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f956 	bl	8002528 <Sabertooth_Send>
	for (int i =0;i<4;i++) {
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	3301      	adds	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	2b03      	cmp	r3, #3
 8002286:	dda7      	ble.n	80021d8 <Kangaroo_drive+0x10>
				Sabertooth_Send(saber, saber->adress[i], 4 * saber->motor[i] + 1,
						&data, 1);
			}
		}*/

		return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3728      	adds	r7, #40	@ 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	42c80000 	.word	0x42c80000

08002298 <CurveInput>:
#include "Omnidirection.h"
float exponent[3] = {2,2,2};


void CurveInput(float input[3]) {
 8002298:	b580      	push	{r7, lr}
 800229a:	ed2d 8b02 	vpush	{d8}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	for (int i =0;i<3;i++) {
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e034      	b.n	8002314 <CurveInput+0x7c>
		input[i] =expf( fabsf(input[i]) * exponent[i] )*input[i]/expf(exponent[i]);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eeb0 7ae7 	vabs.f32	s14, s15
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <CurveInput+0x90>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	eeb0 0a67 	vmov.f32	s0, s15
 80022ce:	f007 ffe1 	bl	800a294 <expf>
 80022d2:	eeb0 7a40 	vmov.f32	s14, s0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <CurveInput+0x90>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	eeb0 0a67 	vmov.f32	s0, s15
 80022f6:	f007 ffcd 	bl	800a294 <expf>
 80022fa:	eeb0 7a40 	vmov.f32	s14, s0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800230a:	edc3 7a00 	vstr	s15, [r3]
	for (int i =0;i<3;i++) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b02      	cmp	r3, #2
 8002318:	ddc7      	ble.n	80022aa <CurveInput+0x12>
	}
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	ecbd 8b02 	vpop	{d8}
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000010 	.word	0x20000010

0800232c <Transform_Omni>:
HAL_StatusTypeDef Transform_Omni(uint16_t Channel[3], float output[4]) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	float input[3] = { 0 };
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
	int8_t forward[4] = { 1, 1, 1, 1 };
 8002342:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8002346:	613b      	str	r3, [r7, #16]
	int8_t right[4] = { 1, -1, -1, 1 };
 8002348:	4b55      	ldr	r3, [pc, #340]	@ (80024a0 <Transform_Omni+0x174>)
 800234a:	60fb      	str	r3, [r7, #12]
	int8_t rotate_c[4] = { 1, 1, -1, -1 };
 800234c:	4b55      	ldr	r3, [pc, #340]	@ (80024a4 <Transform_Omni+0x178>)
 800234e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; i++) {
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	e032      	b.n	80023bc <Transform_Omni+0x90>
		input[i] = ((float) Channel[i] - 1500) / 500;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002368:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80024a8 <Transform_Omni+0x17c>
 800236c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002370:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80024ac <Transform_Omni+0x180>
 8002374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3328      	adds	r3, #40	@ 0x28
 800237e:	443b      	add	r3, r7
 8002380:	3b14      	subs	r3, #20
 8002382:	edc3 7a00 	vstr	s15, [r3]
		if (Channel[i] <500 || Channel[i] >2000) {
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002394:	d307      	bcc.n	80023a6 <Transform_Omni+0x7a>
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023a4:	d907      	bls.n	80023b6 <Transform_Omni+0x8a>
			input[i]=0;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	3328      	adds	r3, #40	@ 0x28
 80023ac:	443b      	add	r3, r7
 80023ae:	3b14      	subs	r3, #20
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	3301      	adds	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	2b02      	cmp	r3, #2
 80023c0:	ddc9      	ble.n	8002356 <Transform_Omni+0x2a>
		}

	}
	CurveInput(input);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff66 	bl	8002298 <CurveInput>
	for (int i = 0; i < 4; i++) {
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	e05e      	b.n	8002490 <Transform_Omni+0x164>
				output[i] = input[0] * forward[i] + input[1] * right[i]
 80023d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d6:	f107 0210 	add.w	r2, r7, #16
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	4413      	add	r3, r2
 80023de:	f993 3000 	ldrsb.w	r3, [r3]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80023f2:	f107 020c 	add.w	r2, r7, #12
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	4413      	add	r3, r2
 80023fa:	f993 3000 	ldrsb.w	r3, [r3]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ input[2] * rotate_c[i];
 800240e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002412:	f107 0208 	add.w	r2, r7, #8
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	4413      	add	r3, r2
 800241a:	f993 3000 	ldrsb.w	r3, [r3]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4413      	add	r3, r2
						+ input[2] * rotate_c[i];
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
				output[i] = input[0] * forward[i] + input[1] * right[i]
 8002436:	edc3 7a00 	vstr	s15, [r3]
				if (output[i]>1) {
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800244a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	dd07      	ble.n	8002464 <Transform_Omni+0x138>
					output[i]=1;
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	4413      	add	r3, r2
 800245c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e012      	b.n	800248a <Transform_Omni+0x15e>
				}
				else if (output[i]<-1) {
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	d505      	bpl.n	800248a <Transform_Omni+0x15e>
					output[i]=-1;
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <Transform_Omni+0x184>)
 8002488:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	3301      	adds	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	2b03      	cmp	r3, #3
 8002494:	dd9d      	ble.n	80023d2 <Transform_Omni+0xa6>
			}
	/*float norme = sqrtf(
			output[0] * output[0] + output[1] * output[1] + output[2] * output[2]+output[3] * output[3]);*/


	return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3728      	adds	r7, #40	@ 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	01ffff01 	.word	0x01ffff01
 80024a4:	ffff0101 	.word	0xffff0101
 80024a8:	44bb8000 	.word	0x44bb8000
 80024ac:	43fa0000 	.word	0x43fa0000
 80024b0:	bf800000 	.word	0xbf800000

080024b4 <HAL_UART_RxCpltCallback>:
 */

#include "Sabertooth.h"
static Sabertooth *sabertooth_ptr;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	if (huart != sabertooth_ptr->handle) {
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d129      	bne.n	800251c <HAL_UART_RxCpltCallback+0x68>
		return;
	}
	if (sabertooth_ptr->Queue.NumberOfPacket <= 0) {
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	89db      	ldrh	r3, [r3, #14]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_RxCpltCallback+0x28>
		sabertooth_ptr->Queue.CurrentlySending = 0;
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	731a      	strb	r2, [r3, #12]
 80024da:	e020      	b.n	800251e <HAL_UART_RxCpltCallback+0x6a>
	} else {
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	6819      	ldr	r1, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->length);
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
		HAL_UART_Transmit_DMA(huart, sabertooth_ptr->Queue.FirstPacket->Packet,
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	461a      	mov	r2, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f004 f870 	bl	80065d4 <HAL_UART_Transmit_DMA>
		sabertooth_ptr->Queue.FirstPacket =
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
		sabertooth_ptr->Queue.FirstPacket =
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 80024fc:	681b      	ldr	r3, [r3, #0]
				sabertooth_ptr->Queue.FirstPacket->Next_Packet;
 80024fe:	6892      	ldr	r2, [r2, #8]
		sabertooth_ptr->Queue.FirstPacket =
 8002500:	611a      	str	r2, [r3, #16]
		sabertooth_ptr->Queue.NumberOfPacket -= 1;
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	89da      	ldrh	r2, [r3, #14]
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3a01      	subs	r2, #1
 800250e:	b292      	uxth	r2, r2
 8002510:	81da      	strh	r2, [r3, #14]
		sabertooth_ptr->Queue.CurrentlySending = 1;
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <HAL_UART_RxCpltCallback+0x70>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	731a      	strb	r2, [r3, #12]
 800251a:	e000      	b.n	800251e <HAL_UART_RxCpltCallback+0x6a>
		return;
 800251c:	bf00      	nop
	}
}
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000067c 	.word	0x2000067c

08002528 <Sabertooth_Send>:
	/*saber->Queue.FirstPacket = 0;
	 saber->Queue.NumberOfPacket = 0;*/
	return HAL_OK;
}
HAL_StatusTypeDef Sabertooth_Send(Sabertooth *saber, uint8_t address,
		uint8_t command, uint8_t data[], uint16_t data_length) {
 8002528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800252c:	b08b      	sub	sp, #44	@ 0x2c
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	72fb      	strb	r3, [r7, #11]
 8002538:	4613      	mov	r3, r2
 800253a:	72bb      	strb	r3, [r7, #10]
 800253c:	466b      	mov	r3, sp
 800253e:	461e      	mov	r6, r3
	uint8_t Packet[3 + data_length];
 8002540:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002544:	1cd9      	adds	r1, r3, #3
 8002546:	1e4b      	subs	r3, r1, #1
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	460a      	mov	r2, r1
 800254c:	2300      	movs	r3, #0
 800254e:	4690      	mov	r8, r2
 8002550:	4699      	mov	r9, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	460a      	mov	r2, r1
 8002568:	2300      	movs	r3, #0
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	00eb      	lsls	r3, r5, #3
 8002578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257c:	00e2      	lsls	r2, r4, #3
 800257e:	460b      	mov	r3, r1
 8002580:	3307      	adds	r3, #7
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	ebad 0d03 	sub.w	sp, sp, r3
 800258a:	466b      	mov	r3, sp
 800258c:	3300      	adds	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
	Packet[0] = address;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	7afa      	ldrb	r2, [r7, #11]
 8002594:	701a      	strb	r2, [r3, #0]
	Packet[1] = command;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	7aba      	ldrb	r2, [r7, #10]
 800259a:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++) {
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a0:	e00a      	b.n	80025b8 <Sabertooth_Send+0x90>
		Packet[i + 2] = data[i];
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	441a      	add	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	3302      	adds	r3, #2
 80025ac:	7811      	ldrb	r1, [r2, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < data_length; i++) {
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbef      	blt.n	80025a2 <Sabertooth_Send+0x7a>
	}
	uint8_t Checksum = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e00b      	b.n	80025e6 <Sabertooth_Send+0xbe>
		Checksum += Packet[i];
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025da:	4413      	add	r3, r2
 80025dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	for (int i = 0; i < 2 + data_length; i++) {
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025ea:	3301      	adds	r3, #1
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dded      	ble.n	80025ce <Sabertooth_Send+0xa6>
	}
	Checksum = Checksum & 0x7F;
 80025f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	Packet[2 + data_length] = Checksum;
 80025fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002602:	3302      	adds	r3, #2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800260a:	54d1      	strb	r1, [r2, r3]
	//return HAL_UART_Transmit_DMA(saber->handle, Packet, 3 + data_length);
	return HAL_UART_Transmit(saber->handle, Packet, 3+data_length,10);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002614:	3303      	adds	r3, #3
 8002616:	b29a      	uxth	r2, r3
 8002618:	230a      	movs	r3, #10
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	f003 ff50 	bl	80064c0 <HAL_UART_Transmit>
 8002620:	4603      	mov	r3, r0
 8002622:	46b5      	mov	sp, r6
		saber->Queue.FirstPacket = &PacketToSend;
		saber->Queue.lastPacket = &PacketToSend;
		saber->Queue.NumberOfPacket = 1;
	}*/
	return HAL_OK;
}
 8002624:	4618      	mov	r0, r3
 8002626:	372c      	adds	r7, #44	@ 0x2c
 8002628:	46bd      	mov	sp, r7
 800262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800262e <tm1637_delay_us>:
const uint8_t fill_off[4] = {0x00, 0x00, 0x00, 0x00};
const uint8_t _tm1637_minus = 0x40;
const uint8_t _tm1637_dot = 0x80;  
//#######################################################################################################################
void tm1637_delay_us(uint8_t delay)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  while (delay > 0)
 8002638:	e006      	b.n	8002648 <tm1637_delay_us+0x1a>
  {
    delay--;
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	3b01      	subs	r3, #1
 800263e:	71fb      	strb	r3, [r7, #7]
    asm("NOP");asm("NOP");asm("NOP");asm("NOP");
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	bf00      	nop
  while (delay > 0)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f5      	bne.n	800263a <tm1637_delay_us+0xc>
  }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <tm1637_start>:
//#######################################################################################################################
void tm1637_start(tm1637_t *tm1637)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	89db      	ldrh	r3, [r3, #14]
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	f001 f84a 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002674:	2014      	movs	r0, #20
 8002676:	f7ff ffda 	bl	800262e <tm1637_delay_us>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <tm1637_stop>:
//#######################################################################################################################
void tm1637_stop(tm1637_t *tm1637)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6898      	ldr	r0, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	89db      	ldrh	r3, [r3, #14]
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	f001 f837 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800269a:	2014      	movs	r0, #20
 800269c:	f7ff ffc7 	bl	800262e <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6858      	ldr	r0, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	899b      	ldrh	r3, [r3, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4619      	mov	r1, r3
 80026ac:	f001 f82c 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80026b0:	2014      	movs	r0, #20
 80026b2:	f7ff ffbc 	bl	800262e <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6898      	ldr	r0, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	89db      	ldrh	r3, [r3, #14]
 80026be:	2201      	movs	r2, #1
 80026c0:	4619      	mov	r1, r3
 80026c2:	f001 f821 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80026c6:	2014      	movs	r0, #20
 80026c8:	f7ff ffb1 	bl	800262e <tm1637_delay_us>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <tm1637_write_byte>:
//#######################################################################################################################
uint8_t tm1637_write_byte(tm1637_t *tm1637, uint8_t data)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  //  write 8 bit data
  for (uint8_t i = 0; i < 8; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e034      	b.n	8002750 <tm1637_write_byte+0x7c>
  {
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6858      	ldr	r0, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	899b      	ldrh	r3, [r3, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	f001 f809 	bl	8003708 <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 80026f6:	2014      	movs	r0, #20
 80026f8:	f7ff ff99 	bl	800262e <tm1637_delay_us>
    if (data & 0x01)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <tm1637_write_byte+0x44>
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6898      	ldr	r0, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	89db      	ldrh	r3, [r3, #14]
 800270e:	2201      	movs	r2, #1
 8002710:	4619      	mov	r1, r3
 8002712:	f000 fff9 	bl	8003708 <HAL_GPIO_WritePin>
 8002716:	e007      	b.n	8002728 <tm1637_write_byte+0x54>
    else
      HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6898      	ldr	r0, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	89db      	ldrh	r3, [r3, #14]
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	f000 fff0 	bl	8003708 <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 8002728:	2014      	movs	r0, #20
 800272a:	f7ff ff80 	bl	800262e <tm1637_delay_us>
    HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	899b      	ldrh	r3, [r3, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	4619      	mov	r1, r3
 800273a:	f000 ffe5 	bl	8003708 <HAL_GPIO_WritePin>
    tm1637_delay_us(_TM1637_BIT_DELAY);
 800273e:	2014      	movs	r0, #20
 8002740:	f7ff ff75 	bl	800262e <tm1637_delay_us>
    data = data >> 1;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < 8; i++)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b07      	cmp	r3, #7
 8002754:	d9c7      	bls.n	80026e6 <tm1637_write_byte+0x12>
  }
  // wait for acknowledge
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6858      	ldr	r0, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	899b      	ldrh	r3, [r3, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	4619      	mov	r1, r3
 8002762:	f000 ffd1 	bl	8003708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_SET);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6898      	ldr	r0, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	89db      	ldrh	r3, [r3, #14]
 800276e:	2201      	movs	r2, #1
 8002770:	4619      	mov	r1, r3
 8002772:	f000 ffc9 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 8002776:	2014      	movs	r0, #20
 8002778:	f7ff ff59 	bl	800262e <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_SET);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6858      	ldr	r0, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	899b      	ldrh	r3, [r3, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	4619      	mov	r1, r3
 8002788:	f000 ffbe 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 800278c:	2014      	movs	r0, #20
 800278e:	f7ff ff4e 	bl	800262e <tm1637_delay_us>
  uint8_t ack = HAL_GPIO_ReadPin(tm1637->gpio_dat, tm1637->pin_dat);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	89db      	ldrh	r3, [r3, #14]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f000 ff9b 	bl	80036d8 <HAL_GPIO_ReadPin>
 80027a2:	4603      	mov	r3, r0
 80027a4:	73bb      	strb	r3, [r7, #14]
  if (ack == 0)
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <tm1637_write_byte+0xe8>
    HAL_GPIO_WritePin(tm1637->gpio_dat, tm1637->pin_dat, GPIO_PIN_RESET);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6898      	ldr	r0, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	89db      	ldrh	r3, [r3, #14]
 80027b4:	2200      	movs	r2, #0
 80027b6:	4619      	mov	r1, r3
 80027b8:	f000 ffa6 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80027bc:	2014      	movs	r0, #20
 80027be:	f7ff ff36 	bl	800262e <tm1637_delay_us>
  HAL_GPIO_WritePin(tm1637->gpio_clk, tm1637->pin_clk, GPIO_PIN_RESET);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6858      	ldr	r0, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	899b      	ldrh	r3, [r3, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	4619      	mov	r1, r3
 80027ce:	f000 ff9b 	bl	8003708 <HAL_GPIO_WritePin>
  tm1637_delay_us(_TM1637_BIT_DELAY);
 80027d2:	2014      	movs	r0, #20
 80027d4:	f7ff ff2b 	bl	800262e <tm1637_delay_us>
  return ack;
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <tm1637_lock>:
//#######################################################################################################################
void tm1637_lock(tm1637_t *tm1637)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  while (tm1637->lock == 1)
 80027ea:	e002      	b.n	80027f2 <tm1637_lock+0x10>
    tm1637_delay_ms(1);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f000 f9a9 	bl	8002b44 <HAL_Delay>
  while (tm1637->lock == 1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d0f8      	beq.n	80027ec <tm1637_lock+0xa>
  tm1637->lock = 1;  
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <tm1637_unlock>:
//#######################################################################################################################
void tm1637_unlock(tm1637_t *tm1637)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  tm1637->lock = 0;  
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <tm1637_init>:
//#######################################################################################################################
void tm1637_init(tm1637_t *tm1637, GPIO_TypeDef *gpio_clk, uint16_t pin_clk, GPIO_TypeDef *gpio_dat, uint16_t pin_dat)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b08a      	sub	sp, #40	@ 0x28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  memset(tm1637, 0, sizeof(tm1637_t)); 
 8002832:	2210      	movs	r2, #16
 8002834:	2100      	movs	r1, #0
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f005 fc61 	bl	80080fe <memset>
  //  set max brightess
  tm1637_brightness(tm1637, 7);  
 800283c:	2107      	movs	r1, #7
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f834 	bl	80028ac <tm1637_brightness>
  tm1637_lock(tm1637);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff ffcc 	bl	80027e2 <tm1637_lock>
  //  init gpio
  tm1637->gpio_clk = gpio_clk;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	605a      	str	r2, [r3, #4]
  tm1637->pin_clk = pin_clk;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	819a      	strh	r2, [r3, #12]
  tm1637->gpio_dat = gpio_dat;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	609a      	str	r2, [r3, #8]
  tm1637->pin_dat = pin_dat;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002860:	81da      	strh	r2, [r3, #14]
  GPIO_InitTypeDef g = {0};
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]
  g.Mode = GPIO_MODE_OUTPUT_OD;
 8002872:	2311      	movs	r3, #17
 8002874:	61bb      	str	r3, [r7, #24]
  g.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  g.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
  g.Pin = pin_clk;
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_clk, &g);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f000 fd7b 	bl	8003384 <HAL_GPIO_Init>
  g.Pin = pin_dat;
 800288e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(gpio_dat, &g);    
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	f000 fd73 	bl	8003384 <HAL_GPIO_Init>
  tm1637_unlock(tm1637);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff ffb2 	bl	8002808 <tm1637_unlock>
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	@ 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <tm1637_brightness>:
//#######################################################################################################################
void tm1637_brightness(tm1637_t *tm1637, uint8_t brightness_0_to_7)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  tm1637_lock(tm1637);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff92 	bl	80027e2 <tm1637_lock>
  tm1637->brightness = (brightness_0_to_7 & 0x7) | 0x08;
 80028be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	705a      	strb	r2, [r3, #1]
  tm1637_unlock(tm1637);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff97 	bl	8002808 <tm1637_unlock>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <tm1637_write_raw>:
//#######################################################################################################################
void tm1637_write_raw(tm1637_t *tm1637, const uint8_t *raw, uint8_t length, uint8_t pos)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	4611      	mov	r1, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	71fb      	strb	r3, [r7, #7]
 80028f4:	4613      	mov	r3, r2
 80028f6:	71bb      	strb	r3, [r7, #6]
  if (pos > 5)
 80028f8:	79bb      	ldrb	r3, [r7, #6]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d83f      	bhi.n	800297e <tm1637_write_raw+0x9c>
    return;
  if (length > 6)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d901      	bls.n	8002908 <tm1637_write_raw+0x26>
    length = 6;
 8002904:	2306      	movs	r3, #6
 8002906:	71fb      	strb	r3, [r7, #7]
  // write COMM1
  tm1637_start(tm1637);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fea7 	bl	800265c <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM1);
 800290e:	2140      	movs	r1, #64	@ 0x40
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fedf 	bl	80026d4 <tm1637_write_byte>
  tm1637_stop(tm1637);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff feb3 	bl	8002682 <tm1637_stop>
  // write COMM2 + first digit address
  tm1637_start(tm1637);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fe9d 	bl	800265c <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM2 + (pos & 0x03));
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3b40      	subs	r3, #64	@ 0x40
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fecf 	bl	80026d4 <tm1637_write_byte>
  // write the data bytes
  for (uint8_t k=0; k < length; k++)
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
 800293a:	e00a      	b.n	8002952 <tm1637_write_raw+0x70>
    tm1637_write_byte(tm1637, raw[k]);
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fec4 	bl	80026d4 <tm1637_write_byte>
  for (uint8_t k=0; k < length; k++)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	3301      	adds	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
 8002952:	7dfa      	ldrb	r2, [r7, #23]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3f0      	bcc.n	800293c <tm1637_write_raw+0x5a>
  tm1637_stop(tm1637);
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff fe91 	bl	8002682 <tm1637_stop>
  // write COMM3 + brightness
  tm1637_start(tm1637);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fe7b 	bl	800265c <tm1637_start>
  tm1637_write_byte(tm1637, TM1637_COMM3 + tm1637->brightness);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	3b80      	subs	r3, #128	@ 0x80
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff feaf 	bl	80026d4 <tm1637_write_byte>
  tm1637_stop(tm1637);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fe83 	bl	8002682 <tm1637_stop>
 800297c:	e000      	b.n	8002980 <tm1637_write_raw+0x9e>
    return;
 800297e:	bf00      	nop
}
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <tm1637_write_int>:
  tm1637_write_raw(tm1637, segments, length, pos);
  tm1637_unlock(tm1637);  
}
//#######################################################################################################################
void tm1637_write_int(tm1637_t *tm1637, int32_t digit, uint8_t pos)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	71fb      	strb	r3, [r7, #7]
  tm1637_lock(tm1637);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff ff23 	bl	80027e2 <tm1637_lock>
  char str[7];
  uint8_t buffer[6] = {0};
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	2300      	movs	r3, #0
 80029a2:	82bb      	strh	r3, [r7, #20]
  snprintf(str, sizeof(str) , "%d", digit);
 80029a4:	f107 0018 	add.w	r0, r7, #24
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4a26      	ldr	r2, [pc, #152]	@ (8002a44 <tm1637_write_int+0xbc>)
 80029ac:	2107      	movs	r1, #7
 80029ae:	f005 fb0f 	bl	8007fd0 <sniprintf>
  for (uint8_t i=0; i < 6; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e034      	b.n	8002a22 <tm1637_write_int+0x9a>
  {
    if (str[i] == '-')
 80029b8:	7ffb      	ldrb	r3, [r7, #31]
 80029ba:	3320      	adds	r3, #32
 80029bc:	443b      	add	r3, r7
 80029be:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80029c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80029c4:	d106      	bne.n	80029d4 <tm1637_write_int+0x4c>
      buffer[i] = _tm1637_minus;
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2240      	movs	r2, #64	@ 0x40
 80029ca:	3320      	adds	r3, #32
 80029cc:	443b      	add	r3, r7
 80029ce:	f803 2c10 	strb.w	r2, [r3, #-16]
 80029d2:	e023      	b.n	8002a1c <tm1637_write_int+0x94>
    else if((str[i] >= '0') && (str[i] <= '9'))
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	3320      	adds	r3, #32
 80029d8:	443b      	add	r3, r7
 80029da:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80029de:	2b2f      	cmp	r3, #47	@ 0x2f
 80029e0:	d915      	bls.n	8002a0e <tm1637_write_int+0x86>
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	3320      	adds	r3, #32
 80029e6:	443b      	add	r3, r7
 80029e8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80029ec:	2b39      	cmp	r3, #57	@ 0x39
 80029ee:	d80e      	bhi.n	8002a0e <tm1637_write_int+0x86>
      buffer[i] = _tm1637_digit[str[i] - 48];
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	3320      	adds	r3, #32
 80029f4:	443b      	add	r3, r7
 80029f6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80029fa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	4911      	ldr	r1, [pc, #68]	@ (8002a48 <tm1637_write_int+0xc0>)
 8002a02:	5c8a      	ldrb	r2, [r1, r2]
 8002a04:	3320      	adds	r3, #32
 8002a06:	443b      	add	r3, r7
 8002a08:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002a0c:	e006      	b.n	8002a1c <tm1637_write_int+0x94>
    else
    {
      buffer[i] = 0;
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	3320      	adds	r3, #32
 8002a12:	443b      	add	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	f803 2c10 	strb.w	r2, [r3, #-16]
      break;
 8002a1a:	e005      	b.n	8002a28 <tm1637_write_int+0xa0>
  for (uint8_t i=0; i < 6; i++)
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d9c7      	bls.n	80029b8 <tm1637_write_int+0x30>
    }
  }
  tm1637_write_raw(tm1637, buffer, 6, pos);              
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f107 0110 	add.w	r1, r7, #16
 8002a2e:	2206      	movs	r2, #6
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff ff56 	bl	80028e2 <tm1637_write_raw>
  tm1637_unlock(tm1637);  
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff fee6 	bl	8002808 <tm1637_unlock>
}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	0800a538 	.word	0x0800a538
 8002a48:	0800a5bc 	.word	0x0800a5bc

08002a4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_Init+0x3c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_Init+0x3c>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a62:	2003      	movs	r0, #3
 8002a64:	f000 f962 	bl	8002d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 f80f 	bl	8002a8c <HAL_InitTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	71fb      	strb	r3, [r7, #7]
 8002a78:	e001      	b.n	8002a7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a7a:	f7fe fe55 	bl	8001728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40022000 	.word	0x40022000

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <HAL_InitTick+0x6c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d023      	beq.n	8002ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002aa0:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <HAL_InitTick+0x70>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <HAL_InitTick+0x6c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f96d 	bl	8002d96 <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d809      	bhi.n	8002adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 f937 	bl	8002d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_InitTick+0x74>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e007      	b.n	8002aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e004      	b.n	8002aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e001      	b.n	8002aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000020 	.word	0x20000020
 8002afc:	20000008 	.word	0x20000008
 8002b00:	2000001c 	.word	0x2000001c

08002b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_IncTick+0x20>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000020 	.word	0x20000020
 8002b28:	20000680 	.word	0x20000680

08002b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_GetTick+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000680 	.word	0x20000680

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff ffee 	bl	8002b2c <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_Delay+0x44>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6a:	bf00      	nop
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000020 	.word	0x20000020

08002b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bbe:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60d3      	str	r3, [r2, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <__NVIC_GetPriorityGrouping+0x18>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0307 	and.w	r3, r3, #7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4907      	ldr	r1, [pc, #28]	@ (8002c28 <__NVIC_EnableIRQ+0x38>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e100 	.word	0xe000e100

08002c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	6039      	str	r1, [r7, #0]
 8002c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	db0a      	blt.n	8002c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	490c      	ldr	r1, [pc, #48]	@ (8002c78 <__NVIC_SetPriority+0x4c>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c54:	e00a      	b.n	8002c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4908      	ldr	r1, [pc, #32]	@ (8002c7c <__NVIC_SetPriority+0x50>)
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3b04      	subs	r3, #4
 8002c64:	0112      	lsls	r2, r2, #4
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	440b      	add	r3, r1
 8002c6a:	761a      	strb	r2, [r3, #24]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000e100 	.word	0xe000e100
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f1c3 0307 	rsb	r3, r3, #7
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	bf28      	it	cs
 8002c9e:	2304      	movcs	r3, #4
 8002ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d902      	bls.n	8002cb0 <NVIC_EncodePriority+0x30>
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3b03      	subs	r3, #3
 8002cae:	e000      	b.n	8002cb2 <NVIC_EncodePriority+0x32>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	43d9      	mvns	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	4313      	orrs	r3, r2
         );
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	@ 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf8:	d301      	bcc.n	8002cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00f      	b.n	8002d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <SysTick_Config+0x40>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d06:	210f      	movs	r1, #15
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f7ff ff8e 	bl	8002c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <SysTick_Config+0x40>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d16:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <SysTick_Config+0x40>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ff29 	bl	8002b8c <__NVIC_SetPriorityGrouping>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d54:	f7ff ff3e 	bl	8002bd4 <__NVIC_GetPriorityGrouping>
 8002d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7ff ff8e 	bl	8002c80 <NVIC_EncodePriority>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff5d 	bl	8002c2c <__NVIC_SetPriority>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff31 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffa2 	bl	8002ce8 <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e054      	b.n	8002e6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7f5b      	ldrb	r3, [r3, #29]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fccc 	bl	8001770 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a22      	ldr	r2, [pc, #136]	@ (8002e74 <HAL_CRC_Init+0xc4>)
 8002dec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0218 	bic.w	r2, r2, #24
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	e00c      	b.n	8002e1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f834 	bl	8002e78 <HAL_CRCEx_Polynomial_Set>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e028      	b.n	8002e6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	795b      	ldrb	r3, [r3, #5]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	e004      	b.n	8002e38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6912      	ldr	r2, [r2, #16]
 8002e36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	04c11db7 	.word	0x04c11db7

08002e78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e88:	231f      	movs	r3, #31
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
 8002e9a:	e063      	b.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e9c:	bf00      	nop
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	613a      	str	r2, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_CRCEx_Polynomial_Set+0x44>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b18      	cmp	r3, #24
 8002ec0:	d846      	bhi.n	8002f50 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f57 	.word	0x08002f57
 8002ecc:	08002f51 	.word	0x08002f51
 8002ed0:	08002f51 	.word	0x08002f51
 8002ed4:	08002f51 	.word	0x08002f51
 8002ed8:	08002f51 	.word	0x08002f51
 8002edc:	08002f51 	.word	0x08002f51
 8002ee0:	08002f51 	.word	0x08002f51
 8002ee4:	08002f51 	.word	0x08002f51
 8002ee8:	08002f45 	.word	0x08002f45
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08002f51 	.word	0x08002f51
 8002ef4:	08002f51 	.word	0x08002f51
 8002ef8:	08002f51 	.word	0x08002f51
 8002efc:	08002f51 	.word	0x08002f51
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f51 	.word	0x08002f51
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f51 	.word	0x08002f51
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f2d 	.word	0x08002f2d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d913      	bls.n	8002f5a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f36:	e010      	b.n	8002f5a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d90f      	bls.n	8002f5e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f42:	e00c      	b.n	8002f5e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d90b      	bls.n	8002f62 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f4e:	e008      	b.n	8002f62 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
        break;
 8002f54:	e006      	b.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f56:	bf00      	nop
 8002f58:	e004      	b.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f62:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 0118 	bic.w	r1, r3, #24
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e098      	b.n	80030d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b4d      	ldr	r3, [pc, #308]	@ (80030e4 <HAL_DMA_Init+0x150>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d80f      	bhi.n	8002fd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80030e8 <HAL_DMA_Init+0x154>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80030ec <HAL_DMA_Init+0x158>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a48      	ldr	r2, [pc, #288]	@ (80030f0 <HAL_DMA_Init+0x15c>)
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fd0:	e00e      	b.n	8002ff0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <HAL_DMA_Init+0x160>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <HAL_DMA_Init+0x158>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a42      	ldr	r2, [pc, #264]	@ (80030f8 <HAL_DMA_Init+0x164>)
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800300a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800304a:	d039      	beq.n	80030c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	4a27      	ldr	r2, [pc, #156]	@ (80030f0 <HAL_DMA_Init+0x15c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d11a      	bne.n	800308c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003056:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_DMA_Init+0x168>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f003 031c 	and.w	r3, r3, #28
 8003062:	210f      	movs	r1, #15
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	4924      	ldr	r1, [pc, #144]	@ (80030fc <HAL_DMA_Init+0x168>)
 800306c:	4013      	ands	r3, r2
 800306e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003070:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <HAL_DMA_Init+0x168>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	f003 031c 	and.w	r3, r3, #28
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	491d      	ldr	r1, [pc, #116]	@ (80030fc <HAL_DMA_Init+0x168>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
 800308a:	e019      	b.n	80030c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800308c:	4b1c      	ldr	r3, [pc, #112]	@ (8003100 <HAL_DMA_Init+0x16c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	f003 031c 	and.w	r3, r3, #28
 8003098:	210f      	movs	r1, #15
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	4917      	ldr	r1, [pc, #92]	@ (8003100 <HAL_DMA_Init+0x16c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030a6:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <HAL_DMA_Init+0x16c>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f003 031c 	and.w	r3, r3, #28
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	4911      	ldr	r1, [pc, #68]	@ (8003100 <HAL_DMA_Init+0x16c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40020407 	.word	0x40020407
 80030e8:	bffdfff8 	.word	0xbffdfff8
 80030ec:	cccccccd 	.word	0xcccccccd
 80030f0:	40020000 	.word	0x40020000
 80030f4:	bffdfbf8 	.word	0xbffdfbf8
 80030f8:	40020400 	.word	0x40020400
 80030fc:	400200a8 	.word	0x400200a8
 8003100:	400204a8 	.word	0x400204a8

08003104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Start_IT+0x20>
 8003120:	2302      	movs	r3, #2
 8003122:	e04b      	b.n	80031bc <HAL_DMA_Start_IT+0xb8>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d13a      	bne.n	80031ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8e0 	bl	8003322 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 020e 	orr.w	r2, r2, #14
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e00f      	b.n	800319c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 020a 	orr.w	r2, r2, #10
 800319a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e005      	b.n	80031ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f003 031c 	and.w	r3, r3, #28
 80031e4:	2204      	movs	r2, #4
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d026      	beq.n	800323e <HAL_DMA_IRQHandler+0x7a>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d021      	beq.n	800323e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	f003 021c 	and.w	r2, r3, #28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2104      	movs	r1, #4
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b00      	cmp	r3, #0
 8003232:	d071      	beq.n	8003318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800323c:	e06c      	b.n	8003318 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f003 031c 	and.w	r3, r3, #28
 8003246:	2202      	movs	r2, #2
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02e      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xec>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d029      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 020a 	bic.w	r2, r2, #10
 8003278:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f003 021c 	and.w	r2, r3, #28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2102      	movs	r1, #2
 8003290:	fa01 f202 	lsl.w	r2, r1, r2
 8003294:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d038      	beq.n	8003318 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032ae:	e033      	b.n	8003318 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	f003 031c 	and.w	r3, r3, #28
 80032b8:	2208      	movs	r2, #8
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02a      	beq.n	800331a <HAL_DMA_IRQHandler+0x156>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d025      	beq.n	800331a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 020e 	bic.w	r2, r2, #14
 80032dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f003 021c 	and.w	r2, r3, #28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003318:	bf00      	nop
 800331a:	bf00      	nop
}
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003334:	f003 021c 	and.w	r2, r3, #28
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f202 	lsl.w	r2, r1, r2
 8003342:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d108      	bne.n	8003366 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003364:	e007      	b.n	8003376 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	60da      	str	r2, [r3, #12]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	e17f      	b.n	8003694 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8171 	beq.w	800368e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <HAL_GPIO_Init+0x40>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d130      	bne.n	8003426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fa:	2201      	movs	r2, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0201 	and.w	r2, r3, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d118      	bne.n	8003464 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003438:	2201      	movs	r2, #1
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	f003 0201 	and.w	r2, r3, #1
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d017      	beq.n	80034a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d123      	bne.n	80034f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	08da      	lsrs	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3208      	adds	r2, #8
 80034ee:	6939      	ldr	r1, [r7, #16]
 80034f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80ac 	beq.w	800368e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	4b5f      	ldr	r3, [pc, #380]	@ (80036b4 <HAL_GPIO_Init+0x330>)
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	4a5e      	ldr	r2, [pc, #376]	@ (80036b4 <HAL_GPIO_Init+0x330>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6613      	str	r3, [r2, #96]	@ 0x60
 8003542:	4b5c      	ldr	r3, [pc, #368]	@ (80036b4 <HAL_GPIO_Init+0x330>)
 8003544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800354e:	4a5a      	ldr	r2, [pc, #360]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003578:	d025      	beq.n	80035c6 <HAL_GPIO_Init+0x242>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4f      	ldr	r2, [pc, #316]	@ (80036bc <HAL_GPIO_Init+0x338>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01f      	beq.n	80035c2 <HAL_GPIO_Init+0x23e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4e      	ldr	r2, [pc, #312]	@ (80036c0 <HAL_GPIO_Init+0x33c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d019      	beq.n	80035be <HAL_GPIO_Init+0x23a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4d      	ldr	r2, [pc, #308]	@ (80036c4 <HAL_GPIO_Init+0x340>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0x236>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4c      	ldr	r2, [pc, #304]	@ (80036c8 <HAL_GPIO_Init+0x344>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00d      	beq.n	80035b6 <HAL_GPIO_Init+0x232>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4b      	ldr	r2, [pc, #300]	@ (80036cc <HAL_GPIO_Init+0x348>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x22e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4a      	ldr	r2, [pc, #296]	@ (80036d0 <HAL_GPIO_Init+0x34c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_GPIO_Init+0x22a>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e00c      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035ae:	2307      	movs	r3, #7
 80035b0:	e00a      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x244>
 80035c6:	2300      	movs	r3, #0
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035d8:	4937      	ldr	r1, [pc, #220]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e6:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800360a:	4a32      	ldr	r2, [pc, #200]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003610:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800363a:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800365e:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003688:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <HAL_GPIO_Init+0x350>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3301      	adds	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f47f ae78 	bne.w	8003394 <HAL_GPIO_Init+0x10>
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40010000 	.word	0x40010000
 80036bc:	48000400 	.word	0x48000400
 80036c0:	48000800 	.word	0x48000800
 80036c4:	48000c00 	.word	0x48000c00
 80036c8:	48001000 	.word	0x48001000
 80036cc:	48001400 	.word	0x48001400
 80036d0:	48001800 	.word	0x48001800
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e001      	b.n	80036fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
 8003714:	4613      	mov	r3, r2
 8003716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003718:	787b      	ldrb	r3, [r7, #1]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003724:	e002      	b.n	800372c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003742:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fb9e 	bl	8000e98 <HAL_GPIO_EXTI_Callback>
  }
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_PWREx_GetVoltageRange+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000

08003784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003792:	d130      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003794:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d038      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a2:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2232      	movs	r2, #50	@ 0x32
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0c9b      	lsrs	r3, r3, #18
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c8:	e002      	b.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037dc:	d102      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f0:	d110      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003802:	d007      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800380c:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000
 8003828:	20000008 	.word	0x20000008
 800382c:	431bde83 	.word	0x431bde83

08003830 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e3ca      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4b97      	ldr	r3, [pc, #604]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384c:	4b94      	ldr	r3, [pc, #592]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80e4 	beq.w	8003a2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_RCC_OscConfig+0x4a>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f040 808b 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 8087 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e3a2      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	4b82      	ldr	r3, [pc, #520]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_RCC_OscConfig+0x7c>
 80038a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038aa:	e005      	b.n	80038b8 <HAL_RCC_OscConfig+0x88>
 80038ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d223      	bcs.n	8003904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fd55 	bl	8004370 <RCC_SetFlashLatencyFromMSIRange>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e383      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b73      	ldr	r3, [pc, #460]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a72      	ldr	r2, [pc, #456]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b70      	ldr	r3, [pc, #448]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	496d      	ldr	r1, [pc, #436]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	4968      	ldr	r1, [pc, #416]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e025      	b.n	8003950 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b66      	ldr	r3, [pc, #408]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a65      	ldr	r2, [pc, #404]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4960      	ldr	r1, [pc, #384]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	495b      	ldr	r1, [pc, #364]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd15 	bl	8004370 <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e343      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003950:	f000 fc4a 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4950      	ldr	r1, [pc, #320]	@ (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa8 <HAL_RCC_OscConfig+0x278>)
 800396e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003970:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f889 	bl	8002a8c <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d052      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	e327      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d032      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003990:	4b43      	ldr	r3, [pc, #268]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a42      	ldr	r2, [pc, #264]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800399c:	f7ff f8c6 	bl	8002b2c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7ff f8c2 	bl	8002b2c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e310      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b6:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a36      	ldr	r2, [pc, #216]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c8:	f043 0308 	orr.w	r3, r3, #8
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b34      	ldr	r3, [pc, #208]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4931      	ldr	r1, [pc, #196]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	492c      	ldr	r1, [pc, #176]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	e01a      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039f6:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a02:	f7ff f893 	bl	8002b2c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a0a:	f7ff f88f 	bl	8002b2c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e2dd      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a1c:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1da>
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d074      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x21a>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d064      	beq.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e2ba      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x24a>
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e026      	b.n	8003ac8 <HAL_RCC_OscConfig+0x298>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a82:	d115      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x280>
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a02      	ldr	r2, [pc, #8]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x298>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800a574 	.word	0x0800a574
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	2000001c 	.word	0x2000001c
 8003ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b9d      	ldr	r3, [pc, #628]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f82c 	bl	8002b2c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7ff f828 	bl	8002b2c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	@ 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e276      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4b92      	ldr	r3, [pc, #584]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2a8>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7ff f818 	bl	8002b2c <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7ff f814 	bl	8002b2c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e262      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2d0>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d060      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x310>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d116      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b40:	4b7c      	ldr	r3, [pc, #496]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x328>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e23f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b76      	ldr	r3, [pc, #472]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	4973      	ldr	r1, [pc, #460]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	e040      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d023      	beq.n	8003bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b76:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe ffd3 	bl	8002b2c <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe ffcf 	bl	8002b2c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e21d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	4b65      	ldr	r3, [pc, #404]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b62      	ldr	r3, [pc, #392]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	495f      	ldr	r1, [pc, #380]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	e018      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe ffaf 	bl	8002b2c <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fe ffab 	bl	8002b2c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1f9      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be4:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe ff8a 	bl	8002b2c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fe ff86 	bl	8002b2c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1d4      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <HAL_RCC_OscConfig+0x3ec>
 8003c3c:	e01b      	b.n	8003c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c44:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe ff6d 	bl	8002b2c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe ff69 	bl	8002b2c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1b7      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ef      	bne.n	8003c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80a6 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c88:	4b2a      	ldr	r3, [pc, #168]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb0:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d118      	bne.n	8003cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc8:	f7fe ff30 	bl	8002b2c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd0:	f7fe ff2c 	bl	8002b2c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e17a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <HAL_RCC_OscConfig+0x508>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d8>
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d06:	e029      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d115      	bne.n	8003d3c <HAL_RCC_OscConfig+0x50c>
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a07      	ldr	r2, [pc, #28]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a03      	ldr	r2, [pc, #12]	@ (8003d34 <HAL_RCC_OscConfig+0x504>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d30:	e014      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a9b      	ldr	r2, [pc, #620]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d4c:	4b98      	ldr	r3, [pc, #608]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	4a97      	ldr	r2, [pc, #604]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe fee2 	bl	8002b2c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fede 	bl	8002b2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e12a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d82:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ed      	beq.n	8003d6c <HAL_RCC_OscConfig+0x53c>
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fe fecb 	bl	8002b2c <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fe fec7 	bl	8002b2c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e113      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ed      	bne.n	8003d9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	4a79      	ldr	r2, [pc, #484]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80fe 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 80d0 	bne.w	8003f84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003de4:	4b72      	ldr	r3, [pc, #456]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d130      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d127      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e24:	2a07      	cmp	r2, #7
 8003e26:	bf14      	ite	ne
 8003e28:	2201      	movne	r2, #1
 8003e2a:	2200      	moveq	r2, #0
 8003e2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	3b01      	subs	r3, #1
 8003e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d06e      	beq.n	8003f38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d069      	beq.n	8003f34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ad      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fe fe50 	bl	8002b2c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fe fe4c 	bl	8002b2c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e09a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea2:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eae:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <HAL_RCC_OscConfig+0x784>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ec8:	0212      	lsls	r2, r2, #8
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ed0:	0852      	lsrs	r2, r2, #1
 8003ed2:	3a01      	subs	r2, #1
 8003ed4:	0552      	lsls	r2, r2, #21
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0652      	lsls	r2, r2, #25
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ee8:	0912      	lsrs	r2, r2, #4
 8003eea:	0452      	lsls	r2, r2, #17
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4930      	ldr	r1, [pc, #192]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f00:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f0c:	f7fe fe0e 	bl	8002b2c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fe0a 	bl	8002b2c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f32:	e050      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d148      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a19      	ldr	r2, [pc, #100]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5c:	f7fe fde6 	bl	8002b2c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fde2 	bl	8002b2c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e030      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x734>
 8003f82:	e028      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d023      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <HAL_RCC_OscConfig+0x780>)
 8003f90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe fdc9 	bl	8002b2c <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9c:	e00c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe fdc5 	bl	8002b2c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d905      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e013      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ec      	bne.n	8003f9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4905      	ldr	r1, [pc, #20]	@ (8003fe0 <HAL_RCC_OscConfig+0x7b0>)
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_RCC_OscConfig+0x7b4>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	feeefffc 	.word	0xfeeefffc

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0e7      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b75      	ldr	r3, [pc, #468]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b72      	ldr	r3, [pc, #456]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	4970      	ldr	r1, [pc, #448]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b6e      	ldr	r3, [pc, #440]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0cf      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004044:	429a      	cmp	r2, r3
 8004046:	d908      	bls.n	800405a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b63      	ldr	r3, [pc, #396]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4960      	ldr	r1, [pc, #384]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d04c      	beq.n	8004100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	4b5a      	ldr	r3, [pc, #360]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d121      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0a6      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e09a      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409e:	4b4e      	ldr	r3, [pc, #312]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e08e      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ae:	4b4a      	ldr	r3, [pc, #296]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e086      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040be:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0203 	bic.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4943      	ldr	r1, [pc, #268]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fe fd2c 	bl	8002b2c <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d8:	f7fe fd28 	bl	8002b2c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e06e      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 020c 	and.w	r2, r3, #12
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1eb      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004118:	429a      	cmp	r2, r3
 800411a:	d208      	bcs.n	800412e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	492b      	ldr	r1, [pc, #172]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d210      	bcs.n	800415e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413c:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0207 	bic.w	r2, r3, #7
 8004144:	4923      	ldr	r1, [pc, #140]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e036      	b.n	80041cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4918      	ldr	r1, [pc, #96]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4910      	ldr	r1, [pc, #64]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800419c:	f000 f824 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	490b      	ldr	r1, [pc, #44]	@ (80041dc <HAL_RCC_ClockConfig+0x1f4>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	4a09      	ldr	r2, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041bc:	4b09      	ldr	r3, [pc, #36]	@ (80041e4 <HAL_RCC_ClockConfig+0x1fc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fc63 	bl	8002a8c <HAL_InitTick>
 80041c6:	4603      	mov	r3, r0
 80041c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40021000 	.word	0x40021000
 80041dc:	0800a574 	.word	0x0800a574
 80041e0:	20000008 	.word	0x20000008
 80041e4:	2000001c 	.word	0x2000001c

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004200:	4b3b      	ldr	r3, [pc, #236]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d121      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d11e      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800421c:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004228:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e005      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004244:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d102      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004260:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e004      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d101      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800426c:	4b23      	ldr	r3, [pc, #140]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x114>)
 800426e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d134      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004276:	4b1e      	ldr	r3, [pc, #120]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0xa6>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d003      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0xac>
 800428c:	e005      	b.n	800429a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800428e:	4b1a      	ldr	r3, [pc, #104]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004290:	617b      	str	r3, [r7, #20]
      break;
 8004292:	e005      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004294:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004296:	617b      	str	r3, [r7, #20]
      break;
 8004298:	e002      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	3301      	adds	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	fb03 f202 	mul.w	r2, r3, r2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	0e5b      	lsrs	r3, r3, #25
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	3301      	adds	r3, #1
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042e0:	69bb      	ldr	r3, [r7, #24]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3724      	adds	r7, #36	@ 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800a58c 	.word	0x0800a58c
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	007a1200 	.word	0x007a1200

08004300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_RCC_GetHCLKFreq+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000008 	.word	0x20000008

08004318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800431c:	f7ff fff0 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4904      	ldr	r1, [pc, #16]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	0800a584 	.word	0x0800a584

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004348:	f7ff ffda 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0adb      	lsrs	r3, r3, #11
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4904      	ldr	r1, [pc, #16]	@ (800436c <HAL_RCC_GetPCLK2Freq+0x28>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	0800a584 	.word	0x0800a584

08004370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800437c:	4b2a      	ldr	r3, [pc, #168]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004388:	f7ff f9ee 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 800438c:	6178      	str	r0, [r7, #20]
 800438e:	e014      	b.n	80043ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004390:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	4a24      	ldr	r2, [pc, #144]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58
 800439c:	4b22      	ldr	r3, [pc, #136]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043a8:	f7ff f9de 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 80043ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d10b      	bne.n	80043da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b80      	cmp	r3, #128	@ 0x80
 80043c6:	d919      	bls.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80043cc:	d902      	bls.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ce:	2302      	movs	r3, #2
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e013      	b.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043d4:	2301      	movs	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	e010      	b.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b80      	cmp	r3, #128	@ 0x80
 80043de:	d902      	bls.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043e0:	2303      	movs	r3, #3
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	e00a      	b.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b80      	cmp	r3, #128	@ 0x80
 80043ea:	d102      	bne.n	80043f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ec:	2302      	movs	r3, #2
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e004      	b.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b70      	cmp	r3, #112	@ 0x70
 80043f6:	d101      	bne.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f8:	2301      	movs	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 0207 	bic.w	r2, r3, #7
 8004404:	4909      	ldr	r1, [pc, #36]	@ (800442c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800440c:	4b07      	ldr	r3, [pc, #28]	@ (800442c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	40022000 	.word	0x40022000

08004430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004438:	2300      	movs	r3, #0
 800443a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800443c:	2300      	movs	r3, #0
 800443e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004448:	2b00      	cmp	r3, #0
 800444a:	d041      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004454:	d02a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800445a:	d824      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800445c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004460:	d008      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004466:	d81e      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800446c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004470:	d010      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004472:	e018      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004474:	4b86      	ldr	r3, [pc, #536]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a85      	ldr	r2, [pc, #532]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004480:	e015      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fabb 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004492:	e00c      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3320      	adds	r3, #32
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fba6 	bl	8004bec <RCCEx_PLLSAI2_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	74fb      	strb	r3, [r7, #19]
      break;
 80044aa:	e000      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044b4:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044c2:	4973      	ldr	r1, [pc, #460]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044ca:	e001      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d041      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044e4:	d02a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044ea:	d824      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044f6:	d81e      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004500:	d010      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004502:	e018      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004504:	4b62      	ldr	r3, [pc, #392]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a61      	ldr	r2, [pc, #388]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004510:	e015      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fa73 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004522:	e00c      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3320      	adds	r3, #32
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fb5e 	bl	8004bec <RCCEx_PLLSAI2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	74fb      	strb	r3, [r7, #19]
      break;
 800453a:	e000      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800453c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004544:	4b52      	ldr	r3, [pc, #328]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004552:	494f      	ldr	r1, [pc, #316]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800455a:	e001      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a0 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004572:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	4a40      	ldr	r2, [pc, #256]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	@ 0x58
 8004594:	4b3e      	ldr	r3, [pc, #248]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b0:	f7fe fabc 	bl	8002b2c <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045b6:	e009      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b8:	f7fe fab8 	bl	8002b2c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d902      	bls.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ca:	e005      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045cc:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ef      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d15c      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045de:	4b2c      	ldr	r3, [pc, #176]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d019      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045fc:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004606:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004608:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	4a20      	ldr	r2, [pc, #128]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004618:	4b1d      	ldr	r3, [pc, #116]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461e:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004628:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fe fa77 	bl	8002b2c <HAL_GetTick>
 800463e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004640:	e00b      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fa73 	bl	8002b2c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d902      	bls.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	74fb      	strb	r3, [r7, #19]
            break;
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ec      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800467e:	4904      	ldr	r1, [pc, #16]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004686:	e009      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
 800468c:	e006      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469c:	7c7b      	ldrb	r3, [r7, #17]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4b9e      	ldr	r3, [pc, #632]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	4a9d      	ldr	r2, [pc, #628]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ba:	4b98      	ldr	r3, [pc, #608]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	4994      	ldr	r1, [pc, #592]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046dc:	4b8f      	ldr	r3, [pc, #572]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 020c 	bic.w	r2, r3, #12
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ea:	498c      	ldr	r1, [pc, #560]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046fe:	4b87      	ldr	r3, [pc, #540]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	4983      	ldr	r1, [pc, #524]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004720:	4b7e      	ldr	r3, [pc, #504]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	497b      	ldr	r1, [pc, #492]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004742:	4b76      	ldr	r3, [pc, #472]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	4972      	ldr	r1, [pc, #456]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004764:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	496a      	ldr	r1, [pc, #424]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004786:	4b65      	ldr	r3, [pc, #404]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004794:	4961      	ldr	r1, [pc, #388]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a8:	4b5c      	ldr	r3, [pc, #368]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	4959      	ldr	r1, [pc, #356]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ca:	4b54      	ldr	r3, [pc, #336]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	4950      	ldr	r1, [pc, #320]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ec:	4b4b      	ldr	r3, [pc, #300]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	4948      	ldr	r1, [pc, #288]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800480e:	4b43      	ldr	r3, [pc, #268]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	493f      	ldr	r1, [pc, #252]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d028      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004830:	4b3a      	ldr	r3, [pc, #232]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483e:	4937      	ldr	r1, [pc, #220]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800484e:	d106      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b32      	ldr	r3, [pc, #200]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a31      	ldr	r2, [pc, #196]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485a:	60d3      	str	r3, [r2, #12]
 800485c:	e011      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004862:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004866:	d10c      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f8c8 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d028      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800488e:	4b23      	ldr	r3, [pc, #140]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489c:	491f      	ldr	r1, [pc, #124]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ac:	d106      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ae:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	4a1a      	ldr	r2, [pc, #104]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b8:	60d3      	str	r3, [r2, #12]
 80048ba:	e011      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f899 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02b      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fa:	4908      	ldr	r1, [pc, #32]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800490a:	d109      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490c:	4b03      	ldr	r3, [pc, #12]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a02      	ldr	r2, [pc, #8]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004916:	60d3      	str	r3, [r2, #12]
 8004918:	e014      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004928:	d10c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f867 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004950:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495e:	4928      	ldr	r1, [pc, #160]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800496a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800496e:	d10d      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f844 	bl	8004a04 <RCCEx_PLLSAI1_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d014      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
 800498a:	e011      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3320      	adds	r3, #32
 800499a:	2102      	movs	r1, #2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f925 	bl	8004bec <RCCEx_PLLSAI2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049bc:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ca:	490d      	ldr	r1, [pc, #52]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049de:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ee:	4904      	ldr	r1, [pc, #16]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000

08004a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a12:	4b75      	ldr	r3, [pc, #468]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a1e:	4b72      	ldr	r3, [pc, #456]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0203 	and.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d10d      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
       ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a36:	4b6c      	ldr	r3, [pc, #432]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
       ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d047      	beq.n	8004ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e044      	b.n	8004ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d018      	beq.n	8004a8a <RCCEx_PLLSAI1_Config+0x86>
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d825      	bhi.n	8004aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <RCCEx_PLLSAI1_Config+0x62>
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d009      	beq.n	8004a78 <RCCEx_PLLSAI1_Config+0x74>
 8004a64:	e020      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a66:	4b60      	ldr	r3, [pc, #384]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11d      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a76:	e01a      	b.n	8004aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a78:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e013      	b.n	8004ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a8a:	4b57      	ldr	r3, [pc, #348]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a96:	4b54      	ldr	r3, [pc, #336]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aa6:	e006      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e004      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004abe:	4b4a      	ldr	r3, [pc, #296]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	4944      	ldr	r1, [pc, #272]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d17d      	bne.n	8004bdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ae0:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a40      	ldr	r2, [pc, #256]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fe f81e 	bl	8002b2c <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af2:	e009      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af4:	f7fe f81a 	bl	8002b2c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d902      	bls.n	8004b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	73fb      	strb	r3, [r7, #15]
        break;
 8004b06:	e005      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b08:	4b37      	ldr	r3, [pc, #220]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ef      	bne.n	8004af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d160      	bne.n	8004bdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b20:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	0912      	lsrs	r2, r2, #4
 8004b38:	0452      	lsls	r2, r2, #17
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	492a      	ldr	r1, [pc, #168]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	610b      	str	r3, [r1, #16]
 8004b42:	e027      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d112      	bne.n	8004b70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b4a:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6892      	ldr	r2, [r2, #8]
 8004b5a:	0211      	lsls	r1, r2, #8
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6912      	ldr	r2, [r2, #16]
 8004b60:	0852      	lsrs	r2, r2, #1
 8004b62:	3a01      	subs	r2, #1
 8004b64:	0552      	lsls	r2, r2, #21
 8004b66:	430a      	orrs	r2, r1
 8004b68:	491f      	ldr	r1, [pc, #124]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]
 8004b6e:	e011      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6952      	ldr	r2, [r2, #20]
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0652      	lsls	r2, r2, #25
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	4916      	ldr	r1, [pc, #88]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a13      	ldr	r2, [pc, #76]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fd ffc4 	bl	8002b2c <HAL_GetTick>
 8004ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba6:	e009      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba8:	f7fd ffc0 	bl	8002b2c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d902      	bls.n	8004bbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bba:	e005      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ef      	beq.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000

08004bec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c06:	4b67      	ldr	r3, [pc, #412]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0203 	and.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d10d      	bne.n	8004c32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
       ||
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c1e:	4b61      	ldr	r3, [pc, #388]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d047      	beq.n	8004cc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
 8004c36:	e044      	b.n	8004cc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d018      	beq.n	8004c72 <RCCEx_PLLSAI2_Config+0x86>
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d825      	bhi.n	8004c90 <RCCEx_PLLSAI2_Config+0xa4>
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d002      	beq.n	8004c4e <RCCEx_PLLSAI2_Config+0x62>
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d009      	beq.n	8004c60 <RCCEx_PLLSAI2_Config+0x74>
 8004c4c:	e020      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c4e:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11d      	bne.n	8004c96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5e:	e01a      	b.n	8004c96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c60:	4b50      	ldr	r3, [pc, #320]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d116      	bne.n	8004c9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c70:	e013      	b.n	8004c9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c72:	4b4c      	ldr	r3, [pc, #304]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10f      	bne.n	8004c9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c7e:	4b49      	ldr	r3, [pc, #292]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c8e:	e006      	b.n	8004c9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
      break;
 8004c94:	e004      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	4939      	ldr	r1, [pc, #228]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d167      	bne.n	8004d98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cc8:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a35      	ldr	r2, [pc, #212]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fd ff2a 	bl	8002b2c <HAL_GetTick>
 8004cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cda:	e009      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cdc:	f7fd ff26 	bl	8002b2c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d902      	bls.n	8004cf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	73fb      	strb	r3, [r7, #15]
        break;
 8004cee:	e005      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ef      	bne.n	8004cdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d14a      	bne.n	8004d98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d08:	4b26      	ldr	r3, [pc, #152]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6892      	ldr	r2, [r2, #8]
 8004d18:	0211      	lsls	r1, r2, #8
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68d2      	ldr	r2, [r2, #12]
 8004d1e:	0912      	lsrs	r2, r2, #4
 8004d20:	0452      	lsls	r2, r2, #17
 8004d22:	430a      	orrs	r2, r1
 8004d24:	491f      	ldr	r1, [pc, #124]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	614b      	str	r3, [r1, #20]
 8004d2a:	e011      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6892      	ldr	r2, [r2, #8]
 8004d3c:	0211      	lsls	r1, r2, #8
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6912      	ldr	r2, [r2, #16]
 8004d42:	0852      	lsrs	r2, r2, #1
 8004d44:	3a01      	subs	r2, #1
 8004d46:	0652      	lsls	r2, r2, #25
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	4916      	ldr	r1, [pc, #88]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d50:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fee6 	bl	8002b2c <HAL_GetTick>
 8004d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d62:	e009      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d64:	f7fd fee2 	bl	8002b2c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d902      	bls.n	8004d78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	73fb      	strb	r3, [r7, #15]
          break;
 8004d76:	e005      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d78:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4904      	ldr	r1, [pc, #16]	@ (8004da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40021000 	.word	0x40021000

08004da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e049      	b.n	8004e4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc fcee 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fd2a 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e049      	b.n	8004efc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f841 	bl	8004f04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 fcd3 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 f931 	bl	8006192 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3e      	ldr	r2, [pc, #248]	@ (8005030 <HAL_TIM_OC_Stop+0x118>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_TIM_OC_Stop+0x4a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8005034 <HAL_TIM_OC_Stop+0x11c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIM_OC_Stop+0x4a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a3b      	ldr	r2, [pc, #236]	@ (8005038 <HAL_TIM_OC_Stop+0x120>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_OC_Stop+0x4a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	@ (800503c <HAL_TIM_OC_Stop+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_OC_Stop+0x4a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a38      	ldr	r2, [pc, #224]	@ (8005040 <HAL_TIM_OC_Stop+0x128>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_OC_Stop+0x4e>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_OC_Stop+0x50>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10f      	bne.n	8004f9c <HAL_TIM_OC_Stop+0x84>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_OC_Stop+0x84>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <HAL_TIM_OC_Stop+0xb4>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_OC_Stop+0xb4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_OC_Stop+0xc4>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fda:	e023      	b.n	8005024 <HAL_TIM_OC_Stop+0x10c>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d104      	bne.n	8004fec <HAL_TIM_OC_Stop+0xd4>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fea:	e01b      	b.n	8005024 <HAL_TIM_OC_Stop+0x10c>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_OC_Stop+0xe4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ffa:	e013      	b.n	8005024 <HAL_TIM_OC_Stop+0x10c>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d104      	bne.n	800500c <HAL_TIM_OC_Stop+0xf4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800500a:	e00b      	b.n	8005024 <HAL_TIM_OC_Stop+0x10c>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d104      	bne.n	800501c <HAL_TIM_OC_Stop+0x104>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800501a:	e003      	b.n	8005024 <HAL_TIM_OC_Stop+0x10c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d841      	bhi.n	80050dc <HAL_TIM_OC_Stop_IT+0x98>
 8005058:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <HAL_TIM_OC_Stop_IT+0x1c>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005095 	.word	0x08005095
 8005064:	080050dd 	.word	0x080050dd
 8005068:	080050dd 	.word	0x080050dd
 800506c:	080050dd 	.word	0x080050dd
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050dd 	.word	0x080050dd
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080050dd 	.word	0x080050dd
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050dd 	.word	0x080050dd
 800508c:	080050dd 	.word	0x080050dd
 8005090:	080050cb 	.word	0x080050cb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0202 	bic.w	r2, r2, #2
 80050a2:	60da      	str	r2, [r3, #12]
      break;
 80050a4:	e01d      	b.n	80050e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0204 	bic.w	r2, r2, #4
 80050b4:	60da      	str	r2, [r3, #12]
      break;
 80050b6:	e014      	b.n	80050e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0208 	bic.w	r2, r2, #8
 80050c6:	60da      	str	r2, [r3, #12]
      break;
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0210 	bic.w	r2, r2, #16
 80050d8:	60da      	str	r2, [r3, #12]
      break;
 80050da:	e002      	b.n	80050e2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 8081 	bne.w	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f84d 	bl	8006192 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a3e      	ldr	r2, [pc, #248]	@ (80051f8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <HAL_TIM_OC_Stop_IT+0xe6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a3d      	ldr	r2, [pc, #244]	@ (80051fc <HAL_TIM_OC_Stop_IT+0x1b8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00e      	beq.n	800512a <HAL_TIM_OC_Stop_IT+0xe6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3b      	ldr	r2, [pc, #236]	@ (8005200 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d009      	beq.n	800512a <HAL_TIM_OC_Stop_IT+0xe6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3a      	ldr	r2, [pc, #232]	@ (8005204 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_TIM_OC_Stop_IT+0xe6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_TIM_OC_Stop_IT+0xea>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_TIM_OC_Stop_IT+0xec>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10f      	bne.n	8005164 <HAL_TIM_OC_Stop_IT+0x120>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	f240 4344 	movw	r3, #1092	@ 0x444
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <HAL_TIM_OC_Stop_IT+0x120>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005162:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10f      	bne.n	8005194 <HAL_TIM_OC_Stop_IT+0x150>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	f240 4344 	movw	r3, #1092	@ 0x444
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_TIM_OC_Stop_IT+0x150>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <HAL_TIM_OC_Stop_IT+0x160>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a2:	e023      	b.n	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d104      	bne.n	80051b4 <HAL_TIM_OC_Stop_IT+0x170>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b2:	e01b      	b.n	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d104      	bne.n	80051c4 <HAL_TIM_OC_Stop_IT+0x180>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c2:	e013      	b.n	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d104      	bne.n	80051d4 <HAL_TIM_OC_Stop_IT+0x190>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051d2:	e00b      	b.n	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d104      	bne.n	80051e4 <HAL_TIM_OC_Stop_IT+0x1a0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e2:	e003      	b.n	80051ec <HAL_TIM_OC_Stop_IT+0x1a8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e041      	b.n	80052a4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f839 	bl	80052ac <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f000 faf7 	bl	8005840 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0208 	bic.w	r2, r2, #8
 8005260:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0202 	mvn.w	r2, #2
 80052f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa79 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa6b 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fa7c 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d020      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0204 	mvn.w	r2, #4
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa53 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa45 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa56 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d020      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0208 	mvn.w	r2, #8
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa2d 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa1f 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa30 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d020      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0210 	mvn.w	r2, #16
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2208      	movs	r2, #8
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa07 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9f9 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fa0a 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9d7 	bl	80057da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 ffd1 	bl	80063fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ffc9 	bl	8006410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f9c4 	bl	800582a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0220 	mvn.w	r2, #32
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 ff91 	bl	80063e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e066      	b.n	80055bc <HAL_TIM_OC_ConfigChannel+0xec>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b14      	cmp	r3, #20
 80054fa:	d857      	bhi.n	80055ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80054fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <HAL_TIM_OC_ConfigChannel+0x34>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005559 	.word	0x08005559
 8005508:	080055ad 	.word	0x080055ad
 800550c:	080055ad 	.word	0x080055ad
 8005510:	080055ad 	.word	0x080055ad
 8005514:	08005567 	.word	0x08005567
 8005518:	080055ad 	.word	0x080055ad
 800551c:	080055ad 	.word	0x080055ad
 8005520:	080055ad 	.word	0x080055ad
 8005524:	08005575 	.word	0x08005575
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080055ad 	.word	0x080055ad
 8005530:	080055ad 	.word	0x080055ad
 8005534:	08005583 	.word	0x08005583
 8005538:	080055ad 	.word	0x080055ad
 800553c:	080055ad 	.word	0x080055ad
 8005540:	080055ad 	.word	0x080055ad
 8005544:	08005591 	.word	0x08005591
 8005548:	080055ad 	.word	0x080055ad
 800554c:	080055ad 	.word	0x080055ad
 8005550:	080055ad 	.word	0x080055ad
 8005554:	0800559f 	.word	0x0800559f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa14 	bl	800598c <TIM_OC1_SetConfig>
      break;
 8005564:	e025      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fa9d 	bl	8005aac <TIM_OC2_SetConfig>
      break;
 8005572:	e01e      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fb20 	bl	8005bc0 <TIM_OC3_SetConfig>
      break;
 8005580:	e017      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fba1 	bl	8005cd0 <TIM_OC4_SetConfig>
      break;
 800558e:	e010      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fc04 	bl	8005da4 <TIM_OC5_SetConfig>
      break;
 800559c:	e009      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fc61 	bl	8005e6c <TIM_OC6_SetConfig>
      break;
 80055aa:	e002      	b.n	80055b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
      break;
 80055b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x1c>
 80055dc:	2302      	movs	r3, #2
 80055de:	e0b6      	b.n	800574e <HAL_TIM_ConfigClockSource+0x18a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800560a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d03e      	beq.n	800569c <HAL_TIM_ConfigClockSource+0xd8>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	f200 8087 	bhi.w	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	f000 8086 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x176>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d87f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005634:	2b70      	cmp	r3, #112	@ 0x70
 8005636:	d01a      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xaa>
 8005638:	2b70      	cmp	r3, #112	@ 0x70
 800563a:	d87b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800563c:	2b60      	cmp	r3, #96	@ 0x60
 800563e:	d050      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x11e>
 8005640:	2b60      	cmp	r3, #96	@ 0x60
 8005642:	d877      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b50      	cmp	r3, #80	@ 0x50
 8005646:	d03c      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xfe>
 8005648:	2b50      	cmp	r3, #80	@ 0x50
 800564a:	d873      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d058      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x13e>
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d86f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005654:	2b30      	cmp	r3, #48	@ 0x30
 8005656:	d064      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005658:	2b30      	cmp	r3, #48	@ 0x30
 800565a:	d86b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d060      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d867      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05c      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005668:	2b10      	cmp	r3, #16
 800566a:	d05a      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 800566c:	e062      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	f000 fd68 	bl	8006152 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
      break;
 800569a:	e04f      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	f000 fd51 	bl	8006152 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056be:	609a      	str	r2, [r3, #8]
      break;
 80056c0:	e03c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fcc5 	bl	800605e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2150      	movs	r1, #80	@ 0x50
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fd1e 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80056e0:	e02c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fce4 	bl	80060bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2160      	movs	r1, #96	@ 0x60
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fd0e 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 8005700:	e01c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fca5 	bl	800605e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2140      	movs	r1, #64	@ 0x40
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fcfe 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 8005720:	e00c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f000 fcf5 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 8005732:	e003      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e000      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800573a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_SlaveConfigSynchro+0x18>
 800576a:	2302      	movs	r3, #2
 800576c:	e031      	b.n	80057d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fbd9 	bl	8005f38 <TIM_SlaveTimer_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e018      	b.n	80057d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a46      	ldr	r2, [pc, #280]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585e:	d00f      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a43      	ldr	r2, [pc, #268]	@ (8005970 <TIM_Base_SetConfig+0x130>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a42      	ldr	r2, [pc, #264]	@ (8005974 <TIM_Base_SetConfig+0x134>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a41      	ldr	r2, [pc, #260]	@ (8005978 <TIM_Base_SetConfig+0x138>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a40      	ldr	r2, [pc, #256]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <TIM_Base_SetConfig+0x130>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a31      	ldr	r2, [pc, #196]	@ (8005974 <TIM_Base_SetConfig+0x134>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a30      	ldr	r2, [pc, #192]	@ (8005978 <TIM_Base_SetConfig+0x138>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005980 <TIM_Base_SetConfig+0x140>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005984 <TIM_Base_SetConfig+0x144>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005988 <TIM_Base_SetConfig+0x148>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a16      	ldr	r2, [pc, #88]	@ (800596c <TIM_Base_SetConfig+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00f      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <TIM_Base_SetConfig+0x13c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00b      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <TIM_Base_SetConfig+0x140>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_Base_SetConfig+0x144>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <TIM_Base_SetConfig+0x148>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d103      	bne.n	8005940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]
  }
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f023 0201 	bic.w	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a98 <TIM_OC1_SetConfig+0x10c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_OC1_SetConfig+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a2b      	ldr	r2, [pc, #172]	@ (8005a9c <TIM_OC1_SetConfig+0x110>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_OC1_SetConfig+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa0 <TIM_OC1_SetConfig+0x114>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_OC1_SetConfig+0x80>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a29      	ldr	r2, [pc, #164]	@ (8005aa4 <TIM_OC1_SetConfig+0x118>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC1_SetConfig+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a28      	ldr	r2, [pc, #160]	@ (8005aa8 <TIM_OC1_SetConfig+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d10c      	bne.n	8005a26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0308 	bic.w	r3, r3, #8
 8005a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <TIM_OC1_SetConfig+0x10c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_OC1_SetConfig+0xc2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	@ (8005a9c <TIM_OC1_SetConfig+0x110>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_OC1_SetConfig+0xc2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <TIM_OC1_SetConfig+0x114>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_OC1_SetConfig+0xc2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a18      	ldr	r2, [pc, #96]	@ (8005aa4 <TIM_OC1_SetConfig+0x118>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC1_SetConfig+0xc2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <TIM_OC1_SetConfig+0x11c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d111      	bne.n	8005a72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40013400 	.word	0x40013400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f023 0210 	bic.w	r2, r3, #16
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a28      	ldr	r2, [pc, #160]	@ (8005bac <TIM_OC2_SetConfig+0x100>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0x6c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a27      	ldr	r2, [pc, #156]	@ (8005bb0 <TIM_OC2_SetConfig+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10d      	bne.n	8005b34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	@ (8005bac <TIM_OC2_SetConfig+0x100>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00f      	beq.n	8005b5c <TIM_OC2_SetConfig+0xb0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <TIM_OC2_SetConfig+0x104>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC2_SetConfig+0xb0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <TIM_OC2_SetConfig+0x108>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC2_SetConfig+0xb0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb8 <TIM_OC2_SetConfig+0x10c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC2_SetConfig+0xb0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a19      	ldr	r2, [pc, #100]	@ (8005bbc <TIM_OC2_SetConfig+0x110>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d113      	bne.n	8005b84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40013400 	.word	0x40013400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	@ (8005cbc <TIM_OC3_SetConfig+0xfc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0x6a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a26      	ldr	r2, [pc, #152]	@ (8005cc0 <TIM_OC3_SetConfig+0x100>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d10d      	bne.n	8005c46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <TIM_OC3_SetConfig+0xfc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_OC3_SetConfig+0xae>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc0 <TIM_OC3_SetConfig+0x100>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_OC3_SetConfig+0xae>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <TIM_OC3_SetConfig+0x104>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_OC3_SetConfig+0xae>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <TIM_OC3_SetConfig+0x108>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC3_SetConfig+0xae>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <TIM_OC3_SetConfig+0x10c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d113      	bne.n	8005c96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	031b      	lsls	r3, r3, #12
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a18      	ldr	r2, [pc, #96]	@ (8005d90 <TIM_OC4_SetConfig+0xc0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00f      	beq.n	8005d54 <TIM_OC4_SetConfig+0x84>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <TIM_OC4_SetConfig+0xc4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00b      	beq.n	8005d54 <TIM_OC4_SetConfig+0x84>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <TIM_OC4_SetConfig+0xc8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_OC4_SetConfig+0x84>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a15      	ldr	r2, [pc, #84]	@ (8005d9c <TIM_OC4_SetConfig+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC4_SetConfig+0x84>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a14      	ldr	r2, [pc, #80]	@ (8005da0 <TIM_OC4_SetConfig+0xd0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005de8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <TIM_OC5_SetConfig+0xb4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00f      	beq.n	8005e1e <TIM_OC5_SetConfig+0x7a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a16      	ldr	r2, [pc, #88]	@ (8005e5c <TIM_OC5_SetConfig+0xb8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <TIM_OC5_SetConfig+0x7a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	@ (8005e60 <TIM_OC5_SetConfig+0xbc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <TIM_OC5_SetConfig+0x7a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a14      	ldr	r2, [pc, #80]	@ (8005e64 <TIM_OC5_SetConfig+0xc0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_OC5_SetConfig+0x7a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a13      	ldr	r2, [pc, #76]	@ (8005e68 <TIM_OC5_SetConfig+0xc4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d109      	bne.n	8005e32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	051b      	lsls	r3, r3, #20
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <TIM_OC6_SetConfig+0xb8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00f      	beq.n	8005ee8 <TIM_OC6_SetConfig+0x7c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <TIM_OC6_SetConfig+0xbc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00b      	beq.n	8005ee8 <TIM_OC6_SetConfig+0x7c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	@ (8005f2c <TIM_OC6_SetConfig+0xc0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d007      	beq.n	8005ee8 <TIM_OC6_SetConfig+0x7c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	@ (8005f30 <TIM_OC6_SetConfig+0xc4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC6_SetConfig+0x7c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a14      	ldr	r2, [pc, #80]	@ (8005f34 <TIM_OC6_SetConfig+0xc8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	029b      	lsls	r3, r3, #10
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b70      	cmp	r3, #112	@ 0x70
 8005f84:	d01a      	beq.n	8005fbc <TIM_SlaveTimer_SetConfig+0x84>
 8005f86:	2b70      	cmp	r3, #112	@ 0x70
 8005f88:	d860      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005f8a:	2b60      	cmp	r3, #96	@ 0x60
 8005f8c:	d054      	beq.n	8006038 <TIM_SlaveTimer_SetConfig+0x100>
 8005f8e:	2b60      	cmp	r3, #96	@ 0x60
 8005f90:	d85c      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005f92:	2b50      	cmp	r3, #80	@ 0x50
 8005f94:	d046      	beq.n	8006024 <TIM_SlaveTimer_SetConfig+0xec>
 8005f96:	2b50      	cmp	r3, #80	@ 0x50
 8005f98:	d858      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d019      	beq.n	8005fd2 <TIM_SlaveTimer_SetConfig+0x9a>
 8005f9e:	2b40      	cmp	r3, #64	@ 0x40
 8005fa0:	d854      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005fa2:	2b30      	cmp	r3, #48	@ 0x30
 8005fa4:	d055      	beq.n	8006052 <TIM_SlaveTimer_SetConfig+0x11a>
 8005fa6:	2b30      	cmp	r3, #48	@ 0x30
 8005fa8:	d850      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d051      	beq.n	8006052 <TIM_SlaveTimer_SetConfig+0x11a>
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d84c      	bhi.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d04d      	beq.n	8006052 <TIM_SlaveTimer_SetConfig+0x11a>
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d04b      	beq.n	8006052 <TIM_SlaveTimer_SetConfig+0x11a>
 8005fba:	e047      	b.n	800604c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005fcc:	f000 f8c1 	bl	8006152 <TIM_ETR_SetConfig>
      break;
 8005fd0:	e040      	b.n	8006054 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d101      	bne.n	8005fde <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03b      	b.n	8006056 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006004:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
      break;
 8006022:	e017      	b.n	8006054 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006030:	461a      	mov	r2, r3
 8006032:	f000 f814 	bl	800605e <TIM_TI1_ConfigInputStage>
      break;
 8006036:	e00d      	b.n	8006054 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006044:	461a      	mov	r2, r3
 8006046:	f000 f839 	bl	80060bc <TIM_TI2_ConfigInputStage>
      break;
 800604a:	e003      	b.n	8006054 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]
      break;
 8006050:	e000      	b.n	8006054 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006052:	bf00      	nop
  }

  return status;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0201 	bic.w	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 030a 	bic.w	r3, r3, #10
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0210 	bic.w	r2, r3, #16
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	031b      	lsls	r3, r3, #12
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	f043 0307 	orr.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	609a      	str	r2, [r3, #8]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800616c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	021a      	lsls	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	431a      	orrs	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4313      	orrs	r3, r2
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	609a      	str	r2, [r3, #8]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2201      	movs	r2, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	43db      	mvns	r3, r3
 80061b4:	401a      	ands	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1a      	ldr	r2, [r3, #32]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	431a      	orrs	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e068      	b.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2e      	ldr	r2, [pc, #184]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2d      	ldr	r2, [pc, #180]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800622e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006266:	d018      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1a      	ldr	r2, [pc, #104]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a13      	ldr	r2, [pc, #76]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a14      	ldr	r2, [pc, #80]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10c      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40014000 	.word	0x40014000

080062ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e065      	b.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a14      	ldr	r2, [pc, #80]	@ (80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d115      	bne.n	80063c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40013400 	.word	0x40013400

080063e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e040      	b.n	80064b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fb fa2a 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2224      	movs	r2, #36	@ 0x24
 8006450:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc66 	bl	8006d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9ab 	bl	80067cc <UART_SetConfig>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e01b      	b.n	80064b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800648e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800649e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fce5 	bl	8006e80 <UART_CheckIdleState>
 80064b6:	4603      	mov	r3, r0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	@ 0x28
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d177      	bne.n	80065c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Transmit+0x24>
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e070      	b.n	80065ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2221      	movs	r2, #33	@ 0x21
 80064f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064f6:	f7fc fb19 	bl	8002b2c <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	d108      	bne.n	8006528 <HAL_UART_Transmit+0x68>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e003      	b.n	8006530 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006530:	e02f      	b.n	8006592 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	2180      	movs	r1, #128	@ 0x80
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fd47 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e03b      	b.n	80065ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10b      	bne.n	8006570 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	b292      	uxth	r2, r2
 8006566:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3302      	adds	r3, #2
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e007      	b.n	8006580 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	3301      	adds	r3, #1
 800657e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1c9      	bne.n	8006532 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2140      	movs	r1, #64	@ 0x40
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fd11 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e005      	b.n	80065ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	@ 0x28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d165      	bne.n	80066b6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_UART_Transmit_DMA+0x22>
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e05e      	b.n	80066b8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2221      	movs	r2, #33	@ 0x21
 800661c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006622:	2b00      	cmp	r3, #0
 8006624:	d027      	beq.n	8006676 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	4a25      	ldr	r2, [pc, #148]	@ (80066c0 <HAL_UART_Transmit_DMA+0xec>)
 800662c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	4a24      	ldr	r2, [pc, #144]	@ (80066c4 <HAL_UART_Transmit_DMA+0xf0>)
 8006634:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	4a23      	ldr	r2, [pc, #140]	@ (80066c8 <HAL_UART_Transmit_DMA+0xf4>)
 800663c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	2200      	movs	r2, #0
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800664e:	4619      	mov	r1, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3328      	adds	r3, #40	@ 0x28
 8006656:	461a      	mov	r2, r3
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	f7fc fd53 	bl	8003104 <HAL_DMA_Start_IT>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2210      	movs	r2, #16
 8006668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e020      	b.n	80066b8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2240      	movs	r2, #64	@ 0x40
 800667c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	613b      	str	r3, [r7, #16]
   return(result);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	623a      	str	r2, [r7, #32]
 80066a0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	69f9      	ldr	r1, [r7, #28]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e5      	bne.n	800667e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e000      	b.n	80066b8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	@ 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	08007301 	.word	0x08007301
 80066c4:	0800739b 	.word	0x0800739b
 80066c8:	08007521 	.word	0x08007521

080066cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	@ 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d137      	bne.n	8006754 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Receive_DMA+0x24>
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e030      	b.n	8006756 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <HAL_UART_Receive_DMA+0x94>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d01f      	beq.n	8006744 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	613b      	str	r3, [r7, #16]
   return(result);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	61bb      	str	r3, [r7, #24]
   return(result);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	461a      	mov	r2, r3
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fcae 	bl	80070ac <UART_Start_Receive_DMA>
 8006750:	4603      	mov	r3, r0
 8006752:	e000      	b.n	8006756 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3728      	adds	r7, #40	@ 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40008000 	.word	0x40008000

08006764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d0:	b08a      	sub	sp, #40	@ 0x28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4ba4      	ldr	r3, [pc, #656]	@ (8006a8c <UART_SetConfig+0x2c0>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006804:	430b      	orrs	r3, r1
 8006806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a99      	ldr	r2, [pc, #612]	@ (8006a90 <UART_SetConfig+0x2c4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006834:	4313      	orrs	r3, r2
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a90      	ldr	r2, [pc, #576]	@ (8006a94 <UART_SetConfig+0x2c8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d126      	bne.n	80068a4 <UART_SetConfig+0xd8>
 8006856:	4b90      	ldr	r3, [pc, #576]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d81b      	bhi.n	800689c <UART_SetConfig+0xd0>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <UART_SetConfig+0xa0>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006885 	.word	0x08006885
 8006878:	08006895 	.word	0x08006895
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e116      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006884:	2302      	movs	r3, #2
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e112      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e10e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e10a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e106      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7c      	ldr	r2, [pc, #496]	@ (8006a9c <UART_SetConfig+0x2d0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d138      	bne.n	8006920 <UART_SetConfig+0x154>
 80068ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006a98 <UART_SetConfig+0x2cc>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d82d      	bhi.n	8006918 <UART_SetConfig+0x14c>
 80068bc:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <UART_SetConfig+0xf8>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006919 	.word	0x08006919
 80068cc:	08006919 	.word	0x08006919
 80068d0:	08006919 	.word	0x08006919
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006919 	.word	0x08006919
 80068dc:	08006919 	.word	0x08006919
 80068e0:	08006919 	.word	0x08006919
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006919 	.word	0x08006919
 80068ec:	08006919 	.word	0x08006919
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006911 	.word	0x08006911
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fe:	e0d8      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006900:	2302      	movs	r3, #2
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006906:	e0d4      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006908:	2304      	movs	r3, #4
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690e:	e0d0      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006910:	2308      	movs	r3, #8
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006916:	e0cc      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006918:	2310      	movs	r3, #16
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691e:	e0c8      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa0 <UART_SetConfig+0x2d4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d125      	bne.n	8006976 <UART_SetConfig+0x1aa>
 800692a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a98 <UART_SetConfig+0x2cc>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006930:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006934:	2b30      	cmp	r3, #48	@ 0x30
 8006936:	d016      	beq.n	8006966 <UART_SetConfig+0x19a>
 8006938:	2b30      	cmp	r3, #48	@ 0x30
 800693a:	d818      	bhi.n	800696e <UART_SetConfig+0x1a2>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d00a      	beq.n	8006956 <UART_SetConfig+0x18a>
 8006940:	2b20      	cmp	r3, #32
 8006942:	d814      	bhi.n	800696e <UART_SetConfig+0x1a2>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <UART_SetConfig+0x182>
 8006948:	2b10      	cmp	r3, #16
 800694a:	d008      	beq.n	800695e <UART_SetConfig+0x192>
 800694c:	e00f      	b.n	800696e <UART_SetConfig+0x1a2>
 800694e:	2300      	movs	r3, #0
 8006950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006954:	e0ad      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006956:	2302      	movs	r3, #2
 8006958:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800695c:	e0a9      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800695e:	2304      	movs	r3, #4
 8006960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006964:	e0a5      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006966:	2308      	movs	r3, #8
 8006968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696c:	e0a1      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 800696e:	2310      	movs	r3, #16
 8006970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006974:	e09d      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa4 <UART_SetConfig+0x2d8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d125      	bne.n	80069cc <UART_SetConfig+0x200>
 8006980:	4b45      	ldr	r3, [pc, #276]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800698a:	2bc0      	cmp	r3, #192	@ 0xc0
 800698c:	d016      	beq.n	80069bc <UART_SetConfig+0x1f0>
 800698e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006990:	d818      	bhi.n	80069c4 <UART_SetConfig+0x1f8>
 8006992:	2b80      	cmp	r3, #128	@ 0x80
 8006994:	d00a      	beq.n	80069ac <UART_SetConfig+0x1e0>
 8006996:	2b80      	cmp	r3, #128	@ 0x80
 8006998:	d814      	bhi.n	80069c4 <UART_SetConfig+0x1f8>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <UART_SetConfig+0x1d8>
 800699e:	2b40      	cmp	r3, #64	@ 0x40
 80069a0:	d008      	beq.n	80069b4 <UART_SetConfig+0x1e8>
 80069a2:	e00f      	b.n	80069c4 <UART_SetConfig+0x1f8>
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e082      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069ac:	2302      	movs	r3, #2
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b2:	e07e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ba:	e07a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c2:	e076      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e072      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a35      	ldr	r2, [pc, #212]	@ (8006aa8 <UART_SetConfig+0x2dc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d12a      	bne.n	8006a2c <UART_SetConfig+0x260>
 80069d6:	4b30      	ldr	r3, [pc, #192]	@ (8006a98 <UART_SetConfig+0x2cc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e4:	d01a      	beq.n	8006a1c <UART_SetConfig+0x250>
 80069e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ea:	d81b      	bhi.n	8006a24 <UART_SetConfig+0x258>
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f0:	d00c      	beq.n	8006a0c <UART_SetConfig+0x240>
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f6:	d815      	bhi.n	8006a24 <UART_SetConfig+0x258>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <UART_SetConfig+0x238>
 80069fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a00:	d008      	beq.n	8006a14 <UART_SetConfig+0x248>
 8006a02:	e00f      	b.n	8006a24 <UART_SetConfig+0x258>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0a:	e052      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a12:	e04e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1a:	e04a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e046      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2a:	e042      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a17      	ldr	r2, [pc, #92]	@ (8006a90 <UART_SetConfig+0x2c4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d13a      	bne.n	8006aac <UART_SetConfig+0x2e0>
 8006a36:	4b18      	ldr	r3, [pc, #96]	@ (8006a98 <UART_SetConfig+0x2cc>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a44:	d01a      	beq.n	8006a7c <UART_SetConfig+0x2b0>
 8006a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4a:	d81b      	bhi.n	8006a84 <UART_SetConfig+0x2b8>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a50:	d00c      	beq.n	8006a6c <UART_SetConfig+0x2a0>
 8006a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a56:	d815      	bhi.n	8006a84 <UART_SetConfig+0x2b8>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <UART_SetConfig+0x298>
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a60:	d008      	beq.n	8006a74 <UART_SetConfig+0x2a8>
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x2b8>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6a:	e022      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a72:	e01e      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7a:	e01a      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a82:	e016      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8a:	e012      	b.n	8006ab2 <UART_SetConfig+0x2e6>
 8006a8c:	efff69f3 	.word	0xefff69f3
 8006a90:	40008000 	.word	0x40008000
 8006a94:	40013800 	.word	0x40013800
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40004400 	.word	0x40004400
 8006aa0:	40004800 	.word	0x40004800
 8006aa4:	40004c00 	.word	0x40004c00
 8006aa8:	40005000 	.word	0x40005000
 8006aac:	2310      	movs	r3, #16
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a9f      	ldr	r2, [pc, #636]	@ (8006d34 <UART_SetConfig+0x568>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d17a      	bne.n	8006bb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006abc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d824      	bhi.n	8006b0e <UART_SetConfig+0x342>
 8006ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <UART_SetConfig+0x300>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006aff 	.word	0x08006aff
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b0f 	.word	0x08006b0f
 8006aec:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fd fc12 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
        break;
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b8f      	ldr	r3, [pc, #572]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006afa:	61fb      	str	r3, [r7, #28]
        break;
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fd fb73 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8006b02:	61f8      	str	r0, [r7, #28]
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0a:	61fb      	str	r3, [r7, #28]
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80fb 	beq.w	8006d18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d305      	bcc.n	8006b3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d903      	bls.n	8006b46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b44:	e0e8      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	022b      	lsls	r3, r5, #8
 8006b58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b5c:	0222      	lsls	r2, r4, #8
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	6849      	ldr	r1, [r1, #4]
 8006b62:	0849      	lsrs	r1, r1, #1
 8006b64:	2000      	movs	r0, #0
 8006b66:	4688      	mov	r8, r1
 8006b68:	4681      	mov	r9, r0
 8006b6a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b6e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	f7fa f810 	bl	8000ba8 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b96:	d308      	bcc.n	8006baa <UART_SetConfig+0x3de>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9e:	d204      	bcs.n	8006baa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	e0b6      	b.n	8006d18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bb0:	e0b2      	b.n	8006d18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bba:	d15e      	bne.n	8006c7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d828      	bhi.n	8006c16 <UART_SetConfig+0x44a>
 8006bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0x400>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	08006c17 	.word	0x08006c17
 8006bdc:	08006c07 	.word	0x08006c07
 8006be0:	08006c17 	.word	0x08006c17
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	08006c0f 	.word	0x08006c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7fd fb92 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
        break;
 8006bf6:	e014      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf8:	f7fd fba4 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8006bfc:	61f8      	str	r0, [r7, #28]
        break;
 8006bfe:	e010      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b4d      	ldr	r3, [pc, #308]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006c02:	61fb      	str	r3, [r7, #28]
        break;
 8006c04:	e00d      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fd faef 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8006c0a:	61f8      	str	r0, [r7, #28]
        break;
 8006c0c:	e009      	b.n	8006c22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e005      	b.n	8006c22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d077      	beq.n	8006d18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	005a      	lsls	r2, r3, #1
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	441a      	add	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b0f      	cmp	r3, #15
 8006c42:	d916      	bls.n	8006c72 <UART_SetConfig+0x4a6>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4a:	d212      	bcs.n	8006c72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f023 030f 	bic.w	r3, r3, #15
 8006c54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	8afb      	ldrh	r3, [r7, #22]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	8afa      	ldrh	r2, [r7, #22]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	e052      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c78:	e04e      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d827      	bhi.n	8006cd2 <UART_SetConfig+0x506>
 8006c82:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <UART_SetConfig+0x4bc>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fd fb34 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61f8      	str	r0, [r7, #28]
        break;
 8006cb2:	e014      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd fb46 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	61f8      	str	r0, [r7, #28]
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <UART_SetConfig+0x56c>)
 8006cbe:	61fb      	str	r3, [r7, #28]
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd fa91 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8006cc6:	61f8      	str	r0, [r7, #28]
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	61fb      	str	r3, [r7, #28]
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d019      	beq.n	8006d18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	085a      	lsrs	r2, r3, #1
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	441a      	add	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d909      	bls.n	8006d12 <UART_SetConfig+0x546>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d04:	d205      	bcs.n	8006d12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
 8006d10:	e002      	b.n	8006d18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	@ 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	40008000 	.word	0x40008000
 8006d38:	00f42400 	.word	0x00f42400

08006d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01a      	beq.n	8006e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e3a:	d10a      	bne.n	8006e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b098      	sub	sp, #96	@ 0x60
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e90:	f7fb fe4c 	bl	8002b2c <HAL_GetTick>
 8006e94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d12e      	bne.n	8006f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f88c 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d021      	beq.n	8006f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ede:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e062      	b.n	8006fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d149      	bne.n	8006fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f856 	bl	8006fd0 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d03c      	beq.n	8006fa4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	623b      	str	r3, [r7, #32]
   return(result);
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f7c:	61fa      	str	r2, [r7, #28]
 8006f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e011      	b.n	8006fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3758      	adds	r7, #88	@ 0x58
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe0:	e04f      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d04b      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fea:	f7fb fd9f 	bl	8002b2c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e04e      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d037      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b80      	cmp	r3, #128	@ 0x80
 8007016:	d034      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d031      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d110      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f8ff 	bl	8007238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2208      	movs	r2, #8
 800703e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e029      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705c:	d111      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f8e5 	bl	8007238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e00f      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4013      	ands	r3, r2
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	429a      	cmp	r2, r3
 800709e:	d0a0      	beq.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b096      	sub	sp, #88	@ 0x58
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2222      	movs	r2, #34	@ 0x22
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d028      	beq.n	8007132 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e4:	4a3e      	ldr	r2, [pc, #248]	@ (80071e0 <UART_Start_Receive_DMA+0x134>)
 80070e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ec:	4a3d      	ldr	r2, [pc, #244]	@ (80071e4 <UART_Start_Receive_DMA+0x138>)
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f4:	4a3c      	ldr	r2, [pc, #240]	@ (80071e8 <UART_Start_Receive_DMA+0x13c>)
 80070f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070fc:	2200      	movs	r2, #0
 80070fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3324      	adds	r3, #36	@ 0x24
 800710a:	4619      	mov	r1, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007110:	461a      	mov	r2, r3
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	f7fb fff6 	bl	8003104 <HAL_DMA_Start_IT>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2210      	movs	r2, #16
 8007122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e051      	b.n	80071d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d018      	beq.n	800716c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800714e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800715a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800715e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	653b      	str	r3, [r7, #80]	@ 0x50
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800718c:	637a      	str	r2, [r7, #52]	@ 0x34
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	613b      	str	r3, [r7, #16]
   return(result);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071c0:	623a      	str	r2, [r7, #32]
 80071c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	6a3a      	ldr	r2, [r7, #32]
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3758      	adds	r7, #88	@ 0x58
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	080073b7 	.word	0x080073b7
 80071e4:	080074e3 	.word	0x080074e3
 80071e8:	08007521 	.word	0x08007521

080071ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	60bb      	str	r3, [r7, #8]
   return(result);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6979      	ldr	r1, [r7, #20]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	613b      	str	r3, [r7, #16]
   return(result);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e6      	bne.n	80071f4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800722c:	bf00      	nop
 800722e:	3724      	adds	r7, #36	@ 0x24
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b095      	sub	sp, #84	@ 0x54
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007260:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	61fb      	str	r3, [r7, #28]
   return(result);
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d118      	bne.n	80072e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f023 0310 	bic.w	r3, r3, #16
 80072c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	613b      	str	r3, [r7, #16]
   return(result);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072f4:	bf00      	nop
 80072f6:	3754      	adds	r7, #84	@ 0x54
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b090      	sub	sp, #64	@ 0x40
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d137      	bne.n	800738c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731e:	2200      	movs	r2, #0
 8007320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	623b      	str	r3, [r7, #32]
   return(result);
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800733a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007344:	633a      	str	r2, [r7, #48]	@ 0x30
 8007346:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800734a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	60fb      	str	r3, [r7, #12]
   return(result);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736c:	637b      	str	r3, [r7, #52]	@ 0x34
 800736e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	69b9      	ldr	r1, [r7, #24]
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	617b      	str	r3, [r7, #20]
   return(result);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e6      	bne.n	8007358 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800738a:	e002      	b.n	8007392 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800738c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800738e:	f7ff f9e9 	bl	8006764 <HAL_UART_TxCpltCallback>
}
 8007392:	bf00      	nop
 8007394:	3740      	adds	r7, #64	@ 0x40
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff f9e5 	bl	8006778 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b09c      	sub	sp, #112	@ 0x70
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d171      	bne.n	80074b6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80073d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	667b      	str	r3, [r7, #100]	@ 0x64
 8007424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800742c:	647a      	str	r2, [r7, #68]	@ 0x44
 800742e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3308      	adds	r3, #8
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	623b      	str	r3, [r7, #32]
   return(result);
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007456:	663b      	str	r3, [r7, #96]	@ 0x60
 8007458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007460:	633a      	str	r2, [r7, #48]	@ 0x30
 8007462:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e5      	bne.n	8007440 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800747e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007480:	2b01      	cmp	r3, #1
 8007482:	d118      	bne.n	80074b6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	60fb      	str	r3, [r7, #12]
   return(result);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800749a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	69b9      	ldr	r1, [r7, #24]
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	617b      	str	r3, [r7, #20]
   return(result);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e6      	bne.n	8007484 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b8:	2200      	movs	r2, #0
 80074ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074ca:	4619      	mov	r1, r3
 80074cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074ce:	f7ff f971 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074d2:	e002      	b.n	80074da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80074d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074d6:	f7fa ffed 	bl	80024b4 <HAL_UART_RxCpltCallback>
}
 80074da:	bf00      	nop
 80074dc:	3770      	adds	r7, #112	@ 0x70
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d109      	bne.n	8007512 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	b29b      	uxth	r3, r3
 8007508:	4619      	mov	r1, r3
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff f952 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007510:	e002      	b.n	8007518 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff f93a 	bl	800678c <HAL_UART_RxHalfCpltCallback>
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007532:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007546:	2b80      	cmp	r3, #128	@ 0x80
 8007548:	d109      	bne.n	800755e <UART_DMAError+0x3e>
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b21      	cmp	r3, #33	@ 0x21
 800754e:	d106      	bne.n	800755e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2200      	movs	r2, #0
 8007554:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f7ff fe47 	bl	80071ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d109      	bne.n	8007580 <UART_DMAError+0x60>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b22      	cmp	r3, #34	@ 0x22
 8007570:	d106      	bne.n	8007580 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2200      	movs	r2, #0
 8007576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f7ff fe5c 	bl	8007238 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007586:	f043 0210 	orr.w	r2, r3, #16
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f7ff f905 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007596:	bf00      	nop
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <__cvt>:
 800759e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a2:	ec57 6b10 	vmov	r6, r7, d0
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	460c      	mov	r4, r1
 80075aa:	4619      	mov	r1, r3
 80075ac:	463b      	mov	r3, r7
 80075ae:	bfbb      	ittet	lt
 80075b0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80075b4:	461f      	movlt	r7, r3
 80075b6:	2300      	movge	r3, #0
 80075b8:	232d      	movlt	r3, #45	@ 0x2d
 80075ba:	700b      	strb	r3, [r1, #0]
 80075bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075be:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075c2:	4691      	mov	r9, r2
 80075c4:	f023 0820 	bic.w	r8, r3, #32
 80075c8:	bfbc      	itt	lt
 80075ca:	4632      	movlt	r2, r6
 80075cc:	4616      	movlt	r6, r2
 80075ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075d2:	d005      	beq.n	80075e0 <__cvt+0x42>
 80075d4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075d8:	d100      	bne.n	80075dc <__cvt+0x3e>
 80075da:	3401      	adds	r4, #1
 80075dc:	2102      	movs	r1, #2
 80075de:	e000      	b.n	80075e2 <__cvt+0x44>
 80075e0:	2103      	movs	r1, #3
 80075e2:	ab03      	add	r3, sp, #12
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	ab02      	add	r3, sp, #8
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	ec47 6b10 	vmov	d0, r6, r7
 80075ee:	4653      	mov	r3, sl
 80075f0:	4622      	mov	r2, r4
 80075f2:	f000 fe9d 	bl	8008330 <_dtoa_r>
 80075f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075fa:	4605      	mov	r5, r0
 80075fc:	d119      	bne.n	8007632 <__cvt+0x94>
 80075fe:	f019 0f01 	tst.w	r9, #1
 8007602:	d00e      	beq.n	8007622 <__cvt+0x84>
 8007604:	eb00 0904 	add.w	r9, r0, r4
 8007608:	2200      	movs	r2, #0
 800760a:	2300      	movs	r3, #0
 800760c:	4630      	mov	r0, r6
 800760e:	4639      	mov	r1, r7
 8007610:	f7f9 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007614:	b108      	cbz	r0, 800761a <__cvt+0x7c>
 8007616:	f8cd 900c 	str.w	r9, [sp, #12]
 800761a:	2230      	movs	r2, #48	@ 0x30
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	454b      	cmp	r3, r9
 8007620:	d31e      	bcc.n	8007660 <__cvt+0xc2>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007626:	1b5b      	subs	r3, r3, r5
 8007628:	4628      	mov	r0, r5
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	b004      	add	sp, #16
 800762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007632:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007636:	eb00 0904 	add.w	r9, r0, r4
 800763a:	d1e5      	bne.n	8007608 <__cvt+0x6a>
 800763c:	7803      	ldrb	r3, [r0, #0]
 800763e:	2b30      	cmp	r3, #48	@ 0x30
 8007640:	d10a      	bne.n	8007658 <__cvt+0xba>
 8007642:	2200      	movs	r2, #0
 8007644:	2300      	movs	r3, #0
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f9 fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800764e:	b918      	cbnz	r0, 8007658 <__cvt+0xba>
 8007650:	f1c4 0401 	rsb	r4, r4, #1
 8007654:	f8ca 4000 	str.w	r4, [sl]
 8007658:	f8da 3000 	ldr.w	r3, [sl]
 800765c:	4499      	add	r9, r3
 800765e:	e7d3      	b.n	8007608 <__cvt+0x6a>
 8007660:	1c59      	adds	r1, r3, #1
 8007662:	9103      	str	r1, [sp, #12]
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e7d9      	b.n	800761c <__cvt+0x7e>

08007668 <__exponent>:
 8007668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766a:	2900      	cmp	r1, #0
 800766c:	bfba      	itte	lt
 800766e:	4249      	neglt	r1, r1
 8007670:	232d      	movlt	r3, #45	@ 0x2d
 8007672:	232b      	movge	r3, #43	@ 0x2b
 8007674:	2909      	cmp	r1, #9
 8007676:	7002      	strb	r2, [r0, #0]
 8007678:	7043      	strb	r3, [r0, #1]
 800767a:	dd29      	ble.n	80076d0 <__exponent+0x68>
 800767c:	f10d 0307 	add.w	r3, sp, #7
 8007680:	461d      	mov	r5, r3
 8007682:	270a      	movs	r7, #10
 8007684:	461a      	mov	r2, r3
 8007686:	fbb1 f6f7 	udiv	r6, r1, r7
 800768a:	fb07 1416 	mls	r4, r7, r6, r1
 800768e:	3430      	adds	r4, #48	@ 0x30
 8007690:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007694:	460c      	mov	r4, r1
 8007696:	2c63      	cmp	r4, #99	@ 0x63
 8007698:	f103 33ff 	add.w	r3, r3, #4294967295
 800769c:	4631      	mov	r1, r6
 800769e:	dcf1      	bgt.n	8007684 <__exponent+0x1c>
 80076a0:	3130      	adds	r1, #48	@ 0x30
 80076a2:	1e94      	subs	r4, r2, #2
 80076a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076a8:	1c41      	adds	r1, r0, #1
 80076aa:	4623      	mov	r3, r4
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	d30a      	bcc.n	80076c6 <__exponent+0x5e>
 80076b0:	f10d 0309 	add.w	r3, sp, #9
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	42ac      	cmp	r4, r5
 80076b8:	bf88      	it	hi
 80076ba:	2300      	movhi	r3, #0
 80076bc:	3302      	adds	r3, #2
 80076be:	4403      	add	r3, r0
 80076c0:	1a18      	subs	r0, r3, r0
 80076c2:	b003      	add	sp, #12
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076ce:	e7ed      	b.n	80076ac <__exponent+0x44>
 80076d0:	2330      	movs	r3, #48	@ 0x30
 80076d2:	3130      	adds	r1, #48	@ 0x30
 80076d4:	7083      	strb	r3, [r0, #2]
 80076d6:	70c1      	strb	r1, [r0, #3]
 80076d8:	1d03      	adds	r3, r0, #4
 80076da:	e7f1      	b.n	80076c0 <__exponent+0x58>

080076dc <_printf_float>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	b08d      	sub	sp, #52	@ 0x34
 80076e2:	460c      	mov	r4, r1
 80076e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076e8:	4616      	mov	r6, r2
 80076ea:	461f      	mov	r7, r3
 80076ec:	4605      	mov	r5, r0
 80076ee:	f000 fd0f 	bl	8008110 <_localeconv_r>
 80076f2:	6803      	ldr	r3, [r0, #0]
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7f8 fdba 	bl	8000270 <strlen>
 80076fc:	2300      	movs	r3, #0
 80076fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007700:	f8d8 3000 	ldr.w	r3, [r8]
 8007704:	9005      	str	r0, [sp, #20]
 8007706:	3307      	adds	r3, #7
 8007708:	f023 0307 	bic.w	r3, r3, #7
 800770c:	f103 0208 	add.w	r2, r3, #8
 8007710:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007714:	f8d4 b000 	ldr.w	fp, [r4]
 8007718:	f8c8 2000 	str.w	r2, [r8]
 800771c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007720:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007724:	9307      	str	r3, [sp, #28]
 8007726:	f8cd 8018 	str.w	r8, [sp, #24]
 800772a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800772e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007732:	4b9c      	ldr	r3, [pc, #624]	@ (80079a4 <_printf_float+0x2c8>)
 8007734:	f04f 32ff 	mov.w	r2, #4294967295
 8007738:	f7f9 f9f8 	bl	8000b2c <__aeabi_dcmpun>
 800773c:	bb70      	cbnz	r0, 800779c <_printf_float+0xc0>
 800773e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007742:	4b98      	ldr	r3, [pc, #608]	@ (80079a4 <_printf_float+0x2c8>)
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	f7f9 f9d2 	bl	8000af0 <__aeabi_dcmple>
 800774c:	bb30      	cbnz	r0, 800779c <_printf_float+0xc0>
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f9 f9c1 	bl	8000adc <__aeabi_dcmplt>
 800775a:	b110      	cbz	r0, 8007762 <_printf_float+0x86>
 800775c:	232d      	movs	r3, #45	@ 0x2d
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007762:	4a91      	ldr	r2, [pc, #580]	@ (80079a8 <_printf_float+0x2cc>)
 8007764:	4b91      	ldr	r3, [pc, #580]	@ (80079ac <_printf_float+0x2d0>)
 8007766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800776a:	bf94      	ite	ls
 800776c:	4690      	movls	r8, r2
 800776e:	4698      	movhi	r8, r3
 8007770:	2303      	movs	r3, #3
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	f02b 0304 	bic.w	r3, fp, #4
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	f04f 0900 	mov.w	r9, #0
 800777e:	9700      	str	r7, [sp, #0]
 8007780:	4633      	mov	r3, r6
 8007782:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f9d2 	bl	8007b30 <_printf_common>
 800778c:	3001      	adds	r0, #1
 800778e:	f040 808d 	bne.w	80078ac <_printf_float+0x1d0>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	b00d      	add	sp, #52	@ 0x34
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	4642      	mov	r2, r8
 800779e:	464b      	mov	r3, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f9 f9c2 	bl	8000b2c <__aeabi_dcmpun>
 80077a8:	b140      	cbz	r0, 80077bc <_printf_float+0xe0>
 80077aa:	464b      	mov	r3, r9
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbc      	itt	lt
 80077b0:	232d      	movlt	r3, #45	@ 0x2d
 80077b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077b6:	4a7e      	ldr	r2, [pc, #504]	@ (80079b0 <_printf_float+0x2d4>)
 80077b8:	4b7e      	ldr	r3, [pc, #504]	@ (80079b4 <_printf_float+0x2d8>)
 80077ba:	e7d4      	b.n	8007766 <_printf_float+0x8a>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077c2:	9206      	str	r2, [sp, #24]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	d13b      	bne.n	8007840 <_printf_float+0x164>
 80077c8:	2306      	movs	r3, #6
 80077ca:	6063      	str	r3, [r4, #4]
 80077cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077d0:	2300      	movs	r3, #0
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80077d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077dc:	ab09      	add	r3, sp, #36	@ 0x24
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	ec49 8b10 	vmov	d0, r8, r9
 80077e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077ea:	4628      	mov	r0, r5
 80077ec:	f7ff fed7 	bl	800759e <__cvt>
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077f4:	2b47      	cmp	r3, #71	@ 0x47
 80077f6:	4680      	mov	r8, r0
 80077f8:	d129      	bne.n	800784e <_printf_float+0x172>
 80077fa:	1cc8      	adds	r0, r1, #3
 80077fc:	db02      	blt.n	8007804 <_printf_float+0x128>
 80077fe:	6863      	ldr	r3, [r4, #4]
 8007800:	4299      	cmp	r1, r3
 8007802:	dd41      	ble.n	8007888 <_printf_float+0x1ac>
 8007804:	f1aa 0a02 	sub.w	sl, sl, #2
 8007808:	fa5f fa8a 	uxtb.w	sl, sl
 800780c:	3901      	subs	r1, #1
 800780e:	4652      	mov	r2, sl
 8007810:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007814:	9109      	str	r1, [sp, #36]	@ 0x24
 8007816:	f7ff ff27 	bl	8007668 <__exponent>
 800781a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800781c:	1813      	adds	r3, r2, r0
 800781e:	2a01      	cmp	r2, #1
 8007820:	4681      	mov	r9, r0
 8007822:	6123      	str	r3, [r4, #16]
 8007824:	dc02      	bgt.n	800782c <_printf_float+0x150>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	07d2      	lsls	r2, r2, #31
 800782a:	d501      	bpl.n	8007830 <_printf_float+0x154>
 800782c:	3301      	adds	r3, #1
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0a2      	beq.n	800777e <_printf_float+0xa2>
 8007838:	232d      	movs	r3, #45	@ 0x2d
 800783a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800783e:	e79e      	b.n	800777e <_printf_float+0xa2>
 8007840:	9a06      	ldr	r2, [sp, #24]
 8007842:	2a47      	cmp	r2, #71	@ 0x47
 8007844:	d1c2      	bne.n	80077cc <_printf_float+0xf0>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1c0      	bne.n	80077cc <_printf_float+0xf0>
 800784a:	2301      	movs	r3, #1
 800784c:	e7bd      	b.n	80077ca <_printf_float+0xee>
 800784e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007852:	d9db      	bls.n	800780c <_printf_float+0x130>
 8007854:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007858:	d118      	bne.n	800788c <_printf_float+0x1b0>
 800785a:	2900      	cmp	r1, #0
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	dd0b      	ble.n	8007878 <_printf_float+0x19c>
 8007860:	6121      	str	r1, [r4, #16]
 8007862:	b913      	cbnz	r3, 800786a <_printf_float+0x18e>
 8007864:	6822      	ldr	r2, [r4, #0]
 8007866:	07d0      	lsls	r0, r2, #31
 8007868:	d502      	bpl.n	8007870 <_printf_float+0x194>
 800786a:	3301      	adds	r3, #1
 800786c:	440b      	add	r3, r1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007872:	f04f 0900 	mov.w	r9, #0
 8007876:	e7db      	b.n	8007830 <_printf_float+0x154>
 8007878:	b913      	cbnz	r3, 8007880 <_printf_float+0x1a4>
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	07d2      	lsls	r2, r2, #31
 800787e:	d501      	bpl.n	8007884 <_printf_float+0x1a8>
 8007880:	3302      	adds	r3, #2
 8007882:	e7f4      	b.n	800786e <_printf_float+0x192>
 8007884:	2301      	movs	r3, #1
 8007886:	e7f2      	b.n	800786e <_printf_float+0x192>
 8007888:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800788c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800788e:	4299      	cmp	r1, r3
 8007890:	db05      	blt.n	800789e <_printf_float+0x1c2>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	6121      	str	r1, [r4, #16]
 8007896:	07d8      	lsls	r0, r3, #31
 8007898:	d5ea      	bpl.n	8007870 <_printf_float+0x194>
 800789a:	1c4b      	adds	r3, r1, #1
 800789c:	e7e7      	b.n	800786e <_printf_float+0x192>
 800789e:	2900      	cmp	r1, #0
 80078a0:	bfd4      	ite	le
 80078a2:	f1c1 0202 	rsble	r2, r1, #2
 80078a6:	2201      	movgt	r2, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	e7e0      	b.n	800786e <_printf_float+0x192>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	055a      	lsls	r2, r3, #21
 80078b0:	d407      	bmi.n	80078c2 <_printf_float+0x1e6>
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	4642      	mov	r2, r8
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d12b      	bne.n	8007918 <_printf_float+0x23c>
 80078c0:	e767      	b.n	8007792 <_printf_float+0xb6>
 80078c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078c6:	f240 80dd 	bls.w	8007a84 <_printf_float+0x3a8>
 80078ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ce:	2200      	movs	r2, #0
 80078d0:	2300      	movs	r3, #0
 80078d2:	f7f9 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d033      	beq.n	8007942 <_printf_float+0x266>
 80078da:	4a37      	ldr	r2, [pc, #220]	@ (80079b8 <_printf_float+0x2dc>)
 80078dc:	2301      	movs	r3, #1
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	f43f af54 	beq.w	8007792 <_printf_float+0xb6>
 80078ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078ee:	4543      	cmp	r3, r8
 80078f0:	db02      	blt.n	80078f8 <_printf_float+0x21c>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	07d8      	lsls	r0, r3, #31
 80078f6:	d50f      	bpl.n	8007918 <_printf_float+0x23c>
 80078f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f af45 	beq.w	8007792 <_printf_float+0xb6>
 8007908:	f04f 0900 	mov.w	r9, #0
 800790c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007910:	f104 0a1a 	add.w	sl, r4, #26
 8007914:	45c8      	cmp	r8, r9
 8007916:	dc09      	bgt.n	800792c <_printf_float+0x250>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	079b      	lsls	r3, r3, #30
 800791c:	f100 8103 	bmi.w	8007b26 <_printf_float+0x44a>
 8007920:	68e0      	ldr	r0, [r4, #12]
 8007922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007924:	4298      	cmp	r0, r3
 8007926:	bfb8      	it	lt
 8007928:	4618      	movlt	r0, r3
 800792a:	e734      	b.n	8007796 <_printf_float+0xba>
 800792c:	2301      	movs	r3, #1
 800792e:	4652      	mov	r2, sl
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af2b 	beq.w	8007792 <_printf_float+0xb6>
 800793c:	f109 0901 	add.w	r9, r9, #1
 8007940:	e7e8      	b.n	8007914 <_printf_float+0x238>
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	2b00      	cmp	r3, #0
 8007946:	dc39      	bgt.n	80079bc <_printf_float+0x2e0>
 8007948:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <_printf_float+0x2dc>)
 800794a:	2301      	movs	r3, #1
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f af1d 	beq.w	8007792 <_printf_float+0xb6>
 8007958:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800795c:	ea59 0303 	orrs.w	r3, r9, r3
 8007960:	d102      	bne.n	8007968 <_printf_float+0x28c>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	d5d7      	bpl.n	8007918 <_printf_float+0x23c>
 8007968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f af0d 	beq.w	8007792 <_printf_float+0xb6>
 8007978:	f04f 0a00 	mov.w	sl, #0
 800797c:	f104 0b1a 	add.w	fp, r4, #26
 8007980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007982:	425b      	negs	r3, r3
 8007984:	4553      	cmp	r3, sl
 8007986:	dc01      	bgt.n	800798c <_printf_float+0x2b0>
 8007988:	464b      	mov	r3, r9
 800798a:	e793      	b.n	80078b4 <_printf_float+0x1d8>
 800798c:	2301      	movs	r3, #1
 800798e:	465a      	mov	r2, fp
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	47b8      	blx	r7
 8007996:	3001      	adds	r0, #1
 8007998:	f43f aefb 	beq.w	8007792 <_printf_float+0xb6>
 800799c:	f10a 0a01 	add.w	sl, sl, #1
 80079a0:	e7ee      	b.n	8007980 <_printf_float+0x2a4>
 80079a2:	bf00      	nop
 80079a4:	7fefffff 	.word	0x7fefffff
 80079a8:	0800a5c6 	.word	0x0800a5c6
 80079ac:	0800a5ca 	.word	0x0800a5ca
 80079b0:	0800a5ce 	.word	0x0800a5ce
 80079b4:	0800a5d2 	.word	0x0800a5d2
 80079b8:	0800a5d6 	.word	0x0800a5d6
 80079bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079c2:	4553      	cmp	r3, sl
 80079c4:	bfa8      	it	ge
 80079c6:	4653      	movge	r3, sl
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	4699      	mov	r9, r3
 80079cc:	dc36      	bgt.n	8007a3c <_printf_float+0x360>
 80079ce:	f04f 0b00 	mov.w	fp, #0
 80079d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d6:	f104 021a 	add.w	r2, r4, #26
 80079da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079dc:	9306      	str	r3, [sp, #24]
 80079de:	eba3 0309 	sub.w	r3, r3, r9
 80079e2:	455b      	cmp	r3, fp
 80079e4:	dc31      	bgt.n	8007a4a <_printf_float+0x36e>
 80079e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e8:	459a      	cmp	sl, r3
 80079ea:	dc3a      	bgt.n	8007a62 <_printf_float+0x386>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	07da      	lsls	r2, r3, #31
 80079f0:	d437      	bmi.n	8007a62 <_printf_float+0x386>
 80079f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f4:	ebaa 0903 	sub.w	r9, sl, r3
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	ebaa 0303 	sub.w	r3, sl, r3
 80079fe:	4599      	cmp	r9, r3
 8007a00:	bfa8      	it	ge
 8007a02:	4699      	movge	r9, r3
 8007a04:	f1b9 0f00 	cmp.w	r9, #0
 8007a08:	dc33      	bgt.n	8007a72 <_printf_float+0x396>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a12:	f104 0b1a 	add.w	fp, r4, #26
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	ebaa 0303 	sub.w	r3, sl, r3
 8007a1c:	eba3 0309 	sub.w	r3, r3, r9
 8007a20:	4543      	cmp	r3, r8
 8007a22:	f77f af79 	ble.w	8007918 <_printf_float+0x23c>
 8007a26:	2301      	movs	r3, #1
 8007a28:	465a      	mov	r2, fp
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f aeae 	beq.w	8007792 <_printf_float+0xb6>
 8007a36:	f108 0801 	add.w	r8, r8, #1
 8007a3a:	e7ec      	b.n	8007a16 <_printf_float+0x33a>
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1c2      	bne.n	80079ce <_printf_float+0x2f2>
 8007a48:	e6a3      	b.n	8007792 <_printf_float+0xb6>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	9206      	str	r2, [sp, #24]
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f ae9c 	beq.w	8007792 <_printf_float+0xb6>
 8007a5a:	9a06      	ldr	r2, [sp, #24]
 8007a5c:	f10b 0b01 	add.w	fp, fp, #1
 8007a60:	e7bb      	b.n	80079da <_printf_float+0x2fe>
 8007a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d1c0      	bne.n	80079f2 <_printf_float+0x316>
 8007a70:	e68f      	b.n	8007792 <_printf_float+0xb6>
 8007a72:	9a06      	ldr	r2, [sp, #24]
 8007a74:	464b      	mov	r3, r9
 8007a76:	4442      	add	r2, r8
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d1c3      	bne.n	8007a0a <_printf_float+0x32e>
 8007a82:	e686      	b.n	8007792 <_printf_float+0xb6>
 8007a84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a88:	f1ba 0f01 	cmp.w	sl, #1
 8007a8c:	dc01      	bgt.n	8007a92 <_printf_float+0x3b6>
 8007a8e:	07db      	lsls	r3, r3, #31
 8007a90:	d536      	bpl.n	8007b00 <_printf_float+0x424>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4642      	mov	r2, r8
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f ae78 	beq.w	8007792 <_printf_float+0xb6>
 8007aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f ae70 	beq.w	8007792 <_printf_float+0xb6>
 8007ab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007abe:	f7f9 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac2:	b9c0      	cbnz	r0, 8007af6 <_printf_float+0x41a>
 8007ac4:	4653      	mov	r3, sl
 8007ac6:	f108 0201 	add.w	r2, r8, #1
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d10c      	bne.n	8007aee <_printf_float+0x412>
 8007ad4:	e65d      	b.n	8007792 <_printf_float+0xb6>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	465a      	mov	r2, fp
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f43f ae56 	beq.w	8007792 <_printf_float+0xb6>
 8007ae6:	f108 0801 	add.w	r8, r8, #1
 8007aea:	45d0      	cmp	r8, sl
 8007aec:	dbf3      	blt.n	8007ad6 <_printf_float+0x3fa>
 8007aee:	464b      	mov	r3, r9
 8007af0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007af4:	e6df      	b.n	80078b6 <_printf_float+0x1da>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	f104 0b1a 	add.w	fp, r4, #26
 8007afe:	e7f4      	b.n	8007aea <_printf_float+0x40e>
 8007b00:	2301      	movs	r3, #1
 8007b02:	4642      	mov	r2, r8
 8007b04:	e7e1      	b.n	8007aca <_printf_float+0x3ee>
 8007b06:	2301      	movs	r3, #1
 8007b08:	464a      	mov	r2, r9
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	f43f ae3e 	beq.w	8007792 <_printf_float+0xb6>
 8007b16:	f108 0801 	add.w	r8, r8, #1
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b1e:	1a5b      	subs	r3, r3, r1
 8007b20:	4543      	cmp	r3, r8
 8007b22:	dcf0      	bgt.n	8007b06 <_printf_float+0x42a>
 8007b24:	e6fc      	b.n	8007920 <_printf_float+0x244>
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	f104 0919 	add.w	r9, r4, #25
 8007b2e:	e7f4      	b.n	8007b1a <_printf_float+0x43e>

08007b30 <_printf_common>:
 8007b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	4616      	mov	r6, r2
 8007b36:	4698      	mov	r8, r3
 8007b38:	688a      	ldr	r2, [r1, #8]
 8007b3a:	690b      	ldr	r3, [r1, #16]
 8007b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b40:	4293      	cmp	r3, r2
 8007b42:	bfb8      	it	lt
 8007b44:	4613      	movlt	r3, r2
 8007b46:	6033      	str	r3, [r6, #0]
 8007b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	b10a      	cbz	r2, 8007b56 <_printf_common+0x26>
 8007b52:	3301      	adds	r3, #1
 8007b54:	6033      	str	r3, [r6, #0]
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	0699      	lsls	r1, r3, #26
 8007b5a:	bf42      	ittt	mi
 8007b5c:	6833      	ldrmi	r3, [r6, #0]
 8007b5e:	3302      	addmi	r3, #2
 8007b60:	6033      	strmi	r3, [r6, #0]
 8007b62:	6825      	ldr	r5, [r4, #0]
 8007b64:	f015 0506 	ands.w	r5, r5, #6
 8007b68:	d106      	bne.n	8007b78 <_printf_common+0x48>
 8007b6a:	f104 0a19 	add.w	sl, r4, #25
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	6832      	ldr	r2, [r6, #0]
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dc26      	bgt.n	8007bc6 <_printf_common+0x96>
 8007b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	3b00      	subs	r3, #0
 8007b80:	bf18      	it	ne
 8007b82:	2301      	movne	r3, #1
 8007b84:	0692      	lsls	r2, r2, #26
 8007b86:	d42b      	bmi.n	8007be0 <_printf_common+0xb0>
 8007b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	4638      	mov	r0, r7
 8007b90:	47c8      	blx	r9
 8007b92:	3001      	adds	r0, #1
 8007b94:	d01e      	beq.n	8007bd4 <_printf_common+0xa4>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	6922      	ldr	r2, [r4, #16]
 8007b9a:	f003 0306 	and.w	r3, r3, #6
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	bf02      	ittt	eq
 8007ba2:	68e5      	ldreq	r5, [r4, #12]
 8007ba4:	6833      	ldreq	r3, [r6, #0]
 8007ba6:	1aed      	subeq	r5, r5, r3
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	bf0c      	ite	eq
 8007bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb0:	2500      	movne	r5, #0
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bfc4      	itt	gt
 8007bb6:	1a9b      	subgt	r3, r3, r2
 8007bb8:	18ed      	addgt	r5, r5, r3
 8007bba:	2600      	movs	r6, #0
 8007bbc:	341a      	adds	r4, #26
 8007bbe:	42b5      	cmp	r5, r6
 8007bc0:	d11a      	bne.n	8007bf8 <_printf_common+0xc8>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	e008      	b.n	8007bd8 <_printf_common+0xa8>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4641      	mov	r1, r8
 8007bcc:	4638      	mov	r0, r7
 8007bce:	47c8      	blx	r9
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d103      	bne.n	8007bdc <_printf_common+0xac>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bdc:	3501      	adds	r5, #1
 8007bde:	e7c6      	b.n	8007b6e <_printf_common+0x3e>
 8007be0:	18e1      	adds	r1, r4, r3
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	2030      	movs	r0, #48	@ 0x30
 8007be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bea:	4422      	add	r2, r4
 8007bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	e7c7      	b.n	8007b88 <_printf_common+0x58>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c8      	blx	r9
 8007c02:	3001      	adds	r0, #1
 8007c04:	d0e6      	beq.n	8007bd4 <_printf_common+0xa4>
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7d9      	b.n	8007bbe <_printf_common+0x8e>
	...

08007c0c <_printf_i>:
 8007c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	7e0f      	ldrb	r7, [r1, #24]
 8007c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c14:	2f78      	cmp	r7, #120	@ 0x78
 8007c16:	4691      	mov	r9, r2
 8007c18:	4680      	mov	r8, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c22:	d807      	bhi.n	8007c34 <_printf_i+0x28>
 8007c24:	2f62      	cmp	r7, #98	@ 0x62
 8007c26:	d80a      	bhi.n	8007c3e <_printf_i+0x32>
 8007c28:	2f00      	cmp	r7, #0
 8007c2a:	f000 80d2 	beq.w	8007dd2 <_printf_i+0x1c6>
 8007c2e:	2f58      	cmp	r7, #88	@ 0x58
 8007c30:	f000 80b9 	beq.w	8007da6 <_printf_i+0x19a>
 8007c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c3c:	e03a      	b.n	8007cb4 <_printf_i+0xa8>
 8007c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c42:	2b15      	cmp	r3, #21
 8007c44:	d8f6      	bhi.n	8007c34 <_printf_i+0x28>
 8007c46:	a101      	add	r1, pc, #4	@ (adr r1, 8007c4c <_printf_i+0x40>)
 8007c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007c35 	.word	0x08007c35
 8007c58:	08007c35 	.word	0x08007c35
 8007c5c:	08007c35 	.word	0x08007c35
 8007c60:	08007c35 	.word	0x08007c35
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007c35 	.word	0x08007c35
 8007c6c:	08007c35 	.word	0x08007c35
 8007c70:	08007c35 	.word	0x08007c35
 8007c74:	08007c35 	.word	0x08007c35
 8007c78:	08007db9 	.word	0x08007db9
 8007c7c:	08007ce3 	.word	0x08007ce3
 8007c80:	08007d73 	.word	0x08007d73
 8007c84:	08007c35 	.word	0x08007c35
 8007c88:	08007c35 	.word	0x08007c35
 8007c8c:	08007ddb 	.word	0x08007ddb
 8007c90:	08007c35 	.word	0x08007c35
 8007c94:	08007ce3 	.word	0x08007ce3
 8007c98:	08007c35 	.word	0x08007c35
 8007c9c:	08007c35 	.word	0x08007c35
 8007ca0:	08007d7b 	.word	0x08007d7b
 8007ca4:	6833      	ldr	r3, [r6, #0]
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6032      	str	r2, [r6, #0]
 8007cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e09d      	b.n	8007df4 <_printf_i+0x1e8>
 8007cb8:	6833      	ldr	r3, [r6, #0]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	1d19      	adds	r1, r3, #4
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	0606      	lsls	r6, r0, #24
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_i+0xbc>
 8007cc4:	681d      	ldr	r5, [r3, #0]
 8007cc6:	e003      	b.n	8007cd0 <_printf_i+0xc4>
 8007cc8:	0645      	lsls	r5, r0, #25
 8007cca:	d5fb      	bpl.n	8007cc4 <_printf_i+0xb8>
 8007ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	da03      	bge.n	8007cdc <_printf_i+0xd0>
 8007cd4:	232d      	movs	r3, #45	@ 0x2d
 8007cd6:	426d      	negs	r5, r5
 8007cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cdc:	4859      	ldr	r0, [pc, #356]	@ (8007e44 <_printf_i+0x238>)
 8007cde:	230a      	movs	r3, #10
 8007ce0:	e011      	b.n	8007d06 <_printf_i+0xfa>
 8007ce2:	6821      	ldr	r1, [r4, #0]
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	0608      	lsls	r0, r1, #24
 8007ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cec:	d402      	bmi.n	8007cf4 <_printf_i+0xe8>
 8007cee:	0649      	lsls	r1, r1, #25
 8007cf0:	bf48      	it	mi
 8007cf2:	b2ad      	uxthmi	r5, r5
 8007cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cf6:	4853      	ldr	r0, [pc, #332]	@ (8007e44 <_printf_i+0x238>)
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	bf14      	ite	ne
 8007cfc:	230a      	movne	r3, #10
 8007cfe:	2308      	moveq	r3, #8
 8007d00:	2100      	movs	r1, #0
 8007d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d06:	6866      	ldr	r6, [r4, #4]
 8007d08:	60a6      	str	r6, [r4, #8]
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	bfa2      	ittt	ge
 8007d0e:	6821      	ldrge	r1, [r4, #0]
 8007d10:	f021 0104 	bicge.w	r1, r1, #4
 8007d14:	6021      	strge	r1, [r4, #0]
 8007d16:	b90d      	cbnz	r5, 8007d1c <_printf_i+0x110>
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	d04b      	beq.n	8007db4 <_printf_i+0x1a8>
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d22:	fb03 5711 	mls	r7, r3, r1, r5
 8007d26:	5dc7      	ldrb	r7, [r0, r7]
 8007d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d2c:	462f      	mov	r7, r5
 8007d2e:	42bb      	cmp	r3, r7
 8007d30:	460d      	mov	r5, r1
 8007d32:	d9f4      	bls.n	8007d1e <_printf_i+0x112>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d10b      	bne.n	8007d50 <_printf_i+0x144>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	07df      	lsls	r7, r3, #31
 8007d3c:	d508      	bpl.n	8007d50 <_printf_i+0x144>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	6861      	ldr	r1, [r4, #4]
 8007d42:	4299      	cmp	r1, r3
 8007d44:	bfde      	ittt	le
 8007d46:	2330      	movle	r3, #48	@ 0x30
 8007d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d50:	1b92      	subs	r2, r2, r6
 8007d52:	6122      	str	r2, [r4, #16]
 8007d54:	f8cd a000 	str.w	sl, [sp]
 8007d58:	464b      	mov	r3, r9
 8007d5a:	aa03      	add	r2, sp, #12
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f7ff fee6 	bl	8007b30 <_printf_common>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d14a      	bne.n	8007dfe <_printf_i+0x1f2>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b004      	add	sp, #16
 8007d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f043 0320 	orr.w	r3, r3, #32
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	4833      	ldr	r0, [pc, #204]	@ (8007e48 <_printf_i+0x23c>)
 8007d7c:	2778      	movs	r7, #120	@ 0x78
 8007d7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	6831      	ldr	r1, [r6, #0]
 8007d86:	061f      	lsls	r7, r3, #24
 8007d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d8c:	d402      	bmi.n	8007d94 <_printf_i+0x188>
 8007d8e:	065f      	lsls	r7, r3, #25
 8007d90:	bf48      	it	mi
 8007d92:	b2ad      	uxthmi	r5, r5
 8007d94:	6031      	str	r1, [r6, #0]
 8007d96:	07d9      	lsls	r1, r3, #31
 8007d98:	bf44      	itt	mi
 8007d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d9e:	6023      	strmi	r3, [r4, #0]
 8007da0:	b11d      	cbz	r5, 8007daa <_printf_i+0x19e>
 8007da2:	2310      	movs	r3, #16
 8007da4:	e7ac      	b.n	8007d00 <_printf_i+0xf4>
 8007da6:	4827      	ldr	r0, [pc, #156]	@ (8007e44 <_printf_i+0x238>)
 8007da8:	e7e9      	b.n	8007d7e <_printf_i+0x172>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f023 0320 	bic.w	r3, r3, #32
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	e7f6      	b.n	8007da2 <_printf_i+0x196>
 8007db4:	4616      	mov	r6, r2
 8007db6:	e7bd      	b.n	8007d34 <_printf_i+0x128>
 8007db8:	6833      	ldr	r3, [r6, #0]
 8007dba:	6825      	ldr	r5, [r4, #0]
 8007dbc:	6961      	ldr	r1, [r4, #20]
 8007dbe:	1d18      	adds	r0, r3, #4
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	062e      	lsls	r6, r5, #24
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0x1c0>
 8007dc8:	6019      	str	r1, [r3, #0]
 8007dca:	e002      	b.n	8007dd2 <_printf_i+0x1c6>
 8007dcc:	0668      	lsls	r0, r5, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0x1bc>
 8007dd0:	8019      	strh	r1, [r3, #0]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	4616      	mov	r6, r2
 8007dd8:	e7bc      	b.n	8007d54 <_printf_i+0x148>
 8007dda:	6833      	ldr	r3, [r6, #0]
 8007ddc:	1d1a      	adds	r2, r3, #4
 8007dde:	6032      	str	r2, [r6, #0]
 8007de0:	681e      	ldr	r6, [r3, #0]
 8007de2:	6862      	ldr	r2, [r4, #4]
 8007de4:	2100      	movs	r1, #0
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7f8 f9f2 	bl	80001d0 <memchr>
 8007dec:	b108      	cbz	r0, 8007df2 <_printf_i+0x1e6>
 8007dee:	1b80      	subs	r0, r0, r6
 8007df0:	6060      	str	r0, [r4, #4]
 8007df2:	6863      	ldr	r3, [r4, #4]
 8007df4:	6123      	str	r3, [r4, #16]
 8007df6:	2300      	movs	r3, #0
 8007df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dfc:	e7aa      	b.n	8007d54 <_printf_i+0x148>
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	4632      	mov	r2, r6
 8007e02:	4649      	mov	r1, r9
 8007e04:	4640      	mov	r0, r8
 8007e06:	47d0      	blx	sl
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d0ad      	beq.n	8007d68 <_printf_i+0x15c>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	079b      	lsls	r3, r3, #30
 8007e10:	d413      	bmi.n	8007e3a <_printf_i+0x22e>
 8007e12:	68e0      	ldr	r0, [r4, #12]
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	4298      	cmp	r0, r3
 8007e18:	bfb8      	it	lt
 8007e1a:	4618      	movlt	r0, r3
 8007e1c:	e7a6      	b.n	8007d6c <_printf_i+0x160>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4632      	mov	r2, r6
 8007e22:	4649      	mov	r1, r9
 8007e24:	4640      	mov	r0, r8
 8007e26:	47d0      	blx	sl
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d09d      	beq.n	8007d68 <_printf_i+0x15c>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	68e3      	ldr	r3, [r4, #12]
 8007e30:	9903      	ldr	r1, [sp, #12]
 8007e32:	1a5b      	subs	r3, r3, r1
 8007e34:	42ab      	cmp	r3, r5
 8007e36:	dcf2      	bgt.n	8007e1e <_printf_i+0x212>
 8007e38:	e7eb      	b.n	8007e12 <_printf_i+0x206>
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	f104 0619 	add.w	r6, r4, #25
 8007e40:	e7f5      	b.n	8007e2e <_printf_i+0x222>
 8007e42:	bf00      	nop
 8007e44:	0800a5d8 	.word	0x0800a5d8
 8007e48:	0800a5e9 	.word	0x0800a5e9

08007e4c <std>:
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	4604      	mov	r4, r0
 8007e52:	e9c0 3300 	strd	r3, r3, [r0]
 8007e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e5a:	6083      	str	r3, [r0, #8]
 8007e5c:	8181      	strh	r1, [r0, #12]
 8007e5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e60:	81c2      	strh	r2, [r0, #14]
 8007e62:	6183      	str	r3, [r0, #24]
 8007e64:	4619      	mov	r1, r3
 8007e66:	2208      	movs	r2, #8
 8007e68:	305c      	adds	r0, #92	@ 0x5c
 8007e6a:	f000 f948 	bl	80080fe <memset>
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <std+0x58>)
 8007e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <std+0x5c>)
 8007e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <std+0x60>)
 8007e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <std+0x64>)
 8007e7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <std+0x68>)
 8007e80:	6224      	str	r4, [r4, #32]
 8007e82:	429c      	cmp	r4, r3
 8007e84:	d006      	beq.n	8007e94 <std+0x48>
 8007e86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e8a:	4294      	cmp	r4, r2
 8007e8c:	d002      	beq.n	8007e94 <std+0x48>
 8007e8e:	33d0      	adds	r3, #208	@ 0xd0
 8007e90:	429c      	cmp	r4, r3
 8007e92:	d105      	bne.n	8007ea0 <std+0x54>
 8007e94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9c:	f000 b9ac 	b.w	80081f8 <__retarget_lock_init_recursive>
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08008079 	.word	0x08008079
 8007ea8:	0800809b 	.word	0x0800809b
 8007eac:	080080d3 	.word	0x080080d3
 8007eb0:	080080f7 	.word	0x080080f7
 8007eb4:	20000684 	.word	0x20000684

08007eb8 <stdio_exit_handler>:
 8007eb8:	4a02      	ldr	r2, [pc, #8]	@ (8007ec4 <stdio_exit_handler+0xc>)
 8007eba:	4903      	ldr	r1, [pc, #12]	@ (8007ec8 <stdio_exit_handler+0x10>)
 8007ebc:	4803      	ldr	r0, [pc, #12]	@ (8007ecc <stdio_exit_handler+0x14>)
 8007ebe:	f000 b869 	b.w	8007f94 <_fwalk_sglue>
 8007ec2:	bf00      	nop
 8007ec4:	20000024 	.word	0x20000024
 8007ec8:	08009b75 	.word	0x08009b75
 8007ecc:	20000034 	.word	0x20000034

08007ed0 <cleanup_stdio>:
 8007ed0:	6841      	ldr	r1, [r0, #4]
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <cleanup_stdio+0x34>)
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	4604      	mov	r4, r0
 8007eda:	d001      	beq.n	8007ee0 <cleanup_stdio+0x10>
 8007edc:	f001 fe4a 	bl	8009b74 <_fflush_r>
 8007ee0:	68a1      	ldr	r1, [r4, #8]
 8007ee2:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <cleanup_stdio+0x38>)
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	d002      	beq.n	8007eee <cleanup_stdio+0x1e>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f001 fe43 	bl	8009b74 <_fflush_r>
 8007eee:	68e1      	ldr	r1, [r4, #12]
 8007ef0:	4b06      	ldr	r3, [pc, #24]	@ (8007f0c <cleanup_stdio+0x3c>)
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	d004      	beq.n	8007f00 <cleanup_stdio+0x30>
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efc:	f001 be3a 	b.w	8009b74 <_fflush_r>
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	bf00      	nop
 8007f04:	20000684 	.word	0x20000684
 8007f08:	200006ec 	.word	0x200006ec
 8007f0c:	20000754 	.word	0x20000754

08007f10 <global_stdio_init.part.0>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	4b0b      	ldr	r3, [pc, #44]	@ (8007f40 <global_stdio_init.part.0+0x30>)
 8007f14:	4c0b      	ldr	r4, [pc, #44]	@ (8007f44 <global_stdio_init.part.0+0x34>)
 8007f16:	4a0c      	ldr	r2, [pc, #48]	@ (8007f48 <global_stdio_init.part.0+0x38>)
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2104      	movs	r1, #4
 8007f20:	f7ff ff94 	bl	8007e4c <std>
 8007f24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2109      	movs	r1, #9
 8007f2c:	f7ff ff8e 	bl	8007e4c <std>
 8007f30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f34:	2202      	movs	r2, #2
 8007f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f3a:	2112      	movs	r1, #18
 8007f3c:	f7ff bf86 	b.w	8007e4c <std>
 8007f40:	200007bc 	.word	0x200007bc
 8007f44:	20000684 	.word	0x20000684
 8007f48:	08007eb9 	.word	0x08007eb9

08007f4c <__sfp_lock_acquire>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	@ (8007f54 <__sfp_lock_acquire+0x8>)
 8007f4e:	f000 b954 	b.w	80081fa <__retarget_lock_acquire_recursive>
 8007f52:	bf00      	nop
 8007f54:	200007c5 	.word	0x200007c5

08007f58 <__sfp_lock_release>:
 8007f58:	4801      	ldr	r0, [pc, #4]	@ (8007f60 <__sfp_lock_release+0x8>)
 8007f5a:	f000 b94f 	b.w	80081fc <__retarget_lock_release_recursive>
 8007f5e:	bf00      	nop
 8007f60:	200007c5 	.word	0x200007c5

08007f64 <__sinit>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4604      	mov	r4, r0
 8007f68:	f7ff fff0 	bl	8007f4c <__sfp_lock_acquire>
 8007f6c:	6a23      	ldr	r3, [r4, #32]
 8007f6e:	b11b      	cbz	r3, 8007f78 <__sinit+0x14>
 8007f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f74:	f7ff bff0 	b.w	8007f58 <__sfp_lock_release>
 8007f78:	4b04      	ldr	r3, [pc, #16]	@ (8007f8c <__sinit+0x28>)
 8007f7a:	6223      	str	r3, [r4, #32]
 8007f7c:	4b04      	ldr	r3, [pc, #16]	@ (8007f90 <__sinit+0x2c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f5      	bne.n	8007f70 <__sinit+0xc>
 8007f84:	f7ff ffc4 	bl	8007f10 <global_stdio_init.part.0>
 8007f88:	e7f2      	b.n	8007f70 <__sinit+0xc>
 8007f8a:	bf00      	nop
 8007f8c:	08007ed1 	.word	0x08007ed1
 8007f90:	200007bc 	.word	0x200007bc

08007f94 <_fwalk_sglue>:
 8007f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	4607      	mov	r7, r0
 8007f9a:	4688      	mov	r8, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8007fa8:	d505      	bpl.n	8007fb6 <_fwalk_sglue+0x22>
 8007faa:	6824      	ldr	r4, [r4, #0]
 8007fac:	2c00      	cmp	r4, #0
 8007fae:	d1f7      	bne.n	8007fa0 <_fwalk_sglue+0xc>
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d907      	bls.n	8007fcc <_fwalk_sglue+0x38>
 8007fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	d003      	beq.n	8007fcc <_fwalk_sglue+0x38>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	47c0      	blx	r8
 8007fca:	4306      	orrs	r6, r0
 8007fcc:	3568      	adds	r5, #104	@ 0x68
 8007fce:	e7e9      	b.n	8007fa4 <_fwalk_sglue+0x10>

08007fd0 <sniprintf>:
 8007fd0:	b40c      	push	{r2, r3}
 8007fd2:	b530      	push	{r4, r5, lr}
 8007fd4:	4b17      	ldr	r3, [pc, #92]	@ (8008034 <sniprintf+0x64>)
 8007fd6:	1e0c      	subs	r4, r1, #0
 8007fd8:	681d      	ldr	r5, [r3, #0]
 8007fda:	b09d      	sub	sp, #116	@ 0x74
 8007fdc:	da08      	bge.n	8007ff0 <sniprintf+0x20>
 8007fde:	238b      	movs	r3, #139	@ 0x8b
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe6:	b01d      	add	sp, #116	@ 0x74
 8007fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fec:	b002      	add	sp, #8
 8007fee:	4770      	bx	lr
 8007ff0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ff4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ff8:	bf14      	ite	ne
 8007ffa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ffe:	4623      	moveq	r3, r4
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	9307      	str	r3, [sp, #28]
 8008004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008008:	9002      	str	r0, [sp, #8]
 800800a:	9006      	str	r0, [sp, #24]
 800800c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008010:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008012:	ab21      	add	r3, sp, #132	@ 0x84
 8008014:	a902      	add	r1, sp, #8
 8008016:	4628      	mov	r0, r5
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	f001 fc2b 	bl	8009874 <_svfiprintf_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	bfbc      	itt	lt
 8008022:	238b      	movlt	r3, #139	@ 0x8b
 8008024:	602b      	strlt	r3, [r5, #0]
 8008026:	2c00      	cmp	r4, #0
 8008028:	d0dd      	beq.n	8007fe6 <sniprintf+0x16>
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	e7d9      	b.n	8007fe6 <sniprintf+0x16>
 8008032:	bf00      	nop
 8008034:	20000030 	.word	0x20000030

08008038 <siprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b500      	push	{lr}
 800803c:	b09c      	sub	sp, #112	@ 0x70
 800803e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008040:	9002      	str	r0, [sp, #8]
 8008042:	9006      	str	r0, [sp, #24]
 8008044:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008048:	4809      	ldr	r0, [pc, #36]	@ (8008070 <siprintf+0x38>)
 800804a:	9107      	str	r1, [sp, #28]
 800804c:	9104      	str	r1, [sp, #16]
 800804e:	4909      	ldr	r1, [pc, #36]	@ (8008074 <siprintf+0x3c>)
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	9105      	str	r1, [sp, #20]
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	a902      	add	r1, sp, #8
 800805c:	f001 fc0a 	bl	8009874 <_svfiprintf_r>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	b01c      	add	sp, #112	@ 0x70
 8008068:	f85d eb04 	ldr.w	lr, [sp], #4
 800806c:	b003      	add	sp, #12
 800806e:	4770      	bx	lr
 8008070:	20000030 	.word	0x20000030
 8008074:	ffff0208 	.word	0xffff0208

08008078 <__sread>:
 8008078:	b510      	push	{r4, lr}
 800807a:	460c      	mov	r4, r1
 800807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008080:	f000 f86c 	bl	800815c <_read_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	bfab      	itete	ge
 8008088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800808a:	89a3      	ldrhlt	r3, [r4, #12]
 800808c:	181b      	addge	r3, r3, r0
 800808e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008092:	bfac      	ite	ge
 8008094:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008096:	81a3      	strhlt	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__swrite>:
 800809a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	461f      	mov	r7, r3
 80080a0:	898b      	ldrh	r3, [r1, #12]
 80080a2:	05db      	lsls	r3, r3, #23
 80080a4:	4605      	mov	r5, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4616      	mov	r6, r2
 80080aa:	d505      	bpl.n	80080b8 <__swrite+0x1e>
 80080ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b0:	2302      	movs	r3, #2
 80080b2:	2200      	movs	r2, #0
 80080b4:	f000 f840 	bl	8008138 <_lseek_r>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	4632      	mov	r2, r6
 80080c6:	463b      	mov	r3, r7
 80080c8:	4628      	mov	r0, r5
 80080ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	f000 b857 	b.w	8008180 <_write_r>

080080d2 <__sseek>:
 80080d2:	b510      	push	{r4, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080da:	f000 f82d 	bl	8008138 <_lseek_r>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	bf15      	itete	ne
 80080e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ee:	81a3      	strheq	r3, [r4, #12]
 80080f0:	bf18      	it	ne
 80080f2:	81a3      	strhne	r3, [r4, #12]
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <__sclose>:
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 b80d 	b.w	8008118 <_close_r>

080080fe <memset>:
 80080fe:	4402      	add	r2, r0
 8008100:	4603      	mov	r3, r0
 8008102:	4293      	cmp	r3, r2
 8008104:	d100      	bne.n	8008108 <memset+0xa>
 8008106:	4770      	bx	lr
 8008108:	f803 1b01 	strb.w	r1, [r3], #1
 800810c:	e7f9      	b.n	8008102 <memset+0x4>
	...

08008110 <_localeconv_r>:
 8008110:	4800      	ldr	r0, [pc, #0]	@ (8008114 <_localeconv_r+0x4>)
 8008112:	4770      	bx	lr
 8008114:	20000170 	.word	0x20000170

08008118 <_close_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	@ (8008134 <_close_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f9 fdba 	bl	8001c9c <_close>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_close_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_close_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200007c0 	.word	0x200007c0

08008138 <_lseek_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	@ (8008158 <_lseek_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 fdcf 	bl	8001cea <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_lseek_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_lseek_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	200007c0 	.word	0x200007c0

0800815c <_read_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	@ (800817c <_read_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7f9 fd5d 	bl	8001c2a <_read>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_read_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_read_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200007c0 	.word	0x200007c0

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d07      	ldr	r5, [pc, #28]	@ (80081a0 <_write_r+0x20>)
 8008184:	4604      	mov	r4, r0
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	2200      	movs	r2, #0
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7f9 fd68 	bl	8001c64 <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200007c0 	.word	0x200007c0

080081a4 <__errno>:
 80081a4:	4b01      	ldr	r3, [pc, #4]	@ (80081ac <__errno+0x8>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000030 	.word	0x20000030

080081b0 <__libc_init_array>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	4d0d      	ldr	r5, [pc, #52]	@ (80081e8 <__libc_init_array+0x38>)
 80081b4:	4c0d      	ldr	r4, [pc, #52]	@ (80081ec <__libc_init_array+0x3c>)
 80081b6:	1b64      	subs	r4, r4, r5
 80081b8:	10a4      	asrs	r4, r4, #2
 80081ba:	2600      	movs	r6, #0
 80081bc:	42a6      	cmp	r6, r4
 80081be:	d109      	bne.n	80081d4 <__libc_init_array+0x24>
 80081c0:	4d0b      	ldr	r5, [pc, #44]	@ (80081f0 <__libc_init_array+0x40>)
 80081c2:	4c0c      	ldr	r4, [pc, #48]	@ (80081f4 <__libc_init_array+0x44>)
 80081c4:	f002 f99a 	bl	800a4fc <_init>
 80081c8:	1b64      	subs	r4, r4, r5
 80081ca:	10a4      	asrs	r4, r4, #2
 80081cc:	2600      	movs	r6, #0
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	d105      	bne.n	80081de <__libc_init_array+0x2e>
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d8:	4798      	blx	r3
 80081da:	3601      	adds	r6, #1
 80081dc:	e7ee      	b.n	80081bc <__libc_init_array+0xc>
 80081de:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e2:	4798      	blx	r3
 80081e4:	3601      	adds	r6, #1
 80081e6:	e7f2      	b.n	80081ce <__libc_init_array+0x1e>
 80081e8:	0800a958 	.word	0x0800a958
 80081ec:	0800a958 	.word	0x0800a958
 80081f0:	0800a958 	.word	0x0800a958
 80081f4:	0800a95c 	.word	0x0800a95c

080081f8 <__retarget_lock_init_recursive>:
 80081f8:	4770      	bx	lr

080081fa <__retarget_lock_acquire_recursive>:
 80081fa:	4770      	bx	lr

080081fc <__retarget_lock_release_recursive>:
 80081fc:	4770      	bx	lr

080081fe <memcpy>:
 80081fe:	440a      	add	r2, r1
 8008200:	4291      	cmp	r1, r2
 8008202:	f100 33ff 	add.w	r3, r0, #4294967295
 8008206:	d100      	bne.n	800820a <memcpy+0xc>
 8008208:	4770      	bx	lr
 800820a:	b510      	push	{r4, lr}
 800820c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008214:	4291      	cmp	r1, r2
 8008216:	d1f9      	bne.n	800820c <memcpy+0xe>
 8008218:	bd10      	pop	{r4, pc}

0800821a <quorem>:
 800821a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821e:	6903      	ldr	r3, [r0, #16]
 8008220:	690c      	ldr	r4, [r1, #16]
 8008222:	42a3      	cmp	r3, r4
 8008224:	4607      	mov	r7, r0
 8008226:	db7e      	blt.n	8008326 <quorem+0x10c>
 8008228:	3c01      	subs	r4, #1
 800822a:	f101 0814 	add.w	r8, r1, #20
 800822e:	00a3      	lsls	r3, r4, #2
 8008230:	f100 0514 	add.w	r5, r0, #20
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008244:	3301      	adds	r3, #1
 8008246:	429a      	cmp	r2, r3
 8008248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800824c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008250:	d32e      	bcc.n	80082b0 <quorem+0x96>
 8008252:	f04f 0a00 	mov.w	sl, #0
 8008256:	46c4      	mov	ip, r8
 8008258:	46ae      	mov	lr, r5
 800825a:	46d3      	mov	fp, sl
 800825c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008260:	b298      	uxth	r0, r3
 8008262:	fb06 a000 	mla	r0, r6, r0, sl
 8008266:	0c02      	lsrs	r2, r0, #16
 8008268:	0c1b      	lsrs	r3, r3, #16
 800826a:	fb06 2303 	mla	r3, r6, r3, r2
 800826e:	f8de 2000 	ldr.w	r2, [lr]
 8008272:	b280      	uxth	r0, r0
 8008274:	b292      	uxth	r2, r2
 8008276:	1a12      	subs	r2, r2, r0
 8008278:	445a      	add	r2, fp
 800827a:	f8de 0000 	ldr.w	r0, [lr]
 800827e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008282:	b29b      	uxth	r3, r3
 8008284:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008288:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800828c:	b292      	uxth	r2, r2
 800828e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008292:	45e1      	cmp	r9, ip
 8008294:	f84e 2b04 	str.w	r2, [lr], #4
 8008298:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800829c:	d2de      	bcs.n	800825c <quorem+0x42>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	58eb      	ldr	r3, [r5, r3]
 80082a2:	b92b      	cbnz	r3, 80082b0 <quorem+0x96>
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	3b04      	subs	r3, #4
 80082a8:	429d      	cmp	r5, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	d32f      	bcc.n	800830e <quorem+0xf4>
 80082ae:	613c      	str	r4, [r7, #16]
 80082b0:	4638      	mov	r0, r7
 80082b2:	f001 f97b 	bl	80095ac <__mcmp>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	db25      	blt.n	8008306 <quorem+0xec>
 80082ba:	4629      	mov	r1, r5
 80082bc:	2000      	movs	r0, #0
 80082be:	f858 2b04 	ldr.w	r2, [r8], #4
 80082c2:	f8d1 c000 	ldr.w	ip, [r1]
 80082c6:	fa1f fe82 	uxth.w	lr, r2
 80082ca:	fa1f f38c 	uxth.w	r3, ip
 80082ce:	eba3 030e 	sub.w	r3, r3, lr
 80082d2:	4403      	add	r3, r0
 80082d4:	0c12      	lsrs	r2, r2, #16
 80082d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082de:	b29b      	uxth	r3, r3
 80082e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082e4:	45c1      	cmp	r9, r8
 80082e6:	f841 3b04 	str.w	r3, [r1], #4
 80082ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082ee:	d2e6      	bcs.n	80082be <quorem+0xa4>
 80082f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082f8:	b922      	cbnz	r2, 8008304 <quorem+0xea>
 80082fa:	3b04      	subs	r3, #4
 80082fc:	429d      	cmp	r5, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	d30b      	bcc.n	800831a <quorem+0x100>
 8008302:	613c      	str	r4, [r7, #16]
 8008304:	3601      	adds	r6, #1
 8008306:	4630      	mov	r0, r6
 8008308:	b003      	add	sp, #12
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	3b04      	subs	r3, #4
 8008312:	2a00      	cmp	r2, #0
 8008314:	d1cb      	bne.n	80082ae <quorem+0x94>
 8008316:	3c01      	subs	r4, #1
 8008318:	e7c6      	b.n	80082a8 <quorem+0x8e>
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	3b04      	subs	r3, #4
 800831e:	2a00      	cmp	r2, #0
 8008320:	d1ef      	bne.n	8008302 <quorem+0xe8>
 8008322:	3c01      	subs	r4, #1
 8008324:	e7ea      	b.n	80082fc <quorem+0xe2>
 8008326:	2000      	movs	r0, #0
 8008328:	e7ee      	b.n	8008308 <quorem+0xee>
 800832a:	0000      	movs	r0, r0
 800832c:	0000      	movs	r0, r0
	...

08008330 <_dtoa_r>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	69c7      	ldr	r7, [r0, #28]
 8008336:	b099      	sub	sp, #100	@ 0x64
 8008338:	ed8d 0b02 	vstr	d0, [sp, #8]
 800833c:	ec55 4b10 	vmov	r4, r5, d0
 8008340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008342:	9109      	str	r1, [sp, #36]	@ 0x24
 8008344:	4683      	mov	fp, r0
 8008346:	920e      	str	r2, [sp, #56]	@ 0x38
 8008348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800834a:	b97f      	cbnz	r7, 800836c <_dtoa_r+0x3c>
 800834c:	2010      	movs	r0, #16
 800834e:	f000 fdfd 	bl	8008f4c <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	f8cb 001c 	str.w	r0, [fp, #28]
 8008358:	b920      	cbnz	r0, 8008364 <_dtoa_r+0x34>
 800835a:	4ba7      	ldr	r3, [pc, #668]	@ (80085f8 <_dtoa_r+0x2c8>)
 800835c:	21ef      	movs	r1, #239	@ 0xef
 800835e:	48a7      	ldr	r0, [pc, #668]	@ (80085fc <_dtoa_r+0x2cc>)
 8008360:	f001 fc5a 	bl	8009c18 <__assert_func>
 8008364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008368:	6007      	str	r7, [r0, #0]
 800836a:	60c7      	str	r7, [r0, #12]
 800836c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008370:	6819      	ldr	r1, [r3, #0]
 8008372:	b159      	cbz	r1, 800838c <_dtoa_r+0x5c>
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	604a      	str	r2, [r1, #4]
 8008378:	2301      	movs	r3, #1
 800837a:	4093      	lsls	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
 800837e:	4658      	mov	r0, fp
 8008380:	f000 feda 	bl	8009138 <_Bfree>
 8008384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	1e2b      	subs	r3, r5, #0
 800838e:	bfb9      	ittee	lt
 8008390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008394:	9303      	strlt	r3, [sp, #12]
 8008396:	2300      	movge	r3, #0
 8008398:	6033      	strge	r3, [r6, #0]
 800839a:	9f03      	ldr	r7, [sp, #12]
 800839c:	4b98      	ldr	r3, [pc, #608]	@ (8008600 <_dtoa_r+0x2d0>)
 800839e:	bfbc      	itt	lt
 80083a0:	2201      	movlt	r2, #1
 80083a2:	6032      	strlt	r2, [r6, #0]
 80083a4:	43bb      	bics	r3, r7
 80083a6:	d112      	bne.n	80083ce <_dtoa_r+0x9e>
 80083a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083b4:	4323      	orrs	r3, r4
 80083b6:	f000 854d 	beq.w	8008e54 <_dtoa_r+0xb24>
 80083ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008614 <_dtoa_r+0x2e4>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 854f 	beq.w	8008e64 <_dtoa_r+0xb34>
 80083c6:	f10a 0303 	add.w	r3, sl, #3
 80083ca:	f000 bd49 	b.w	8008e60 <_dtoa_r+0xb30>
 80083ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	ec51 0b17 	vmov	r0, r1, d7
 80083d8:	2300      	movs	r3, #0
 80083da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083de:	f7f8 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80083e2:	4680      	mov	r8, r0
 80083e4:	b158      	cbz	r0, 80083fe <_dtoa_r+0xce>
 80083e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083e8:	2301      	movs	r3, #1
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083ee:	b113      	cbz	r3, 80083f6 <_dtoa_r+0xc6>
 80083f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083f2:	4b84      	ldr	r3, [pc, #528]	@ (8008604 <_dtoa_r+0x2d4>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008618 <_dtoa_r+0x2e8>
 80083fa:	f000 bd33 	b.w	8008e64 <_dtoa_r+0xb34>
 80083fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008402:	aa16      	add	r2, sp, #88	@ 0x58
 8008404:	a917      	add	r1, sp, #92	@ 0x5c
 8008406:	4658      	mov	r0, fp
 8008408:	f001 f980 	bl	800970c <__d2b>
 800840c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008410:	4681      	mov	r9, r0
 8008412:	2e00      	cmp	r6, #0
 8008414:	d077      	beq.n	8008506 <_dtoa_r+0x1d6>
 8008416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800841c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800842c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008430:	4619      	mov	r1, r3
 8008432:	2200      	movs	r2, #0
 8008434:	4b74      	ldr	r3, [pc, #464]	@ (8008608 <_dtoa_r+0x2d8>)
 8008436:	f7f7 ff27 	bl	8000288 <__aeabi_dsub>
 800843a:	a369      	add	r3, pc, #420	@ (adr r3, 80085e0 <_dtoa_r+0x2b0>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	a368      	add	r3, pc, #416	@ (adr r3, 80085e8 <_dtoa_r+0x2b8>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff1f 	bl	800028c <__adddf3>
 800844e:	4604      	mov	r4, r0
 8008450:	4630      	mov	r0, r6
 8008452:	460d      	mov	r5, r1
 8008454:	f7f8 f866 	bl	8000524 <__aeabi_i2d>
 8008458:	a365      	add	r3, pc, #404	@ (adr r3, 80085f0 <_dtoa_r+0x2c0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f7 ff0f 	bl	800028c <__adddf3>
 800846e:	4604      	mov	r4, r0
 8008470:	460d      	mov	r5, r1
 8008472:	f7f8 fb71 	bl	8000b58 <__aeabi_d2iz>
 8008476:	2200      	movs	r2, #0
 8008478:	4607      	mov	r7, r0
 800847a:	2300      	movs	r3, #0
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 fb2c 	bl	8000adc <__aeabi_dcmplt>
 8008484:	b140      	cbz	r0, 8008498 <_dtoa_r+0x168>
 8008486:	4638      	mov	r0, r7
 8008488:	f7f8 f84c 	bl	8000524 <__aeabi_i2d>
 800848c:	4622      	mov	r2, r4
 800848e:	462b      	mov	r3, r5
 8008490:	f7f8 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008494:	b900      	cbnz	r0, 8008498 <_dtoa_r+0x168>
 8008496:	3f01      	subs	r7, #1
 8008498:	2f16      	cmp	r7, #22
 800849a:	d851      	bhi.n	8008540 <_dtoa_r+0x210>
 800849c:	4b5b      	ldr	r3, [pc, #364]	@ (800860c <_dtoa_r+0x2dc>)
 800849e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084aa:	f7f8 fb17 	bl	8000adc <__aeabi_dcmplt>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d048      	beq.n	8008544 <_dtoa_r+0x214>
 80084b2:	3f01      	subs	r7, #1
 80084b4:	2300      	movs	r3, #0
 80084b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80084b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084ba:	1b9b      	subs	r3, r3, r6
 80084bc:	1e5a      	subs	r2, r3, #1
 80084be:	bf44      	itt	mi
 80084c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80084c4:	2300      	movmi	r3, #0
 80084c6:	9208      	str	r2, [sp, #32]
 80084c8:	bf54      	ite	pl
 80084ca:	f04f 0800 	movpl.w	r8, #0
 80084ce:	9308      	strmi	r3, [sp, #32]
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	db39      	blt.n	8008548 <_dtoa_r+0x218>
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084d8:	443b      	add	r3, r7
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	930a      	str	r3, [sp, #40]	@ 0x28
 80084e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e2:	2b09      	cmp	r3, #9
 80084e4:	d864      	bhi.n	80085b0 <_dtoa_r+0x280>
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	bfc4      	itt	gt
 80084ea:	3b04      	subgt	r3, #4
 80084ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f0:	f1a3 0302 	sub.w	r3, r3, #2
 80084f4:	bfcc      	ite	gt
 80084f6:	2400      	movgt	r4, #0
 80084f8:	2401      	movle	r4, #1
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d863      	bhi.n	80085c6 <_dtoa_r+0x296>
 80084fe:	e8df f003 	tbb	[pc, r3]
 8008502:	372a      	.short	0x372a
 8008504:	5535      	.short	0x5535
 8008506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800850a:	441e      	add	r6, r3
 800850c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008510:	2b20      	cmp	r3, #32
 8008512:	bfc1      	itttt	gt
 8008514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008518:	409f      	lslgt	r7, r3
 800851a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800851e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008522:	bfd6      	itet	le
 8008524:	f1c3 0320 	rsble	r3, r3, #32
 8008528:	ea47 0003 	orrgt.w	r0, r7, r3
 800852c:	fa04 f003 	lslle.w	r0, r4, r3
 8008530:	f7f7 ffe8 	bl	8000504 <__aeabi_ui2d>
 8008534:	2201      	movs	r2, #1
 8008536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800853a:	3e01      	subs	r6, #1
 800853c:	9214      	str	r2, [sp, #80]	@ 0x50
 800853e:	e777      	b.n	8008430 <_dtoa_r+0x100>
 8008540:	2301      	movs	r3, #1
 8008542:	e7b8      	b.n	80084b6 <_dtoa_r+0x186>
 8008544:	9012      	str	r0, [sp, #72]	@ 0x48
 8008546:	e7b7      	b.n	80084b8 <_dtoa_r+0x188>
 8008548:	427b      	negs	r3, r7
 800854a:	930a      	str	r3, [sp, #40]	@ 0x28
 800854c:	2300      	movs	r3, #0
 800854e:	eba8 0807 	sub.w	r8, r8, r7
 8008552:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008554:	e7c4      	b.n	80084e0 <_dtoa_r+0x1b0>
 8008556:	2300      	movs	r3, #0
 8008558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800855a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc35      	bgt.n	80085cc <_dtoa_r+0x29c>
 8008560:	2301      	movs	r3, #1
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	461a      	mov	r2, r3
 8008568:	920e      	str	r2, [sp, #56]	@ 0x38
 800856a:	e00b      	b.n	8008584 <_dtoa_r+0x254>
 800856c:	2301      	movs	r3, #1
 800856e:	e7f3      	b.n	8008558 <_dtoa_r+0x228>
 8008570:	2300      	movs	r3, #0
 8008572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	3301      	adds	r3, #1
 800857c:	2b01      	cmp	r3, #1
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	bfb8      	it	lt
 8008582:	2301      	movlt	r3, #1
 8008584:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008588:	2100      	movs	r1, #0
 800858a:	2204      	movs	r2, #4
 800858c:	f102 0514 	add.w	r5, r2, #20
 8008590:	429d      	cmp	r5, r3
 8008592:	d91f      	bls.n	80085d4 <_dtoa_r+0x2a4>
 8008594:	6041      	str	r1, [r0, #4]
 8008596:	4658      	mov	r0, fp
 8008598:	f000 fd8e 	bl	80090b8 <_Balloc>
 800859c:	4682      	mov	sl, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	d13c      	bne.n	800861c <_dtoa_r+0x2ec>
 80085a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <_dtoa_r+0x2e0>)
 80085a4:	4602      	mov	r2, r0
 80085a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80085aa:	e6d8      	b.n	800835e <_dtoa_r+0x2e>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e7e0      	b.n	8008572 <_dtoa_r+0x242>
 80085b0:	2401      	movs	r4, #1
 80085b2:	2300      	movs	r3, #0
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	2200      	movs	r2, #0
 80085c2:	2312      	movs	r3, #18
 80085c4:	e7d0      	b.n	8008568 <_dtoa_r+0x238>
 80085c6:	2301      	movs	r3, #1
 80085c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ca:	e7f5      	b.n	80085b8 <_dtoa_r+0x288>
 80085cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	e7d7      	b.n	8008584 <_dtoa_r+0x254>
 80085d4:	3101      	adds	r1, #1
 80085d6:	0052      	lsls	r2, r2, #1
 80085d8:	e7d8      	b.n	800858c <_dtoa_r+0x25c>
 80085da:	bf00      	nop
 80085dc:	f3af 8000 	nop.w
 80085e0:	636f4361 	.word	0x636f4361
 80085e4:	3fd287a7 	.word	0x3fd287a7
 80085e8:	8b60c8b3 	.word	0x8b60c8b3
 80085ec:	3fc68a28 	.word	0x3fc68a28
 80085f0:	509f79fb 	.word	0x509f79fb
 80085f4:	3fd34413 	.word	0x3fd34413
 80085f8:	0800a607 	.word	0x0800a607
 80085fc:	0800a61e 	.word	0x0800a61e
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	0800a5d7 	.word	0x0800a5d7
 8008608:	3ff80000 	.word	0x3ff80000
 800860c:	0800a718 	.word	0x0800a718
 8008610:	0800a676 	.word	0x0800a676
 8008614:	0800a603 	.word	0x0800a603
 8008618:	0800a5d6 	.word	0x0800a5d6
 800861c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008620:	6018      	str	r0, [r3, #0]
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b0e      	cmp	r3, #14
 8008626:	f200 80a4 	bhi.w	8008772 <_dtoa_r+0x442>
 800862a:	2c00      	cmp	r4, #0
 800862c:	f000 80a1 	beq.w	8008772 <_dtoa_r+0x442>
 8008630:	2f00      	cmp	r7, #0
 8008632:	dd33      	ble.n	800869c <_dtoa_r+0x36c>
 8008634:	4bad      	ldr	r3, [pc, #692]	@ (80088ec <_dtoa_r+0x5bc>)
 8008636:	f007 020f 	and.w	r2, r7, #15
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	ed93 7b00 	vldr	d7, [r3]
 8008642:	05f8      	lsls	r0, r7, #23
 8008644:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800864c:	d516      	bpl.n	800867c <_dtoa_r+0x34c>
 800864e:	4ba8      	ldr	r3, [pc, #672]	@ (80088f0 <_dtoa_r+0x5c0>)
 8008650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008658:	f7f8 f8f8 	bl	800084c <__aeabi_ddiv>
 800865c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008660:	f004 040f 	and.w	r4, r4, #15
 8008664:	2603      	movs	r6, #3
 8008666:	4da2      	ldr	r5, [pc, #648]	@ (80088f0 <_dtoa_r+0x5c0>)
 8008668:	b954      	cbnz	r4, 8008680 <_dtoa_r+0x350>
 800866a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008672:	f7f8 f8eb 	bl	800084c <__aeabi_ddiv>
 8008676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867a:	e028      	b.n	80086ce <_dtoa_r+0x39e>
 800867c:	2602      	movs	r6, #2
 800867e:	e7f2      	b.n	8008666 <_dtoa_r+0x336>
 8008680:	07e1      	lsls	r1, r4, #31
 8008682:	d508      	bpl.n	8008696 <_dtoa_r+0x366>
 8008684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008694:	3601      	adds	r6, #1
 8008696:	1064      	asrs	r4, r4, #1
 8008698:	3508      	adds	r5, #8
 800869a:	e7e5      	b.n	8008668 <_dtoa_r+0x338>
 800869c:	f000 80d2 	beq.w	8008844 <_dtoa_r+0x514>
 80086a0:	427c      	negs	r4, r7
 80086a2:	4b92      	ldr	r3, [pc, #584]	@ (80088ec <_dtoa_r+0x5bc>)
 80086a4:	4d92      	ldr	r5, [pc, #584]	@ (80088f0 <_dtoa_r+0x5c0>)
 80086a6:	f004 020f 	and.w	r2, r4, #15
 80086aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086be:	1124      	asrs	r4, r4, #4
 80086c0:	2300      	movs	r3, #0
 80086c2:	2602      	movs	r6, #2
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	f040 80b2 	bne.w	800882e <_dtoa_r+0x4fe>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1d3      	bne.n	8008676 <_dtoa_r+0x346>
 80086ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80b7 	beq.w	8008848 <_dtoa_r+0x518>
 80086da:	4b86      	ldr	r3, [pc, #536]	@ (80088f4 <_dtoa_r+0x5c4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f8 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f000 80ae 	beq.w	8008848 <_dtoa_r+0x518>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80aa 	beq.w	8008848 <_dtoa_r+0x518>
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd37      	ble.n	800876a <_dtoa_r+0x43a>
 80086fa:	1e7b      	subs	r3, r7, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	4620      	mov	r0, r4
 8008700:	4b7d      	ldr	r3, [pc, #500]	@ (80088f8 <_dtoa_r+0x5c8>)
 8008702:	2200      	movs	r2, #0
 8008704:	4629      	mov	r1, r5
 8008706:	f7f7 ff77 	bl	80005f8 <__aeabi_dmul>
 800870a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800870e:	9c00      	ldr	r4, [sp, #0]
 8008710:	3601      	adds	r6, #1
 8008712:	4630      	mov	r0, r6
 8008714:	f7f7 ff06 	bl	8000524 <__aeabi_i2d>
 8008718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871c:	f7f7 ff6c 	bl	80005f8 <__aeabi_dmul>
 8008720:	4b76      	ldr	r3, [pc, #472]	@ (80088fc <_dtoa_r+0x5cc>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f7 fdb2 	bl	800028c <__adddf3>
 8008728:	4605      	mov	r5, r0
 800872a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800872e:	2c00      	cmp	r4, #0
 8008730:	f040 808d 	bne.w	800884e <_dtoa_r+0x51e>
 8008734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008738:	4b71      	ldr	r3, [pc, #452]	@ (8008900 <_dtoa_r+0x5d0>)
 800873a:	2200      	movs	r2, #0
 800873c:	f7f7 fda4 	bl	8000288 <__aeabi_dsub>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008748:	462a      	mov	r2, r5
 800874a:	4633      	mov	r3, r6
 800874c:	f7f8 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8008750:	2800      	cmp	r0, #0
 8008752:	f040 828b 	bne.w	8008c6c <_dtoa_r+0x93c>
 8008756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875a:	462a      	mov	r2, r5
 800875c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008760:	f7f8 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8008764:	2800      	cmp	r0, #0
 8008766:	f040 8128 	bne.w	80089ba <_dtoa_r+0x68a>
 800876a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800876e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008774:	2b00      	cmp	r3, #0
 8008776:	f2c0 815a 	blt.w	8008a2e <_dtoa_r+0x6fe>
 800877a:	2f0e      	cmp	r7, #14
 800877c:	f300 8157 	bgt.w	8008a2e <_dtoa_r+0x6fe>
 8008780:	4b5a      	ldr	r3, [pc, #360]	@ (80088ec <_dtoa_r+0x5bc>)
 8008782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008786:	ed93 7b00 	vldr	d7, [r3]
 800878a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	ed8d 7b00 	vstr	d7, [sp]
 8008792:	da03      	bge.n	800879c <_dtoa_r+0x46c>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f340 8101 	ble.w	800899e <_dtoa_r+0x66e>
 800879c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087a0:	4656      	mov	r6, sl
 80087a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f8 f84f 	bl	800084c <__aeabi_ddiv>
 80087ae:	f7f8 f9d3 	bl	8000b58 <__aeabi_d2iz>
 80087b2:	4680      	mov	r8, r0
 80087b4:	f7f7 feb6 	bl	8000524 <__aeabi_i2d>
 80087b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087bc:	f7f7 ff1c 	bl	80005f8 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087cc:	f7f7 fd5c 	bl	8000288 <__aeabi_dsub>
 80087d0:	f806 4b01 	strb.w	r4, [r6], #1
 80087d4:	9d07      	ldr	r5, [sp, #28]
 80087d6:	eba6 040a 	sub.w	r4, r6, sl
 80087da:	42a5      	cmp	r5, r4
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	f040 8117 	bne.w	8008a12 <_dtoa_r+0x6e2>
 80087e4:	f7f7 fd52 	bl	800028c <__adddf3>
 80087e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	f7f8 f992 	bl	8000b18 <__aeabi_dcmpgt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f040 80f9 	bne.w	80089ec <_dtoa_r+0x6bc>
 80087fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8008806:	b118      	cbz	r0, 8008810 <_dtoa_r+0x4e0>
 8008808:	f018 0f01 	tst.w	r8, #1
 800880c:	f040 80ee 	bne.w	80089ec <_dtoa_r+0x6bc>
 8008810:	4649      	mov	r1, r9
 8008812:	4658      	mov	r0, fp
 8008814:	f000 fc90 	bl	8009138 <_Bfree>
 8008818:	2300      	movs	r3, #0
 800881a:	7033      	strb	r3, [r6, #0]
 800881c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800881e:	3701      	adds	r7, #1
 8008820:	601f      	str	r7, [r3, #0]
 8008822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 831d 	beq.w	8008e64 <_dtoa_r+0xb34>
 800882a:	601e      	str	r6, [r3, #0]
 800882c:	e31a      	b.n	8008e64 <_dtoa_r+0xb34>
 800882e:	07e2      	lsls	r2, r4, #31
 8008830:	d505      	bpl.n	800883e <_dtoa_r+0x50e>
 8008832:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008836:	f7f7 fedf 	bl	80005f8 <__aeabi_dmul>
 800883a:	3601      	adds	r6, #1
 800883c:	2301      	movs	r3, #1
 800883e:	1064      	asrs	r4, r4, #1
 8008840:	3508      	adds	r5, #8
 8008842:	e73f      	b.n	80086c4 <_dtoa_r+0x394>
 8008844:	2602      	movs	r6, #2
 8008846:	e742      	b.n	80086ce <_dtoa_r+0x39e>
 8008848:	9c07      	ldr	r4, [sp, #28]
 800884a:	9704      	str	r7, [sp, #16]
 800884c:	e761      	b.n	8008712 <_dtoa_r+0x3e2>
 800884e:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <_dtoa_r+0x5bc>)
 8008850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885a:	4454      	add	r4, sl
 800885c:	2900      	cmp	r1, #0
 800885e:	d053      	beq.n	8008908 <_dtoa_r+0x5d8>
 8008860:	4928      	ldr	r1, [pc, #160]	@ (8008904 <_dtoa_r+0x5d4>)
 8008862:	2000      	movs	r0, #0
 8008864:	f7f7 fff2 	bl	800084c <__aeabi_ddiv>
 8008868:	4633      	mov	r3, r6
 800886a:	462a      	mov	r2, r5
 800886c:	f7f7 fd0c 	bl	8000288 <__aeabi_dsub>
 8008870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008874:	4656      	mov	r6, sl
 8008876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800887a:	f7f8 f96d 	bl	8000b58 <__aeabi_d2iz>
 800887e:	4605      	mov	r5, r0
 8008880:	f7f7 fe50 	bl	8000524 <__aeabi_i2d>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800888c:	f7f7 fcfc 	bl	8000288 <__aeabi_dsub>
 8008890:	3530      	adds	r5, #48	@ 0x30
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800889a:	f806 5b01 	strb.w	r5, [r6], #1
 800889e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088a2:	f7f8 f91b 	bl	8000adc <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d171      	bne.n	800898e <_dtoa_r+0x65e>
 80088aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ae:	4911      	ldr	r1, [pc, #68]	@ (80088f4 <_dtoa_r+0x5c4>)
 80088b0:	2000      	movs	r0, #0
 80088b2:	f7f7 fce9 	bl	8000288 <__aeabi_dsub>
 80088b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088ba:	f7f8 f90f 	bl	8000adc <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f040 8095 	bne.w	80089ee <_dtoa_r+0x6be>
 80088c4:	42a6      	cmp	r6, r4
 80088c6:	f43f af50 	beq.w	800876a <_dtoa_r+0x43a>
 80088ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088ce:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <_dtoa_r+0x5c8>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <_dtoa_r+0x5c8>)
 80088d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088dc:	2200      	movs	r2, #0
 80088de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e2:	f7f7 fe89 	bl	80005f8 <__aeabi_dmul>
 80088e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ea:	e7c4      	b.n	8008876 <_dtoa_r+0x546>
 80088ec:	0800a718 	.word	0x0800a718
 80088f0:	0800a6f0 	.word	0x0800a6f0
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	40240000 	.word	0x40240000
 80088fc:	401c0000 	.word	0x401c0000
 8008900:	40140000 	.word	0x40140000
 8008904:	3fe00000 	.word	0x3fe00000
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	f7f7 fe74 	bl	80005f8 <__aeabi_dmul>
 8008910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008914:	9415      	str	r4, [sp, #84]	@ 0x54
 8008916:	4656      	mov	r6, sl
 8008918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891c:	f7f8 f91c 	bl	8000b58 <__aeabi_d2iz>
 8008920:	4605      	mov	r5, r0
 8008922:	f7f7 fdff 	bl	8000524 <__aeabi_i2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892e:	f7f7 fcab 	bl	8000288 <__aeabi_dsub>
 8008932:	3530      	adds	r5, #48	@ 0x30
 8008934:	f806 5b01 	strb.w	r5, [r6], #1
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	42a6      	cmp	r6, r4
 800893e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	d124      	bne.n	8008992 <_dtoa_r+0x662>
 8008948:	4bac      	ldr	r3, [pc, #688]	@ (8008bfc <_dtoa_r+0x8cc>)
 800894a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800894e:	f7f7 fc9d 	bl	800028c <__adddf3>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895a:	f7f8 f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800895e:	2800      	cmp	r0, #0
 8008960:	d145      	bne.n	80089ee <_dtoa_r+0x6be>
 8008962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008966:	49a5      	ldr	r1, [pc, #660]	@ (8008bfc <_dtoa_r+0x8cc>)
 8008968:	2000      	movs	r0, #0
 800896a:	f7f7 fc8d 	bl	8000288 <__aeabi_dsub>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008976:	f7f8 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800897a:	2800      	cmp	r0, #0
 800897c:	f43f aef5 	beq.w	800876a <_dtoa_r+0x43a>
 8008980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008982:	1e73      	subs	r3, r6, #1
 8008984:	9315      	str	r3, [sp, #84]	@ 0x54
 8008986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800898a:	2b30      	cmp	r3, #48	@ 0x30
 800898c:	d0f8      	beq.n	8008980 <_dtoa_r+0x650>
 800898e:	9f04      	ldr	r7, [sp, #16]
 8008990:	e73e      	b.n	8008810 <_dtoa_r+0x4e0>
 8008992:	4b9b      	ldr	r3, [pc, #620]	@ (8008c00 <_dtoa_r+0x8d0>)
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800899c:	e7bc      	b.n	8008918 <_dtoa_r+0x5e8>
 800899e:	d10c      	bne.n	80089ba <_dtoa_r+0x68a>
 80089a0:	4b98      	ldr	r3, [pc, #608]	@ (8008c04 <_dtoa_r+0x8d4>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089a8:	f7f7 fe26 	bl	80005f8 <__aeabi_dmul>
 80089ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b0:	f7f8 f8a8 	bl	8000b04 <__aeabi_dcmpge>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f000 8157 	beq.w	8008c68 <_dtoa_r+0x938>
 80089ba:	2400      	movs	r4, #0
 80089bc:	4625      	mov	r5, r4
 80089be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c0:	43db      	mvns	r3, r3
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	4656      	mov	r6, sl
 80089c6:	2700      	movs	r7, #0
 80089c8:	4621      	mov	r1, r4
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fbb4 	bl	8009138 <_Bfree>
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	d0dc      	beq.n	800898e <_dtoa_r+0x65e>
 80089d4:	b12f      	cbz	r7, 80089e2 <_dtoa_r+0x6b2>
 80089d6:	42af      	cmp	r7, r5
 80089d8:	d003      	beq.n	80089e2 <_dtoa_r+0x6b2>
 80089da:	4639      	mov	r1, r7
 80089dc:	4658      	mov	r0, fp
 80089de:	f000 fbab 	bl	8009138 <_Bfree>
 80089e2:	4629      	mov	r1, r5
 80089e4:	4658      	mov	r0, fp
 80089e6:	f000 fba7 	bl	8009138 <_Bfree>
 80089ea:	e7d0      	b.n	800898e <_dtoa_r+0x65e>
 80089ec:	9704      	str	r7, [sp, #16]
 80089ee:	4633      	mov	r3, r6
 80089f0:	461e      	mov	r6, r3
 80089f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f6:	2a39      	cmp	r2, #57	@ 0x39
 80089f8:	d107      	bne.n	8008a0a <_dtoa_r+0x6da>
 80089fa:	459a      	cmp	sl, r3
 80089fc:	d1f8      	bne.n	80089f0 <_dtoa_r+0x6c0>
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	3201      	adds	r2, #1
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	2230      	movs	r2, #48	@ 0x30
 8008a06:	f88a 2000 	strb.w	r2, [sl]
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	3201      	adds	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e7bd      	b.n	800898e <_dtoa_r+0x65e>
 8008a12:	4b7b      	ldr	r3, [pc, #492]	@ (8008c00 <_dtoa_r+0x8d0>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f7f8 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f aebb 	beq.w	80087a2 <_dtoa_r+0x472>
 8008a2c:	e6f0      	b.n	8008810 <_dtoa_r+0x4e0>
 8008a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	f000 80db 	beq.w	8008bec <_dtoa_r+0x8bc>
 8008a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a38:	2a01      	cmp	r2, #1
 8008a3a:	f300 80bf 	bgt.w	8008bbc <_dtoa_r+0x88c>
 8008a3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	f000 80b7 	beq.w	8008bb4 <_dtoa_r+0x884>
 8008a46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a4c:	4646      	mov	r6, r8
 8008a4e:	9a08      	ldr	r2, [sp, #32]
 8008a50:	2101      	movs	r1, #1
 8008a52:	441a      	add	r2, r3
 8008a54:	4658      	mov	r0, fp
 8008a56:	4498      	add	r8, r3
 8008a58:	9208      	str	r2, [sp, #32]
 8008a5a:	f000 fc21 	bl	80092a0 <__i2b>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b15e      	cbz	r6, 8008a7a <_dtoa_r+0x74a>
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd08      	ble.n	8008a7a <_dtoa_r+0x74a>
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	9a08      	ldr	r2, [sp, #32]
 8008a6c:	bfa8      	it	ge
 8008a6e:	4633      	movge	r3, r6
 8008a70:	eba8 0803 	sub.w	r8, r8, r3
 8008a74:	1af6      	subs	r6, r6, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7c:	b1f3      	cbz	r3, 8008abc <_dtoa_r+0x78c>
 8008a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80b7 	beq.w	8008bf4 <_dtoa_r+0x8c4>
 8008a86:	b18c      	cbz	r4, 8008aac <_dtoa_r+0x77c>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f000 fcc7 	bl	8009420 <__pow5mult>
 8008a92:	464a      	mov	r2, r9
 8008a94:	4601      	mov	r1, r0
 8008a96:	4605      	mov	r5, r0
 8008a98:	4658      	mov	r0, fp
 8008a9a:	f000 fc17 	bl	80092cc <__multiply>
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	9004      	str	r0, [sp, #16]
 8008aa2:	4658      	mov	r0, fp
 8008aa4:	f000 fb48 	bl	8009138 <_Bfree>
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	4699      	mov	r9, r3
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	1b1a      	subs	r2, r3, r4
 8008ab0:	d004      	beq.n	8008abc <_dtoa_r+0x78c>
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	4658      	mov	r0, fp
 8008ab6:	f000 fcb3 	bl	8009420 <__pow5mult>
 8008aba:	4681      	mov	r9, r0
 8008abc:	2101      	movs	r1, #1
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 fbee 	bl	80092a0 <__i2b>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 81cf 	beq.w	8008e6c <_dtoa_r+0xb3c>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 fca4 	bl	8009420 <__pow5mult>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	4604      	mov	r4, r0
 8008ade:	f300 8095 	bgt.w	8008c0c <_dtoa_r+0x8dc>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8087 	bne.w	8008bf8 <_dtoa_r+0x8c8>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8089 	bne.w	8008c08 <_dtoa_r+0x8d8>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008afc:	0d1b      	lsrs	r3, r3, #20
 8008afe:	051b      	lsls	r3, r3, #20
 8008b00:	b12b      	cbz	r3, 8008b0e <_dtoa_r+0x7de>
 8008b02:	9b08      	ldr	r3, [sp, #32]
 8008b04:	3301      	adds	r3, #1
 8008b06:	9308      	str	r3, [sp, #32]
 8008b08:	f108 0801 	add.w	r8, r8, #1
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 81b0 	beq.w	8008e78 <_dtoa_r+0xb48>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b1e:	6918      	ldr	r0, [r3, #16]
 8008b20:	f000 fb72 	bl	8009208 <__hi0bits>
 8008b24:	f1c0 0020 	rsb	r0, r0, #32
 8008b28:	9b08      	ldr	r3, [sp, #32]
 8008b2a:	4418      	add	r0, r3
 8008b2c:	f010 001f 	ands.w	r0, r0, #31
 8008b30:	d077      	beq.n	8008c22 <_dtoa_r+0x8f2>
 8008b32:	f1c0 0320 	rsb	r3, r0, #32
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	dd6b      	ble.n	8008c12 <_dtoa_r+0x8e2>
 8008b3a:	9b08      	ldr	r3, [sp, #32]
 8008b3c:	f1c0 001c 	rsb	r0, r0, #28
 8008b40:	4403      	add	r3, r0
 8008b42:	4480      	add	r8, r0
 8008b44:	4406      	add	r6, r0
 8008b46:	9308      	str	r3, [sp, #32]
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	dd05      	ble.n	8008b5a <_dtoa_r+0x82a>
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4642      	mov	r2, r8
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fcbe 	bl	80094d4 <__lshift>
 8008b58:	4681      	mov	r9, r0
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd05      	ble.n	8008b6c <_dtoa_r+0x83c>
 8008b60:	4621      	mov	r1, r4
 8008b62:	461a      	mov	r2, r3
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 fcb5 	bl	80094d4 <__lshift>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d059      	beq.n	8008c26 <_dtoa_r+0x8f6>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4648      	mov	r0, r9
 8008b76:	f000 fd19 	bl	80095ac <__mcmp>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	da53      	bge.n	8008c26 <_dtoa_r+0x8f6>
 8008b7e:	1e7b      	subs	r3, r7, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	4649      	mov	r1, r9
 8008b84:	2300      	movs	r3, #0
 8008b86:	220a      	movs	r2, #10
 8008b88:	4658      	mov	r0, fp
 8008b8a:	f000 faf7 	bl	800917c <__multadd>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b90:	4681      	mov	r9, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8172 	beq.w	8008e7c <_dtoa_r+0xb4c>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	220a      	movs	r2, #10
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f000 faec 	bl	800917c <__multadd>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	4605      	mov	r5, r0
 8008baa:	dc67      	bgt.n	8008c7c <_dtoa_r+0x94c>
 8008bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	dc41      	bgt.n	8008c36 <_dtoa_r+0x906>
 8008bb2:	e063      	b.n	8008c7c <_dtoa_r+0x94c>
 8008bb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bba:	e746      	b.n	8008a4a <_dtoa_r+0x71a>
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	1e5c      	subs	r4, r3, #1
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	bfbf      	itttt	lt
 8008bc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bcc:	1ae3      	sublt	r3, r4, r3
 8008bce:	bfb4      	ite	lt
 8008bd0:	18d2      	addlt	r2, r2, r3
 8008bd2:	1b1c      	subge	r4, r3, r4
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	bfbc      	itt	lt
 8008bd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008bda:	2400      	movlt	r4, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfb5      	itete	lt
 8008be0:	eba8 0603 	sublt.w	r6, r8, r3
 8008be4:	9b07      	ldrge	r3, [sp, #28]
 8008be6:	2300      	movlt	r3, #0
 8008be8:	4646      	movge	r6, r8
 8008bea:	e730      	b.n	8008a4e <_dtoa_r+0x71e>
 8008bec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bf0:	4646      	mov	r6, r8
 8008bf2:	e735      	b.n	8008a60 <_dtoa_r+0x730>
 8008bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bf6:	e75c      	b.n	8008ab2 <_dtoa_r+0x782>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e788      	b.n	8008b0e <_dtoa_r+0x7de>
 8008bfc:	3fe00000 	.word	0x3fe00000
 8008c00:	40240000 	.word	0x40240000
 8008c04:	40140000 	.word	0x40140000
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	e780      	b.n	8008b0e <_dtoa_r+0x7de>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c10:	e782      	b.n	8008b18 <_dtoa_r+0x7e8>
 8008c12:	d099      	beq.n	8008b48 <_dtoa_r+0x818>
 8008c14:	9a08      	ldr	r2, [sp, #32]
 8008c16:	331c      	adds	r3, #28
 8008c18:	441a      	add	r2, r3
 8008c1a:	4498      	add	r8, r3
 8008c1c:	441e      	add	r6, r3
 8008c1e:	9208      	str	r2, [sp, #32]
 8008c20:	e792      	b.n	8008b48 <_dtoa_r+0x818>
 8008c22:	4603      	mov	r3, r0
 8008c24:	e7f6      	b.n	8008c14 <_dtoa_r+0x8e4>
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	9704      	str	r7, [sp, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dc20      	bgt.n	8008c70 <_dtoa_r+0x940>
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dd1e      	ble.n	8008c74 <_dtoa_r+0x944>
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f47f aec0 	bne.w	80089be <_dtoa_r+0x68e>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	2205      	movs	r2, #5
 8008c42:	4658      	mov	r0, fp
 8008c44:	f000 fa9a 	bl	800917c <__multadd>
 8008c48:	4601      	mov	r1, r0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 fcad 	bl	80095ac <__mcmp>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f77f aeb3 	ble.w	80089be <_dtoa_r+0x68e>
 8008c58:	4656      	mov	r6, sl
 8008c5a:	2331      	movs	r3, #49	@ 0x31
 8008c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c60:	9b04      	ldr	r3, [sp, #16]
 8008c62:	3301      	adds	r3, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	e6ae      	b.n	80089c6 <_dtoa_r+0x696>
 8008c68:	9c07      	ldr	r4, [sp, #28]
 8008c6a:	9704      	str	r7, [sp, #16]
 8008c6c:	4625      	mov	r5, r4
 8008c6e:	e7f3      	b.n	8008c58 <_dtoa_r+0x928>
 8008c70:	9b07      	ldr	r3, [sp, #28]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8104 	beq.w	8008e84 <_dtoa_r+0xb54>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	dd05      	ble.n	8008c8c <_dtoa_r+0x95c>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4632      	mov	r2, r6
 8008c84:	4658      	mov	r0, fp
 8008c86:	f000 fc25 	bl	80094d4 <__lshift>
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d05a      	beq.n	8008d48 <_dtoa_r+0xa18>
 8008c92:	6869      	ldr	r1, [r5, #4]
 8008c94:	4658      	mov	r0, fp
 8008c96:	f000 fa0f 	bl	80090b8 <_Balloc>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	b928      	cbnz	r0, 8008caa <_dtoa_r+0x97a>
 8008c9e:	4b84      	ldr	r3, [pc, #528]	@ (8008eb0 <_dtoa_r+0xb80>)
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ca6:	f7ff bb5a 	b.w	800835e <_dtoa_r+0x2e>
 8008caa:	692a      	ldr	r2, [r5, #16]
 8008cac:	3202      	adds	r2, #2
 8008cae:	0092      	lsls	r2, r2, #2
 8008cb0:	f105 010c 	add.w	r1, r5, #12
 8008cb4:	300c      	adds	r0, #12
 8008cb6:	f7ff faa2 	bl	80081fe <memcpy>
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	f000 fc08 	bl	80094d4 <__lshift>
 8008cc4:	f10a 0301 	add.w	r3, sl, #1
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	4453      	add	r3, sl
 8008cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	462f      	mov	r7, r5
 8008cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cda:	4605      	mov	r5, r0
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	4648      	mov	r0, r9
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	f7ff fa98 	bl	800821a <quorem>
 8008cea:	4639      	mov	r1, r7
 8008cec:	9002      	str	r0, [sp, #8]
 8008cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cf2:	4648      	mov	r0, r9
 8008cf4:	f000 fc5a 	bl	80095ac <__mcmp>
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	9008      	str	r0, [sp, #32]
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4658      	mov	r0, fp
 8008d00:	f000 fc70 	bl	80095e4 <__mdiff>
 8008d04:	68c2      	ldr	r2, [r0, #12]
 8008d06:	4606      	mov	r6, r0
 8008d08:	bb02      	cbnz	r2, 8008d4c <_dtoa_r+0xa1c>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f000 fc4d 	bl	80095ac <__mcmp>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d1a:	f000 fa0d 	bl	8009138 <_Bfree>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d22:	9e07      	ldr	r6, [sp, #28]
 8008d24:	ea43 0102 	orr.w	r1, r3, r2
 8008d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d2a:	4319      	orrs	r1, r3
 8008d2c:	d110      	bne.n	8008d50 <_dtoa_r+0xa20>
 8008d2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d32:	d029      	beq.n	8008d88 <_dtoa_r+0xa58>
 8008d34:	9b08      	ldr	r3, [sp, #32]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd02      	ble.n	8008d40 <_dtoa_r+0xa10>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	f883 8000 	strb.w	r8, [r3]
 8008d46:	e63f      	b.n	80089c8 <_dtoa_r+0x698>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e7bb      	b.n	8008cc4 <_dtoa_r+0x994>
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	e7e1      	b.n	8008d14 <_dtoa_r+0x9e4>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db04      	blt.n	8008d60 <_dtoa_r+0xa30>
 8008d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	d120      	bne.n	8008da2 <_dtoa_r+0xa72>
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	dded      	ble.n	8008d40 <_dtoa_r+0xa10>
 8008d64:	4649      	mov	r1, r9
 8008d66:	2201      	movs	r2, #1
 8008d68:	4658      	mov	r0, fp
 8008d6a:	f000 fbb3 	bl	80094d4 <__lshift>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4681      	mov	r9, r0
 8008d72:	f000 fc1b 	bl	80095ac <__mcmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	dc03      	bgt.n	8008d82 <_dtoa_r+0xa52>
 8008d7a:	d1e1      	bne.n	8008d40 <_dtoa_r+0xa10>
 8008d7c:	f018 0f01 	tst.w	r8, #1
 8008d80:	d0de      	beq.n	8008d40 <_dtoa_r+0xa10>
 8008d82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d86:	d1d8      	bne.n	8008d3a <_dtoa_r+0xa0a>
 8008d88:	9a00      	ldr	r2, [sp, #0]
 8008d8a:	2339      	movs	r3, #57	@ 0x39
 8008d8c:	7013      	strb	r3, [r2, #0]
 8008d8e:	4633      	mov	r3, r6
 8008d90:	461e      	mov	r6, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d98:	2a39      	cmp	r2, #57	@ 0x39
 8008d9a:	d052      	beq.n	8008e42 <_dtoa_r+0xb12>
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e612      	b.n	80089c8 <_dtoa_r+0x698>
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	dd07      	ble.n	8008db6 <_dtoa_r+0xa86>
 8008da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008daa:	d0ed      	beq.n	8008d88 <_dtoa_r+0xa58>
 8008dac:	9a00      	ldr	r2, [sp, #0]
 8008dae:	f108 0301 	add.w	r3, r8, #1
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	e608      	b.n	80089c8 <_dtoa_r+0x698>
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d028      	beq.n	8008e16 <_dtoa_r+0xae6>
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4658      	mov	r0, fp
 8008dcc:	f000 f9d6 	bl	800917c <__multadd>
 8008dd0:	42af      	cmp	r7, r5
 8008dd2:	4681      	mov	r9, r0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	f04f 020a 	mov.w	r2, #10
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4658      	mov	r0, fp
 8008de0:	d107      	bne.n	8008df2 <_dtoa_r+0xac2>
 8008de2:	f000 f9cb 	bl	800917c <__multadd>
 8008de6:	4607      	mov	r7, r0
 8008de8:	4605      	mov	r5, r0
 8008dea:	9b07      	ldr	r3, [sp, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	e774      	b.n	8008cdc <_dtoa_r+0x9ac>
 8008df2:	f000 f9c3 	bl	800917c <__multadd>
 8008df6:	4629      	mov	r1, r5
 8008df8:	4607      	mov	r7, r0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 f9bc 	bl	800917c <__multadd>
 8008e04:	4605      	mov	r5, r0
 8008e06:	e7f0      	b.n	8008dea <_dtoa_r+0xaba>
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfcc      	ite	gt
 8008e0e:	461e      	movgt	r6, r3
 8008e10:	2601      	movle	r6, #1
 8008e12:	4456      	add	r6, sl
 8008e14:	2700      	movs	r7, #0
 8008e16:	4649      	mov	r1, r9
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 fb5a 	bl	80094d4 <__lshift>
 8008e20:	4621      	mov	r1, r4
 8008e22:	4681      	mov	r9, r0
 8008e24:	f000 fbc2 	bl	80095ac <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dcb0      	bgt.n	8008d8e <_dtoa_r+0xa5e>
 8008e2c:	d102      	bne.n	8008e34 <_dtoa_r+0xb04>
 8008e2e:	f018 0f01 	tst.w	r8, #1
 8008e32:	d1ac      	bne.n	8008d8e <_dtoa_r+0xa5e>
 8008e34:	4633      	mov	r3, r6
 8008e36:	461e      	mov	r6, r3
 8008e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e3c:	2a30      	cmp	r2, #48	@ 0x30
 8008e3e:	d0fa      	beq.n	8008e36 <_dtoa_r+0xb06>
 8008e40:	e5c2      	b.n	80089c8 <_dtoa_r+0x698>
 8008e42:	459a      	cmp	sl, r3
 8008e44:	d1a4      	bne.n	8008d90 <_dtoa_r+0xa60>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	2331      	movs	r3, #49	@ 0x31
 8008e4e:	f88a 3000 	strb.w	r3, [sl]
 8008e52:	e5b9      	b.n	80089c8 <_dtoa_r+0x698>
 8008e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008eb4 <_dtoa_r+0xb84>
 8008e5a:	b11b      	cbz	r3, 8008e64 <_dtoa_r+0xb34>
 8008e5c:	f10a 0308 	add.w	r3, sl, #8
 8008e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	4650      	mov	r0, sl
 8008e66:	b019      	add	sp, #100	@ 0x64
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	f77f ae37 	ble.w	8008ae2 <_dtoa_r+0x7b2>
 8008e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e655      	b.n	8008b28 <_dtoa_r+0x7f8>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f77f aed6 	ble.w	8008c30 <_dtoa_r+0x900>
 8008e84:	4656      	mov	r6, sl
 8008e86:	4621      	mov	r1, r4
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f7ff f9c6 	bl	800821a <quorem>
 8008e8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e92:	f806 8b01 	strb.w	r8, [r6], #1
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	eba6 020a 	sub.w	r2, r6, sl
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	ddb3      	ble.n	8008e08 <_dtoa_r+0xad8>
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	f000 f968 	bl	800917c <__multadd>
 8008eac:	4681      	mov	r9, r0
 8008eae:	e7ea      	b.n	8008e86 <_dtoa_r+0xb56>
 8008eb0:	0800a676 	.word	0x0800a676
 8008eb4:	0800a5fa 	.word	0x0800a5fa

08008eb8 <_free_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4605      	mov	r5, r0
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d041      	beq.n	8008f44 <_free_r+0x8c>
 8008ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec4:	1f0c      	subs	r4, r1, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	18e4      	addlt	r4, r4, r3
 8008ecc:	f000 f8e8 	bl	80090a0 <__malloc_lock>
 8008ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f48 <_free_r+0x90>)
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	b933      	cbnz	r3, 8008ee4 <_free_r+0x2c>
 8008ed6:	6063      	str	r3, [r4, #4]
 8008ed8:	6014      	str	r4, [r2, #0]
 8008eda:	4628      	mov	r0, r5
 8008edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee0:	f000 b8e4 	b.w	80090ac <__malloc_unlock>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d908      	bls.n	8008efa <_free_r+0x42>
 8008ee8:	6820      	ldr	r0, [r4, #0]
 8008eea:	1821      	adds	r1, r4, r0
 8008eec:	428b      	cmp	r3, r1
 8008eee:	bf01      	itttt	eq
 8008ef0:	6819      	ldreq	r1, [r3, #0]
 8008ef2:	685b      	ldreq	r3, [r3, #4]
 8008ef4:	1809      	addeq	r1, r1, r0
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	e7ed      	b.n	8008ed6 <_free_r+0x1e>
 8008efa:	461a      	mov	r2, r3
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	b10b      	cbz	r3, 8008f04 <_free_r+0x4c>
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d9fa      	bls.n	8008efa <_free_r+0x42>
 8008f04:	6811      	ldr	r1, [r2, #0]
 8008f06:	1850      	adds	r0, r2, r1
 8008f08:	42a0      	cmp	r0, r4
 8008f0a:	d10b      	bne.n	8008f24 <_free_r+0x6c>
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	4401      	add	r1, r0
 8008f10:	1850      	adds	r0, r2, r1
 8008f12:	4283      	cmp	r3, r0
 8008f14:	6011      	str	r1, [r2, #0]
 8008f16:	d1e0      	bne.n	8008eda <_free_r+0x22>
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	6053      	str	r3, [r2, #4]
 8008f1e:	4408      	add	r0, r1
 8008f20:	6010      	str	r0, [r2, #0]
 8008f22:	e7da      	b.n	8008eda <_free_r+0x22>
 8008f24:	d902      	bls.n	8008f2c <_free_r+0x74>
 8008f26:	230c      	movs	r3, #12
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	e7d6      	b.n	8008eda <_free_r+0x22>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	1821      	adds	r1, r4, r0
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf04      	itt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	bf04      	itt	eq
 8008f3c:	1809      	addeq	r1, r1, r0
 8008f3e:	6021      	streq	r1, [r4, #0]
 8008f40:	6054      	str	r4, [r2, #4]
 8008f42:	e7ca      	b.n	8008eda <_free_r+0x22>
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	200007cc 	.word	0x200007cc

08008f4c <malloc>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	@ (8008f58 <malloc+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f000 b825 	b.w	8008fa0 <_malloc_r>
 8008f56:	bf00      	nop
 8008f58:	20000030 	.word	0x20000030

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f9c <sbrk_aligned+0x40>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 fe46 	bl	8009bf8 <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 fe41 	bl	8009bf8 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d103      	bne.n	8008f82 <sbrk_aligned+0x26>
 8008f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f7e:	4620      	mov	r0, r4
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d0f8      	beq.n	8008f7e <sbrk_aligned+0x22>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 fe32 	bl	8009bf8 <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d1f2      	bne.n	8008f7e <sbrk_aligned+0x22>
 8008f98:	e7ef      	b.n	8008f7a <sbrk_aligned+0x1e>
 8008f9a:	bf00      	nop
 8008f9c:	200007c8 	.word	0x200007c8

08008fa0 <_malloc_r>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	1ccd      	adds	r5, r1, #3
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	db01      	blt.n	8008fbc <_malloc_r+0x1c>
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d904      	bls.n	8008fc6 <_malloc_r+0x26>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800909c <_malloc_r+0xfc>
 8008fca:	f000 f869 	bl	80090a0 <__malloc_lock>
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	bb44      	cbnz	r4, 8009028 <_malloc_r+0x88>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbf 	bl	8008f5c <sbrk_aligned>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d158      	bne.n	8009096 <_malloc_r+0xf6>
 8008fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe8:	4627      	mov	r7, r4
 8008fea:	2f00      	cmp	r7, #0
 8008fec:	d143      	bne.n	8009076 <_malloc_r+0xd6>
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d04b      	beq.n	800908a <_malloc_r+0xea>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	eb04 0903 	add.w	r9, r4, r3
 8008ffc:	f000 fdfc 	bl	8009bf8 <_sbrk_r>
 8009000:	4581      	cmp	r9, r0
 8009002:	d142      	bne.n	800908a <_malloc_r+0xea>
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	1a6d      	subs	r5, r5, r1
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa6 	bl	8008f5c <sbrk_aligned>
 8009010:	3001      	adds	r0, #1
 8009012:	d03a      	beq.n	800908a <_malloc_r+0xea>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	442b      	add	r3, r5
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	f8d8 3000 	ldr.w	r3, [r8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	bb62      	cbnz	r2, 800907c <_malloc_r+0xdc>
 8009022:	f8c8 7000 	str.w	r7, [r8]
 8009026:	e00f      	b.n	8009048 <_malloc_r+0xa8>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	1b52      	subs	r2, r2, r5
 800902c:	d420      	bmi.n	8009070 <_malloc_r+0xd0>
 800902e:	2a0b      	cmp	r2, #11
 8009030:	d917      	bls.n	8009062 <_malloc_r+0xc2>
 8009032:	1961      	adds	r1, r4, r5
 8009034:	42a3      	cmp	r3, r4
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	6059      	strne	r1, [r3, #4]
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	bf08      	it	eq
 8009040:	f8c8 1000 	streq.w	r1, [r8]
 8009044:	5162      	str	r2, [r4, r5]
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 f82f 	bl	80090ac <__malloc_unlock>
 800904e:	f104 000b 	add.w	r0, r4, #11
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	f020 0007 	bic.w	r0, r0, #7
 8009058:	1ac2      	subs	r2, r0, r3
 800905a:	bf1c      	itt	ne
 800905c:	1a1b      	subne	r3, r3, r0
 800905e:	50a3      	strne	r3, [r4, r2]
 8009060:	e7af      	b.n	8008fc2 <_malloc_r+0x22>
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	42a3      	cmp	r3, r4
 8009066:	bf0c      	ite	eq
 8009068:	f8c8 2000 	streq.w	r2, [r8]
 800906c:	605a      	strne	r2, [r3, #4]
 800906e:	e7eb      	b.n	8009048 <_malloc_r+0xa8>
 8009070:	4623      	mov	r3, r4
 8009072:	6864      	ldr	r4, [r4, #4]
 8009074:	e7ae      	b.n	8008fd4 <_malloc_r+0x34>
 8009076:	463c      	mov	r4, r7
 8009078:	687f      	ldr	r7, [r7, #4]
 800907a:	e7b6      	b.n	8008fea <_malloc_r+0x4a>
 800907c:	461a      	mov	r2, r3
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	42a3      	cmp	r3, r4
 8009082:	d1fb      	bne.n	800907c <_malloc_r+0xdc>
 8009084:	2300      	movs	r3, #0
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e7de      	b.n	8009048 <_malloc_r+0xa8>
 800908a:	230c      	movs	r3, #12
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f80c 	bl	80090ac <__malloc_unlock>
 8009094:	e794      	b.n	8008fc0 <_malloc_r+0x20>
 8009096:	6005      	str	r5, [r0, #0]
 8009098:	e7d6      	b.n	8009048 <_malloc_r+0xa8>
 800909a:	bf00      	nop
 800909c:	200007cc 	.word	0x200007cc

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	@ (80090a8 <__malloc_lock+0x8>)
 80090a2:	f7ff b8aa 	b.w	80081fa <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	200007c4 	.word	0x200007c4

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f7ff b8a5 	b.w	80081fc <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	200007c4 	.word	0x200007c4

080090b8 <_Balloc>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	69c6      	ldr	r6, [r0, #28]
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	b976      	cbnz	r6, 80090e0 <_Balloc+0x28>
 80090c2:	2010      	movs	r0, #16
 80090c4:	f7ff ff42 	bl	8008f4c <malloc>
 80090c8:	4602      	mov	r2, r0
 80090ca:	61e0      	str	r0, [r4, #28]
 80090cc:	b920      	cbnz	r0, 80090d8 <_Balloc+0x20>
 80090ce:	4b18      	ldr	r3, [pc, #96]	@ (8009130 <_Balloc+0x78>)
 80090d0:	4818      	ldr	r0, [pc, #96]	@ (8009134 <_Balloc+0x7c>)
 80090d2:	216b      	movs	r1, #107	@ 0x6b
 80090d4:	f000 fda0 	bl	8009c18 <__assert_func>
 80090d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090dc:	6006      	str	r6, [r0, #0]
 80090de:	60c6      	str	r6, [r0, #12]
 80090e0:	69e6      	ldr	r6, [r4, #28]
 80090e2:	68f3      	ldr	r3, [r6, #12]
 80090e4:	b183      	cbz	r3, 8009108 <_Balloc+0x50>
 80090e6:	69e3      	ldr	r3, [r4, #28]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090ee:	b9b8      	cbnz	r0, 8009120 <_Balloc+0x68>
 80090f0:	2101      	movs	r1, #1
 80090f2:	fa01 f605 	lsl.w	r6, r1, r5
 80090f6:	1d72      	adds	r2, r6, #5
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fdaa 	bl	8009c54 <_calloc_r>
 8009100:	b160      	cbz	r0, 800911c <_Balloc+0x64>
 8009102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009106:	e00e      	b.n	8009126 <_Balloc+0x6e>
 8009108:	2221      	movs	r2, #33	@ 0x21
 800910a:	2104      	movs	r1, #4
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fda1 	bl	8009c54 <_calloc_r>
 8009112:	69e3      	ldr	r3, [r4, #28]
 8009114:	60f0      	str	r0, [r6, #12]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e4      	bne.n	80090e6 <_Balloc+0x2e>
 800911c:	2000      	movs	r0, #0
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	6802      	ldr	r2, [r0, #0]
 8009122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009126:	2300      	movs	r3, #0
 8009128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800912c:	e7f7      	b.n	800911e <_Balloc+0x66>
 800912e:	bf00      	nop
 8009130:	0800a607 	.word	0x0800a607
 8009134:	0800a687 	.word	0x0800a687

08009138 <_Bfree>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	69c6      	ldr	r6, [r0, #28]
 800913c:	4605      	mov	r5, r0
 800913e:	460c      	mov	r4, r1
 8009140:	b976      	cbnz	r6, 8009160 <_Bfree+0x28>
 8009142:	2010      	movs	r0, #16
 8009144:	f7ff ff02 	bl	8008f4c <malloc>
 8009148:	4602      	mov	r2, r0
 800914a:	61e8      	str	r0, [r5, #28]
 800914c:	b920      	cbnz	r0, 8009158 <_Bfree+0x20>
 800914e:	4b09      	ldr	r3, [pc, #36]	@ (8009174 <_Bfree+0x3c>)
 8009150:	4809      	ldr	r0, [pc, #36]	@ (8009178 <_Bfree+0x40>)
 8009152:	218f      	movs	r1, #143	@ 0x8f
 8009154:	f000 fd60 	bl	8009c18 <__assert_func>
 8009158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800915c:	6006      	str	r6, [r0, #0]
 800915e:	60c6      	str	r6, [r0, #12]
 8009160:	b13c      	cbz	r4, 8009172 <_Bfree+0x3a>
 8009162:	69eb      	ldr	r3, [r5, #28]
 8009164:	6862      	ldr	r2, [r4, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800916c:	6021      	str	r1, [r4, #0]
 800916e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	0800a607 	.word	0x0800a607
 8009178:	0800a687 	.word	0x0800a687

0800917c <__multadd>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	690d      	ldr	r5, [r1, #16]
 8009182:	4607      	mov	r7, r0
 8009184:	460c      	mov	r4, r1
 8009186:	461e      	mov	r6, r3
 8009188:	f101 0c14 	add.w	ip, r1, #20
 800918c:	2000      	movs	r0, #0
 800918e:	f8dc 3000 	ldr.w	r3, [ip]
 8009192:	b299      	uxth	r1, r3
 8009194:	fb02 6101 	mla	r1, r2, r1, r6
 8009198:	0c1e      	lsrs	r6, r3, #16
 800919a:	0c0b      	lsrs	r3, r1, #16
 800919c:	fb02 3306 	mla	r3, r2, r6, r3
 80091a0:	b289      	uxth	r1, r1
 80091a2:	3001      	adds	r0, #1
 80091a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091a8:	4285      	cmp	r5, r0
 80091aa:	f84c 1b04 	str.w	r1, [ip], #4
 80091ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091b2:	dcec      	bgt.n	800918e <__multadd+0x12>
 80091b4:	b30e      	cbz	r6, 80091fa <__multadd+0x7e>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dc19      	bgt.n	80091f0 <__multadd+0x74>
 80091bc:	6861      	ldr	r1, [r4, #4]
 80091be:	4638      	mov	r0, r7
 80091c0:	3101      	adds	r1, #1
 80091c2:	f7ff ff79 	bl	80090b8 <_Balloc>
 80091c6:	4680      	mov	r8, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <__multadd+0x5a>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009200 <__multadd+0x84>)
 80091ce:	480d      	ldr	r0, [pc, #52]	@ (8009204 <__multadd+0x88>)
 80091d0:	21ba      	movs	r1, #186	@ 0xba
 80091d2:	f000 fd21 	bl	8009c18 <__assert_func>
 80091d6:	6922      	ldr	r2, [r4, #16]
 80091d8:	3202      	adds	r2, #2
 80091da:	f104 010c 	add.w	r1, r4, #12
 80091de:	0092      	lsls	r2, r2, #2
 80091e0:	300c      	adds	r0, #12
 80091e2:	f7ff f80c 	bl	80081fe <memcpy>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ffa5 	bl	8009138 <_Bfree>
 80091ee:	4644      	mov	r4, r8
 80091f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091f4:	3501      	adds	r5, #1
 80091f6:	615e      	str	r6, [r3, #20]
 80091f8:	6125      	str	r5, [r4, #16]
 80091fa:	4620      	mov	r0, r4
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	0800a676 	.word	0x0800a676
 8009204:	0800a687 	.word	0x0800a687

08009208 <__hi0bits>:
 8009208:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800920c:	4603      	mov	r3, r0
 800920e:	bf36      	itet	cc
 8009210:	0403      	lslcc	r3, r0, #16
 8009212:	2000      	movcs	r0, #0
 8009214:	2010      	movcc	r0, #16
 8009216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800921a:	bf3c      	itt	cc
 800921c:	021b      	lslcc	r3, r3, #8
 800921e:	3008      	addcc	r0, #8
 8009220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009224:	bf3c      	itt	cc
 8009226:	011b      	lslcc	r3, r3, #4
 8009228:	3004      	addcc	r0, #4
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800922e:	bf3c      	itt	cc
 8009230:	009b      	lslcc	r3, r3, #2
 8009232:	3002      	addcc	r0, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	db05      	blt.n	8009244 <__hi0bits+0x3c>
 8009238:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800923c:	f100 0001 	add.w	r0, r0, #1
 8009240:	bf08      	it	eq
 8009242:	2020      	moveq	r0, #32
 8009244:	4770      	bx	lr

08009246 <__lo0bits>:
 8009246:	6803      	ldr	r3, [r0, #0]
 8009248:	4602      	mov	r2, r0
 800924a:	f013 0007 	ands.w	r0, r3, #7
 800924e:	d00b      	beq.n	8009268 <__lo0bits+0x22>
 8009250:	07d9      	lsls	r1, r3, #31
 8009252:	d421      	bmi.n	8009298 <__lo0bits+0x52>
 8009254:	0798      	lsls	r0, r3, #30
 8009256:	bf49      	itett	mi
 8009258:	085b      	lsrmi	r3, r3, #1
 800925a:	089b      	lsrpl	r3, r3, #2
 800925c:	2001      	movmi	r0, #1
 800925e:	6013      	strmi	r3, [r2, #0]
 8009260:	bf5c      	itt	pl
 8009262:	6013      	strpl	r3, [r2, #0]
 8009264:	2002      	movpl	r0, #2
 8009266:	4770      	bx	lr
 8009268:	b299      	uxth	r1, r3
 800926a:	b909      	cbnz	r1, 8009270 <__lo0bits+0x2a>
 800926c:	0c1b      	lsrs	r3, r3, #16
 800926e:	2010      	movs	r0, #16
 8009270:	b2d9      	uxtb	r1, r3
 8009272:	b909      	cbnz	r1, 8009278 <__lo0bits+0x32>
 8009274:	3008      	adds	r0, #8
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	0719      	lsls	r1, r3, #28
 800927a:	bf04      	itt	eq
 800927c:	091b      	lsreq	r3, r3, #4
 800927e:	3004      	addeq	r0, #4
 8009280:	0799      	lsls	r1, r3, #30
 8009282:	bf04      	itt	eq
 8009284:	089b      	lsreq	r3, r3, #2
 8009286:	3002      	addeq	r0, #2
 8009288:	07d9      	lsls	r1, r3, #31
 800928a:	d403      	bmi.n	8009294 <__lo0bits+0x4e>
 800928c:	085b      	lsrs	r3, r3, #1
 800928e:	f100 0001 	add.w	r0, r0, #1
 8009292:	d003      	beq.n	800929c <__lo0bits+0x56>
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4770      	bx	lr
 8009298:	2000      	movs	r0, #0
 800929a:	4770      	bx	lr
 800929c:	2020      	movs	r0, #32
 800929e:	4770      	bx	lr

080092a0 <__i2b>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	460c      	mov	r4, r1
 80092a4:	2101      	movs	r1, #1
 80092a6:	f7ff ff07 	bl	80090b8 <_Balloc>
 80092aa:	4602      	mov	r2, r0
 80092ac:	b928      	cbnz	r0, 80092ba <__i2b+0x1a>
 80092ae:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <__i2b+0x24>)
 80092b0:	4805      	ldr	r0, [pc, #20]	@ (80092c8 <__i2b+0x28>)
 80092b2:	f240 1145 	movw	r1, #325	@ 0x145
 80092b6:	f000 fcaf 	bl	8009c18 <__assert_func>
 80092ba:	2301      	movs	r3, #1
 80092bc:	6144      	str	r4, [r0, #20]
 80092be:	6103      	str	r3, [r0, #16]
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	bf00      	nop
 80092c4:	0800a676 	.word	0x0800a676
 80092c8:	0800a687 	.word	0x0800a687

080092cc <__multiply>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	4614      	mov	r4, r2
 80092d2:	690a      	ldr	r2, [r1, #16]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	bfa8      	it	ge
 80092da:	4623      	movge	r3, r4
 80092dc:	460f      	mov	r7, r1
 80092de:	bfa4      	itt	ge
 80092e0:	460c      	movge	r4, r1
 80092e2:	461f      	movge	r7, r3
 80092e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092ec:	68a3      	ldr	r3, [r4, #8]
 80092ee:	6861      	ldr	r1, [r4, #4]
 80092f0:	eb0a 0609 	add.w	r6, sl, r9
 80092f4:	42b3      	cmp	r3, r6
 80092f6:	b085      	sub	sp, #20
 80092f8:	bfb8      	it	lt
 80092fa:	3101      	addlt	r1, #1
 80092fc:	f7ff fedc 	bl	80090b8 <_Balloc>
 8009300:	b930      	cbnz	r0, 8009310 <__multiply+0x44>
 8009302:	4602      	mov	r2, r0
 8009304:	4b44      	ldr	r3, [pc, #272]	@ (8009418 <__multiply+0x14c>)
 8009306:	4845      	ldr	r0, [pc, #276]	@ (800941c <__multiply+0x150>)
 8009308:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800930c:	f000 fc84 	bl	8009c18 <__assert_func>
 8009310:	f100 0514 	add.w	r5, r0, #20
 8009314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009318:	462b      	mov	r3, r5
 800931a:	2200      	movs	r2, #0
 800931c:	4543      	cmp	r3, r8
 800931e:	d321      	bcc.n	8009364 <__multiply+0x98>
 8009320:	f107 0114 	add.w	r1, r7, #20
 8009324:	f104 0214 	add.w	r2, r4, #20
 8009328:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800932c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009330:	9302      	str	r3, [sp, #8]
 8009332:	1b13      	subs	r3, r2, r4
 8009334:	3b15      	subs	r3, #21
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	3304      	adds	r3, #4
 800933c:	f104 0715 	add.w	r7, r4, #21
 8009340:	42ba      	cmp	r2, r7
 8009342:	bf38      	it	cc
 8009344:	2304      	movcc	r3, #4
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	9103      	str	r1, [sp, #12]
 800934c:	428b      	cmp	r3, r1
 800934e:	d80c      	bhi.n	800936a <__multiply+0x9e>
 8009350:	2e00      	cmp	r6, #0
 8009352:	dd03      	ble.n	800935c <__multiply+0x90>
 8009354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009358:	2b00      	cmp	r3, #0
 800935a:	d05b      	beq.n	8009414 <__multiply+0x148>
 800935c:	6106      	str	r6, [r0, #16]
 800935e:	b005      	add	sp, #20
 8009360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009364:	f843 2b04 	str.w	r2, [r3], #4
 8009368:	e7d8      	b.n	800931c <__multiply+0x50>
 800936a:	f8b1 a000 	ldrh.w	sl, [r1]
 800936e:	f1ba 0f00 	cmp.w	sl, #0
 8009372:	d024      	beq.n	80093be <__multiply+0xf2>
 8009374:	f104 0e14 	add.w	lr, r4, #20
 8009378:	46a9      	mov	r9, r5
 800937a:	f04f 0c00 	mov.w	ip, #0
 800937e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009382:	f8d9 3000 	ldr.w	r3, [r9]
 8009386:	fa1f fb87 	uxth.w	fp, r7
 800938a:	b29b      	uxth	r3, r3
 800938c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009390:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009394:	f8d9 7000 	ldr.w	r7, [r9]
 8009398:	4463      	add	r3, ip
 800939a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800939e:	fb0a c70b 	mla	r7, sl, fp, ip
 80093a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093ac:	4572      	cmp	r2, lr
 80093ae:	f849 3b04 	str.w	r3, [r9], #4
 80093b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093b6:	d8e2      	bhi.n	800937e <__multiply+0xb2>
 80093b8:	9b01      	ldr	r3, [sp, #4]
 80093ba:	f845 c003 	str.w	ip, [r5, r3]
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093c4:	3104      	adds	r1, #4
 80093c6:	f1b9 0f00 	cmp.w	r9, #0
 80093ca:	d021      	beq.n	8009410 <__multiply+0x144>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	f104 0c14 	add.w	ip, r4, #20
 80093d2:	46ae      	mov	lr, r5
 80093d4:	f04f 0a00 	mov.w	sl, #0
 80093d8:	f8bc b000 	ldrh.w	fp, [ip]
 80093dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093e0:	fb09 770b 	mla	r7, r9, fp, r7
 80093e4:	4457      	add	r7, sl
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093ec:	f84e 3b04 	str.w	r3, [lr], #4
 80093f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f8:	f8be 3000 	ldrh.w	r3, [lr]
 80093fc:	fb09 330a 	mla	r3, r9, sl, r3
 8009400:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009404:	4562      	cmp	r2, ip
 8009406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800940a:	d8e5      	bhi.n	80093d8 <__multiply+0x10c>
 800940c:	9f01      	ldr	r7, [sp, #4]
 800940e:	51eb      	str	r3, [r5, r7]
 8009410:	3504      	adds	r5, #4
 8009412:	e799      	b.n	8009348 <__multiply+0x7c>
 8009414:	3e01      	subs	r6, #1
 8009416:	e79b      	b.n	8009350 <__multiply+0x84>
 8009418:	0800a676 	.word	0x0800a676
 800941c:	0800a687 	.word	0x0800a687

08009420 <__pow5mult>:
 8009420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009424:	4615      	mov	r5, r2
 8009426:	f012 0203 	ands.w	r2, r2, #3
 800942a:	4607      	mov	r7, r0
 800942c:	460e      	mov	r6, r1
 800942e:	d007      	beq.n	8009440 <__pow5mult+0x20>
 8009430:	4c25      	ldr	r4, [pc, #148]	@ (80094c8 <__pow5mult+0xa8>)
 8009432:	3a01      	subs	r2, #1
 8009434:	2300      	movs	r3, #0
 8009436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800943a:	f7ff fe9f 	bl	800917c <__multadd>
 800943e:	4606      	mov	r6, r0
 8009440:	10ad      	asrs	r5, r5, #2
 8009442:	d03d      	beq.n	80094c0 <__pow5mult+0xa0>
 8009444:	69fc      	ldr	r4, [r7, #28]
 8009446:	b97c      	cbnz	r4, 8009468 <__pow5mult+0x48>
 8009448:	2010      	movs	r0, #16
 800944a:	f7ff fd7f 	bl	8008f4c <malloc>
 800944e:	4602      	mov	r2, r0
 8009450:	61f8      	str	r0, [r7, #28]
 8009452:	b928      	cbnz	r0, 8009460 <__pow5mult+0x40>
 8009454:	4b1d      	ldr	r3, [pc, #116]	@ (80094cc <__pow5mult+0xac>)
 8009456:	481e      	ldr	r0, [pc, #120]	@ (80094d0 <__pow5mult+0xb0>)
 8009458:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800945c:	f000 fbdc 	bl	8009c18 <__assert_func>
 8009460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009464:	6004      	str	r4, [r0, #0]
 8009466:	60c4      	str	r4, [r0, #12]
 8009468:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800946c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009470:	b94c      	cbnz	r4, 8009486 <__pow5mult+0x66>
 8009472:	f240 2171 	movw	r1, #625	@ 0x271
 8009476:	4638      	mov	r0, r7
 8009478:	f7ff ff12 	bl	80092a0 <__i2b>
 800947c:	2300      	movs	r3, #0
 800947e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009482:	4604      	mov	r4, r0
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	f04f 0900 	mov.w	r9, #0
 800948a:	07eb      	lsls	r3, r5, #31
 800948c:	d50a      	bpl.n	80094a4 <__pow5mult+0x84>
 800948e:	4631      	mov	r1, r6
 8009490:	4622      	mov	r2, r4
 8009492:	4638      	mov	r0, r7
 8009494:	f7ff ff1a 	bl	80092cc <__multiply>
 8009498:	4631      	mov	r1, r6
 800949a:	4680      	mov	r8, r0
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff fe4b 	bl	8009138 <_Bfree>
 80094a2:	4646      	mov	r6, r8
 80094a4:	106d      	asrs	r5, r5, #1
 80094a6:	d00b      	beq.n	80094c0 <__pow5mult+0xa0>
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	b938      	cbnz	r0, 80094bc <__pow5mult+0x9c>
 80094ac:	4622      	mov	r2, r4
 80094ae:	4621      	mov	r1, r4
 80094b0:	4638      	mov	r0, r7
 80094b2:	f7ff ff0b 	bl	80092cc <__multiply>
 80094b6:	6020      	str	r0, [r4, #0]
 80094b8:	f8c0 9000 	str.w	r9, [r0]
 80094bc:	4604      	mov	r4, r0
 80094be:	e7e4      	b.n	800948a <__pow5mult+0x6a>
 80094c0:	4630      	mov	r0, r6
 80094c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a6e0 	.word	0x0800a6e0
 80094cc:	0800a607 	.word	0x0800a607
 80094d0:	0800a687 	.word	0x0800a687

080094d4 <__lshift>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	460c      	mov	r4, r1
 80094da:	6849      	ldr	r1, [r1, #4]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	4607      	mov	r7, r0
 80094e6:	4691      	mov	r9, r2
 80094e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094ec:	f108 0601 	add.w	r6, r8, #1
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	db0b      	blt.n	800950c <__lshift+0x38>
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff fddf 	bl	80090b8 <_Balloc>
 80094fa:	4605      	mov	r5, r0
 80094fc:	b948      	cbnz	r0, 8009512 <__lshift+0x3e>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b28      	ldr	r3, [pc, #160]	@ (80095a4 <__lshift+0xd0>)
 8009502:	4829      	ldr	r0, [pc, #164]	@ (80095a8 <__lshift+0xd4>)
 8009504:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009508:	f000 fb86 	bl	8009c18 <__assert_func>
 800950c:	3101      	adds	r1, #1
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	e7ee      	b.n	80094f0 <__lshift+0x1c>
 8009512:	2300      	movs	r3, #0
 8009514:	f100 0114 	add.w	r1, r0, #20
 8009518:	f100 0210 	add.w	r2, r0, #16
 800951c:	4618      	mov	r0, r3
 800951e:	4553      	cmp	r3, sl
 8009520:	db33      	blt.n	800958a <__lshift+0xb6>
 8009522:	6920      	ldr	r0, [r4, #16]
 8009524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009528:	f104 0314 	add.w	r3, r4, #20
 800952c:	f019 091f 	ands.w	r9, r9, #31
 8009530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009538:	d02b      	beq.n	8009592 <__lshift+0xbe>
 800953a:	f1c9 0e20 	rsb	lr, r9, #32
 800953e:	468a      	mov	sl, r1
 8009540:	2200      	movs	r2, #0
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	fa00 f009 	lsl.w	r0, r0, r9
 8009548:	4310      	orrs	r0, r2
 800954a:	f84a 0b04 	str.w	r0, [sl], #4
 800954e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009552:	459c      	cmp	ip, r3
 8009554:	fa22 f20e 	lsr.w	r2, r2, lr
 8009558:	d8f3      	bhi.n	8009542 <__lshift+0x6e>
 800955a:	ebac 0304 	sub.w	r3, ip, r4
 800955e:	3b15      	subs	r3, #21
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	3304      	adds	r3, #4
 8009566:	f104 0015 	add.w	r0, r4, #21
 800956a:	4584      	cmp	ip, r0
 800956c:	bf38      	it	cc
 800956e:	2304      	movcc	r3, #4
 8009570:	50ca      	str	r2, [r1, r3]
 8009572:	b10a      	cbz	r2, 8009578 <__lshift+0xa4>
 8009574:	f108 0602 	add.w	r6, r8, #2
 8009578:	3e01      	subs	r6, #1
 800957a:	4638      	mov	r0, r7
 800957c:	612e      	str	r6, [r5, #16]
 800957e:	4621      	mov	r1, r4
 8009580:	f7ff fdda 	bl	8009138 <_Bfree>
 8009584:	4628      	mov	r0, r5
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	f842 0f04 	str.w	r0, [r2, #4]!
 800958e:	3301      	adds	r3, #1
 8009590:	e7c5      	b.n	800951e <__lshift+0x4a>
 8009592:	3904      	subs	r1, #4
 8009594:	f853 2b04 	ldr.w	r2, [r3], #4
 8009598:	f841 2f04 	str.w	r2, [r1, #4]!
 800959c:	459c      	cmp	ip, r3
 800959e:	d8f9      	bhi.n	8009594 <__lshift+0xc0>
 80095a0:	e7ea      	b.n	8009578 <__lshift+0xa4>
 80095a2:	bf00      	nop
 80095a4:	0800a676 	.word	0x0800a676
 80095a8:	0800a687 	.word	0x0800a687

080095ac <__mcmp>:
 80095ac:	690a      	ldr	r2, [r1, #16]
 80095ae:	4603      	mov	r3, r0
 80095b0:	6900      	ldr	r0, [r0, #16]
 80095b2:	1a80      	subs	r0, r0, r2
 80095b4:	b530      	push	{r4, r5, lr}
 80095b6:	d10e      	bne.n	80095d6 <__mcmp+0x2a>
 80095b8:	3314      	adds	r3, #20
 80095ba:	3114      	adds	r1, #20
 80095bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095cc:	4295      	cmp	r5, r2
 80095ce:	d003      	beq.n	80095d8 <__mcmp+0x2c>
 80095d0:	d205      	bcs.n	80095de <__mcmp+0x32>
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	bd30      	pop	{r4, r5, pc}
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d3f3      	bcc.n	80095c4 <__mcmp+0x18>
 80095dc:	e7fb      	b.n	80095d6 <__mcmp+0x2a>
 80095de:	2001      	movs	r0, #1
 80095e0:	e7f9      	b.n	80095d6 <__mcmp+0x2a>
	...

080095e4 <__mdiff>:
 80095e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	4689      	mov	r9, r1
 80095ea:	4606      	mov	r6, r0
 80095ec:	4611      	mov	r1, r2
 80095ee:	4648      	mov	r0, r9
 80095f0:	4614      	mov	r4, r2
 80095f2:	f7ff ffdb 	bl	80095ac <__mcmp>
 80095f6:	1e05      	subs	r5, r0, #0
 80095f8:	d112      	bne.n	8009620 <__mdiff+0x3c>
 80095fa:	4629      	mov	r1, r5
 80095fc:	4630      	mov	r0, r6
 80095fe:	f7ff fd5b 	bl	80090b8 <_Balloc>
 8009602:	4602      	mov	r2, r0
 8009604:	b928      	cbnz	r0, 8009612 <__mdiff+0x2e>
 8009606:	4b3f      	ldr	r3, [pc, #252]	@ (8009704 <__mdiff+0x120>)
 8009608:	f240 2137 	movw	r1, #567	@ 0x237
 800960c:	483e      	ldr	r0, [pc, #248]	@ (8009708 <__mdiff+0x124>)
 800960e:	f000 fb03 	bl	8009c18 <__assert_func>
 8009612:	2301      	movs	r3, #1
 8009614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009618:	4610      	mov	r0, r2
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009620:	bfbc      	itt	lt
 8009622:	464b      	movlt	r3, r9
 8009624:	46a1      	movlt	r9, r4
 8009626:	4630      	mov	r0, r6
 8009628:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800962c:	bfba      	itte	lt
 800962e:	461c      	movlt	r4, r3
 8009630:	2501      	movlt	r5, #1
 8009632:	2500      	movge	r5, #0
 8009634:	f7ff fd40 	bl	80090b8 <_Balloc>
 8009638:	4602      	mov	r2, r0
 800963a:	b918      	cbnz	r0, 8009644 <__mdiff+0x60>
 800963c:	4b31      	ldr	r3, [pc, #196]	@ (8009704 <__mdiff+0x120>)
 800963e:	f240 2145 	movw	r1, #581	@ 0x245
 8009642:	e7e3      	b.n	800960c <__mdiff+0x28>
 8009644:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009648:	6926      	ldr	r6, [r4, #16]
 800964a:	60c5      	str	r5, [r0, #12]
 800964c:	f109 0310 	add.w	r3, r9, #16
 8009650:	f109 0514 	add.w	r5, r9, #20
 8009654:	f104 0e14 	add.w	lr, r4, #20
 8009658:	f100 0b14 	add.w	fp, r0, #20
 800965c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009660:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	46d9      	mov	r9, fp
 8009668:	f04f 0c00 	mov.w	ip, #0
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009672:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	fa1f f38a 	uxth.w	r3, sl
 800967c:	4619      	mov	r1, r3
 800967e:	b283      	uxth	r3, r0
 8009680:	1acb      	subs	r3, r1, r3
 8009682:	0c00      	lsrs	r0, r0, #16
 8009684:	4463      	add	r3, ip
 8009686:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800968a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800968e:	b29b      	uxth	r3, r3
 8009690:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009694:	4576      	cmp	r6, lr
 8009696:	f849 3b04 	str.w	r3, [r9], #4
 800969a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800969e:	d8e5      	bhi.n	800966c <__mdiff+0x88>
 80096a0:	1b33      	subs	r3, r6, r4
 80096a2:	3b15      	subs	r3, #21
 80096a4:	f023 0303 	bic.w	r3, r3, #3
 80096a8:	3415      	adds	r4, #21
 80096aa:	3304      	adds	r3, #4
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	bf38      	it	cc
 80096b0:	2304      	movcc	r3, #4
 80096b2:	441d      	add	r5, r3
 80096b4:	445b      	add	r3, fp
 80096b6:	461e      	mov	r6, r3
 80096b8:	462c      	mov	r4, r5
 80096ba:	4544      	cmp	r4, r8
 80096bc:	d30e      	bcc.n	80096dc <__mdiff+0xf8>
 80096be:	f108 0103 	add.w	r1, r8, #3
 80096c2:	1b49      	subs	r1, r1, r5
 80096c4:	f021 0103 	bic.w	r1, r1, #3
 80096c8:	3d03      	subs	r5, #3
 80096ca:	45a8      	cmp	r8, r5
 80096cc:	bf38      	it	cc
 80096ce:	2100      	movcc	r1, #0
 80096d0:	440b      	add	r3, r1
 80096d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096d6:	b191      	cbz	r1, 80096fe <__mdiff+0x11a>
 80096d8:	6117      	str	r7, [r2, #16]
 80096da:	e79d      	b.n	8009618 <__mdiff+0x34>
 80096dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80096e0:	46e6      	mov	lr, ip
 80096e2:	0c08      	lsrs	r0, r1, #16
 80096e4:	fa1c fc81 	uxtah	ip, ip, r1
 80096e8:	4471      	add	r1, lr
 80096ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096ee:	b289      	uxth	r1, r1
 80096f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096f4:	f846 1b04 	str.w	r1, [r6], #4
 80096f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096fc:	e7dd      	b.n	80096ba <__mdiff+0xd6>
 80096fe:	3f01      	subs	r7, #1
 8009700:	e7e7      	b.n	80096d2 <__mdiff+0xee>
 8009702:	bf00      	nop
 8009704:	0800a676 	.word	0x0800a676
 8009708:	0800a687 	.word	0x0800a687

0800970c <__d2b>:
 800970c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009710:	460f      	mov	r7, r1
 8009712:	2101      	movs	r1, #1
 8009714:	ec59 8b10 	vmov	r8, r9, d0
 8009718:	4616      	mov	r6, r2
 800971a:	f7ff fccd 	bl	80090b8 <_Balloc>
 800971e:	4604      	mov	r4, r0
 8009720:	b930      	cbnz	r0, 8009730 <__d2b+0x24>
 8009722:	4602      	mov	r2, r0
 8009724:	4b23      	ldr	r3, [pc, #140]	@ (80097b4 <__d2b+0xa8>)
 8009726:	4824      	ldr	r0, [pc, #144]	@ (80097b8 <__d2b+0xac>)
 8009728:	f240 310f 	movw	r1, #783	@ 0x30f
 800972c:	f000 fa74 	bl	8009c18 <__assert_func>
 8009730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009738:	b10d      	cbz	r5, 800973e <__d2b+0x32>
 800973a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	f1b8 0300 	subs.w	r3, r8, #0
 8009744:	d023      	beq.n	800978e <__d2b+0x82>
 8009746:	4668      	mov	r0, sp
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	f7ff fd7c 	bl	8009246 <__lo0bits>
 800974e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009752:	b1d0      	cbz	r0, 800978a <__d2b+0x7e>
 8009754:	f1c0 0320 	rsb	r3, r0, #32
 8009758:	fa02 f303 	lsl.w	r3, r2, r3
 800975c:	430b      	orrs	r3, r1
 800975e:	40c2      	lsrs	r2, r0
 8009760:	6163      	str	r3, [r4, #20]
 8009762:	9201      	str	r2, [sp, #4]
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	61a3      	str	r3, [r4, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bf0c      	ite	eq
 800976c:	2201      	moveq	r2, #1
 800976e:	2202      	movne	r2, #2
 8009770:	6122      	str	r2, [r4, #16]
 8009772:	b1a5      	cbz	r5, 800979e <__d2b+0x92>
 8009774:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009778:	4405      	add	r5, r0
 800977a:	603d      	str	r5, [r7, #0]
 800977c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009780:	6030      	str	r0, [r6, #0]
 8009782:	4620      	mov	r0, r4
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978a:	6161      	str	r1, [r4, #20]
 800978c:	e7ea      	b.n	8009764 <__d2b+0x58>
 800978e:	a801      	add	r0, sp, #4
 8009790:	f7ff fd59 	bl	8009246 <__lo0bits>
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	3020      	adds	r0, #32
 800979a:	2201      	movs	r2, #1
 800979c:	e7e8      	b.n	8009770 <__d2b+0x64>
 800979e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097a6:	6038      	str	r0, [r7, #0]
 80097a8:	6918      	ldr	r0, [r3, #16]
 80097aa:	f7ff fd2d 	bl	8009208 <__hi0bits>
 80097ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097b2:	e7e5      	b.n	8009780 <__d2b+0x74>
 80097b4:	0800a676 	.word	0x0800a676
 80097b8:	0800a687 	.word	0x0800a687

080097bc <__ssputs_r>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	688e      	ldr	r6, [r1, #8]
 80097c2:	461f      	mov	r7, r3
 80097c4:	42be      	cmp	r6, r7
 80097c6:	680b      	ldr	r3, [r1, #0]
 80097c8:	4682      	mov	sl, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4690      	mov	r8, r2
 80097ce:	d82d      	bhi.n	800982c <__ssputs_r+0x70>
 80097d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097d8:	d026      	beq.n	8009828 <__ssputs_r+0x6c>
 80097da:	6965      	ldr	r5, [r4, #20]
 80097dc:	6909      	ldr	r1, [r1, #16]
 80097de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e2:	eba3 0901 	sub.w	r9, r3, r1
 80097e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ea:	1c7b      	adds	r3, r7, #1
 80097ec:	444b      	add	r3, r9
 80097ee:	106d      	asrs	r5, r5, #1
 80097f0:	429d      	cmp	r5, r3
 80097f2:	bf38      	it	cc
 80097f4:	461d      	movcc	r5, r3
 80097f6:	0553      	lsls	r3, r2, #21
 80097f8:	d527      	bpl.n	800984a <__ssputs_r+0x8e>
 80097fa:	4629      	mov	r1, r5
 80097fc:	f7ff fbd0 	bl	8008fa0 <_malloc_r>
 8009800:	4606      	mov	r6, r0
 8009802:	b360      	cbz	r0, 800985e <__ssputs_r+0xa2>
 8009804:	6921      	ldr	r1, [r4, #16]
 8009806:	464a      	mov	r2, r9
 8009808:	f7fe fcf9 	bl	80081fe <memcpy>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	6126      	str	r6, [r4, #16]
 800981a:	6165      	str	r5, [r4, #20]
 800981c:	444e      	add	r6, r9
 800981e:	eba5 0509 	sub.w	r5, r5, r9
 8009822:	6026      	str	r6, [r4, #0]
 8009824:	60a5      	str	r5, [r4, #8]
 8009826:	463e      	mov	r6, r7
 8009828:	42be      	cmp	r6, r7
 800982a:	d900      	bls.n	800982e <__ssputs_r+0x72>
 800982c:	463e      	mov	r6, r7
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	4632      	mov	r2, r6
 8009832:	4641      	mov	r1, r8
 8009834:	f000 f9c6 	bl	8009bc4 <memmove>
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	1b9b      	subs	r3, r3, r6
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	4433      	add	r3, r6
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	462a      	mov	r2, r5
 800984c:	f000 fa28 	bl	8009ca0 <_realloc_r>
 8009850:	4606      	mov	r6, r0
 8009852:	2800      	cmp	r0, #0
 8009854:	d1e0      	bne.n	8009818 <__ssputs_r+0x5c>
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	4650      	mov	r0, sl
 800985a:	f7ff fb2d 	bl	8008eb8 <_free_r>
 800985e:	230c      	movs	r3, #12
 8009860:	f8ca 3000 	str.w	r3, [sl]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	e7e9      	b.n	8009846 <__ssputs_r+0x8a>
	...

08009874 <_svfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4698      	mov	r8, r3
 800987a:	898b      	ldrh	r3, [r1, #12]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	b09d      	sub	sp, #116	@ 0x74
 8009880:	4607      	mov	r7, r0
 8009882:	460d      	mov	r5, r1
 8009884:	4614      	mov	r4, r2
 8009886:	d510      	bpl.n	80098aa <_svfiprintf_r+0x36>
 8009888:	690b      	ldr	r3, [r1, #16]
 800988a:	b973      	cbnz	r3, 80098aa <_svfiprintf_r+0x36>
 800988c:	2140      	movs	r1, #64	@ 0x40
 800988e:	f7ff fb87 	bl	8008fa0 <_malloc_r>
 8009892:	6028      	str	r0, [r5, #0]
 8009894:	6128      	str	r0, [r5, #16]
 8009896:	b930      	cbnz	r0, 80098a6 <_svfiprintf_r+0x32>
 8009898:	230c      	movs	r3, #12
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	b01d      	add	sp, #116	@ 0x74
 80098a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a6:	2340      	movs	r3, #64	@ 0x40
 80098a8:	616b      	str	r3, [r5, #20]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ae:	2320      	movs	r3, #32
 80098b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b8:	2330      	movs	r3, #48	@ 0x30
 80098ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a58 <_svfiprintf_r+0x1e4>
 80098be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098c2:	f04f 0901 	mov.w	r9, #1
 80098c6:	4623      	mov	r3, r4
 80098c8:	469a      	mov	sl, r3
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	b10a      	cbz	r2, 80098d4 <_svfiprintf_r+0x60>
 80098d0:	2a25      	cmp	r2, #37	@ 0x25
 80098d2:	d1f9      	bne.n	80098c8 <_svfiprintf_r+0x54>
 80098d4:	ebba 0b04 	subs.w	fp, sl, r4
 80098d8:	d00b      	beq.n	80098f2 <_svfiprintf_r+0x7e>
 80098da:	465b      	mov	r3, fp
 80098dc:	4622      	mov	r2, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7ff ff6b 	bl	80097bc <__ssputs_r>
 80098e6:	3001      	adds	r0, #1
 80098e8:	f000 80a7 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ee:	445a      	add	r2, fp
 80098f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098f2:	f89a 3000 	ldrb.w	r3, [sl]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 809f 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098fc:	2300      	movs	r3, #0
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009906:	f10a 0a01 	add.w	sl, sl, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9307      	str	r3, [sp, #28]
 800990e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009912:	931a      	str	r3, [sp, #104]	@ 0x68
 8009914:	4654      	mov	r4, sl
 8009916:	2205      	movs	r2, #5
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	484e      	ldr	r0, [pc, #312]	@ (8009a58 <_svfiprintf_r+0x1e4>)
 800991e:	f7f6 fc57 	bl	80001d0 <memchr>
 8009922:	9a04      	ldr	r2, [sp, #16]
 8009924:	b9d8      	cbnz	r0, 800995e <_svfiprintf_r+0xea>
 8009926:	06d0      	lsls	r0, r2, #27
 8009928:	bf44      	itt	mi
 800992a:	2320      	movmi	r3, #32
 800992c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009930:	0711      	lsls	r1, r2, #28
 8009932:	bf44      	itt	mi
 8009934:	232b      	movmi	r3, #43	@ 0x2b
 8009936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800993a:	f89a 3000 	ldrb.w	r3, [sl]
 800993e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009940:	d015      	beq.n	800996e <_svfiprintf_r+0xfa>
 8009942:	9a07      	ldr	r2, [sp, #28]
 8009944:	4654      	mov	r4, sl
 8009946:	2000      	movs	r0, #0
 8009948:	f04f 0c0a 	mov.w	ip, #10
 800994c:	4621      	mov	r1, r4
 800994e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009952:	3b30      	subs	r3, #48	@ 0x30
 8009954:	2b09      	cmp	r3, #9
 8009956:	d94b      	bls.n	80099f0 <_svfiprintf_r+0x17c>
 8009958:	b1b0      	cbz	r0, 8009988 <_svfiprintf_r+0x114>
 800995a:	9207      	str	r2, [sp, #28]
 800995c:	e014      	b.n	8009988 <_svfiprintf_r+0x114>
 800995e:	eba0 0308 	sub.w	r3, r0, r8
 8009962:	fa09 f303 	lsl.w	r3, r9, r3
 8009966:	4313      	orrs	r3, r2
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	46a2      	mov	sl, r4
 800996c:	e7d2      	b.n	8009914 <_svfiprintf_r+0xa0>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9103      	str	r1, [sp, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfbb      	ittet	lt
 800997a:	425b      	neglt	r3, r3
 800997c:	f042 0202 	orrlt.w	r2, r2, #2
 8009980:	9307      	strge	r3, [sp, #28]
 8009982:	9307      	strlt	r3, [sp, #28]
 8009984:	bfb8      	it	lt
 8009986:	9204      	strlt	r2, [sp, #16]
 8009988:	7823      	ldrb	r3, [r4, #0]
 800998a:	2b2e      	cmp	r3, #46	@ 0x2e
 800998c:	d10a      	bne.n	80099a4 <_svfiprintf_r+0x130>
 800998e:	7863      	ldrb	r3, [r4, #1]
 8009990:	2b2a      	cmp	r3, #42	@ 0x2a
 8009992:	d132      	bne.n	80099fa <_svfiprintf_r+0x186>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	9203      	str	r2, [sp, #12]
 800999c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099a0:	3402      	adds	r4, #2
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a68 <_svfiprintf_r+0x1f4>
 80099a8:	7821      	ldrb	r1, [r4, #0]
 80099aa:	2203      	movs	r2, #3
 80099ac:	4650      	mov	r0, sl
 80099ae:	f7f6 fc0f 	bl	80001d0 <memchr>
 80099b2:	b138      	cbz	r0, 80099c4 <_svfiprintf_r+0x150>
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	eba0 000a 	sub.w	r0, r0, sl
 80099ba:	2240      	movs	r2, #64	@ 0x40
 80099bc:	4082      	lsls	r2, r0
 80099be:	4313      	orrs	r3, r2
 80099c0:	3401      	adds	r4, #1
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	4824      	ldr	r0, [pc, #144]	@ (8009a5c <_svfiprintf_r+0x1e8>)
 80099ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099ce:	2206      	movs	r2, #6
 80099d0:	f7f6 fbfe 	bl	80001d0 <memchr>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d036      	beq.n	8009a46 <_svfiprintf_r+0x1d2>
 80099d8:	4b21      	ldr	r3, [pc, #132]	@ (8009a60 <_svfiprintf_r+0x1ec>)
 80099da:	bb1b      	cbnz	r3, 8009a24 <_svfiprintf_r+0x1b0>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ea:	4433      	add	r3, r6
 80099ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ee:	e76a      	b.n	80098c6 <_svfiprintf_r+0x52>
 80099f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f4:	460c      	mov	r4, r1
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7a8      	b.n	800994c <_svfiprintf_r+0xd8>
 80099fa:	2300      	movs	r3, #0
 80099fc:	3401      	adds	r4, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f04f 0c0a 	mov.w	ip, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	3a30      	subs	r2, #48	@ 0x30
 8009a0e:	2a09      	cmp	r2, #9
 8009a10:	d903      	bls.n	8009a1a <_svfiprintf_r+0x1a6>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c6      	beq.n	80099a4 <_svfiprintf_r+0x130>
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	e7c4      	b.n	80099a4 <_svfiprintf_r+0x130>
 8009a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f0      	b.n	8009a06 <_svfiprintf_r+0x192>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7fd fe54 	bl	80076dc <_printf_float>
 8009a34:	1c42      	adds	r2, r0, #1
 8009a36:	4606      	mov	r6, r0
 8009a38:	d1d6      	bne.n	80099e8 <_svfiprintf_r+0x174>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	065b      	lsls	r3, r3, #25
 8009a3e:	f53f af2d 	bmi.w	800989c <_svfiprintf_r+0x28>
 8009a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a44:	e72c      	b.n	80098a0 <_svfiprintf_r+0x2c>
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a4e:	a904      	add	r1, sp, #16
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7fe f8db 	bl	8007c0c <_printf_i>
 8009a56:	e7ed      	b.n	8009a34 <_svfiprintf_r+0x1c0>
 8009a58:	0800a7e0 	.word	0x0800a7e0
 8009a5c:	0800a7ea 	.word	0x0800a7ea
 8009a60:	080076dd 	.word	0x080076dd
 8009a64:	080097bd 	.word	0x080097bd
 8009a68:	0800a7e6 	.word	0x0800a7e6

08009a6c <__sflush_r>:
 8009a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	0716      	lsls	r6, r2, #28
 8009a76:	4605      	mov	r5, r0
 8009a78:	460c      	mov	r4, r1
 8009a7a:	d454      	bmi.n	8009b26 <__sflush_r+0xba>
 8009a7c:	684b      	ldr	r3, [r1, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dc02      	bgt.n	8009a88 <__sflush_r+0x1c>
 8009a82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dd48      	ble.n	8009b1a <__sflush_r+0xae>
 8009a88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	d045      	beq.n	8009b1a <__sflush_r+0xae>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a94:	682f      	ldr	r7, [r5, #0]
 8009a96:	6a21      	ldr	r1, [r4, #32]
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	d030      	beq.n	8009afe <__sflush_r+0x92>
 8009a9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	0759      	lsls	r1, r3, #29
 8009aa2:	d505      	bpl.n	8009ab0 <__sflush_r+0x44>
 8009aa4:	6863      	ldr	r3, [r4, #4]
 8009aa6:	1ad2      	subs	r2, r2, r3
 8009aa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009aaa:	b10b      	cbz	r3, 8009ab0 <__sflush_r+0x44>
 8009aac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ab4:	6a21      	ldr	r1, [r4, #32]
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b0      	blx	r6
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	d106      	bne.n	8009ace <__sflush_r+0x62>
 8009ac0:	6829      	ldr	r1, [r5, #0]
 8009ac2:	291d      	cmp	r1, #29
 8009ac4:	d82b      	bhi.n	8009b1e <__sflush_r+0xb2>
 8009ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b70 <__sflush_r+0x104>)
 8009ac8:	410a      	asrs	r2, r1
 8009aca:	07d6      	lsls	r6, r2, #31
 8009acc:	d427      	bmi.n	8009b1e <__sflush_r+0xb2>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	6062      	str	r2, [r4, #4]
 8009ad2:	04d9      	lsls	r1, r3, #19
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	d504      	bpl.n	8009ae4 <__sflush_r+0x78>
 8009ada:	1c42      	adds	r2, r0, #1
 8009adc:	d101      	bne.n	8009ae2 <__sflush_r+0x76>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b903      	cbnz	r3, 8009ae4 <__sflush_r+0x78>
 8009ae2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ae6:	602f      	str	r7, [r5, #0]
 8009ae8:	b1b9      	cbz	r1, 8009b1a <__sflush_r+0xae>
 8009aea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aee:	4299      	cmp	r1, r3
 8009af0:	d002      	beq.n	8009af8 <__sflush_r+0x8c>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7ff f9e0 	bl	8008eb8 <_free_r>
 8009af8:	2300      	movs	r3, #0
 8009afa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009afc:	e00d      	b.n	8009b1a <__sflush_r+0xae>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b0      	blx	r6
 8009b04:	4602      	mov	r2, r0
 8009b06:	1c50      	adds	r0, r2, #1
 8009b08:	d1c9      	bne.n	8009a9e <__sflush_r+0x32>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c6      	beq.n	8009a9e <__sflush_r+0x32>
 8009b10:	2b1d      	cmp	r3, #29
 8009b12:	d001      	beq.n	8009b18 <__sflush_r+0xac>
 8009b14:	2b16      	cmp	r3, #22
 8009b16:	d11e      	bne.n	8009b56 <__sflush_r+0xea>
 8009b18:	602f      	str	r7, [r5, #0]
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e022      	b.n	8009b64 <__sflush_r+0xf8>
 8009b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b22:	b21b      	sxth	r3, r3
 8009b24:	e01b      	b.n	8009b5e <__sflush_r+0xf2>
 8009b26:	690f      	ldr	r7, [r1, #16]
 8009b28:	2f00      	cmp	r7, #0
 8009b2a:	d0f6      	beq.n	8009b1a <__sflush_r+0xae>
 8009b2c:	0793      	lsls	r3, r2, #30
 8009b2e:	680e      	ldr	r6, [r1, #0]
 8009b30:	bf08      	it	eq
 8009b32:	694b      	ldreq	r3, [r1, #20]
 8009b34:	600f      	str	r7, [r1, #0]
 8009b36:	bf18      	it	ne
 8009b38:	2300      	movne	r3, #0
 8009b3a:	eba6 0807 	sub.w	r8, r6, r7
 8009b3e:	608b      	str	r3, [r1, #8]
 8009b40:	f1b8 0f00 	cmp.w	r8, #0
 8009b44:	dde9      	ble.n	8009b1a <__sflush_r+0xae>
 8009b46:	6a21      	ldr	r1, [r4, #32]
 8009b48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b4a:	4643      	mov	r3, r8
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b0      	blx	r6
 8009b52:	2800      	cmp	r0, #0
 8009b54:	dc08      	bgt.n	8009b68 <__sflush_r+0xfc>
 8009b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295
 8009b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b68:	4407      	add	r7, r0
 8009b6a:	eba8 0800 	sub.w	r8, r8, r0
 8009b6e:	e7e7      	b.n	8009b40 <__sflush_r+0xd4>
 8009b70:	dfbffffe 	.word	0xdfbffffe

08009b74 <_fflush_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	690b      	ldr	r3, [r1, #16]
 8009b78:	4605      	mov	r5, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	b913      	cbnz	r3, 8009b84 <_fflush_r+0x10>
 8009b7e:	2500      	movs	r5, #0
 8009b80:	4628      	mov	r0, r5
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	b118      	cbz	r0, 8009b8e <_fflush_r+0x1a>
 8009b86:	6a03      	ldr	r3, [r0, #32]
 8009b88:	b90b      	cbnz	r3, 8009b8e <_fflush_r+0x1a>
 8009b8a:	f7fe f9eb 	bl	8007f64 <__sinit>
 8009b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0f3      	beq.n	8009b7e <_fflush_r+0xa>
 8009b96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b98:	07d0      	lsls	r0, r2, #31
 8009b9a:	d404      	bmi.n	8009ba6 <_fflush_r+0x32>
 8009b9c:	0599      	lsls	r1, r3, #22
 8009b9e:	d402      	bmi.n	8009ba6 <_fflush_r+0x32>
 8009ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ba2:	f7fe fb2a 	bl	80081fa <__retarget_lock_acquire_recursive>
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	4621      	mov	r1, r4
 8009baa:	f7ff ff5f 	bl	8009a6c <__sflush_r>
 8009bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bb0:	07da      	lsls	r2, r3, #31
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	d4e4      	bmi.n	8009b80 <_fflush_r+0xc>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	059b      	lsls	r3, r3, #22
 8009bba:	d4e1      	bmi.n	8009b80 <_fflush_r+0xc>
 8009bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bbe:	f7fe fb1d 	bl	80081fc <__retarget_lock_release_recursive>
 8009bc2:	e7dd      	b.n	8009b80 <_fflush_r+0xc>

08009bc4 <memmove>:
 8009bc4:	4288      	cmp	r0, r1
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	eb01 0402 	add.w	r4, r1, r2
 8009bcc:	d902      	bls.n	8009bd4 <memmove+0x10>
 8009bce:	4284      	cmp	r4, r0
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	d807      	bhi.n	8009be4 <memmove+0x20>
 8009bd4:	1e43      	subs	r3, r0, #1
 8009bd6:	42a1      	cmp	r1, r4
 8009bd8:	d008      	beq.n	8009bec <memmove+0x28>
 8009bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be2:	e7f8      	b.n	8009bd6 <memmove+0x12>
 8009be4:	4402      	add	r2, r0
 8009be6:	4601      	mov	r1, r0
 8009be8:	428a      	cmp	r2, r1
 8009bea:	d100      	bne.n	8009bee <memmove+0x2a>
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf6:	e7f7      	b.n	8009be8 <memmove+0x24>

08009bf8 <_sbrk_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	@ (8009c14 <_sbrk_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f7f8 f87e 	bl	8001d04 <_sbrk>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_sbrk_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_sbrk_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	200007c0 	.word	0x200007c0

08009c18 <__assert_func>:
 8009c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1a:	4614      	mov	r4, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4b09      	ldr	r3, [pc, #36]	@ (8009c44 <__assert_func+0x2c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4605      	mov	r5, r0
 8009c24:	68d8      	ldr	r0, [r3, #12]
 8009c26:	b954      	cbnz	r4, 8009c3e <__assert_func+0x26>
 8009c28:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <__assert_func+0x30>)
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	462b      	mov	r3, r5
 8009c34:	4905      	ldr	r1, [pc, #20]	@ (8009c4c <__assert_func+0x34>)
 8009c36:	f000 f86f 	bl	8009d18 <fiprintf>
 8009c3a:	f000 f87f 	bl	8009d3c <abort>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <__assert_func+0x38>)
 8009c40:	e7f4      	b.n	8009c2c <__assert_func+0x14>
 8009c42:	bf00      	nop
 8009c44:	20000030 	.word	0x20000030
 8009c48:	0800a836 	.word	0x0800a836
 8009c4c:	0800a808 	.word	0x0800a808
 8009c50:	0800a7fb 	.word	0x0800a7fb

08009c54 <_calloc_r>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	fba1 5402 	umull	r5, r4, r1, r2
 8009c5a:	b93c      	cbnz	r4, 8009c6c <_calloc_r+0x18>
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7ff f99f 	bl	8008fa0 <_malloc_r>
 8009c62:	4606      	mov	r6, r0
 8009c64:	b928      	cbnz	r0, 8009c72 <_calloc_r+0x1e>
 8009c66:	2600      	movs	r6, #0
 8009c68:	4630      	mov	r0, r6
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	220c      	movs	r2, #12
 8009c6e:	6002      	str	r2, [r0, #0]
 8009c70:	e7f9      	b.n	8009c66 <_calloc_r+0x12>
 8009c72:	462a      	mov	r2, r5
 8009c74:	4621      	mov	r1, r4
 8009c76:	f7fe fa42 	bl	80080fe <memset>
 8009c7a:	e7f5      	b.n	8009c68 <_calloc_r+0x14>

08009c7c <__ascii_mbtowc>:
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	b901      	cbnz	r1, 8009c82 <__ascii_mbtowc+0x6>
 8009c80:	a901      	add	r1, sp, #4
 8009c82:	b142      	cbz	r2, 8009c96 <__ascii_mbtowc+0x1a>
 8009c84:	b14b      	cbz	r3, 8009c9a <__ascii_mbtowc+0x1e>
 8009c86:	7813      	ldrb	r3, [r2, #0]
 8009c88:	600b      	str	r3, [r1, #0]
 8009c8a:	7812      	ldrb	r2, [r2, #0]
 8009c8c:	1e10      	subs	r0, r2, #0
 8009c8e:	bf18      	it	ne
 8009c90:	2001      	movne	r0, #1
 8009c92:	b002      	add	sp, #8
 8009c94:	4770      	bx	lr
 8009c96:	4610      	mov	r0, r2
 8009c98:	e7fb      	b.n	8009c92 <__ascii_mbtowc+0x16>
 8009c9a:	f06f 0001 	mvn.w	r0, #1
 8009c9e:	e7f8      	b.n	8009c92 <__ascii_mbtowc+0x16>

08009ca0 <_realloc_r>:
 8009ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	460c      	mov	r4, r1
 8009caa:	b921      	cbnz	r1, 8009cb6 <_realloc_r+0x16>
 8009cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	f7ff b975 	b.w	8008fa0 <_malloc_r>
 8009cb6:	b92a      	cbnz	r2, 8009cc4 <_realloc_r+0x24>
 8009cb8:	f7ff f8fe 	bl	8008eb8 <_free_r>
 8009cbc:	2400      	movs	r4, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	f000 f841 	bl	8009d4a <_malloc_usable_size_r>
 8009cc8:	4285      	cmp	r5, r0
 8009cca:	4606      	mov	r6, r0
 8009ccc:	d802      	bhi.n	8009cd4 <_realloc_r+0x34>
 8009cce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cd2:	d8f4      	bhi.n	8009cbe <_realloc_r+0x1e>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	f7ff f962 	bl	8008fa0 <_malloc_r>
 8009cdc:	4607      	mov	r7, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0ec      	beq.n	8009cbc <_realloc_r+0x1c>
 8009ce2:	42b5      	cmp	r5, r6
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	bf28      	it	cs
 8009cea:	4632      	movcs	r2, r6
 8009cec:	f7fe fa87 	bl	80081fe <memcpy>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7ff f8e0 	bl	8008eb8 <_free_r>
 8009cf8:	463c      	mov	r4, r7
 8009cfa:	e7e0      	b.n	8009cbe <_realloc_r+0x1e>

08009cfc <__ascii_wctomb>:
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	b141      	cbz	r1, 8009d14 <__ascii_wctomb+0x18>
 8009d02:	2aff      	cmp	r2, #255	@ 0xff
 8009d04:	d904      	bls.n	8009d10 <__ascii_wctomb+0x14>
 8009d06:	228a      	movs	r2, #138	@ 0x8a
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	4770      	bx	lr
 8009d10:	700a      	strb	r2, [r1, #0]
 8009d12:	2001      	movs	r0, #1
 8009d14:	4770      	bx	lr
	...

08009d18 <fiprintf>:
 8009d18:	b40e      	push	{r1, r2, r3}
 8009d1a:	b503      	push	{r0, r1, lr}
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	ab03      	add	r3, sp, #12
 8009d20:	4805      	ldr	r0, [pc, #20]	@ (8009d38 <fiprintf+0x20>)
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	6800      	ldr	r0, [r0, #0]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	f000 f83f 	bl	8009dac <_vfiprintf_r>
 8009d2e:	b002      	add	sp, #8
 8009d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d34:	b003      	add	sp, #12
 8009d36:	4770      	bx	lr
 8009d38:	20000030 	.word	0x20000030

08009d3c <abort>:
 8009d3c:	b508      	push	{r3, lr}
 8009d3e:	2006      	movs	r0, #6
 8009d40:	f000 fa08 	bl	800a154 <raise>
 8009d44:	2001      	movs	r0, #1
 8009d46:	f7f7 ff65 	bl	8001c14 <_exit>

08009d4a <_malloc_usable_size_r>:
 8009d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4e:	1f18      	subs	r0, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bfbc      	itt	lt
 8009d54:	580b      	ldrlt	r3, [r1, r0]
 8009d56:	18c0      	addlt	r0, r0, r3
 8009d58:	4770      	bx	lr

08009d5a <__sfputc_r>:
 8009d5a:	6893      	ldr	r3, [r2, #8]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	b410      	push	{r4}
 8009d62:	6093      	str	r3, [r2, #8]
 8009d64:	da08      	bge.n	8009d78 <__sfputc_r+0x1e>
 8009d66:	6994      	ldr	r4, [r2, #24]
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	db01      	blt.n	8009d70 <__sfputc_r+0x16>
 8009d6c:	290a      	cmp	r1, #10
 8009d6e:	d103      	bne.n	8009d78 <__sfputc_r+0x1e>
 8009d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d74:	f000 b932 	b.w	8009fdc <__swbuf_r>
 8009d78:	6813      	ldr	r3, [r2, #0]
 8009d7a:	1c58      	adds	r0, r3, #1
 8009d7c:	6010      	str	r0, [r2, #0]
 8009d7e:	7019      	strb	r1, [r3, #0]
 8009d80:	4608      	mov	r0, r1
 8009d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <__sfputs_r>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	4614      	mov	r4, r2
 8009d90:	18d5      	adds	r5, r2, r3
 8009d92:	42ac      	cmp	r4, r5
 8009d94:	d101      	bne.n	8009d9a <__sfputs_r+0x12>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e007      	b.n	8009daa <__sfputs_r+0x22>
 8009d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9e:	463a      	mov	r2, r7
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff ffda 	bl	8009d5a <__sfputc_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d1f3      	bne.n	8009d92 <__sfputs_r+0xa>
 8009daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dac <_vfiprintf_r>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	460d      	mov	r5, r1
 8009db2:	b09d      	sub	sp, #116	@ 0x74
 8009db4:	4614      	mov	r4, r2
 8009db6:	4698      	mov	r8, r3
 8009db8:	4606      	mov	r6, r0
 8009dba:	b118      	cbz	r0, 8009dc4 <_vfiprintf_r+0x18>
 8009dbc:	6a03      	ldr	r3, [r0, #32]
 8009dbe:	b90b      	cbnz	r3, 8009dc4 <_vfiprintf_r+0x18>
 8009dc0:	f7fe f8d0 	bl	8007f64 <__sinit>
 8009dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dc6:	07d9      	lsls	r1, r3, #31
 8009dc8:	d405      	bmi.n	8009dd6 <_vfiprintf_r+0x2a>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	059a      	lsls	r2, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_vfiprintf_r+0x2a>
 8009dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dd2:	f7fe fa12 	bl	80081fa <__retarget_lock_acquire_recursive>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	071b      	lsls	r3, r3, #28
 8009dda:	d501      	bpl.n	8009de0 <_vfiprintf_r+0x34>
 8009ddc:	692b      	ldr	r3, [r5, #16]
 8009dde:	b99b      	cbnz	r3, 8009e08 <_vfiprintf_r+0x5c>
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f000 f938 	bl	800a058 <__swsetup_r>
 8009de8:	b170      	cbz	r0, 8009e08 <_vfiprintf_r+0x5c>
 8009dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dec:	07dc      	lsls	r4, r3, #31
 8009dee:	d504      	bpl.n	8009dfa <_vfiprintf_r+0x4e>
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	b01d      	add	sp, #116	@ 0x74
 8009df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	0598      	lsls	r0, r3, #22
 8009dfe:	d4f7      	bmi.n	8009df0 <_vfiprintf_r+0x44>
 8009e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e02:	f7fe f9fb 	bl	80081fc <__retarget_lock_release_recursive>
 8009e06:	e7f3      	b.n	8009df0 <_vfiprintf_r+0x44>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0c:	2320      	movs	r3, #32
 8009e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e16:	2330      	movs	r3, #48	@ 0x30
 8009e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fc8 <_vfiprintf_r+0x21c>
 8009e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e20:	f04f 0901 	mov.w	r9, #1
 8009e24:	4623      	mov	r3, r4
 8009e26:	469a      	mov	sl, r3
 8009e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2c:	b10a      	cbz	r2, 8009e32 <_vfiprintf_r+0x86>
 8009e2e:	2a25      	cmp	r2, #37	@ 0x25
 8009e30:	d1f9      	bne.n	8009e26 <_vfiprintf_r+0x7a>
 8009e32:	ebba 0b04 	subs.w	fp, sl, r4
 8009e36:	d00b      	beq.n	8009e50 <_vfiprintf_r+0xa4>
 8009e38:	465b      	mov	r3, fp
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7ff ffa2 	bl	8009d88 <__sfputs_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	f000 80a7 	beq.w	8009f98 <_vfiprintf_r+0x1ec>
 8009e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e4c:	445a      	add	r2, fp
 8009e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e50:	f89a 3000 	ldrb.w	r3, [sl]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 809f 	beq.w	8009f98 <_vfiprintf_r+0x1ec>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e64:	f10a 0a01 	add.w	sl, sl, #1
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e72:	4654      	mov	r4, sl
 8009e74:	2205      	movs	r2, #5
 8009e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7a:	4853      	ldr	r0, [pc, #332]	@ (8009fc8 <_vfiprintf_r+0x21c>)
 8009e7c:	f7f6 f9a8 	bl	80001d0 <memchr>
 8009e80:	9a04      	ldr	r2, [sp, #16]
 8009e82:	b9d8      	cbnz	r0, 8009ebc <_vfiprintf_r+0x110>
 8009e84:	06d1      	lsls	r1, r2, #27
 8009e86:	bf44      	itt	mi
 8009e88:	2320      	movmi	r3, #32
 8009e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e8e:	0713      	lsls	r3, r2, #28
 8009e90:	bf44      	itt	mi
 8009e92:	232b      	movmi	r3, #43	@ 0x2b
 8009e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e98:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e9e:	d015      	beq.n	8009ecc <_vfiprintf_r+0x120>
 8009ea0:	9a07      	ldr	r2, [sp, #28]
 8009ea2:	4654      	mov	r4, sl
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f04f 0c0a 	mov.w	ip, #10
 8009eaa:	4621      	mov	r1, r4
 8009eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb0:	3b30      	subs	r3, #48	@ 0x30
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d94b      	bls.n	8009f4e <_vfiprintf_r+0x1a2>
 8009eb6:	b1b0      	cbz	r0, 8009ee6 <_vfiprintf_r+0x13a>
 8009eb8:	9207      	str	r2, [sp, #28]
 8009eba:	e014      	b.n	8009ee6 <_vfiprintf_r+0x13a>
 8009ebc:	eba0 0308 	sub.w	r3, r0, r8
 8009ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	46a2      	mov	sl, r4
 8009eca:	e7d2      	b.n	8009e72 <_vfiprintf_r+0xc6>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1d19      	adds	r1, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	9103      	str	r1, [sp, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfbb      	ittet	lt
 8009ed8:	425b      	neglt	r3, r3
 8009eda:	f042 0202 	orrlt.w	r2, r2, #2
 8009ede:	9307      	strge	r3, [sp, #28]
 8009ee0:	9307      	strlt	r3, [sp, #28]
 8009ee2:	bfb8      	it	lt
 8009ee4:	9204      	strlt	r2, [sp, #16]
 8009ee6:	7823      	ldrb	r3, [r4, #0]
 8009ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eea:	d10a      	bne.n	8009f02 <_vfiprintf_r+0x156>
 8009eec:	7863      	ldrb	r3, [r4, #1]
 8009eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef0:	d132      	bne.n	8009f58 <_vfiprintf_r+0x1ac>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	9203      	str	r2, [sp, #12]
 8009efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009efe:	3402      	adds	r4, #2
 8009f00:	9305      	str	r3, [sp, #20]
 8009f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fd8 <_vfiprintf_r+0x22c>
 8009f06:	7821      	ldrb	r1, [r4, #0]
 8009f08:	2203      	movs	r2, #3
 8009f0a:	4650      	mov	r0, sl
 8009f0c:	f7f6 f960 	bl	80001d0 <memchr>
 8009f10:	b138      	cbz	r0, 8009f22 <_vfiprintf_r+0x176>
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	eba0 000a 	sub.w	r0, r0, sl
 8009f18:	2240      	movs	r2, #64	@ 0x40
 8009f1a:	4082      	lsls	r2, r0
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	3401      	adds	r4, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f26:	4829      	ldr	r0, [pc, #164]	@ (8009fcc <_vfiprintf_r+0x220>)
 8009f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f2c:	2206      	movs	r2, #6
 8009f2e:	f7f6 f94f 	bl	80001d0 <memchr>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d03f      	beq.n	8009fb6 <_vfiprintf_r+0x20a>
 8009f36:	4b26      	ldr	r3, [pc, #152]	@ (8009fd0 <_vfiprintf_r+0x224>)
 8009f38:	bb1b      	cbnz	r3, 8009f82 <_vfiprintf_r+0x1d6>
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	f023 0307 	bic.w	r3, r3, #7
 8009f42:	3308      	adds	r3, #8
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f48:	443b      	add	r3, r7
 8009f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4c:	e76a      	b.n	8009e24 <_vfiprintf_r+0x78>
 8009f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f52:	460c      	mov	r4, r1
 8009f54:	2001      	movs	r0, #1
 8009f56:	e7a8      	b.n	8009eaa <_vfiprintf_r+0xfe>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	3401      	adds	r4, #1
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f04f 0c0a 	mov.w	ip, #10
 8009f64:	4620      	mov	r0, r4
 8009f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6a:	3a30      	subs	r2, #48	@ 0x30
 8009f6c:	2a09      	cmp	r2, #9
 8009f6e:	d903      	bls.n	8009f78 <_vfiprintf_r+0x1cc>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0c6      	beq.n	8009f02 <_vfiprintf_r+0x156>
 8009f74:	9105      	str	r1, [sp, #20]
 8009f76:	e7c4      	b.n	8009f02 <_vfiprintf_r+0x156>
 8009f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e7f0      	b.n	8009f64 <_vfiprintf_r+0x1b8>
 8009f82:	ab03      	add	r3, sp, #12
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	462a      	mov	r2, r5
 8009f88:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <_vfiprintf_r+0x228>)
 8009f8a:	a904      	add	r1, sp, #16
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7fd fba5 	bl	80076dc <_printf_float>
 8009f92:	4607      	mov	r7, r0
 8009f94:	1c78      	adds	r0, r7, #1
 8009f96:	d1d6      	bne.n	8009f46 <_vfiprintf_r+0x19a>
 8009f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f9a:	07d9      	lsls	r1, r3, #31
 8009f9c:	d405      	bmi.n	8009faa <_vfiprintf_r+0x1fe>
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	059a      	lsls	r2, r3, #22
 8009fa2:	d402      	bmi.n	8009faa <_vfiprintf_r+0x1fe>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fa6:	f7fe f929 	bl	80081fc <__retarget_lock_release_recursive>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	065b      	lsls	r3, r3, #25
 8009fae:	f53f af1f 	bmi.w	8009df0 <_vfiprintf_r+0x44>
 8009fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fb4:	e71e      	b.n	8009df4 <_vfiprintf_r+0x48>
 8009fb6:	ab03      	add	r3, sp, #12
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	462a      	mov	r2, r5
 8009fbc:	4b05      	ldr	r3, [pc, #20]	@ (8009fd4 <_vfiprintf_r+0x228>)
 8009fbe:	a904      	add	r1, sp, #16
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7fd fe23 	bl	8007c0c <_printf_i>
 8009fc6:	e7e4      	b.n	8009f92 <_vfiprintf_r+0x1e6>
 8009fc8:	0800a7e0 	.word	0x0800a7e0
 8009fcc:	0800a7ea 	.word	0x0800a7ea
 8009fd0:	080076dd 	.word	0x080076dd
 8009fd4:	08009d89 	.word	0x08009d89
 8009fd8:	0800a7e6 	.word	0x0800a7e6

08009fdc <__swbuf_r>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	460e      	mov	r6, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	b118      	cbz	r0, 8009fee <__swbuf_r+0x12>
 8009fe6:	6a03      	ldr	r3, [r0, #32]
 8009fe8:	b90b      	cbnz	r3, 8009fee <__swbuf_r+0x12>
 8009fea:	f7fd ffbb 	bl	8007f64 <__sinit>
 8009fee:	69a3      	ldr	r3, [r4, #24]
 8009ff0:	60a3      	str	r3, [r4, #8]
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	071a      	lsls	r2, r3, #28
 8009ff6:	d501      	bpl.n	8009ffc <__swbuf_r+0x20>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	b943      	cbnz	r3, 800a00e <__swbuf_r+0x32>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f82a 	bl	800a058 <__swsetup_r>
 800a004:	b118      	cbz	r0, 800a00e <__swbuf_r+0x32>
 800a006:	f04f 37ff 	mov.w	r7, #4294967295
 800a00a:	4638      	mov	r0, r7
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	1a98      	subs	r0, r3, r2
 800a014:	6963      	ldr	r3, [r4, #20]
 800a016:	b2f6      	uxtb	r6, r6
 800a018:	4283      	cmp	r3, r0
 800a01a:	4637      	mov	r7, r6
 800a01c:	dc05      	bgt.n	800a02a <__swbuf_r+0x4e>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f7ff fda7 	bl	8009b74 <_fflush_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	d1ed      	bne.n	800a006 <__swbuf_r+0x2a>
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	6022      	str	r2, [r4, #0]
 800a036:	701e      	strb	r6, [r3, #0]
 800a038:	6962      	ldr	r2, [r4, #20]
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d004      	beq.n	800a04a <__swbuf_r+0x6e>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	07db      	lsls	r3, r3, #31
 800a044:	d5e1      	bpl.n	800a00a <__swbuf_r+0x2e>
 800a046:	2e0a      	cmp	r6, #10
 800a048:	d1df      	bne.n	800a00a <__swbuf_r+0x2e>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff fd91 	bl	8009b74 <_fflush_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d0d9      	beq.n	800a00a <__swbuf_r+0x2e>
 800a056:	e7d6      	b.n	800a006 <__swbuf_r+0x2a>

0800a058 <__swsetup_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4b29      	ldr	r3, [pc, #164]	@ (800a100 <__swsetup_r+0xa8>)
 800a05c:	4605      	mov	r5, r0
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	460c      	mov	r4, r1
 800a062:	b118      	cbz	r0, 800a06c <__swsetup_r+0x14>
 800a064:	6a03      	ldr	r3, [r0, #32]
 800a066:	b90b      	cbnz	r3, 800a06c <__swsetup_r+0x14>
 800a068:	f7fd ff7c 	bl	8007f64 <__sinit>
 800a06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a070:	0719      	lsls	r1, r3, #28
 800a072:	d422      	bmi.n	800a0ba <__swsetup_r+0x62>
 800a074:	06da      	lsls	r2, r3, #27
 800a076:	d407      	bmi.n	800a088 <__swsetup_r+0x30>
 800a078:	2209      	movs	r2, #9
 800a07a:	602a      	str	r2, [r5, #0]
 800a07c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	f04f 30ff 	mov.w	r0, #4294967295
 800a086:	e033      	b.n	800a0f0 <__swsetup_r+0x98>
 800a088:	0758      	lsls	r0, r3, #29
 800a08a:	d512      	bpl.n	800a0b2 <__swsetup_r+0x5a>
 800a08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a08e:	b141      	cbz	r1, 800a0a2 <__swsetup_r+0x4a>
 800a090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a094:	4299      	cmp	r1, r3
 800a096:	d002      	beq.n	800a09e <__swsetup_r+0x46>
 800a098:	4628      	mov	r0, r5
 800a09a:	f7fe ff0d 	bl	8008eb8 <_free_r>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f043 0308 	orr.w	r3, r3, #8
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	b94b      	cbnz	r3, 800a0d2 <__swsetup_r+0x7a>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c8:	d003      	beq.n	800a0d2 <__swsetup_r+0x7a>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 f883 	bl	800a1d8 <__smakebuf_r>
 800a0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d6:	f013 0201 	ands.w	r2, r3, #1
 800a0da:	d00a      	beq.n	800a0f2 <__swsetup_r+0x9a>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	60a2      	str	r2, [r4, #8]
 800a0e0:	6962      	ldr	r2, [r4, #20]
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	61a2      	str	r2, [r4, #24]
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	b942      	cbnz	r2, 800a0fc <__swsetup_r+0xa4>
 800a0ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0ee:	d1c5      	bne.n	800a07c <__swsetup_r+0x24>
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	0799      	lsls	r1, r3, #30
 800a0f4:	bf58      	it	pl
 800a0f6:	6962      	ldrpl	r2, [r4, #20]
 800a0f8:	60a2      	str	r2, [r4, #8]
 800a0fa:	e7f4      	b.n	800a0e6 <__swsetup_r+0x8e>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e7f7      	b.n	800a0f0 <__swsetup_r+0x98>
 800a100:	20000030 	.word	0x20000030

0800a104 <_raise_r>:
 800a104:	291f      	cmp	r1, #31
 800a106:	b538      	push	{r3, r4, r5, lr}
 800a108:	4605      	mov	r5, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	d904      	bls.n	800a118 <_raise_r+0x14>
 800a10e:	2316      	movs	r3, #22
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a11a:	b112      	cbz	r2, 800a122 <_raise_r+0x1e>
 800a11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a120:	b94b      	cbnz	r3, 800a136 <_raise_r+0x32>
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f830 	bl	800a188 <_getpid_r>
 800a128:	4622      	mov	r2, r4
 800a12a:	4601      	mov	r1, r0
 800a12c:	4628      	mov	r0, r5
 800a12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a132:	f000 b817 	b.w	800a164 <_kill_r>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d00a      	beq.n	800a150 <_raise_r+0x4c>
 800a13a:	1c59      	adds	r1, r3, #1
 800a13c:	d103      	bne.n	800a146 <_raise_r+0x42>
 800a13e:	2316      	movs	r3, #22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	e7e7      	b.n	800a116 <_raise_r+0x12>
 800a146:	2100      	movs	r1, #0
 800a148:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a14c:	4620      	mov	r0, r4
 800a14e:	4798      	blx	r3
 800a150:	2000      	movs	r0, #0
 800a152:	e7e0      	b.n	800a116 <_raise_r+0x12>

0800a154 <raise>:
 800a154:	4b02      	ldr	r3, [pc, #8]	@ (800a160 <raise+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f7ff bfd3 	b.w	800a104 <_raise_r>
 800a15e:	bf00      	nop
 800a160:	20000030 	.word	0x20000030

0800a164 <_kill_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	@ (800a184 <_kill_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f7 fd3f 	bl	8001bf4 <_kill>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_kill_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_kill_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	200007c0 	.word	0x200007c0

0800a188 <_getpid_r>:
 800a188:	f7f7 bd2c 	b.w	8001be4 <_getpid>

0800a18c <__swhatbuf_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460c      	mov	r4, r1
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	2900      	cmp	r1, #0
 800a196:	b096      	sub	sp, #88	@ 0x58
 800a198:	4615      	mov	r5, r2
 800a19a:	461e      	mov	r6, r3
 800a19c:	da0d      	bge.n	800a1ba <__swhatbuf_r+0x2e>
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1a4:	f04f 0100 	mov.w	r1, #0
 800a1a8:	bf14      	ite	ne
 800a1aa:	2340      	movne	r3, #64	@ 0x40
 800a1ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6031      	str	r1, [r6, #0]
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	b016      	add	sp, #88	@ 0x58
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	466a      	mov	r2, sp
 800a1bc:	f000 f848 	bl	800a250 <_fstat_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	dbec      	blt.n	800a19e <__swhatbuf_r+0x12>
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1ce:	4259      	negs	r1, r3
 800a1d0:	4159      	adcs	r1, r3
 800a1d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d6:	e7eb      	b.n	800a1b0 <__swhatbuf_r+0x24>

0800a1d8 <__smakebuf_r>:
 800a1d8:	898b      	ldrh	r3, [r1, #12]
 800a1da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1dc:	079d      	lsls	r5, r3, #30
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	d507      	bpl.n	800a1f4 <__smakebuf_r+0x1c>
 800a1e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	6163      	str	r3, [r4, #20]
 800a1f0:	b003      	add	sp, #12
 800a1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f4:	ab01      	add	r3, sp, #4
 800a1f6:	466a      	mov	r2, sp
 800a1f8:	f7ff ffc8 	bl	800a18c <__swhatbuf_r>
 800a1fc:	9f00      	ldr	r7, [sp, #0]
 800a1fe:	4605      	mov	r5, r0
 800a200:	4639      	mov	r1, r7
 800a202:	4630      	mov	r0, r6
 800a204:	f7fe fecc 	bl	8008fa0 <_malloc_r>
 800a208:	b948      	cbnz	r0, 800a21e <__smakebuf_r+0x46>
 800a20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a20e:	059a      	lsls	r2, r3, #22
 800a210:	d4ee      	bmi.n	800a1f0 <__smakebuf_r+0x18>
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0302 	orr.w	r3, r3, #2
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	e7e2      	b.n	800a1e4 <__smakebuf_r+0xc>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	6020      	str	r0, [r4, #0]
 800a222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a22e:	b15b      	cbz	r3, 800a248 <__smakebuf_r+0x70>
 800a230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f81d 	bl	800a274 <_isatty_r>
 800a23a:	b128      	cbz	r0, 800a248 <__smakebuf_r+0x70>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	431d      	orrs	r5, r3
 800a24c:	81a5      	strh	r5, [r4, #12]
 800a24e:	e7cf      	b.n	800a1f0 <__smakebuf_r+0x18>

0800a250 <_fstat_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	@ (800a270 <_fstat_r+0x20>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	f7f7 fd29 	bl	8001cb4 <_fstat>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d102      	bne.n	800a26c <_fstat_r+0x1c>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b103      	cbz	r3, 800a26c <_fstat_r+0x1c>
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	bf00      	nop
 800a270:	200007c0 	.word	0x200007c0

0800a274 <_isatty_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d06      	ldr	r5, [pc, #24]	@ (800a290 <_isatty_r+0x1c>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	f7f7 fd28 	bl	8001cd4 <_isatty>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_isatty_r+0x1a>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_isatty_r+0x1a>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	200007c0 	.word	0x200007c0

0800a294 <expf>:
 800a294:	b508      	push	{r3, lr}
 800a296:	ed2d 8b02 	vpush	{d8}
 800a29a:	eef0 8a40 	vmov.f32	s17, s0
 800a29e:	f000 f839 	bl	800a314 <__ieee754_expf>
 800a2a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a2a6:	eeb0 0a68 	vmov.f32	s0, s17
 800a2aa:	f000 f829 	bl	800a300 <finitef>
 800a2ae:	b160      	cbz	r0, 800a2ca <expf+0x36>
 800a2b0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800a2f0 <expf+0x5c>
 800a2b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2bc:	dd0a      	ble.n	800a2d4 <expf+0x40>
 800a2be:	f7fd ff71 	bl	80081a4 <__errno>
 800a2c2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800a2f4 <expf+0x60>
 800a2c6:	2322      	movs	r3, #34	@ 0x22
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ce:	ecbd 8b02 	vpop	{d8}
 800a2d2:	bd08      	pop	{r3, pc}
 800a2d4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a2f8 <expf+0x64>
 800a2d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e0:	d5f3      	bpl.n	800a2ca <expf+0x36>
 800a2e2:	f7fd ff5f 	bl	80081a4 <__errno>
 800a2e6:	2322      	movs	r3, #34	@ 0x22
 800a2e8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800a2fc <expf+0x68>
 800a2ec:	6003      	str	r3, [r0, #0]
 800a2ee:	e7ec      	b.n	800a2ca <expf+0x36>
 800a2f0:	42b17217 	.word	0x42b17217
 800a2f4:	7f800000 	.word	0x7f800000
 800a2f8:	c2cff1b5 	.word	0xc2cff1b5
 800a2fc:	00000000 	.word	0x00000000

0800a300 <finitef>:
 800a300:	ee10 3a10 	vmov	r3, s0
 800a304:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a308:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a30c:	bfac      	ite	ge
 800a30e:	2000      	movge	r0, #0
 800a310:	2001      	movlt	r0, #1
 800a312:	4770      	bx	lr

0800a314 <__ieee754_expf>:
 800a314:	ee10 2a10 	vmov	r2, s0
 800a318:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800a31c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a320:	d902      	bls.n	800a328 <__ieee754_expf+0x14>
 800a322:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a326:	4770      	bx	lr
 800a328:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a32c:	d106      	bne.n	800a33c <__ieee754_expf+0x28>
 800a32e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800a468 <__ieee754_expf+0x154>
 800a332:	2900      	cmp	r1, #0
 800a334:	bf18      	it	ne
 800a336:	eeb0 0a67 	vmovne.f32	s0, s15
 800a33a:	4770      	bx	lr
 800a33c:	484b      	ldr	r0, [pc, #300]	@ (800a46c <__ieee754_expf+0x158>)
 800a33e:	4282      	cmp	r2, r0
 800a340:	dd02      	ble.n	800a348 <__ieee754_expf+0x34>
 800a342:	2000      	movs	r0, #0
 800a344:	f000 b8d4 	b.w	800a4f0 <__math_oflowf>
 800a348:	2a00      	cmp	r2, #0
 800a34a:	da05      	bge.n	800a358 <__ieee754_expf+0x44>
 800a34c:	4a48      	ldr	r2, [pc, #288]	@ (800a470 <__ieee754_expf+0x15c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d902      	bls.n	800a358 <__ieee754_expf+0x44>
 800a352:	2000      	movs	r0, #0
 800a354:	f000 b8c6 	b.w	800a4e4 <__math_uflowf>
 800a358:	4a46      	ldr	r2, [pc, #280]	@ (800a474 <__ieee754_expf+0x160>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a360:	d952      	bls.n	800a408 <__ieee754_expf+0xf4>
 800a362:	4a45      	ldr	r2, [pc, #276]	@ (800a478 <__ieee754_expf+0x164>)
 800a364:	4293      	cmp	r3, r2
 800a366:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a36a:	d834      	bhi.n	800a3d6 <__ieee754_expf+0xc2>
 800a36c:	4b43      	ldr	r3, [pc, #268]	@ (800a47c <__ieee754_expf+0x168>)
 800a36e:	4413      	add	r3, r2
 800a370:	ed93 7a00 	vldr	s14, [r3]
 800a374:	4b42      	ldr	r3, [pc, #264]	@ (800a480 <__ieee754_expf+0x16c>)
 800a376:	4413      	add	r3, r2
 800a378:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a37c:	f1c1 0201 	rsb	r2, r1, #1
 800a380:	edd3 7a00 	vldr	s15, [r3]
 800a384:	1a52      	subs	r2, r2, r1
 800a386:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a38a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a38e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800a484 <__ieee754_expf+0x170>
 800a392:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a488 <__ieee754_expf+0x174>
 800a396:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a39a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800a48c <__ieee754_expf+0x178>
 800a39e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a3a2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a490 <__ieee754_expf+0x17c>
 800a3a6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a3aa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800a494 <__ieee754_expf+0x180>
 800a3ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a3b2:	eef0 6a40 	vmov.f32	s13, s0
 800a3b6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a3ba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800a3be:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a3c2:	bb92      	cbnz	r2, 800a42a <__ieee754_expf+0x116>
 800a3c4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a3c8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a3cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a3d0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a3d4:	4770      	bx	lr
 800a3d6:	4b30      	ldr	r3, [pc, #192]	@ (800a498 <__ieee754_expf+0x184>)
 800a3d8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800a49c <__ieee754_expf+0x188>
 800a3dc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800a4a0 <__ieee754_expf+0x18c>
 800a3e0:	4413      	add	r3, r2
 800a3e2:	edd3 7a00 	vldr	s15, [r3]
 800a3e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a3ea:	eeb0 7a40 	vmov.f32	s14, s0
 800a3ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3f2:	ee17 2a90 	vmov	r2, s15
 800a3f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a3fe:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a4a4 <__ieee754_expf+0x190>
 800a402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a406:	e7be      	b.n	800a386 <__ieee754_expf+0x72>
 800a408:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800a40c:	d20b      	bcs.n	800a426 <__ieee754_expf+0x112>
 800a40e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a4a8 <__ieee754_expf+0x194>
 800a412:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a416:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41e:	dd02      	ble.n	800a426 <__ieee754_expf+0x112>
 800a420:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a424:	4770      	bx	lr
 800a426:	2200      	movs	r2, #0
 800a428:	e7af      	b.n	800a38a <__ieee754_expf+0x76>
 800a42a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a42e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800a432:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a436:	bfb8      	it	lt
 800a438:	3264      	addlt	r2, #100	@ 0x64
 800a43a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a442:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a446:	ee17 3a90 	vmov	r3, s15
 800a44a:	bfab      	itete	ge
 800a44c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a450:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a454:	ee00 3a10 	vmovge	s0, r3
 800a458:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800a4ac <__ieee754_expf+0x198>
 800a45c:	bfbc      	itt	lt
 800a45e:	ee00 3a10 	vmovlt	s0, r3
 800a462:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a466:	4770      	bx	lr
 800a468:	00000000 	.word	0x00000000
 800a46c:	42b17217 	.word	0x42b17217
 800a470:	42cff1b5 	.word	0x42cff1b5
 800a474:	3eb17218 	.word	0x3eb17218
 800a478:	3f851591 	.word	0x3f851591
 800a47c:	0800a940 	.word	0x0800a940
 800a480:	0800a938 	.word	0x0800a938
 800a484:	3331bb4c 	.word	0x3331bb4c
 800a488:	b5ddea0e 	.word	0xb5ddea0e
 800a48c:	388ab355 	.word	0x388ab355
 800a490:	bb360b61 	.word	0xbb360b61
 800a494:	3e2aaaab 	.word	0x3e2aaaab
 800a498:	0800a948 	.word	0x0800a948
 800a49c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a4a0:	3f317180 	.word	0x3f317180
 800a4a4:	3717f7d1 	.word	0x3717f7d1
 800a4a8:	7149f2ca 	.word	0x7149f2ca
 800a4ac:	0d800000 	.word	0x0d800000

0800a4b0 <with_errnof>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	ed2d 8b02 	vpush	{d8}
 800a4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	f7fd fe72 	bl	80081a4 <__errno>
 800a4c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a4c4:	ecbd 8b02 	vpop	{d8}
 800a4c8:	6004      	str	r4, [r0, #0]
 800a4ca:	bd10      	pop	{r4, pc}

0800a4cc <xflowf>:
 800a4cc:	b130      	cbz	r0, 800a4dc <xflowf+0x10>
 800a4ce:	eef1 7a40 	vneg.f32	s15, s0
 800a4d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a4d6:	2022      	movs	r0, #34	@ 0x22
 800a4d8:	f7ff bfea 	b.w	800a4b0 <with_errnof>
 800a4dc:	eef0 7a40 	vmov.f32	s15, s0
 800a4e0:	e7f7      	b.n	800a4d2 <xflowf+0x6>
	...

0800a4e4 <__math_uflowf>:
 800a4e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4ec <__math_uflowf+0x8>
 800a4e8:	f7ff bff0 	b.w	800a4cc <xflowf>
 800a4ec:	10000000 	.word	0x10000000

0800a4f0 <__math_oflowf>:
 800a4f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4f8 <__math_oflowf+0x8>
 800a4f4:	f7ff bfea 	b.w	800a4cc <xflowf>
 800a4f8:	70000000 	.word	0x70000000

0800a4fc <_init>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr

0800a508 <_fini>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr
